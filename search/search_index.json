{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GEMINI Framework","text":"<p>This is the repository for GEMINI Framework back-end.</p> <p>Many staple crops that are important for food, nutritional, and economic security in low- and middle-income countries have not experienced the same large gains in yield and quality over last decades as crops such as maize and soybean. Further, these crops are faced with increasing risk and uncertain growing conditions due to climate change. This project aims to develop a state-of-the-art breeding toolkit, building on the latest techniques in AI-enabled sensing, 3-D crop modeling, and molecular breeding, to create an inflection point in the productivity and quality curves of crops that are central in LMICs.</p> <p>More details about GEMINI Here</p>"},{"location":"#system-requirements","title":"System Requirements","text":"<ul> <li>Linux (Native, on Windows via WSL or on Mac via Parallels)</li> <li>Docker Engine</li> <li>Minimum 16 GB of RAM</li> <li>Minimum 256 GB Storage</li> <li>Python &gt;= 3.11</li> <li>Poetry</li> </ul>"},{"location":"#further-reading","title":"Further Reading","text":"<ul> <li>Getting Started</li> <li>GEMINI Pipeline</li> <li>Python API</li> <li>CLI</li> <li>Database</li> <li>REST API</li> </ul>"},{"location":"cli/","title":"Command Line Interface (CLI)","text":"<p>The GEMINI Command Line Interface (CLI) provides a powerful way to manage and interact with the GEMINI pipeline directly from your terminal. This document outlines the available commands and their usage.</p>"},{"location":"cli/#main-commands","title":"Main Commands","text":"<p>These commands are used for general management of the GEMINI pipeline.</p>"},{"location":"cli/#gemini-build","title":"<code>gemini build</code>","text":"<p>Builds the GEMINI pipeline. This command compiles and prepares all necessary components for deployment.</p> <pre><code>gemini build\n</code></pre>"},{"location":"cli/#gemini-start","title":"<code>gemini start</code>","text":"<p>Starts the GEMINI pipeline. This will bring up all the services required for GEMINI to operate.</p> <pre><code>gemini start\n</code></pre>"},{"location":"cli/#gemini-stop","title":"<code>gemini stop</code>","text":"<p>Stops the GEMINI pipeline. This will shut down all running GEMINI services.</p> <pre><code>gemini stop\n</code></pre>"},{"location":"cli/#gemini-clean","title":"<code>gemini clean</code>","text":"<p>Cleans the GEMINI pipeline. This command removes temporary files and build artifacts.</p> <pre><code>gemini clean\n</code></pre>"},{"location":"cli/#gemini-reset","title":"<code>gemini reset</code>","text":"<p>Resets the GEMINI pipeline. This command saves current settings and then rebuilds the pipeline, effectively bringing it to a clean, re-initialized state.</p> <pre><code>gemini reset\n</code></pre>"},{"location":"cli/#gemini-setup","title":"<code>gemini setup</code>","text":"<p>Sets up the GEMINI pipeline. This command saves current settings and rebuilds the pipeline.</p> <pre><code>gemini setup [--default]\n</code></pre> <p>Options:</p> <ul> <li><code>--default</code>: Use default settings for the setup.</li> </ul>"},{"location":"cli/#gemini-update","title":"<code>gemini update</code>","text":"<p>Updates the GEMINI pipeline. This command pulls the latest changes, saves current settings, and then rebuilds the pipeline.</p> <pre><code>gemini update\n</code></pre>"},{"location":"cli/#settings-commands","title":"Settings Commands","text":"<p>These commands are used to manage various configuration settings for the GEMINI pipeline. All settings commands are accessed via <code>gemini settings &lt;command&gt;</code>.</p>"},{"location":"cli/#gemini-settings-set-local","title":"<code>gemini settings set-local</code>","text":"<p>Enables or disables local mode for the GEMINI pipeline.</p> <pre><code>gemini settings set-local --enable\ngemini settings set-local --disable\n</code></pre> <p>Options:</p> <ul> <li><code>--enable</code>: Enable local mode.</li> <li><code>--disable</code>: Disable local mode.</li> </ul>"},{"location":"cli/#gemini-settings-set-debug","title":"<code>gemini settings set-debug</code>","text":"<p>Sets the <code>GEMINI_DEBUG</code> flag in the <code>.env</code> file.</p> <pre><code>gemini settings set-debug --enable\ngemini settings set-debug --disable\n</code></pre> <p>Options:</p> <ul> <li><code>--enable</code>: Enable debug mode.</li> <li><code>--disable</code>: Disable debug mode.</li> </ul>"},{"location":"cli/#gemini-settings-set-public-domain","title":"<code>gemini settings set-public-domain</code>","text":"<p>Sets the <code>GEMINI_PUBLIC_DOMAIN</code> in the <code>.env</code> file and sets <code>GEMINI_TYPE</code> to <code>public</code>.</p> <pre><code>gemini settings set-public-domain --domain &lt;your-domain.com&gt;\n</code></pre> <p>Options:</p> <ul> <li><code>--domain &lt;your-domain.com&gt;</code>: The domain to set for the GEMINI pipeline.</li> </ul>"},{"location":"cli/#gemini-settings-set-public-ip","title":"<code>gemini settings set-public-ip</code>","text":"<p>Sets the <code>GEMINI_PUBLIC_IP</code> in the <code>.env</code> file and sets <code>GEMINI_TYPE</code> to <code>public</code>.</p> <pre><code>gemini settings set-public-ip --ip &lt;your-public-ip&gt;\n</code></pre> <p>Options:</p> <ul> <li><code>--ip &lt;your-public-ip&gt;</code>: The public IP address to set for the GEMINI pipeline.</li> </ul>"},{"location":"getting_started/","title":"Getting Started &amp; Installation","text":""},{"location":"getting_started/#installation-steps","title":"Installation Steps","text":"<p>Install all the prerequisites above before continuing</p>"},{"location":"getting_started/#step-1","title":"Step 1","text":"<p>Clone the repository and enter the root folder</p> <pre><code>$ git clone https://github.com/GEMINI-Breeding/gemini-framework.git\n$ cd gemini-framework\n</code></pre>"},{"location":"getting_started/#step-2","title":"Step 2","text":"<p>Run poetry installation command to install global <code>gemini</code> python module.</p> <pre><code>$ poetry install\n</code></pre>"},{"location":"getting_started/#step-3","title":"Step 3","text":"<p>Setup the GEMINI Pipeline</p> <pre><code>$ gemini setup --default\n</code></pre>"},{"location":"getting_started/#step-4","title":"Step 4","text":"<p>Build the Docker containers that make up the GEMINI Pipeline</p> <pre><code>$ gemini build\n</code></pre>"},{"location":"getting_started/#step-5","title":"Step 5","text":"<p>Start the GEMINI Pipeline</p> <pre><code>$ gemini start\n</code></pre>"},{"location":"getting_started/#next-steps","title":"Next Steps","text":"<p>The REST API will be available on http://localhost:7777</p>"},{"location":"api/cultivars/","title":"Cultivars API","text":""},{"location":"api/cultivars/#description","title":"Description","text":"<p>A cultivar is a specific plant or species, identified by a unique accession and population (<code>cultivar_accession</code> and <code>cultivar_population</code>). Cultivars can be associated with multiple Experiments, Plots, and Plants.</p>"},{"location":"api/cultivars/#module","title":"Module","text":"<p>This module defines the Cultivar class, which represents a cultivar in the Gemini API.</p> <p>It provides methods to create, retrieve, update, delete, and manage cultivars, as well as to associate them with experiments, plots, and plants.</p> <p>The module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a cultivar exists by population and accession.</li> <li><code>create</code>: Create a new cultivar with optional experiment association.</li> <li><code>get</code>: Retrieve a cultivar by population, accession, and optional experiment name.</li> <li><code>get_by_id</code>: Retrieve a cultivar by its ID.</li> <li><code>get_all</code>: Retrieve all cultivars.</li> <li><code>search</code>: Search for cultivars based on various criteria.</li> <li><code>update</code>: Update the details of a cultivar.</li> <li><code>delete</code>: Delete a cultivar. </li> <li><code>refresh</code>: Refresh the cultivar's data from the database.</li> <li><code>get_info</code>: Get additional information about the cultivar.</li> <li><code>set_info</code>: Set additional information for the cultivar.</li> <li><code>get_associated_experiments</code>: Get all experiments associated with the cultivar.</li> <li><code>associate_experiment</code>: Associate the cultivar with an experiment.</li> <li><code>unassociate_experiment</code>: Unassociate the cultivar from an experiment.</li> <li><code>belongs_to_experiment</code>: Check if the cultivar belongs to a specific experiment.</li> <li><code>get_associated_plots</code>: Get all plots associated with the cultivar.</li> <li><code>associate_plot</code>: Associate the cultivar with a plot.</li> <li><code>unassociate_plot</code>: Unassociate the cultivar from a plot.</li> <li><code>belongs_to_plot</code>: Check if the cultivar belongs to a specific plot.</li> <li><code>get_associated_plants</code>: Get all plants associated with the cultivar.</li> <li><code>belongs_to_plant</code>: Check if the cultivar belongs to a specific plant.</li> </ul>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar","title":"<code>Cultivar</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a cultivar, a specific variety of a plant species.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the cultivar.</p> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> <code>cultivar_accession</code> <code>Optional[str]</code> <p>The accession number of the cultivar.</p> <code>cultivar_info</code> <code>Optional[dict]</code> <p>Additional information about the cultivar.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>class Cultivar(APIBase):\n    \"\"\"\n    Represents a cultivar, a specific variety of a plant species.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the cultivar.\n        cultivar_population (str): The population of the cultivar.\n        cultivar_accession (Optional[str]): The accession number of the cultivar.\n        cultivar_info (Optional[dict]): Additional information about the cultivar.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"cultivar_id\"))\n\n    cultivar_population: str\n    cultivar_accession: Optional[str] = None\n    cultivar_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Cultivar object.\"\"\"\n        return f\"Cultivar(cultivar_population={self.cultivar_population}, cultivar_accession={self.cultivar_accession}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Cultivar object.\"\"\"\n        return f\"Cultivar(cultivar_population={self.cultivar_population}, cultivar_accession={self.cultivar_accession}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        cultivar_population: str,\n        cultivar_accession: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if a cultivar with the given population and accession exists.\n\n        Examples:\n            &gt;&gt;&gt; Cultivar.exists(\"Wheat\", \"Accession123\")\n            True\n\n            &gt;&gt;&gt; Cultivar.exists(\"Corn\", \"Accession456\")\n            False\n\n        Args:\n            cultivar_population (str): The population of the cultivar.\n            cultivar_accession (str): The accession number of the cultivar.\n\n        Returns:\n            bool: True if the cultivar exists, False otherwise.\n        \"\"\"\n        try:\n            exists = CultivarModel.exists(\n                cultivar_population=cultivar_population,\n                cultivar_accession=cultivar_accession,\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking the existence of cultivar: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        cultivar_population: str,\n        cultivar_accession: str,\n        cultivar_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Create a new cultivar. If the cultivar already exists, it will return the existing one.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.create(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n            &gt;&gt;&gt; cultivar = Cultivar.create(\"Corn\", \"Accession456\", {\"info\": \"test\"}, \"Experiment1\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n\n        Args:\n            cultivar_population (str): The population of the cultivar.\n            cultivar_accession (str): The accession number of the cultivar.\n            cultivar_info (dict, optional): Additional information about the cultivar. Defaults to {}.\n            experiment_name (str, optional): The name of the experiment to associate the cultivar with. Defaults to None.\n\n        Returns:\n            Optional[\"Cultivar\"]: The created cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = CultivarModel.get_or_create(\n                cultivar_population=cultivar_population,\n                cultivar_accession=cultivar_accession,\n                cultivar_info=cultivar_info,\n            )\n            cultivar = cls.model_validate(db_instance)\n            # Associate with experiment if provided\n            if experiment_name:\n                cultivar.associate_experiment(experiment_name)\n            return cultivar\n        except Exception as e:\n            print(f\"Error creating cultivar: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, cultivar_population: str, cultivar_accession: str, experiment_name: str = None) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Get a cultivar by its population, accession, and optionally, experiment name.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Corn\", \"Accession456\", \"Experiment1\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n\n        Args:\n            cultivar_population (str): The population of the cultivar.\n            cultivar_accession (str): The accession number of the cultivar.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n\n        Returns:\n            Optional[\"Cultivar\"]: The cultivar, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentCultivarsViewModel.get_by_parameters(\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population,\n                experiment_name=experiment_name,\n            )\n            if not db_instance:\n                print(f\"Cultivar with accession {cultivar_accession} and population {cultivar_population} not found.\")\n                return None\n            cultivar = cls.model_validate(db_instance)\n            return cultivar\n        except Exception as e:\n            print(f\"Error getting cultivar: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Get a cultivar by its ID.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get_by_id(UUID(...))\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the cultivar.\n\n        Returns:\n            Optional[\"Cultivar\"]: The cultivar, or None if not found.\n        \"\"\"\n        try:\n            db_instance = CultivarModel.get(id)\n            if not db_instance:\n                print(f\"Cultivar with ID {id} does not exist.\")\n                return None\n            cultivar = cls.model_validate(db_instance)\n            return cultivar\n        except Exception as e:\n            print(f\"Error getting cultivar by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Cultivar\"]]:\n        \"\"\"\n        Get all cultivars.\n\n        Examples:\n            &gt;&gt;&gt; cultivars = Cultivar.get_all()\n            &gt;&gt;&gt; for cultivar in cultivars:\n            ...     print(cultivar)\n            Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n            Cultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n\n\n        Returns:\n            Optional[List[\"Cultivar\"]]: A list of all cultivars, or None if an error occurred.\n        \"\"\"\n        try:\n            cultivars = CultivarModel.all()\n            if not cultivars or len(cultivars) == 0:\n                print(\"No cultivars found.\")\n                return None\n            cultivars = [cls.model_validate(cultivar) for cultivar in cultivars]\n            return cultivars\n        except Exception as e:\n            print(f\"Error getting all cultivars: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls, \n        cultivar_population: str = None,\n        cultivar_accession: str = None,\n        cultivar_info: dict = None,\n        experiment_name: str = None\n    ) -&gt; Optional[List[\"Cultivar\"]]:\n        \"\"\"\n        Search for cultivars based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; cultivars = Cultivar.search(cultivar_population=\"Wheat\")\n            &gt;&gt;&gt; for cultivar in cultivars:\n            ...     print(cultivar)\n            Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n            Cultivar(cultivar_population=Wheat, cultivar_accession=Accession456, id=UUID(...))\n\n        Args:\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n            cultivar_accession (str, optional): The accession number of the cultivar. Defaults to None.\n            cultivar_info (dict, optional): Additional information about the cultivar. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n\n        Returns:\n            Optional[List[\"Cultivar\"]]: A list of matching cultivars, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, cultivar_population, cultivar_accession, cultivar_info]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n            cultivars = ExperimentCultivarsViewModel.search(\n                experiment_name=experiment_name,\n                cultivar_population=cultivar_population,\n                cultivar_accession=cultivar_accession,\n                cultivar_info=cultivar_info,\n            )\n            if not cultivars or len(cultivars) == 0:\n                print(\"No cultivars found with the provided search parameters.\")\n                return None\n            cultivars = [cls.model_validate(cultivar) for cultivar in cultivars]\n            return cultivars\n        except Exception as e:\n            print(f\"Error searching cultivars: {e}\")\n            return None\n\n    def update(\n        self,\n        cultivar_accession: str = None,\n        cultivar_population: str = None,\n        cultivar_info: dict = None,\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Update the details of the cultivar.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; updated_cultivar = cultivar.update(cultivar_accession=\"NewAccession\")\n            &gt;&gt;&gt; print(updated_cultivar)\n            Cultivar(cultivar_population=Wheat, cultivar_accession=NewAccession, id=UUID(...))\n\n\n        Args:\n            cultivar_accession (str, optional): The new accession number. Defaults to None.\n            cultivar_population (str, optional): The new population. Defaults to None.\n            cultivar_info (dict, optional): The new information. Defaults to None.\n\n        Returns:\n            Optional[\"Cultivar\"]: The updated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([cultivar_accession, cultivar_population, cultivar_info]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n\n            current_id = self.id\n            cultivar = CultivarModel.get(current_id)\n            if not cultivar:\n                print(f\"Cultivar with ID {current_id} does not exist.\")\n                return None\n            cultivar = CultivarModel.update(\n                cultivar,\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population,\n                cultivar_info=cultivar_info,\n            )\n            cultivar = self.model_validate(cultivar)\n            self.refresh()\n            return cultivar\n        except Exception as e:\n            print(f\"Error updating cultivar: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the cultivar.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; success = cultivar.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the cultivar was deleted successfully, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            cultivar = CultivarModel.get(current_id)\n            if not cultivar:\n                print(f\"Cultivar with ID {current_id} does not exist.\")\n                return False\n            CultivarModel.delete(cultivar)\n            return True\n        except Exception as e:\n            return False\n\n\n    def refresh(self) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Refresh the cultivar's data from the database. It is rarely needed to be called by the user,\n        as the data is automatically refreshed when accessed.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; refreshed_cultivar = cultivar.refresh()\n            &gt;&gt;&gt; print(refreshed_cultivar)\n            Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n        Returns:\n            Optional[\"Cultivar\"]: The refreshed cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = CultivarModel.get(self.id)\n            if not db_instance:\n                print(f\"Cultivar with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing cultivar: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the cultivar.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; info = cultivar.get_info()\n            &gt;&gt;&gt; print(info)\n            {'key1': 'value1', 'key2': 'value2'}\n\n        Returns:\n            Optional[dict]: The cultivar's information, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            cultivar = CultivarModel.get(current_id)\n            if not cultivar:\n                print(f\"Cultivar with ID {current_id} does not exist.\")\n                return None\n            cultivar_info = cultivar.cultivar_info\n            if not cultivar_info:\n                print(\"Cultivar info is empty.\")\n                return None\n            return cultivar_info\n        except Exception as e:\n            print(f\"Error getting cultivar info: {e}\")\n            return None\n\n    def set_info(self, cultivar_info: dict) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Set the additional information of the cultivar.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; updated_cultivar = cultivar.set_info({\"key1\": \"value1\", \"key2\": \"value2\"})\n            &gt;&gt;&gt; print(updated_cultivar.get_info())\n            {'key1': 'value1', 'key2': 'value2'}\n\n        Args:\n            cultivar_info (dict): The new information to set.\n\n        Returns:\n            Optional[\"Cultivar\"]: The updated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            cultivar = CultivarModel.get(current_id)\n            if not cultivar:\n                print(f\"Cultivar with ID {current_id} does not exist.\")\n                return None\n            cultivar = CultivarModel.update(\n                cultivar,\n                cultivar_info=cultivar_info\n            )\n            cultivar = self.model_validate(cultivar)\n            self.refresh()\n            return cultivar\n        except Exception as e:\n            print(f\"Error setting cultivar info: {e}\")\n            return None\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with the cultivar. Which are the experiments\n        that have this cultivar as part of their population.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; experiments = cultivar.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n\n        Returns:\n            A list of associated experiments, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            current_id = self.id\n            experiment_cultivars = ExperimentCultivarsViewModel.search(cultivar_id=current_id)\n            if not experiment_cultivars or len(experiment_cultivars) == 0:\n                print(\"No associated experiments found.\")\n                return None\n            experiments = [Experiment.model_validate(experiment_cultivar) for experiment_cultivar in experiment_cultivars]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate the cultivar with an experiment. If the cultivar is already associated with the experiment,\n        it will return the experiment without creating a new association.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; experiment = cultivar.associate_experiment(\"Experiment1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate with.\n\n        Returns:\n            The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentCultivarModel.get_by_parameters(\n                experiment_id=experiment.id,\n                cultivar_id=self.id\n            )\n            if existing_association:\n                print(f\"Cultivar {self.cultivar_population} is already associated with experiment {experiment_name}.\")\n                return experiment\n            new_association = ExperimentCultivarModel.get_or_create(\n                experiment_id=experiment.id,\n                cultivar_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate cultivar {self.cultivar_population} with experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating cultivar with experiment: {e}\")\n            return None\n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate the cultivar from an experiment. If the cultivar is not associated with the experiment,\n        it will return None without making any changes.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; experiment = cultivar.unassociate_experiment(\"Experiment1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate from.\n\n        Returns:\n            The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentCultivarModel.get_by_parameters(\n                experiment_id=experiment.id,\n                cultivar_id=self.id\n            )\n            if not existing_association:\n                print(f\"Cultivar {self.cultivar_population} is not associated with experiment {experiment_name}.\")\n                return None\n            is_deleted = ExperimentCultivarModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate cultivar {self.cultivar_population} from experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassociating cultivar from experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if the cultivar belongs to a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; belongs = cultivar.belongs_to_experiment(\"Experiment1\")\n            &gt;&gt;&gt; print(belongs)\n            True\n\n            &gt;&gt;&gt; belongs = cultivar.belongs_to_experiment(\"NonExistentExperiment\")\n            &gt;&gt;&gt; print(belongs)\n            False \n\n        Args:\n            experiment_name (str): The name of the experiment.\n\n        Returns:\n            bool: True if the cultivar belongs to the experiment, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentCultivarModel.exists(\n                experiment_id=experiment.id,\n                cultivar_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if cultivar belongs to experiment: {e}\")\n            return False\n\n    def get_associated_plots(self) -&gt; Optional[List[\"Plot\"]]:\n        \"\"\"\n        Get all plots associated with the cultivar. Which are the plots that have this cultivar\n        as part of their population.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; plots = cultivar.get_associated_plots()\n            &gt;&gt;&gt; for plot in plots:\n            ...     print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n            Plot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n\n        Returns:\n            A list of associated plots, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            current_id = self.id\n            plot_cultivars = PlotCultivarViewModel.search(cultivar_id=current_id)\n            if not plot_cultivars or len(plot_cultivars) == 0:\n                print(\"No associated plots found.\")\n                return None\n            plots = [Plot.model_validate(plot_cultivar) for plot_cultivar in plot_cultivars]\n            return plots\n        except Exception as e:\n            print(f\"Error getting associated plots: {e}\")\n            return None\n\n    def associate_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Associate the cultivar with a plot.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; plot = cultivar.associate_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The number of the plot.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n\n        Returns:\n            The associated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(f\"Plot {plot_number} does not exist.\")\n                return None\n            existing_association = PlotCultivarModel.get_by_parameters(\n                plot_id=plot.id,\n                cultivar_id=self.id\n            )\n            if existing_association:\n                print(f\"Cultivar {self.cultivar_population} is already associated with plot {plot_number}.\")\n                return plot\n            new_association = PlotCultivarModel.get_or_create(\n                plot_id=plot.id,\n                cultivar_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate cultivar {self.cultivar_population} with plot {plot_number}.\")\n                return None\n            self.refresh()\n            return plot\n        except Exception as e:\n            print(f\"Error associating cultivar with plot: {e}\")\n            return None\n\n    def unassociate_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Unassociate the cultivar from a plot.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; plot = cultivar.unassociate_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The number of the plot.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n\n        Returns:\n            The unassociated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(f\"Plot {plot_number} does not exist.\")\n                return None\n            existing_association = PlotCultivarModel.get_by_parameters(\n                plot_id=plot.id,\n                cultivar_id=self.id\n            )\n            if not existing_association:\n                print(f\"Cultivar {self.cultivar_population} is not associated with plot {plot_number}.\")\n                return None\n            is_deleted = PlotCultivarModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate cultivar {self.cultivar_population} from plot {plot_number}.\")\n                return None\n            self.refresh()\n            return plot\n        except Exception as e:\n            print(f\"Error unassociating cultivar from plot: {e}\")\n            return None\n\n    def belongs_to_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if the cultivar belongs to a specific plot.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; belongs = cultivar.belongs_to_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n            &gt;&gt;&gt; print(belongs)\n            True\n\n        Args:\n            plot_number (int): The number of the plot.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n\n        Returns:\n            bool: True if the cultivar belongs to the plot, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(f\"Plot {plot_number} does not exist.\")\n                return False\n            association_exists = PlotCultivarModel.exists(\n                plot_id=plot.id,\n                cultivar_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if cultivar belongs to plot: {e}\")\n            return False\n\n    def get_associated_plants(self) -&gt; Optional[List[\"Plant\"]]:\n        \"\"\"\n        Get all plants associated with the cultivar. Which are the plants that have this cultivar\n        as part of their population.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; plants = cultivar.get_associated_plants()\n            &gt;&gt;&gt; for plant in plants:\n            ...     print(plant)\n            Plant(plot_id=UUID(...), plant_number=1, plant_info={...}, id=UUID(...))\n            Plant(plot_id=UUID(...), plant_number=2, plant_info={...}, id=UUID(...))\n\n\n        Returns:\n            A list of associated plants, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plant import Plant\n            current_id = self.id\n            cultivar_plants = PlantViewModel.search(cultivar_id=current_id)\n            if not cultivar_plants or len(cultivar_plants) == 0:\n                print(\"No associated plants found.\")\n                return None\n            plants = [Plant.model_validate(cultivar_plant) for cultivar_plant in cultivar_plants]\n            return plants\n        except Exception as e:\n            print(f\"Error getting associated plants: {e}\")\n            return None\n\n\n    def belongs_to_plant(\n        self,\n        plant_number: int,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if the cultivar belongs to a specific plant.\n\n        Examples:\n            &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n            &gt;&gt;&gt; belongs = cultivar.belongs_to_plant(1, 1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n            &gt;&gt;&gt; print(belongs)\n            True\n\n        Args:\n            plant_number (int): The number of the plant.\n            plot_number (int, optional): The number of the plot. Defaults to None.\n            plot_row_number (int, optional): The row number of the plot. Defaults to None.\n            plot_column_number (int, optional): The column number of the plot. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n\n        Returns:\n            bool: True if the cultivar belongs to the plant, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.plant import Plant\n            plant = Plant.get(\n                plant_number=plant_number,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plant:\n                print(f\"Plant {plant_number} does not exist.\")\n                return False\n            association_exists = PlantViewModel.exists(\n                plant_id=plant.id,\n                cultivar_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if cultivar belongs to plant: {e}\")\n            return False\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Cultivar object.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Cultivar object.\"\"\"\n    return f\"Cultivar(cultivar_population={self.cultivar_population}, cultivar_accession={self.cultivar_accession}, id={self.id})\"\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Cultivar object.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Cultivar object.\"\"\"\n    return f\"Cultivar(cultivar_population={self.cultivar_population}, cultivar_accession={self.cultivar_accession}, id={self.id})\"\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate the cultivar with an experiment. If the cultivar is already associated with the experiment, it will return the experiment without creating a new association.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; experiment = cultivar.associate_experiment(\"Experiment1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate with.</p> required <p>Returns:</p> Type Description <code>Optional[Experiment]</code> <p>The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate the cultivar with an experiment. If the cultivar is already associated with the experiment,\n    it will return the experiment without creating a new association.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; experiment = cultivar.associate_experiment(\"Experiment1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate with.\n\n    Returns:\n        The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentCultivarModel.get_by_parameters(\n            experiment_id=experiment.id,\n            cultivar_id=self.id\n        )\n        if existing_association:\n            print(f\"Cultivar {self.cultivar_population} is already associated with experiment {experiment_name}.\")\n            return experiment\n        new_association = ExperimentCultivarModel.get_or_create(\n            experiment_id=experiment.id,\n            cultivar_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate cultivar {self.cultivar_population} with experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating cultivar with experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.associate_plot","title":"<code>associate_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, site_name=None)</code>","text":"<p>Associate the cultivar with a plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; plot = cultivar.associate_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The number of the plot.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Plot]</code> <p>The associated plot, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def associate_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Associate the cultivar with a plot.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; plot = cultivar.associate_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The number of the plot.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n\n    Returns:\n        The associated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(f\"Plot {plot_number} does not exist.\")\n            return None\n        existing_association = PlotCultivarModel.get_by_parameters(\n            plot_id=plot.id,\n            cultivar_id=self.id\n        )\n        if existing_association:\n            print(f\"Cultivar {self.cultivar_population} is already associated with plot {plot_number}.\")\n            return plot\n        new_association = PlotCultivarModel.get_or_create(\n            plot_id=plot.id,\n            cultivar_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate cultivar {self.cultivar_population} with plot {plot_number}.\")\n            return None\n        self.refresh()\n        return plot\n    except Exception as e:\n        print(f\"Error associating cultivar with plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if the cultivar belongs to a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; belongs = cultivar.belongs_to_experiment(\"Experiment1\")\n&gt;&gt;&gt; print(belongs)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; belongs = cultivar.belongs_to_experiment(\"NonExistentExperiment\")\n&gt;&gt;&gt; print(belongs)\nFalse \n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the cultivar belongs to the experiment, False otherwise.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if the cultivar belongs to a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; belongs = cultivar.belongs_to_experiment(\"Experiment1\")\n        &gt;&gt;&gt; print(belongs)\n        True\n\n        &gt;&gt;&gt; belongs = cultivar.belongs_to_experiment(\"NonExistentExperiment\")\n        &gt;&gt;&gt; print(belongs)\n        False \n\n    Args:\n        experiment_name (str): The name of the experiment.\n\n    Returns:\n        bool: True if the cultivar belongs to the experiment, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentCultivarModel.exists(\n            experiment_id=experiment.id,\n            cultivar_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if cultivar belongs to experiment: {e}\")\n        return False\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.belongs_to_plant","title":"<code>belongs_to_plant(plant_number, plot_number=None, plot_row_number=None, plot_column_number=None, experiment_name=None, season_name=None, site_name=None)</code>","text":"<p>Check if the cultivar belongs to a specific plant.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; belongs = cultivar.belongs_to_plant(1, 1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n&gt;&gt;&gt; print(belongs)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plant_number</code> <code>int</code> <p>The number of the plant.</p> required <code>plot_number</code> <code>int</code> <p>The number of the plot. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The row number of the plot. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The column number of the plot. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the cultivar belongs to the plant, False otherwise.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def belongs_to_plant(\n    self,\n    plant_number: int,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if the cultivar belongs to a specific plant.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; belongs = cultivar.belongs_to_plant(1, 1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n        &gt;&gt;&gt; print(belongs)\n        True\n\n    Args:\n        plant_number (int): The number of the plant.\n        plot_number (int, optional): The number of the plot. Defaults to None.\n        plot_row_number (int, optional): The row number of the plot. Defaults to None.\n        plot_column_number (int, optional): The column number of the plot. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n\n    Returns:\n        bool: True if the cultivar belongs to the plant, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.plant import Plant\n        plant = Plant.get(\n            plant_number=plant_number,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plant:\n            print(f\"Plant {plant_number} does not exist.\")\n            return False\n        association_exists = PlantViewModel.exists(\n            plant_id=plant.id,\n            cultivar_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if cultivar belongs to plant: {e}\")\n        return False\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.belongs_to_plot","title":"<code>belongs_to_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, site_name=None)</code>","text":"<p>Check if the cultivar belongs to a specific plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; belongs = cultivar.belongs_to_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n&gt;&gt;&gt; print(belongs)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The number of the plot.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the cultivar belongs to the plot, False otherwise.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def belongs_to_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if the cultivar belongs to a specific plot.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; belongs = cultivar.belongs_to_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n        &gt;&gt;&gt; print(belongs)\n        True\n\n    Args:\n        plot_number (int): The number of the plot.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n\n    Returns:\n        bool: True if the cultivar belongs to the plot, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(f\"Plot {plot_number} does not exist.\")\n            return False\n        association_exists = PlotCultivarModel.exists(\n            plot_id=plot.id,\n            cultivar_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if cultivar belongs to plot: {e}\")\n        return False\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.create","title":"<code>create(cultivar_population, cultivar_accession, cultivar_info={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new cultivar. If the cultivar already exists, it will return the existing one.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.create(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n</code></pre> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.create(\"Corn\", \"Accession456\", {\"info\": \"test\"}, \"Experiment1\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession number of the cultivar.</p> required <code>cultivar_info</code> <code>dict</code> <p>Additional information about the cultivar. Defaults to {}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate the cultivar with. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[\"Cultivar\"]: The created cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    cultivar_population: str,\n    cultivar_accession: str,\n    cultivar_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Create a new cultivar. If the cultivar already exists, it will return the existing one.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.create(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n        &gt;&gt;&gt; cultivar = Cultivar.create(\"Corn\", \"Accession456\", {\"info\": \"test\"}, \"Experiment1\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n\n    Args:\n        cultivar_population (str): The population of the cultivar.\n        cultivar_accession (str): The accession number of the cultivar.\n        cultivar_info (dict, optional): Additional information about the cultivar. Defaults to {}.\n        experiment_name (str, optional): The name of the experiment to associate the cultivar with. Defaults to None.\n\n    Returns:\n        Optional[\"Cultivar\"]: The created cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = CultivarModel.get_or_create(\n            cultivar_population=cultivar_population,\n            cultivar_accession=cultivar_accession,\n            cultivar_info=cultivar_info,\n        )\n        cultivar = cls.model_validate(db_instance)\n        # Associate with experiment if provided\n        if experiment_name:\n            cultivar.associate_experiment(experiment_name)\n        return cultivar\n    except Exception as e:\n        print(f\"Error creating cultivar: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.delete","title":"<code>delete()</code>","text":"<p>Delete the cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; success = cultivar.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the cultivar was deleted successfully, False otherwise.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the cultivar.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; success = cultivar.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the cultivar was deleted successfully, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        cultivar = CultivarModel.get(current_id)\n        if not cultivar:\n            print(f\"Cultivar with ID {current_id} does not exist.\")\n            return False\n        CultivarModel.delete(cultivar)\n        return True\n    except Exception as e:\n        return False\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.exists","title":"<code>exists(cultivar_population, cultivar_accession)</code>  <code>classmethod</code>","text":"<p>Check if a cultivar with the given population and accession exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Cultivar.exists(\"Wheat\", \"Accession123\")\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Cultivar.exists(\"Corn\", \"Accession456\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession number of the cultivar.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the cultivar exists, False otherwise.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    cultivar_population: str,\n    cultivar_accession: str,\n) -&gt; bool:\n    \"\"\"\n    Check if a cultivar with the given population and accession exists.\n\n    Examples:\n        &gt;&gt;&gt; Cultivar.exists(\"Wheat\", \"Accession123\")\n        True\n\n        &gt;&gt;&gt; Cultivar.exists(\"Corn\", \"Accession456\")\n        False\n\n    Args:\n        cultivar_population (str): The population of the cultivar.\n        cultivar_accession (str): The accession number of the cultivar.\n\n    Returns:\n        bool: True if the cultivar exists, False otherwise.\n    \"\"\"\n    try:\n        exists = CultivarModel.exists(\n            cultivar_population=cultivar_population,\n            cultivar_accession=cultivar_accession,\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking the existence of cultivar: {e}\")\n        return False\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.get","title":"<code>get(cultivar_population, cultivar_accession, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Get a cultivar by its population, accession, and optionally, experiment name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n</code></pre> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Corn\", \"Accession456\", \"Experiment1\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession number of the cultivar.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[\"Cultivar\"]: The cultivar, or None if not found.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>@classmethod\ndef get(cls, cultivar_population: str, cultivar_accession: str, experiment_name: str = None) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Get a cultivar by its population, accession, and optionally, experiment name.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Corn\", \"Accession456\", \"Experiment1\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n\n    Args:\n        cultivar_population (str): The population of the cultivar.\n        cultivar_accession (str): The accession number of the cultivar.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n\n    Returns:\n        Optional[\"Cultivar\"]: The cultivar, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentCultivarsViewModel.get_by_parameters(\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population,\n            experiment_name=experiment_name,\n        )\n        if not db_instance:\n            print(f\"Cultivar with accession {cultivar_accession} and population {cultivar_population} not found.\")\n            return None\n        cultivar = cls.model_validate(db_instance)\n        return cultivar\n    except Exception as e:\n        print(f\"Error getting cultivar: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Get all cultivars.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivars = Cultivar.get_all()\n&gt;&gt;&gt; for cultivar in cultivars:\n...     print(cultivar)\nCultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\nCultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Cultivar]]</code> <p>Optional[List[\"Cultivar\"]]: A list of all cultivars, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Cultivar\"]]:\n    \"\"\"\n    Get all cultivars.\n\n    Examples:\n        &gt;&gt;&gt; cultivars = Cultivar.get_all()\n        &gt;&gt;&gt; for cultivar in cultivars:\n        ...     print(cultivar)\n        Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n        Cultivar(cultivar_population=Corn, cultivar_accession=Accession456, id=UUID(...))\n\n\n    Returns:\n        Optional[List[\"Cultivar\"]]: A list of all cultivars, or None if an error occurred.\n    \"\"\"\n    try:\n        cultivars = CultivarModel.all()\n        if not cultivars or len(cultivars) == 0:\n            print(\"No cultivars found.\")\n            return None\n        cultivars = [cls.model_validate(cultivar) for cultivar in cultivars]\n        return cultivars\n    except Exception as e:\n        print(f\"Error getting all cultivars: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with the cultivar. Which are the experiments that have this cultivar as part of their population.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; experiments = cultivar.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>A list of associated experiments, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with the cultivar. Which are the experiments\n    that have this cultivar as part of their population.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; experiments = cultivar.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n\n    Returns:\n        A list of associated experiments, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        current_id = self.id\n        experiment_cultivars = ExperimentCultivarsViewModel.search(cultivar_id=current_id)\n        if not experiment_cultivars or len(experiment_cultivars) == 0:\n            print(\"No associated experiments found.\")\n            return None\n        experiments = [Experiment.model_validate(experiment_cultivar) for experiment_cultivar in experiment_cultivars]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.get_associated_plants","title":"<code>get_associated_plants()</code>","text":"<p>Get all plants associated with the cultivar. Which are the plants that have this cultivar as part of their population.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; plants = cultivar.get_associated_plants()\n&gt;&gt;&gt; for plant in plants:\n...     print(plant)\nPlant(plot_id=UUID(...), plant_number=1, plant_info={...}, id=UUID(...))\nPlant(plot_id=UUID(...), plant_number=2, plant_info={...}, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Plant]]</code> <p>A list of associated plants, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def get_associated_plants(self) -&gt; Optional[List[\"Plant\"]]:\n    \"\"\"\n    Get all plants associated with the cultivar. Which are the plants that have this cultivar\n    as part of their population.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; plants = cultivar.get_associated_plants()\n        &gt;&gt;&gt; for plant in plants:\n        ...     print(plant)\n        Plant(plot_id=UUID(...), plant_number=1, plant_info={...}, id=UUID(...))\n        Plant(plot_id=UUID(...), plant_number=2, plant_info={...}, id=UUID(...))\n\n\n    Returns:\n        A list of associated plants, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plant import Plant\n        current_id = self.id\n        cultivar_plants = PlantViewModel.search(cultivar_id=current_id)\n        if not cultivar_plants or len(cultivar_plants) == 0:\n            print(\"No associated plants found.\")\n            return None\n        plants = [Plant.model_validate(cultivar_plant) for cultivar_plant in cultivar_plants]\n        return plants\n    except Exception as e:\n        print(f\"Error getting associated plants: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.get_associated_plots","title":"<code>get_associated_plots()</code>","text":"<p>Get all plots associated with the cultivar. Which are the plots that have this cultivar as part of their population.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; plots = cultivar.get_associated_plots()\n&gt;&gt;&gt; for plot in plots:\n...     print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\nPlot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Plot]]</code> <p>A list of associated plots, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def get_associated_plots(self) -&gt; Optional[List[\"Plot\"]]:\n    \"\"\"\n    Get all plots associated with the cultivar. Which are the plots that have this cultivar\n    as part of their population.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; plots = cultivar.get_associated_plots()\n        &gt;&gt;&gt; for plot in plots:\n        ...     print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n        Plot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n\n    Returns:\n        A list of associated plots, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        current_id = self.id\n        plot_cultivars = PlotCultivarViewModel.search(cultivar_id=current_id)\n        if not plot_cultivars or len(plot_cultivars) == 0:\n            print(\"No associated plots found.\")\n            return None\n        plots = [Plot.model_validate(plot_cultivar) for plot_cultivar in plot_cultivars]\n        return plots\n    except Exception as e:\n        print(f\"Error getting associated plots: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Get a cultivar by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get_by_id(UUID(...))\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the cultivar.</p> required <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[\"Cultivar\"]: The cultivar, or None if not found.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Get a cultivar by its ID.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get_by_id(UUID(...))\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the cultivar.\n\n    Returns:\n        Optional[\"Cultivar\"]: The cultivar, or None if not found.\n    \"\"\"\n    try:\n        db_instance = CultivarModel.get(id)\n        if not db_instance:\n            print(f\"Cultivar with ID {id} does not exist.\")\n            return None\n        cultivar = cls.model_validate(db_instance)\n        return cultivar\n    except Exception as e:\n        print(f\"Error getting cultivar by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; info = cultivar.get_info()\n&gt;&gt;&gt; print(info)\n{'key1': 'value1', 'key2': 'value2'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The cultivar's information, or None if not found.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the cultivar.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; info = cultivar.get_info()\n        &gt;&gt;&gt; print(info)\n        {'key1': 'value1', 'key2': 'value2'}\n\n    Returns:\n        Optional[dict]: The cultivar's information, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        cultivar = CultivarModel.get(current_id)\n        if not cultivar:\n            print(f\"Cultivar with ID {current_id} does not exist.\")\n            return None\n        cultivar_info = cultivar.cultivar_info\n        if not cultivar_info:\n            print(\"Cultivar info is empty.\")\n            return None\n        return cultivar_info\n    except Exception as e:\n        print(f\"Error getting cultivar info: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the cultivar's data from the database. It is rarely needed to be called by the user, as the data is automatically refreshed when accessed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; refreshed_cultivar = cultivar.refresh()\n&gt;&gt;&gt; print(refreshed_cultivar)\nCultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[\"Cultivar\"]: The refreshed cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Refresh the cultivar's data from the database. It is rarely needed to be called by the user,\n    as the data is automatically refreshed when accessed.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; refreshed_cultivar = cultivar.refresh()\n        &gt;&gt;&gt; print(refreshed_cultivar)\n        Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n\n    Returns:\n        Optional[\"Cultivar\"]: The refreshed cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = CultivarModel.get(self.id)\n        if not db_instance:\n            print(f\"Cultivar with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing cultivar: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.search","title":"<code>search(cultivar_population=None, cultivar_accession=None, cultivar_info=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for cultivars based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivars = Cultivar.search(cultivar_population=\"Wheat\")\n&gt;&gt;&gt; for cultivar in cultivars:\n...     print(cultivar)\nCultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\nCultivar(cultivar_population=Wheat, cultivar_accession=Accession456, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_accession</code> <code>str</code> <p>The accession number of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_info</code> <code>dict</code> <p>Additional information about the cultivar. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[List[Cultivar]]</code> <p>Optional[List[\"Cultivar\"]]: A list of matching cultivars, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>@classmethod\ndef search(\n    cls, \n    cultivar_population: str = None,\n    cultivar_accession: str = None,\n    cultivar_info: dict = None,\n    experiment_name: str = None\n) -&gt; Optional[List[\"Cultivar\"]]:\n    \"\"\"\n    Search for cultivars based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; cultivars = Cultivar.search(cultivar_population=\"Wheat\")\n        &gt;&gt;&gt; for cultivar in cultivars:\n        ...     print(cultivar)\n        Cultivar(cultivar_population=Wheat, cultivar_accession=Accession123, id=UUID(...))\n        Cultivar(cultivar_population=Wheat, cultivar_accession=Accession456, id=UUID(...))\n\n    Args:\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        cultivar_accession (str, optional): The accession number of the cultivar. Defaults to None.\n        cultivar_info (dict, optional): Additional information about the cultivar. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n\n    Returns:\n        Optional[List[\"Cultivar\"]]: A list of matching cultivars, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, cultivar_population, cultivar_accession, cultivar_info]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n        cultivars = ExperimentCultivarsViewModel.search(\n            experiment_name=experiment_name,\n            cultivar_population=cultivar_population,\n            cultivar_accession=cultivar_accession,\n            cultivar_info=cultivar_info,\n        )\n        if not cultivars or len(cultivars) == 0:\n            print(\"No cultivars found with the provided search parameters.\")\n            return None\n        cultivars = [cls.model_validate(cultivar) for cultivar in cultivars]\n        return cultivars\n    except Exception as e:\n        print(f\"Error searching cultivars: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.set_info","title":"<code>set_info(cultivar_info)</code>","text":"<p>Set the additional information of the cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; updated_cultivar = cultivar.set_info({\"key1\": \"value1\", \"key2\": \"value2\"})\n&gt;&gt;&gt; print(updated_cultivar.get_info())\n{'key1': 'value1', 'key2': 'value2'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[\"Cultivar\"]: The updated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def set_info(self, cultivar_info: dict) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Set the additional information of the cultivar.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; updated_cultivar = cultivar.set_info({\"key1\": \"value1\", \"key2\": \"value2\"})\n        &gt;&gt;&gt; print(updated_cultivar.get_info())\n        {'key1': 'value1', 'key2': 'value2'}\n\n    Args:\n        cultivar_info (dict): The new information to set.\n\n    Returns:\n        Optional[\"Cultivar\"]: The updated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        cultivar = CultivarModel.get(current_id)\n        if not cultivar:\n            print(f\"Cultivar with ID {current_id} does not exist.\")\n            return None\n        cultivar = CultivarModel.update(\n            cultivar,\n            cultivar_info=cultivar_info\n        )\n        cultivar = self.model_validate(cultivar)\n        self.refresh()\n        return cultivar\n    except Exception as e:\n        print(f\"Error setting cultivar info: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate the cultivar from an experiment. If the cultivar is not associated with the experiment, it will return None without making any changes.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; experiment = cultivar.unassociate_experiment(\"Experiment1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate from.</p> required <p>Returns:</p> Type Description <code>Optional[Experiment]</code> <p>The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate the cultivar from an experiment. If the cultivar is not associated with the experiment,\n    it will return None without making any changes.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; experiment = cultivar.unassociate_experiment(\"Experiment1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate from.\n\n    Returns:\n        The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentCultivarModel.get_by_parameters(\n            experiment_id=experiment.id,\n            cultivar_id=self.id\n        )\n        if not existing_association:\n            print(f\"Cultivar {self.cultivar_population} is not associated with experiment {experiment_name}.\")\n            return None\n        is_deleted = ExperimentCultivarModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate cultivar {self.cultivar_population} from experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassociating cultivar from experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.unassociate_plot","title":"<code>unassociate_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, site_name=None)</code>","text":"<p>Unassociate the cultivar from a plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; plot = cultivar.unassociate_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The number of the plot.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Plot]</code> <p>The unassociated plot, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def unassociate_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Unassociate the cultivar from a plot.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; plot = cultivar.unassociate_plot(1, 1, 1, \"Experiment1\", \"Season1\", \"Site1\")\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The number of the plot.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n\n    Returns:\n        The unassociated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(f\"Plot {plot_number} does not exist.\")\n            return None\n        existing_association = PlotCultivarModel.get_by_parameters(\n            plot_id=plot.id,\n            cultivar_id=self.id\n        )\n        if not existing_association:\n            print(f\"Cultivar {self.cultivar_population} is not associated with plot {plot_number}.\")\n            return None\n        is_deleted = PlotCultivarModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate cultivar {self.cultivar_population} from plot {plot_number}.\")\n            return None\n        self.refresh()\n        return plot\n    except Exception as e:\n        print(f\"Error unassociating cultivar from plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/cultivars/#gemini.api.cultivar.Cultivar.update","title":"<code>update(cultivar_accession=None, cultivar_population=None, cultivar_info=None)</code>","text":"<p>Update the details of the cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n&gt;&gt;&gt; updated_cultivar = cultivar.update(cultivar_accession=\"NewAccession\")\n&gt;&gt;&gt; print(updated_cultivar)\nCultivar(cultivar_population=Wheat, cultivar_accession=NewAccession, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_accession</code> <code>str</code> <p>The new accession number. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The new population. Defaults to None.</p> <code>None</code> <code>cultivar_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[\"Cultivar\"]: The updated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/cultivar.py</code> <pre><code>def update(\n    self,\n    cultivar_accession: str = None,\n    cultivar_population: str = None,\n    cultivar_info: dict = None,\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Update the details of the cultivar.\n\n    Examples:\n        &gt;&gt;&gt; cultivar = Cultivar.get(\"Wheat\", \"Accession123\")\n        &gt;&gt;&gt; updated_cultivar = cultivar.update(cultivar_accession=\"NewAccession\")\n        &gt;&gt;&gt; print(updated_cultivar)\n        Cultivar(cultivar_population=Wheat, cultivar_accession=NewAccession, id=UUID(...))\n\n\n    Args:\n        cultivar_accession (str, optional): The new accession number. Defaults to None.\n        cultivar_population (str, optional): The new population. Defaults to None.\n        cultivar_info (dict, optional): The new information. Defaults to None.\n\n    Returns:\n        Optional[\"Cultivar\"]: The updated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([cultivar_accession, cultivar_population, cultivar_info]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n\n        current_id = self.id\n        cultivar = CultivarModel.get(current_id)\n        if not cultivar:\n            print(f\"Cultivar with ID {current_id} does not exist.\")\n            return None\n        cultivar = CultivarModel.update(\n            cultivar,\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population,\n            cultivar_info=cultivar_info,\n        )\n        cultivar = self.model_validate(cultivar)\n        self.refresh()\n        return cultivar\n    except Exception as e:\n        print(f\"Error updating cultivar: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/","title":"Data Formats API","text":""},{"location":"api/data_formats/#description","title":"Description","text":"<p>A data format defines the structure of data emitted and stored by a Sensor. A data format can be associated with multiple Data Types.</p> <p>The following data formats are pre-defined, along with their <code>data_format_id</code>:</p> Data Format <code>data_format_id</code> Default 0 TXT 1 JSON 2 CSV 3 TSV 4 XML 5 HTML 6 PDF 7 JPEG 8 PNG 9 GIF 10 BMP 11 TIFF 12 WAV 13 MP3 14 MPEG 15 AVI 16 MP4 17 OGG 18 WEBM 19 NPY 20"},{"location":"api/data_formats/#module","title":"Module","text":"<p>This module defines the DataFormat class, which represents a data format for storing and exchanging data.</p> <p>It includes methods for creating, retrieving, updating, and deleting data formats, as well as methods for checking existence, searching, and managing associations with data types.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a data format with the given name exists.</li> <li><code>create</code>: Create a new data format.</li> <li><code>get</code>: Retrieve a data format by its name.</li> <li><code>get_by_id</code>: Retrieve a data format by its ID.</li> <li><code>get_all</code>: Retrieve all data formats.</li> <li><code>search</code>: Search for data formats based on various criteria.</li> <li><code>update</code>: Update the details of a data format.</li> <li><code>delete</code>: Delete a data format.</li> <li><code>refresh</code>: Refresh the data format's data from the database.</li> <li><code>get_info</code>: Get the additional information of the data format.</li> <li><code>set_info</code>: Set the additional information of the data format.</li> <li><code>get_associated_data_types</code>: Get all data types associated with the data format.</li> <li><code>associate_data_type</code>: Associate the data format with a data type.</li> <li><code>unassociate_data_type</code>: Unassociate the data format from a data type.</li> <li><code>belongs_to_data_type</code>: Check if the data format is associated with a specific data type</li> </ul>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat","title":"<code>DataFormat</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a data format for storing and exchanging data.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the data format.</p> <code>data_format_name</code> <code>str</code> <p>The name of the data format (e.g., \"CSV\", \"JSON\").</p> <code>data_format_mime_type</code> <code>Optional[str]</code> <p>The MIME type of the data format (e.g., \"text/csv\").</p> <code>data_format_info</code> <code>Optional[dict]</code> <p>Additional information about the data format.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>class DataFormat(APIBase):\n    \"\"\"\n    Represents a data format for storing and exchanging data.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the data format.\n        data_format_name (str): The name of the data format (e.g., \"CSV\", \"JSON\").\n        data_format_mime_type (Optional[str]): The MIME type of the data format (e.g., \"text/csv\").\n        data_format_info (Optional[dict]): Additional information about the data format.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"data_format_id\"))\n\n    data_format_name: str\n    data_format_mime_type: Optional[str] = None\n    data_format_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the DataFormat object.\"\"\"\n        return f\"DataFormat(data_format_name={self.data_format_name}, data_format_mime_type={self.data_format_mime_type}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the DataFormat object.\"\"\"\n        return f\"DataFormat(data_format_name={self.data_format_name}, data_format_mime_type={self.data_format_mime_type}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        data_format_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a data format with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; DataFormat.exists(\"CSV\")\n            True\n            &gt;&gt;&gt; DataFormat.exists(\"Parquet\")\n            False\n\n        Args:\n            data_format_name (str): The name of the data format.\n\n        Returns:\n            bool: True if the data format exists, False otherwise.\n        \"\"\"\n        try:\n            exists = DataFormatModel.exists(data_format_name=data_format_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of data format: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        data_format_name: str,\n        data_format_mime_type: str = None,\n        data_format_info: dict = {},\n    ) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Create a new data format. If a data format with the same name already exists, it will return that instance.\n\n        Examples:\n            &gt;&gt;&gt; new_format = DataFormat.create(\n            ...     data_format_name=\"GeoJSON\",\n            ...     data_format_mime_type=\"application/geo+json\",\n            ...     data_format_info={\"version\": \"1.0\"}\n            ... )\n            &gt;&gt;&gt; print(new_format)\n            DataFormat(data_format_name=GeoJSON, data_format_mime_type=application/geo+json, id=...)\n\n        Args:\n            data_format_name (str): The name of the data format.\n            data_format_mime_type (str, optional): The MIME type of the data format. Defaults to None.\n            data_format_info (dict, optional): Additional information about the data format. Defaults to {}.\n\n        Returns:\n            Optional[\"DataFormat\"]: The created data format, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DataFormatModel.get_or_create(\n                data_format_name=data_format_name,\n                data_format_mime_type=data_format_mime_type,\n                data_format_info=data_format_info,\n            )\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error creating data format: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, data_format_name: str) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Get a data format by its name.\n\n        Examples:\n            &gt;&gt;&gt; csv_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; print(csv_format)\n            DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n\n        Args:\n            data_format_name (str): The name of the data format.\n\n        Returns:\n            Optional[\"DataFormat\"]: The data format, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DataFormatModel.get_by_parameters(data_format_name=data_format_name)\n            if not db_instance:\n                print(f\"Data format with name {data_format_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting data format: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Get a data format by its ID.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get_by_id(...)\n            &gt;&gt;&gt; print(data_format)\n            DataFormat(data_format_name=JSON, data_format_mime_type=application/json, id=...)\n\n        Args:\n            id (UUID | int | str): The ID of the data format.\n\n        Returns:\n            Optional[\"DataFormat\"]: The data format, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DataFormatModel.get(id)\n            if not db_instance:\n                print(f\"Data format with ID {id} does not exist.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting data format by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"DataFormat\"]]:\n        \"\"\"\n        Get all data formats.\n\n        Examples:\n            &gt;&gt;&gt; all_formats = DataFormat.get_all()\n            &gt;&gt;&gt; for fmt in all_formats:\n            ...     print(fmt)\n            DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n            DataFormat(data_format_name=JSON, data_format_mime_type=application/json, id=...)\n\n        Returns:\n            Optional[List[\"DataFormat\"]]: A list of all data formats, or None if an error occurred.\n        \"\"\"\n        try:\n            instances = DataFormatModel.all()\n            if not instances or len(instances) == 0:\n                print(\"No data formats found.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error getting all data formats: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        data_format_name: str = None,\n        data_format_mime_type: str = None,\n        data_format_info: dict = None\n    ) -&gt; Optional[List[\"DataFormat\"]]:\n        \"\"\"\n        Search for data formats based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; formats = DataFormat.search(data_format_name=\"CSV\")\n            &gt;&gt;&gt; for fmt in formats:\n            ...     print(fmt)\n            DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n\n\n        Args:\n            data_format_name (str, optional): The name of the data format. Defaults to None.\n            data_format_mime_type (str, optional): The MIME type of the data format. Defaults to None.\n            data_format_info (dict, optional): Additional information about the data format. Defaults to None.\n\n        Returns:\n            Optional[List[\"DataFormat\"]]: A list of matching data formats, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([data_format_name, data_format_mime_type, data_format_info]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n\n            data_formats = DataFormatModel.search(\n                data_format_name=data_format_name,\n                data_format_mime_type=data_format_mime_type,\n                data_format_info=data_format_info,\n            )\n            if not data_formats or len(data_formats) == 0:\n                print(\"No data formats found with the provided search parameters.\")\n                return None\n            data_formats = [cls.model_validate(data_format) for data_format in data_formats]\n            return data_formats\n        except Exception as e:\n            print(f\"Error searching data formats: {e}\")\n            return None\n\n    def update(\n        self,\n        data_format_name: str = None,\n        data_format_mime_type: str = None,\n        data_format_info: dict = None,\n    ) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Update the details of the data format.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; updated_format = data_format.update(\n            ...     data_format_name=\"Updated CSV\",\n            ...     data_format_mime_type=\"text/csv\",\n            ...     data_format_info={\"version\": \"2.0\"}\n            ... )\n            &gt;&gt;&gt; print(updated_format)\n            DataFormat(data_format_name=Updated CSV, data_format_mime_type=text/csv, id=...)\n\n\n        Args:\n            data_format_name (str, optional): The new name of the data format. Defaults to None.\n            data_format_mime_type (str, optional): The new MIME type. Defaults to None.\n            data_format_info (dict, optional): The new information. Defaults to None.\n\n        Returns:\n            Optional[\"DataFormat\"]: The updated data format, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([data_format_name, data_format_mime_type, data_format_info]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n\n            current_id = self.id\n            data_format = DataFormatModel.get(current_id)\n            if not data_format:\n                print(f\"Data format with ID {current_id} does not exist.\")\n                return None\n\n            data_format = DataFormatModel.update(\n                data_format,\n                data_format_name=data_format_name,\n                data_format_mime_type=data_format_mime_type,\n                data_format_info=data_format_info,\n            )\n            instance = self.model_validate(data_format)\n            self.refresh() # Refresh self with updated data\n            return instance # Return the validated instance\n        except Exception as e:\n            print(f\"Error updating data format: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the data format.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; success = data_format.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the data format was deleted successfully, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            data_format = DataFormatModel.get(current_id)\n            if not data_format:\n                print(f\"Data format with ID {current_id} does not exist.\")\n                return False\n            DataFormatModel.delete(data_format)\n            return True\n        except Exception as e:\n            print(f\"Error deleting data format: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Refresh the data format's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; refreshed_format = data_format.refresh()\n            &gt;&gt;&gt; print(refreshed_format)\n            DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n\n\n        Returns:\n            Optional[\"DataFormat\"]: The refreshed data format, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DataFormatModel.get(self.id)\n            if not db_instance:\n                print(f\"Data format with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            # Update self attributes\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing data format: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the data format.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; info = data_format.get_info()\n            &gt;&gt;&gt; print(info)\n            {'version': '1.0', 'description': 'Comma-separated values format'}\n\n        Returns:\n            Optional[dict]: The data format's information, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            data_format = DataFormatModel.get(current_id)\n            if not data_format:\n                print(f\"Data format with ID {current_id} does not exist.\")\n                return None\n            data_format_info = data_format.data_format_info\n            if not data_format_info:\n                print(\"DataFormat info is empty.\")\n                return None # Return None if info is empty/None\n            return data_format_info\n        except Exception as e:\n            print(f\"Error getting data format info: {e}\")\n            return None\n\n    def set_info(self, data_format_info: dict) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Set the additional information of the data format.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; updated_format = data_format.set_info({\"version\": \"2.0\", \"description\": \"Updated CSV format\"})\n            &gt;&gt;&gt; print(updated_format.get_info())\n            {'version': '2.0', 'description': 'Updated CSV format'}\n\n        Args:\n            data_format_info (dict): The new information to set.\n\n        Returns:\n            Optional[\"DataFormat\"]: The updated data format, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            data_format = DataFormatModel.get(current_id)\n            if not data_format:\n                print(f\"Data format with ID {current_id} does not exist.\")\n                return None\n            data_format = DataFormatModel.update(\n                data_format,\n                data_format_info=data_format_info,\n            )\n            instance = self.model_validate(data_format)\n            self.refresh() # Refresh self\n            return instance # Return validated instance\n        except Exception as e:\n            print(f\"Error setting data format info: {e}\")\n            return None\n\n    def get_associated_data_types(self) -&gt; Optional[List[\"DataType\"]]:\n        \"\"\"\n        Get all data types associated with the data format.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; associated_data_types = data_format.get_associated_data_types()\n            &gt;&gt;&gt; for dt in associated_data_types:\n            ...     print(dt)\n            DataType(data_type_name=Text, id=...)\n            DataType(data_type_name=Numeric, id=...)\n\n        Returns:\n            A list of associated data types, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.data_type import DataType\n            current_id = self.id\n            data_type_formats = DataTypeFormatsViewModel.search(\n                data_format_id=current_id\n            )\n            if not data_type_formats or len(data_type_formats) == 0:\n                print(f\"No associated data types found for data format ID {current_id}.\")\n                return None\n            data_types = [DataType.model_validate(data_type_format) for data_type_format in data_type_formats]\n            return data_types\n        except Exception as e:\n            print(f\"Error getting associated data types: {e}\")\n            return None\n\n    def associate_data_type(self, data_type_name: str) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Associate the data format with a data type.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; associated_data_type = data_format.associate_data_type(\"Text\")\n            &gt;&gt;&gt; print(associated_data_type)\n            DataType(data_type_name=Text, id=...)\n\n        Args:\n            data_type_name (str): The name of the data type to associate with.\n\n        Returns:\n            The associated data type, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.data_type import DataType\n            data_type = DataType.get(data_type_name=data_type_name)\n            if not data_type:\n                print(f\"Data type with name {data_type_name} does not exist.\")\n                return None\n            existing_association = DataTypeFormatModel.get_or_create(\n                data_type_id=data_type.id,\n                data_format_id=self.id\n            )\n            if existing_association:\n                print(f\"Data type {data_type_name} is already associated with data format ID {self.id}.\")\n                return data_type\n            new_association = DataTypeFormatModel.create(\n                data_type_id=data_type.id,\n                data_format_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to create association for data type {data_type_name} with data format ID {self.id}.\")\n                return None\n            self.refresh()  # Refresh self with updated data\n            return data_type\n        except Exception as e:\n            print(f\"Error associating data type {data_type_name} with data format: {e}\")\n            return None\n\n\n    def unassociate_data_type(self, data_type_name: str) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Unassociate the data format from a data type.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; unassociated_data_type = data_format.unassociate_data_type(\"Text\")\n            &gt;&gt;&gt; print(unassociated_data_type)\n            DataType(data_type_name=Text, id=...)\n\n        Args:\n            data_type_name (str): The name of the data type to unassociate from.\n\n        Returns:\n            The unassociated data type, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.data_type import DataType\n            data_type = DataType.get(data_type_name=data_type_name)\n            if not data_type:\n                print(f\"Data type with name {data_type_name} does not exist.\")\n                return None\n            existing_association = DataTypeFormatModel.get_by_parameters(\n                data_type_id=data_type.id,\n                data_format_id=self.id\n            )\n            if not existing_association:\n                print(f\"Data type {data_type_name} is not associated with data format ID {self.id}.\")\n                return None\n            is_deleted = DataTypeFormatModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate data type {data_type_name} from data format ID {self.id}.\")\n                return None\n            self.refresh()  # Refresh self with updated data\n            return data_type\n        except Exception as e:\n            print(f\"Error unassociating data type {data_type_name} from data format: {e}\")\n            return None\n\n    def belongs_to_data_type(self, data_type_name: str) -&gt; bool:\n        \"\"\"\n        Check if the data format is associated with a specific data type.\n\n        Examples:\n            &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n            &gt;&gt;&gt; is_associated = data_format.belongs_to_data_type(\"Text\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            data_type_name (str): The name of the data type.\n\n        Returns:\n            bool: True if the data format is associated with the data type, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.data_type import DataType\n            data_type = DataType.get(data_type_name=data_type_name)\n            if not data_type:\n                print(f\"Data type with name {data_type_name} does not exist.\")\n                return False\n            association_exists = DataTypeFormatModel.exists(\n                data_type_id=data_type.id,\n                data_format_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if data format belongs to data type {data_type_name}: {e}\")\n            return False\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the DataFormat object.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the DataFormat object.\"\"\"\n    return f\"DataFormat(data_format_name={self.data_format_name}, data_format_mime_type={self.data_format_mime_type}, id={self.id})\"\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the DataFormat object.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the DataFormat object.\"\"\"\n    return f\"DataFormat(data_format_name={self.data_format_name}, data_format_mime_type={self.data_format_mime_type}, id={self.id})\"\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.associate_data_type","title":"<code>associate_data_type(data_type_name)</code>","text":"<p>Associate the data format with a data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; associated_data_type = data_format.associate_data_type(\"Text\")\n&gt;&gt;&gt; print(associated_data_type)\nDataType(data_type_name=Text, id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The name of the data type to associate with.</p> required <p>Returns:</p> Type Description <code>Optional[DataType]</code> <p>The associated data type, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def associate_data_type(self, data_type_name: str) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Associate the data format with a data type.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; associated_data_type = data_format.associate_data_type(\"Text\")\n        &gt;&gt;&gt; print(associated_data_type)\n        DataType(data_type_name=Text, id=...)\n\n    Args:\n        data_type_name (str): The name of the data type to associate with.\n\n    Returns:\n        The associated data type, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.data_type import DataType\n        data_type = DataType.get(data_type_name=data_type_name)\n        if not data_type:\n            print(f\"Data type with name {data_type_name} does not exist.\")\n            return None\n        existing_association = DataTypeFormatModel.get_or_create(\n            data_type_id=data_type.id,\n            data_format_id=self.id\n        )\n        if existing_association:\n            print(f\"Data type {data_type_name} is already associated with data format ID {self.id}.\")\n            return data_type\n        new_association = DataTypeFormatModel.create(\n            data_type_id=data_type.id,\n            data_format_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to create association for data type {data_type_name} with data format ID {self.id}.\")\n            return None\n        self.refresh()  # Refresh self with updated data\n        return data_type\n    except Exception as e:\n        print(f\"Error associating data type {data_type_name} with data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.belongs_to_data_type","title":"<code>belongs_to_data_type(data_type_name)</code>","text":"<p>Check if the data format is associated with a specific data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; is_associated = data_format.belongs_to_data_type(\"Text\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The name of the data type.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the data format is associated with the data type, False otherwise.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def belongs_to_data_type(self, data_type_name: str) -&gt; bool:\n    \"\"\"\n    Check if the data format is associated with a specific data type.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; is_associated = data_format.belongs_to_data_type(\"Text\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        data_type_name (str): The name of the data type.\n\n    Returns:\n        bool: True if the data format is associated with the data type, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.data_type import DataType\n        data_type = DataType.get(data_type_name=data_type_name)\n        if not data_type:\n            print(f\"Data type with name {data_type_name} does not exist.\")\n            return False\n        association_exists = DataTypeFormatModel.exists(\n            data_type_id=data_type.id,\n            data_format_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if data format belongs to data type {data_type_name}: {e}\")\n        return False\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.create","title":"<code>create(data_format_name, data_format_mime_type=None, data_format_info={})</code>  <code>classmethod</code>","text":"<p>Create a new data format. If a data format with the same name already exists, it will return that instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; new_format = DataFormat.create(\n...     data_format_name=\"GeoJSON\",\n...     data_format_mime_type=\"application/geo+json\",\n...     data_format_info={\"version\": \"1.0\"}\n... )\n&gt;&gt;&gt; print(new_format)\nDataFormat(data_format_name=GeoJSON, data_format_mime_type=application/geo+json, id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the data format.</p> required <code>data_format_mime_type</code> <code>str</code> <p>The MIME type of the data format. Defaults to None.</p> <code>None</code> <code>data_format_info</code> <code>dict</code> <p>Additional information about the data format. Defaults to {}.</p> <code>{}</code> <p>Returns:</p> Type Description <code>Optional[DataFormat]</code> <p>Optional[\"DataFormat\"]: The created data format, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    data_format_name: str,\n    data_format_mime_type: str = None,\n    data_format_info: dict = {},\n) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Create a new data format. If a data format with the same name already exists, it will return that instance.\n\n    Examples:\n        &gt;&gt;&gt; new_format = DataFormat.create(\n        ...     data_format_name=\"GeoJSON\",\n        ...     data_format_mime_type=\"application/geo+json\",\n        ...     data_format_info={\"version\": \"1.0\"}\n        ... )\n        &gt;&gt;&gt; print(new_format)\n        DataFormat(data_format_name=GeoJSON, data_format_mime_type=application/geo+json, id=...)\n\n    Args:\n        data_format_name (str): The name of the data format.\n        data_format_mime_type (str, optional): The MIME type of the data format. Defaults to None.\n        data_format_info (dict, optional): Additional information about the data format. Defaults to {}.\n\n    Returns:\n        Optional[\"DataFormat\"]: The created data format, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DataFormatModel.get_or_create(\n            data_format_name=data_format_name,\n            data_format_mime_type=data_format_mime_type,\n            data_format_info=data_format_info,\n        )\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error creating data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.delete","title":"<code>delete()</code>","text":"<p>Delete the data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; success = data_format.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the data format was deleted successfully, False otherwise.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the data format.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; success = data_format.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the data format was deleted successfully, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        data_format = DataFormatModel.get(current_id)\n        if not data_format:\n            print(f\"Data format with ID {current_id} does not exist.\")\n            return False\n        DataFormatModel.delete(data_format)\n        return True\n    except Exception as e:\n        print(f\"Error deleting data format: {e}\")\n        return False\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.exists","title":"<code>exists(data_format_name)</code>  <code>classmethod</code>","text":"<p>Check if a data format with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DataFormat.exists(\"CSV\")\nTrue\n&gt;&gt;&gt; DataFormat.exists(\"Parquet\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the data format.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the data format exists, False otherwise.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    data_format_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a data format with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; DataFormat.exists(\"CSV\")\n        True\n        &gt;&gt;&gt; DataFormat.exists(\"Parquet\")\n        False\n\n    Args:\n        data_format_name (str): The name of the data format.\n\n    Returns:\n        bool: True if the data format exists, False otherwise.\n    \"\"\"\n    try:\n        exists = DataFormatModel.exists(data_format_name=data_format_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of data format: {e}\")\n        return False\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.get","title":"<code>get(data_format_name)</code>  <code>classmethod</code>","text":"<p>Get a data format by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; csv_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; print(csv_format)\nDataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the data format.</p> required <p>Returns:</p> Type Description <code>Optional[DataFormat]</code> <p>Optional[\"DataFormat\"]: The data format, or None if not found.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>@classmethod\ndef get(cls, data_format_name: str) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Get a data format by its name.\n\n    Examples:\n        &gt;&gt;&gt; csv_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; print(csv_format)\n        DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n\n    Args:\n        data_format_name (str): The name of the data format.\n\n    Returns:\n        Optional[\"DataFormat\"]: The data format, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DataFormatModel.get_by_parameters(data_format_name=data_format_name)\n        if not db_instance:\n            print(f\"Data format with name {data_format_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Get all data formats.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; all_formats = DataFormat.get_all()\n&gt;&gt;&gt; for fmt in all_formats:\n...     print(fmt)\nDataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\nDataFormat(data_format_name=JSON, data_format_mime_type=application/json, id=...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[DataFormat]]</code> <p>Optional[List[\"DataFormat\"]]: A list of all data formats, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"DataFormat\"]]:\n    \"\"\"\n    Get all data formats.\n\n    Examples:\n        &gt;&gt;&gt; all_formats = DataFormat.get_all()\n        &gt;&gt;&gt; for fmt in all_formats:\n        ...     print(fmt)\n        DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n        DataFormat(data_format_name=JSON, data_format_mime_type=application/json, id=...)\n\n    Returns:\n        Optional[List[\"DataFormat\"]]: A list of all data formats, or None if an error occurred.\n    \"\"\"\n    try:\n        instances = DataFormatModel.all()\n        if not instances or len(instances) == 0:\n            print(\"No data formats found.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error getting all data formats: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.get_associated_data_types","title":"<code>get_associated_data_types()</code>","text":"<p>Get all data types associated with the data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; associated_data_types = data_format.get_associated_data_types()\n&gt;&gt;&gt; for dt in associated_data_types:\n...     print(dt)\nDataType(data_type_name=Text, id=...)\nDataType(data_type_name=Numeric, id=...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[DataType]]</code> <p>A list of associated data types, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def get_associated_data_types(self) -&gt; Optional[List[\"DataType\"]]:\n    \"\"\"\n    Get all data types associated with the data format.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; associated_data_types = data_format.get_associated_data_types()\n        &gt;&gt;&gt; for dt in associated_data_types:\n        ...     print(dt)\n        DataType(data_type_name=Text, id=...)\n        DataType(data_type_name=Numeric, id=...)\n\n    Returns:\n        A list of associated data types, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.data_type import DataType\n        current_id = self.id\n        data_type_formats = DataTypeFormatsViewModel.search(\n            data_format_id=current_id\n        )\n        if not data_type_formats or len(data_type_formats) == 0:\n            print(f\"No associated data types found for data format ID {current_id}.\")\n            return None\n        data_types = [DataType.model_validate(data_type_format) for data_type_format in data_type_formats]\n        return data_types\n    except Exception as e:\n        print(f\"Error getting associated data types: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Get a data format by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get_by_id(...)\n&gt;&gt;&gt; print(data_format)\nDataFormat(data_format_name=JSON, data_format_mime_type=application/json, id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the data format.</p> required <p>Returns:</p> Type Description <code>Optional[DataFormat]</code> <p>Optional[\"DataFormat\"]: The data format, or None if not found.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Get a data format by its ID.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get_by_id(...)\n        &gt;&gt;&gt; print(data_format)\n        DataFormat(data_format_name=JSON, data_format_mime_type=application/json, id=...)\n\n    Args:\n        id (UUID | int | str): The ID of the data format.\n\n    Returns:\n        Optional[\"DataFormat\"]: The data format, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DataFormatModel.get(id)\n        if not db_instance:\n            print(f\"Data format with ID {id} does not exist.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting data format by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; info = data_format.get_info()\n&gt;&gt;&gt; print(info)\n{'version': '1.0', 'description': 'Comma-separated values format'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The data format's information, or None if not found.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the data format.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; info = data_format.get_info()\n        &gt;&gt;&gt; print(info)\n        {'version': '1.0', 'description': 'Comma-separated values format'}\n\n    Returns:\n        Optional[dict]: The data format's information, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        data_format = DataFormatModel.get(current_id)\n        if not data_format:\n            print(f\"Data format with ID {current_id} does not exist.\")\n            return None\n        data_format_info = data_format.data_format_info\n        if not data_format_info:\n            print(\"DataFormat info is empty.\")\n            return None # Return None if info is empty/None\n        return data_format_info\n    except Exception as e:\n        print(f\"Error getting data format info: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the data format's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; refreshed_format = data_format.refresh()\n&gt;&gt;&gt; print(refreshed_format)\nDataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[DataFormat]</code> <p>Optional[\"DataFormat\"]: The refreshed data format, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def refresh(self) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Refresh the data format's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; refreshed_format = data_format.refresh()\n        &gt;&gt;&gt; print(refreshed_format)\n        DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n\n\n    Returns:\n        Optional[\"DataFormat\"]: The refreshed data format, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DataFormatModel.get(self.id)\n        if not db_instance:\n            print(f\"Data format with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        # Update self attributes\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.search","title":"<code>search(data_format_name=None, data_format_mime_type=None, data_format_info=None)</code>  <code>classmethod</code>","text":"<p>Search for data formats based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; formats = DataFormat.search(data_format_name=\"CSV\")\n&gt;&gt;&gt; for fmt in formats:\n...     print(fmt)\nDataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the data format. Defaults to None.</p> <code>None</code> <code>data_format_mime_type</code> <code>str</code> <p>The MIME type of the data format. Defaults to None.</p> <code>None</code> <code>data_format_info</code> <code>dict</code> <p>Additional information about the data format. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[List[DataFormat]]</code> <p>Optional[List[\"DataFormat\"]]: A list of matching data formats, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    data_format_name: str = None,\n    data_format_mime_type: str = None,\n    data_format_info: dict = None\n) -&gt; Optional[List[\"DataFormat\"]]:\n    \"\"\"\n    Search for data formats based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; formats = DataFormat.search(data_format_name=\"CSV\")\n        &gt;&gt;&gt; for fmt in formats:\n        ...     print(fmt)\n        DataFormat(data_format_name=CSV, data_format_mime_type=text/csv, id=...)\n\n\n    Args:\n        data_format_name (str, optional): The name of the data format. Defaults to None.\n        data_format_mime_type (str, optional): The MIME type of the data format. Defaults to None.\n        data_format_info (dict, optional): Additional information about the data format. Defaults to None.\n\n    Returns:\n        Optional[List[\"DataFormat\"]]: A list of matching data formats, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([data_format_name, data_format_mime_type, data_format_info]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n\n        data_formats = DataFormatModel.search(\n            data_format_name=data_format_name,\n            data_format_mime_type=data_format_mime_type,\n            data_format_info=data_format_info,\n        )\n        if not data_formats or len(data_formats) == 0:\n            print(\"No data formats found with the provided search parameters.\")\n            return None\n        data_formats = [cls.model_validate(data_format) for data_format in data_formats]\n        return data_formats\n    except Exception as e:\n        print(f\"Error searching data formats: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.set_info","title":"<code>set_info(data_format_info)</code>","text":"<p>Set the additional information of the data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; updated_format = data_format.set_info({\"version\": \"2.0\", \"description\": \"Updated CSV format\"})\n&gt;&gt;&gt; print(updated_format.get_info())\n{'version': '2.0', 'description': 'Updated CSV format'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:</p> Type Description <code>Optional[DataFormat]</code> <p>Optional[\"DataFormat\"]: The updated data format, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def set_info(self, data_format_info: dict) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Set the additional information of the data format.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; updated_format = data_format.set_info({\"version\": \"2.0\", \"description\": \"Updated CSV format\"})\n        &gt;&gt;&gt; print(updated_format.get_info())\n        {'version': '2.0', 'description': 'Updated CSV format'}\n\n    Args:\n        data_format_info (dict): The new information to set.\n\n    Returns:\n        Optional[\"DataFormat\"]: The updated data format, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        data_format = DataFormatModel.get(current_id)\n        if not data_format:\n            print(f\"Data format with ID {current_id} does not exist.\")\n            return None\n        data_format = DataFormatModel.update(\n            data_format,\n            data_format_info=data_format_info,\n        )\n        instance = self.model_validate(data_format)\n        self.refresh() # Refresh self\n        return instance # Return validated instance\n    except Exception as e:\n        print(f\"Error setting data format info: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.unassociate_data_type","title":"<code>unassociate_data_type(data_type_name)</code>","text":"<p>Unassociate the data format from a data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; unassociated_data_type = data_format.unassociate_data_type(\"Text\")\n&gt;&gt;&gt; print(unassociated_data_type)\nDataType(data_type_name=Text, id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The name of the data type to unassociate from.</p> required <p>Returns:</p> Type Description <code>Optional[DataType]</code> <p>The unassociated data type, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def unassociate_data_type(self, data_type_name: str) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Unassociate the data format from a data type.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; unassociated_data_type = data_format.unassociate_data_type(\"Text\")\n        &gt;&gt;&gt; print(unassociated_data_type)\n        DataType(data_type_name=Text, id=...)\n\n    Args:\n        data_type_name (str): The name of the data type to unassociate from.\n\n    Returns:\n        The unassociated data type, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.data_type import DataType\n        data_type = DataType.get(data_type_name=data_type_name)\n        if not data_type:\n            print(f\"Data type with name {data_type_name} does not exist.\")\n            return None\n        existing_association = DataTypeFormatModel.get_by_parameters(\n            data_type_id=data_type.id,\n            data_format_id=self.id\n        )\n        if not existing_association:\n            print(f\"Data type {data_type_name} is not associated with data format ID {self.id}.\")\n            return None\n        is_deleted = DataTypeFormatModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate data type {data_type_name} from data format ID {self.id}.\")\n            return None\n        self.refresh()  # Refresh self with updated data\n        return data_type\n    except Exception as e:\n        print(f\"Error unassociating data type {data_type_name} from data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_formats/#gemini.api.data_format.DataFormat.update","title":"<code>update(data_format_name=None, data_format_mime_type=None, data_format_info=None)</code>","text":"<p>Update the details of the data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n&gt;&gt;&gt; updated_format = data_format.update(\n...     data_format_name=\"Updated CSV\",\n...     data_format_mime_type=\"text/csv\",\n...     data_format_info={\"version\": \"2.0\"}\n... )\n&gt;&gt;&gt; print(updated_format)\nDataFormat(data_format_name=Updated CSV, data_format_mime_type=text/csv, id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The new name of the data format. Defaults to None.</p> <code>None</code> <code>data_format_mime_type</code> <code>str</code> <p>The new MIME type. Defaults to None.</p> <code>None</code> <code>data_format_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[DataFormat]</code> <p>Optional[\"DataFormat\"]: The updated data format, or None if an error occurred.</p> Source code in <code>gemini/api/data_format.py</code> <pre><code>def update(\n    self,\n    data_format_name: str = None,\n    data_format_mime_type: str = None,\n    data_format_info: dict = None,\n) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Update the details of the data format.\n\n    Examples:\n        &gt;&gt;&gt; data_format = DataFormat.get(\"CSV\")\n        &gt;&gt;&gt; updated_format = data_format.update(\n        ...     data_format_name=\"Updated CSV\",\n        ...     data_format_mime_type=\"text/csv\",\n        ...     data_format_info={\"version\": \"2.0\"}\n        ... )\n        &gt;&gt;&gt; print(updated_format)\n        DataFormat(data_format_name=Updated CSV, data_format_mime_type=text/csv, id=...)\n\n\n    Args:\n        data_format_name (str, optional): The new name of the data format. Defaults to None.\n        data_format_mime_type (str, optional): The new MIME type. Defaults to None.\n        data_format_info (dict, optional): The new information. Defaults to None.\n\n    Returns:\n        Optional[\"DataFormat\"]: The updated data format, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([data_format_name, data_format_mime_type, data_format_info]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n\n        current_id = self.id\n        data_format = DataFormatModel.get(current_id)\n        if not data_format:\n            print(f\"Data format with ID {current_id} does not exist.\")\n            return None\n\n        data_format = DataFormatModel.update(\n            data_format,\n            data_format_name=data_format_name,\n            data_format_mime_type=data_format_mime_type,\n            data_format_info=data_format_info,\n        )\n        instance = self.model_validate(data_format)\n        self.refresh() # Refresh self with updated data\n        return instance # Return the validated instance\n    except Exception as e:\n        print(f\"Error updating data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/","title":"Data Types API","text":""},{"location":"api/data_types/#description","title":"Description","text":"<p>A data type defines the type of data that is emitted and stored by the Sensor. A data type can be associated with multiple Data Formats.</p> <p>The following data types are pre-defined, along with their <code>data_type_id</code>:</p> Data Type <code>data_type_id</code> Default 0 RGB 1 NIR 2 Thermal 3 Multispectral 4 Weather 5 GPS 6 Calibration 7 Depth 8 IMU 9 Disparity 10 Confidence 11"},{"location":"api/data_types/#module","title":"Module","text":"<p>This module defines the DataType class, which represents a data type for categorizing and describing data.</p> <p>It includes methods for creating, retrieving, updating, and deleting data types, as well as methods for checking existence, searching, and managing associations with data formats.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a data type with the given name exists.</li> <li><code>create</code>: Create a new data type.</li> <li><code>get</code>: Retrieve a data type by its name.</li> <li><code>get_by_id</code>: Retrieve a data type by its ID.</li> <li><code>get_all</code>: Retrieve all data types.</li> <li><code>search</code>: Search for data types based on various criteria.</li> <li><code>update</code>: Update the details of a data type.</li> <li><code>delete</code>: Delete a data type.</li> <li><code>refresh</code>: Refresh the data type's data from the database.</li> <li><code>get_info</code>: Get the additional information of the data type.</li> <li><code>set_info</code>: Set the additional information of the data type.</li> <li><code>get_associated_data_formats</code>: Get all data formats associated with the data type.</li> <li><code>associate_data_format</code>: Associate the data type with a data format.</li> <li><code>unassociate_data_format</code>: Unassociate the data type from a data format.</li> <li><code>belongs_to_data_format</code>: Check if the data type is associated with a specific data format.</li> <li><code>add_new_data_format</code>: Create and associate a new data format with the data type.</li> </ul>"},{"location":"api/data_types/#gemini.api.data_type.DataType","title":"<code>DataType</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a data type for categorizing and describing data.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the data type.</p> <code>data_type_name</code> <code>str</code> <p>The name of the data type (e.g., \"Temperature\", \"Yield\").</p> <code>data_type_info</code> <code>Optional[dict]</code> <p>Additional information about the data type.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>class DataType(APIBase):\n    \"\"\"\n    Represents a data type for categorizing and describing data.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the data type.\n        data_type_name (str): The name of the data type (e.g., \"Temperature\", \"Yield\").\n        data_type_info (Optional[dict]): Additional information about the data type.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"data_type_id\"))\n\n    data_type_name: str\n    data_type_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the DataType object.\"\"\"\n        return f\"DataType(data_type_name={self.data_type_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the DataType object.\"\"\"\n        return f\"DataType(data_type_name={self.data_type_name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        data_type_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a data type with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; DataType.exists(\"Temperature\")\n            True\n\n        Args:\n            data_type_name (str): The name of the data type.\n        Returns:\n            bool: True if the data type exists, False otherwise.\n        \"\"\"\n        try:\n            exists = DataTypeModel.exists(data_type_name=data_type_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of data type: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        data_type_name: str,\n        data_type_info: dict = {},\n    ) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Create a new data type. If a data type with the same name already exists, it will return that instance.\n\n        Examples:\n            &gt;&gt;&gt; DataType.create(\"Temperature\", {\"unit\": \"Celsius\"})\n            DataType(data_type_name=\"Temperature\", id=...)\n\n        Args:\n            data_type_name (str): The name of the data type.\n            data_type_info (dict, optional): Additional information about the data type. Defaults to {{}}.\n        Returns:\n            Optional[\"DataType\"]: The created data type, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DataTypeModel.get_or_create(\n                data_type_name=data_type_name,\n                data_type_info=data_type_info,\n            )\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error creating data type: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, data_type_name: str) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Retrieve a data type by its name.\n\n        Examples:\n            &gt;&gt;&gt; DataType.get(\"Temperature\")\n            DataType(data_type_name=\"Temperature\", id=...)\n\n        Args:\n            data_type_name (str): The name of the data type.\n        Returns:\n            Optional[\"DataType\"]: The data type, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DataTypeModel.get_by_parameters(data_type_name=data_type_name)\n            if not db_instance:\n                print(f\"Data type with name {data_type_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting data type: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Retrieve a data type by its ID.\n\n        Examples:\n            &gt;&gt;&gt; DataType.get_by_id(...)  \n            DataType(data_type_name=\"Temperature\", id=...)\n\n        Args:\n            id (UUID | int | str): The ID of the data type.\n        Returns:\n            Optional[\"DataType\"]: The data type, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DataTypeModel.get(id)\n            if not db_instance:\n                print(f\"Data type with ID {id} does not exist.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting data type by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"DataType\"]]:\n        \"\"\"\n        Retrieve all data types.\n\n        Examples:\n            &gt;&gt;&gt; DataType.get_all()\n            [DataType(data_type_name=\"Temperature\", id=...), DataType(data_type_name=\"Yield\", id=...)]\n\n\n        Returns:\n            Optional[List[\"DataType\"]]: A list of all data types, or None if an error occurred.\n        \"\"\"\n        try:\n            instances = DataTypeModel.all()\n            if not instances or len(instances) == 0:\n                print(\"No data types found.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error getting all data types: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        data_type_name: str = None,\n        data_type_info: dict = None\n    ) -&gt; Optional[List[\"DataType\"]]:\n        \"\"\"\n        Search for data types based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; DataType.search(data_type_name=\"Temperature\")\n            [DataType(data_type_name=\"Temperature\", id=...)]\n\n        Args:\n            data_type_name (str, optional): The name of the data type. Defaults to None.\n            data_type_info (dict, optional): Additional information about the data type. Defaults to None.\n        Returns:\n            Optional[List[\"DataType\"]]: A list of matching data types, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([data_type_name, data_type_info]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n\n            instances = DataTypeModel.search(\n                data_type_name=data_type_name,\n                data_type_info=data_type_info\n            )\n            if not instances or len(instances) == 0:\n                print(\"No data types found with the provided search parameters.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error searching data types: {e}\")\n            return None\n\n    def update(\n        self,\n        data_type_name: str = None,\n        data_type_info: dict = None,\n    ) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Update the details of the data type.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; updated_data_type = data_type.update(data_type_name=\"New Temperature\", data_type_info={\"unit\": \"Fahrenheit\"})\n            &gt;&gt;&gt; print(updated_data_type)\n            DataType(data_type_name=\"New Temperature\", id=...)\n\n        Args:\n            data_type_name (str, optional): The new name of the data type. Defaults to None.\n            data_type_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[\"DataType\"]: The updated data type, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([data_type_name, data_type_info]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n\n            current_id = self.id\n            data_type = DataTypeModel.get(current_id)\n            if not data_type:\n                print(f\"Data type with ID {current_id} does not exist.\")\n                return None\n\n            data_type = DataTypeModel.update(\n                data_type,\n                data_type_name=data_type_name,\n                data_type_info=data_type_info\n            )\n            instance = self.model_validate(data_type)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error updating data type: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the data type.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; success = data_type.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the data type was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            data_type = DataTypeModel.get(current_id)\n            if not data_type:\n                print(f\"Data type with ID {current_id} does not exist.\")\n                return False\n            DataTypeModel.delete(data_type)\n            return True\n        except Exception as e:\n            print(f\"Error deleting data type: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Refresh the data type's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; refreshed_data_type = data_type.refresh()\n            &gt;&gt;&gt; print(refreshed_data_type)\n            DataType(data_type_name=\"Temperature\", id=...)\n\n        Returns:\n            Optional[\"DataType\"]: The refreshed data type, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DataTypeModel.get(self.id)\n            if not db_instance:\n                print(f\"Data type with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing data type: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the data type.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; info = data_type.get_info()\n            &gt;&gt;&gt; print(info)\n            {\"unit\": \"Celsius\"}\n\n        Returns:\n            Optional[dict]: The data type's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            data_type = DataTypeModel.get(current_id)\n            if not data_type:\n                print(f\"Data type with ID {current_id} does not exist.\")\n                return None\n            data_type_info = data_type.data_type_info\n            if not data_type_info:\n                print(\"DataType info is empty.\")\n                return None\n            return data_type_info\n        except Exception as e:\n            print(f\"Error getting data type info: {e}\")\n            return None\n\n    def set_info(self, data_type_info: dict) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Set the additional information of the data type.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; updated_data_type = data_type.set_info({\"unit\": \"Fahrenheit\"})\n            &gt;&gt;&gt; print(updated_data_type.data_type_info)\n            {\"unit\": \"Fahrenheit\"}\n\n        Args:\n            data_type_info (dict): The new information to set.\n        Returns:\n            Optional[\"DataType\"]: The updated data type, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            data_type = DataTypeModel.get(current_id)\n            if not data_type:\n                print(f\"Data type with ID {current_id} does not exist.\")\n                return None\n            data_type = DataTypeModel.update(\n                data_type,\n                data_type_info=data_type_info,\n            )\n            instance = self.model_validate(data_type)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error setting data type info: {e}\")\n            return None\n\n    def get_associated_data_formats(self) -&gt; Optional[List[\"DataFormat\"]]:\n        \"\"\"\n        Get all data formats associated with the data type.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; data_formats = data_type.get_associated_data_formats()\n            &gt;&gt;&gt; for df in data_formats:\n            ...     print(df)\n            DataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n            DataFormat(data_format_name=\"JSON\", data_format_mime_type=\"application/json\", id=...)\n\n\n        Returns:\n            Optional[List[\"DataFormat\"]]: A list of associated data formats, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.data_format import DataFormat\n            current_id = self.id\n            data_type_formats = DataTypeFormatsViewModel.search(data_type_id=current_id)\n            if not data_type_formats or len(data_type_formats) == 0:\n                print(f\"No associated data formats found for data type ID {current_id}.\")\n                return None\n            data_formats = [DataFormat.model_validate(df) for df in data_type_formats]\n            return data_formats\n        except Exception as e:\n            print(f\"Error getting associated data formats: {e}\")\n            return None\n\n    def associate_data_format(self, data_format_name: str) -&gt; Optional[\"DataType\"]:\n        \"\"\"\n        Associate the data type with a data format.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; associated_data_format = data_type.associate_data_format(\"CSV\")\n            &gt;&gt;&gt; print(associated_data_format)\n            DataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n\n        Args:\n            data_format_name (str): The name of the data format to associate.\n        Returns:\n            Optional[\"DataType\"]: The associated data format, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.data_format import DataFormat\n            data_format = DataFormat.get(data_format_name=data_format_name)\n            if not data_format:\n                print(f\"Data format {data_format_name} does not exist.\")\n                return None\n            existing_association = DataTypeFormatModel.get_by_parameters(\n                data_type_id=self.id,\n                data_format_id=data_format.id\n            )\n            if existing_association:\n                print(f\"Data format {data_format_name} is already associated with data type ID {self.id}.\")\n                return data_format\n            new_association = DataTypeFormatModel.get_or_create(\n                data_type_id=self.id,\n                data_format_id=data_format.id\n            )\n            if not new_association:\n                print(f\"Failed to associate data format {data_format_name} with data type ID {self.id}.\")\n                return None\n            self.refresh()\n            return data_format\n        except Exception as e:\n            print(f\"Error associating data format: {e}\")\n            return None\n\n    def unassociate_data_format(self, data_format_name: str) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Unassociate the data type from a data format.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; unassociated_data_format = data_type.unassociate_data_format(\"CSV\")\n            &gt;&gt;&gt; print(unassociated_data_format)\n            DataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n\n        Args:\n            data_format_name (str): The name of the data format to unassociate.\n        Returns:\n            Optional[\"DataFormat\"]: The unassociated data format, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.data_format import DataFormat\n            data_format = DataFormat.get(data_format_name=data_format_name)\n            if not data_format:\n                print(f\"Data format {data_format_name} does not exist.\")\n                return None\n            existing_association = DataTypeFormatModel.get_by_parameters(\n                data_type_id=self.id,\n                data_format_id=data_format.id\n            )\n            if not existing_association:\n                print(f\"Data format {data_format_name} is not associated with data type ID {self.id}.\")\n                return None\n            is_deleted = DataTypeFormatModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate data format {data_format_name} from data type ID {self.id}.\")\n                return None\n            self.refresh()\n            return data_format\n        except Exception as e:\n            print(f\"Error unassociating data format: {e}\")\n            return None\n\n    def belongs_to_data_format(self, data_format_name: str) -&gt; bool:\n        \"\"\"\n        Check if the data type is associated with a specific data format.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; is_associated = data_type.belongs_to_data_format(\"CSV\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            data_format_name (str): The name of the data format to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.data_format import DataFormat\n            data_format = DataFormat.get(data_format_name=data_format_name)\n            if not data_format:\n                print(f\"Data format {data_format_name} does not exist.\")\n                return False\n            association_exists = DataTypeFormatModel.exists(\n                data_type_id=self.id,\n                data_format_id=data_format.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if data type belongs to data format: {e}\")\n            return False\n\n    def add_new_data_format(\n        self,\n        data_format_name: str,\n        data_format_mime_type: str = None,\n        data_format_info: dict = {}\n    ) -&gt; Optional[\"DataFormat\"]:\n        \"\"\"\n        Create and associate a new data format with the data type. If the data format already exists,\n        it will associate the existing data format with the data type.\n\n        Examples:\n            &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n            &gt;&gt;&gt; new_data_format = data_type.add_new_data_format(\"NewFormat\", \"application/newformat\", {\"description\": \"A new format\"})\n            &gt;&gt;&gt; print(new_data_format)\n            DataFormat(data_format_name=\"NewFormat\", id=5, data_format_mime_type=\"application/newformat\", id=...)\n\n        Args:\n            data_format_name (str): The name of the new data format.\n            data_format_mime_type (str, optional): The MIME type of the data format. Defaults to None.\n            data_format_info (dict, optional): Additional information about the data format. Defaults to {{}}.\n        Returns:\n            Optional[\"DataFormat\"]: The created and associated data format, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.data_format import DataFormat\n            new_data_format = DataFormat.create(\n                data_format_name=data_format_name,\n                data_format_mime_type=data_format_mime_type,\n                data_format_info=data_format_info\n            )\n            if not new_data_format:\n                print(f\"Failed to create new data format {data_format_name}.\")\n                return None\n            new_association = DataTypeFormatModel.get_or_create(\n                data_type_id=self.id,\n                data_format_id=new_data_format.id\n            )\n            if not new_association:\n                print(f\"Failed to associate new data format {data_format_name} with data type ID {self.id}.\")\n                return None\n            self.refresh()\n            return new_data_format\n        except Exception as e:\n            print(f\"Error adding new data format: {e}\")\n            return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the DataType object.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the DataType object.\"\"\"\n    return f\"DataType(data_type_name={self.data_type_name}, id={self.id})\"\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the DataType object.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the DataType object.\"\"\"\n    return f\"DataType(data_type_name={self.data_type_name}, id={self.id})\"\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.add_new_data_format","title":"<code>add_new_data_format(data_format_name, data_format_mime_type=None, data_format_info={})</code>","text":"<p>Create and associate a new data format with the data type. If the data format already exists, it will associate the existing data format with the data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; new_data_format = data_type.add_new_data_format(\"NewFormat\", \"application/newformat\", {\"description\": \"A new format\"})\n&gt;&gt;&gt; print(new_data_format)\nDataFormat(data_format_name=\"NewFormat\", id=5, data_format_mime_type=\"application/newformat\", id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the new data format.</p> required <code>data_format_mime_type</code> <code>str</code> <p>The MIME type of the data format. Defaults to None.</p> <code>None</code> <code>data_format_info</code> <code>dict</code> <p>Additional information about the data format. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"DataFormat\"]: The created and associated data format, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def add_new_data_format(\n    self,\n    data_format_name: str,\n    data_format_mime_type: str = None,\n    data_format_info: dict = {}\n) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Create and associate a new data format with the data type. If the data format already exists,\n    it will associate the existing data format with the data type.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; new_data_format = data_type.add_new_data_format(\"NewFormat\", \"application/newformat\", {\"description\": \"A new format\"})\n        &gt;&gt;&gt; print(new_data_format)\n        DataFormat(data_format_name=\"NewFormat\", id=5, data_format_mime_type=\"application/newformat\", id=...)\n\n    Args:\n        data_format_name (str): The name of the new data format.\n        data_format_mime_type (str, optional): The MIME type of the data format. Defaults to None.\n        data_format_info (dict, optional): Additional information about the data format. Defaults to {{}}.\n    Returns:\n        Optional[\"DataFormat\"]: The created and associated data format, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.data_format import DataFormat\n        new_data_format = DataFormat.create(\n            data_format_name=data_format_name,\n            data_format_mime_type=data_format_mime_type,\n            data_format_info=data_format_info\n        )\n        if not new_data_format:\n            print(f\"Failed to create new data format {data_format_name}.\")\n            return None\n        new_association = DataTypeFormatModel.get_or_create(\n            data_type_id=self.id,\n            data_format_id=new_data_format.id\n        )\n        if not new_association:\n            print(f\"Failed to associate new data format {data_format_name} with data type ID {self.id}.\")\n            return None\n        self.refresh()\n        return new_data_format\n    except Exception as e:\n        print(f\"Error adding new data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.associate_data_format","title":"<code>associate_data_format(data_format_name)</code>","text":"<p>Associate the data type with a data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; associated_data_format = data_type.associate_data_format(\"CSV\")\n&gt;&gt;&gt; print(associated_data_format)\nDataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the data format to associate.</p> required <p>Returns:     Optional[\"DataType\"]: The associated data format, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def associate_data_format(self, data_format_name: str) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Associate the data type with a data format.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; associated_data_format = data_type.associate_data_format(\"CSV\")\n        &gt;&gt;&gt; print(associated_data_format)\n        DataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n\n    Args:\n        data_format_name (str): The name of the data format to associate.\n    Returns:\n        Optional[\"DataType\"]: The associated data format, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.data_format import DataFormat\n        data_format = DataFormat.get(data_format_name=data_format_name)\n        if not data_format:\n            print(f\"Data format {data_format_name} does not exist.\")\n            return None\n        existing_association = DataTypeFormatModel.get_by_parameters(\n            data_type_id=self.id,\n            data_format_id=data_format.id\n        )\n        if existing_association:\n            print(f\"Data format {data_format_name} is already associated with data type ID {self.id}.\")\n            return data_format\n        new_association = DataTypeFormatModel.get_or_create(\n            data_type_id=self.id,\n            data_format_id=data_format.id\n        )\n        if not new_association:\n            print(f\"Failed to associate data format {data_format_name} with data type ID {self.id}.\")\n            return None\n        self.refresh()\n        return data_format\n    except Exception as e:\n        print(f\"Error associating data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.belongs_to_data_format","title":"<code>belongs_to_data_format(data_format_name)</code>","text":"<p>Check if the data type is associated with a specific data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; is_associated = data_type.belongs_to_data_format(\"CSV\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the data format to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def belongs_to_data_format(self, data_format_name: str) -&gt; bool:\n    \"\"\"\n    Check if the data type is associated with a specific data format.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; is_associated = data_type.belongs_to_data_format(\"CSV\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        data_format_name (str): The name of the data format to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.data_format import DataFormat\n        data_format = DataFormat.get(data_format_name=data_format_name)\n        if not data_format:\n            print(f\"Data format {data_format_name} does not exist.\")\n            return False\n        association_exists = DataTypeFormatModel.exists(\n            data_type_id=self.id,\n            data_format_id=data_format.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if data type belongs to data format: {e}\")\n        return False\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.create","title":"<code>create(data_type_name, data_type_info={})</code>  <code>classmethod</code>","text":"<p>Create a new data type. If a data type with the same name already exists, it will return that instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DataType.create(\"Temperature\", {\"unit\": \"Celsius\"})\nDataType(data_type_name=\"Temperature\", id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The name of the data type.</p> required <code>data_type_info</code> <code>dict</code> <p>Additional information about the data type. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"DataType\"]: The created data type, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    data_type_name: str,\n    data_type_info: dict = {},\n) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Create a new data type. If a data type with the same name already exists, it will return that instance.\n\n    Examples:\n        &gt;&gt;&gt; DataType.create(\"Temperature\", {\"unit\": \"Celsius\"})\n        DataType(data_type_name=\"Temperature\", id=...)\n\n    Args:\n        data_type_name (str): The name of the data type.\n        data_type_info (dict, optional): Additional information about the data type. Defaults to {{}}.\n    Returns:\n        Optional[\"DataType\"]: The created data type, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DataTypeModel.get_or_create(\n            data_type_name=data_type_name,\n            data_type_info=data_type_info,\n        )\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error creating data type: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.delete","title":"<code>delete()</code>","text":"<p>Delete the data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; success = data_type.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the data type was deleted, False otherwise.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the data type.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; success = data_type.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the data type was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        data_type = DataTypeModel.get(current_id)\n        if not data_type:\n            print(f\"Data type with ID {current_id} does not exist.\")\n            return False\n        DataTypeModel.delete(data_type)\n        return True\n    except Exception as e:\n        print(f\"Error deleting data type: {e}\")\n        return False\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.exists","title":"<code>exists(data_type_name)</code>  <code>classmethod</code>","text":"<p>Check if a data type with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DataType.exists(\"Temperature\")\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The name of the data type.</p> required <p>Returns:     bool: True if the data type exists, False otherwise.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    data_type_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a data type with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; DataType.exists(\"Temperature\")\n        True\n\n    Args:\n        data_type_name (str): The name of the data type.\n    Returns:\n        bool: True if the data type exists, False otherwise.\n    \"\"\"\n    try:\n        exists = DataTypeModel.exists(data_type_name=data_type_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of data type: {e}\")\n        return False\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.get","title":"<code>get(data_type_name)</code>  <code>classmethod</code>","text":"<p>Retrieve a data type by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DataType.get(\"Temperature\")\nDataType(data_type_name=\"Temperature\", id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The name of the data type.</p> required <p>Returns:     Optional[\"DataType\"]: The data type, or None if not found.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>@classmethod\ndef get(cls, data_type_name: str) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Retrieve a data type by its name.\n\n    Examples:\n        &gt;&gt;&gt; DataType.get(\"Temperature\")\n        DataType(data_type_name=\"Temperature\", id=...)\n\n    Args:\n        data_type_name (str): The name of the data type.\n    Returns:\n        Optional[\"DataType\"]: The data type, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DataTypeModel.get_by_parameters(data_type_name=data_type_name)\n        if not db_instance:\n            print(f\"Data type with name {data_type_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting data type: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all data types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DataType.get_all()\n[DataType(data_type_name=\"Temperature\", id=...), DataType(data_type_name=\"Yield\", id=...)]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[DataType]]</code> <p>Optional[List[\"DataType\"]]: A list of all data types, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"DataType\"]]:\n    \"\"\"\n    Retrieve all data types.\n\n    Examples:\n        &gt;&gt;&gt; DataType.get_all()\n        [DataType(data_type_name=\"Temperature\", id=...), DataType(data_type_name=\"Yield\", id=...)]\n\n\n    Returns:\n        Optional[List[\"DataType\"]]: A list of all data types, or None if an error occurred.\n    \"\"\"\n    try:\n        instances = DataTypeModel.all()\n        if not instances or len(instances) == 0:\n            print(\"No data types found.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error getting all data types: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.get_associated_data_formats","title":"<code>get_associated_data_formats()</code>","text":"<p>Get all data formats associated with the data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; data_formats = data_type.get_associated_data_formats()\n&gt;&gt;&gt; for df in data_formats:\n...     print(df)\nDataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\nDataFormat(data_format_name=\"JSON\", data_format_mime_type=\"application/json\", id=...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[DataFormat]]</code> <p>Optional[List[\"DataFormat\"]]: A list of associated data formats, or None if not found.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def get_associated_data_formats(self) -&gt; Optional[List[\"DataFormat\"]]:\n    \"\"\"\n    Get all data formats associated with the data type.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; data_formats = data_type.get_associated_data_formats()\n        &gt;&gt;&gt; for df in data_formats:\n        ...     print(df)\n        DataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n        DataFormat(data_format_name=\"JSON\", data_format_mime_type=\"application/json\", id=...)\n\n\n    Returns:\n        Optional[List[\"DataFormat\"]]: A list of associated data formats, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.data_format import DataFormat\n        current_id = self.id\n        data_type_formats = DataTypeFormatsViewModel.search(data_type_id=current_id)\n        if not data_type_formats or len(data_type_formats) == 0:\n            print(f\"No associated data formats found for data type ID {current_id}.\")\n            return None\n        data_formats = [DataFormat.model_validate(df) for df in data_type_formats]\n        return data_formats\n    except Exception as e:\n        print(f\"Error getting associated data formats: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a data type by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DataType.get_by_id(...)  \nDataType(data_type_name=\"Temperature\", id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the data type.</p> required <p>Returns:     Optional[\"DataType\"]: The data type, or None if not found.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Retrieve a data type by its ID.\n\n    Examples:\n        &gt;&gt;&gt; DataType.get_by_id(...)  \n        DataType(data_type_name=\"Temperature\", id=...)\n\n    Args:\n        id (UUID | int | str): The ID of the data type.\n    Returns:\n        Optional[\"DataType\"]: The data type, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DataTypeModel.get(id)\n        if not db_instance:\n            print(f\"Data type with ID {id} does not exist.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting data type by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; info = data_type.get_info()\n&gt;&gt;&gt; print(info)\n{\"unit\": \"Celsius\"}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The data type's info, or None if not found.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the data type.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; info = data_type.get_info()\n        &gt;&gt;&gt; print(info)\n        {\"unit\": \"Celsius\"}\n\n    Returns:\n        Optional[dict]: The data type's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        data_type = DataTypeModel.get(current_id)\n        if not data_type:\n            print(f\"Data type with ID {current_id} does not exist.\")\n            return None\n        data_type_info = data_type.data_type_info\n        if not data_type_info:\n            print(\"DataType info is empty.\")\n            return None\n        return data_type_info\n    except Exception as e:\n        print(f\"Error getting data type info: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the data type's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; refreshed_data_type = data_type.refresh()\n&gt;&gt;&gt; print(refreshed_data_type)\nDataType(data_type_name=\"Temperature\", id=...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[DataType]</code> <p>Optional[\"DataType\"]: The refreshed data type, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def refresh(self) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Refresh the data type's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; refreshed_data_type = data_type.refresh()\n        &gt;&gt;&gt; print(refreshed_data_type)\n        DataType(data_type_name=\"Temperature\", id=...)\n\n    Returns:\n        Optional[\"DataType\"]: The refreshed data type, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DataTypeModel.get(self.id)\n        if not db_instance:\n            print(f\"Data type with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing data type: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.search","title":"<code>search(data_type_name=None, data_type_info=None)</code>  <code>classmethod</code>","text":"<p>Search for data types based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DataType.search(data_type_name=\"Temperature\")\n[DataType(data_type_name=\"Temperature\", id=...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The name of the data type. Defaults to None.</p> <code>None</code> <code>data_type_info</code> <code>dict</code> <p>Additional information about the data type. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[\"DataType\"]]: A list of matching data types, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    data_type_name: str = None,\n    data_type_info: dict = None\n) -&gt; Optional[List[\"DataType\"]]:\n    \"\"\"\n    Search for data types based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; DataType.search(data_type_name=\"Temperature\")\n        [DataType(data_type_name=\"Temperature\", id=...)]\n\n    Args:\n        data_type_name (str, optional): The name of the data type. Defaults to None.\n        data_type_info (dict, optional): Additional information about the data type. Defaults to None.\n    Returns:\n        Optional[List[\"DataType\"]]: A list of matching data types, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([data_type_name, data_type_info]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n\n        instances = DataTypeModel.search(\n            data_type_name=data_type_name,\n            data_type_info=data_type_info\n        )\n        if not instances or len(instances) == 0:\n            print(\"No data types found with the provided search parameters.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error searching data types: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.set_info","title":"<code>set_info(data_type_info)</code>","text":"<p>Set the additional information of the data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; updated_data_type = data_type.set_info({\"unit\": \"Fahrenheit\"})\n&gt;&gt;&gt; print(updated_data_type.data_type_info)\n{\"unit\": \"Fahrenheit\"}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[\"DataType\"]: The updated data type, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def set_info(self, data_type_info: dict) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Set the additional information of the data type.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; updated_data_type = data_type.set_info({\"unit\": \"Fahrenheit\"})\n        &gt;&gt;&gt; print(updated_data_type.data_type_info)\n        {\"unit\": \"Fahrenheit\"}\n\n    Args:\n        data_type_info (dict): The new information to set.\n    Returns:\n        Optional[\"DataType\"]: The updated data type, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        data_type = DataTypeModel.get(current_id)\n        if not data_type:\n            print(f\"Data type with ID {current_id} does not exist.\")\n            return None\n        data_type = DataTypeModel.update(\n            data_type,\n            data_type_info=data_type_info,\n        )\n        instance = self.model_validate(data_type)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error setting data type info: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.unassociate_data_format","title":"<code>unassociate_data_format(data_format_name)</code>","text":"<p>Unassociate the data type from a data format.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; unassociated_data_format = data_type.unassociate_data_format(\"CSV\")\n&gt;&gt;&gt; print(unassociated_data_format)\nDataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_format_name</code> <code>str</code> <p>The name of the data format to unassociate.</p> required <p>Returns:     Optional[\"DataFormat\"]: The unassociated data format, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def unassociate_data_format(self, data_format_name: str) -&gt; Optional[\"DataFormat\"]:\n    \"\"\"\n    Unassociate the data type from a data format.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; unassociated_data_format = data_type.unassociate_data_format(\"CSV\")\n        &gt;&gt;&gt; print(unassociated_data_format)\n        DataFormat(data_format_name=\"CSV\", data_format_mime_type=\"text/csv\", id=...)\n\n    Args:\n        data_format_name (str): The name of the data format to unassociate.\n    Returns:\n        Optional[\"DataFormat\"]: The unassociated data format, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.data_format import DataFormat\n        data_format = DataFormat.get(data_format_name=data_format_name)\n        if not data_format:\n            print(f\"Data format {data_format_name} does not exist.\")\n            return None\n        existing_association = DataTypeFormatModel.get_by_parameters(\n            data_type_id=self.id,\n            data_format_id=data_format.id\n        )\n        if not existing_association:\n            print(f\"Data format {data_format_name} is not associated with data type ID {self.id}.\")\n            return None\n        is_deleted = DataTypeFormatModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate data format {data_format_name} from data type ID {self.id}.\")\n            return None\n        self.refresh()\n        return data_format\n    except Exception as e:\n        print(f\"Error unassociating data format: {e}\")\n        return None\n</code></pre>"},{"location":"api/data_types/#gemini.api.data_type.DataType.update","title":"<code>update(data_type_name=None, data_type_info=None)</code>","text":"<p>Update the details of the data type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n&gt;&gt;&gt; updated_data_type = data_type.update(data_type_name=\"New Temperature\", data_type_info={\"unit\": \"Fahrenheit\"})\n&gt;&gt;&gt; print(updated_data_type)\nDataType(data_type_name=\"New Temperature\", id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data_type_name</code> <code>str</code> <p>The new name of the data type. Defaults to None.</p> <code>None</code> <code>data_type_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"DataType\"]: The updated data type, or None if an error occurred.</p> Source code in <code>gemini/api/data_type.py</code> <pre><code>def update(\n    self,\n    data_type_name: str = None,\n    data_type_info: dict = None,\n) -&gt; Optional[\"DataType\"]:\n    \"\"\"\n    Update the details of the data type.\n\n    Examples:\n        &gt;&gt;&gt; data_type = DataType.get(\"Temperature\")\n        &gt;&gt;&gt; updated_data_type = data_type.update(data_type_name=\"New Temperature\", data_type_info={\"unit\": \"Fahrenheit\"})\n        &gt;&gt;&gt; print(updated_data_type)\n        DataType(data_type_name=\"New Temperature\", id=...)\n\n    Args:\n        data_type_name (str, optional): The new name of the data type. Defaults to None.\n        data_type_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[\"DataType\"]: The updated data type, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([data_type_name, data_type_info]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n\n        current_id = self.id\n        data_type = DataTypeModel.get(current_id)\n        if not data_type:\n            print(f\"Data type with ID {current_id} does not exist.\")\n            return None\n\n        data_type = DataTypeModel.update(\n            data_type,\n            data_type_name=data_type_name,\n            data_type_info=data_type_info\n        )\n        instance = self.model_validate(data_type)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error updating data type: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/","title":"Dataset Records API","text":""},{"location":"api/dataset_records/#description","title":"Description","text":"<p>A dataset record is a record that belongs to a specific Dataset, a specific Experiment, Season and Site.</p> <p>It is defined by the following properties: | Property        | Type                 | Description                               | |-----------------|----------------------|-------------------------------------------| | <code>id</code>            | <code>UUID</code>               | The unique identifier of the dataset record. | | <code>timestamp</code>     | <code>datetime</code>           | The timestamp of the record.              | | <code>collection_date</code> | <code>date</code>               | The collection date of the record.        | | <code>dataset_id</code>    | <code>UUID</code>               | The ID of the associated dataset.         | | <code>dataset_name</code>  | <code>string</code>             | The name of the associated dataset.       | | <code>dataset_data</code>  | <code>dict</code>               | The data content of the record.           | | <code>experiment_name</code> | <code>string</code>             | The name of the associated experiment.    | | <code>experiment_id</code> | <code>UUID</code>               | The ID of the associated experiment.      | | <code>season_name</code>   | <code>string</code>             | The name of the associated season.        | | <code>season_id</code>     | <code>UUID</code>               | The ID of the associated season.          | | <code>site_name</code>     | <code>string</code>             | The name of the associated site.          | | <code>site_id</code>       | <code>UUID</code>               | The ID of the associated site.            | | <code>record_file</code>   | <code>string</code>             | The file path for the record data in the object storage. | | <code>record_info</code>   | <code>dict</code>               | Additional information about the record.  |</p> <p>A dataset record is uniquely identified within a dataset by its <code>timestamp</code>, <code>dataset_name</code>, <code>experiment_name</code>, <code>season_name</code>, and <code>site_name</code>. There will be no two dataset records with the same timestamp and belonging to the same dataset, experiment, season and site.</p>"},{"location":"api/dataset_records/#module","title":"Module","text":"<p>This module defines the DatasetRecord class, which represents a record within a dataset, including metadata and associations to experiments, seasons, and sites.</p> <p>It includes methods for creating, retrieving, updating, and deleting dataset records, as well as methods for checking existence, searching, and managing file handling for records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a dataset record with the given parameters exists.</li> <li><code>create</code>: Create a new dataset record.</li> <li><code>get_by_id</code>: Retrieve a dataset record by its ID.</li> <li><code>get_all</code>: Retrieve all dataset records.</li> <li><code>search</code>: Search for dataset records based on various criteria.</li> <li><code>update</code>: Update the details of a dataset record.</li> <li><code>delete</code>: Delete a dataset record.</li> <li><code>refresh</code>: Refresh the dataset record's data from the database.</li> <li><code>get_info</code>: Get the additional information of the dataset record.</li> <li><code>set_info</code>: Set the additional information of the dataset record.</li> <li>File handling methods from FileHandlerMixin for managing record files.</li> </ul>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord","title":"<code>DatasetRecord</code>","text":"<p>               Bases: <code>APIBase</code>, <code>FileHandlerMixin</code></p> <p>Represents a record within a dataset, including metadata and associations to experiments, seasons, and sites.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the dataset record.</p> <code>timestamp</code> <code>Optional[datetime]</code> <p>The timestamp of the record.</p> <code>collection_date</code> <code>Optional[date]</code> <p>The collection date of the record.</p> <code>dataset_id</code> <code>Optional[ID]</code> <p>The ID of the associated dataset.</p> <code>dataset_name</code> <code>Optional[str]</code> <p>The name of the associated dataset.</p> <code>dataset_data</code> <code>Optional[dict]</code> <p>The data content of the record.</p> <code>experiment_name</code> <code>Optional[str]</code> <p>The name of the associated experiment.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> <code>season_name</code> <code>Optional[str]</code> <p>The name of the associated season.</p> <code>season_id</code> <code>Optional[ID]</code> <p>The ID of the associated season.</p> <code>site_name</code> <code>Optional[str]</code> <p>The name of the associated site.</p> <code>site_id</code> <code>Optional[ID]</code> <p>The ID of the associated site.</p> <code>record_file</code> <code>Optional[str]</code> <p>The file path for the record data.</p> <code>record_info</code> <code>Optional[dict]</code> <p>Additional information about the record.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>class DatasetRecord(APIBase, FileHandlerMixin):\n    \"\"\"\n    Represents a record within a dataset, including metadata and associations to experiments, seasons, and sites.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the dataset record.\n        timestamp (Optional[datetime]): The timestamp of the record.\n        collection_date (Optional[date]): The collection date of the record.\n        dataset_id (Optional[ID]): The ID of the associated dataset.\n        dataset_name (Optional[str]): The name of the associated dataset.\n        dataset_data (Optional[dict]): The data content of the record.\n        experiment_name (Optional[str]): The name of the associated experiment.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n        season_name (Optional[str]): The name of the associated season.\n        season_id (Optional[ID]): The ID of the associated season.\n        site_name (Optional[str]): The name of the associated site.\n        site_id (Optional[ID]): The ID of the associated site.\n        record_file (Optional[str]): The file path for the record data.\n        record_info (Optional[dict]): Additional information about the record.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"dataset_record_id\"))\n\n    timestamp: Optional[datetime] = None\n    collection_date: Optional[date] = None\n    dataset_id: Optional[ID] = None\n    dataset_name: Optional[str] = None\n    dataset_data: Optional[dict] = None\n    experiment_name: Optional[str] = None\n    experiment_id: Optional[ID] = None\n    season_name: Optional[str] = None\n    season_id: Optional[ID] = None\n    site_name: Optional[str] = None\n    site_id: Optional[ID] = None\n    record_file: Optional[str] = None\n    record_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the DatasetRecord object.\"\"\"\n        return f\"DatasetRecord(id={self.id}, timestamp={self.timestamp}, dataset_name={self.dataset_name}, dataset_data={self.dataset_data}, experiment_name={self.experiment_name}, season_name={self.season_name}, site_name={self.site_name})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the DatasetRecord object.\"\"\"\n        return f\"DatasetRecord(id={self.id}, timestamp={self.timestamp}, dataset_name={self.dataset_name}, dataset_data={self.dataset_data}, experiment_name={self.experiment_name}, season_name={self.season_name}, site_name={self.site_name})\"\n\n    @classmethod\n    def exists(\n        cls,\n        timestamp: datetime,\n        dataset_name: str,\n        experiment_name: str,\n        season_name: str,\n        site_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if a dataset record with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; DatasetRecord.exists(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\"\n            ... )\n            True\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment.\n            season_name (str): The name of the season.\n            site_name (str): The name of the site.\n        Returns:\n            bool: True if the dataset record exists, False otherwise.\n        \"\"\"\n        try:\n            exists = DatasetRecordModel.exists(\n                timestamp=timestamp,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        timestamp: datetime = datetime.now(),\n        collection_date: date = None,\n        dataset_name: str = None,\n        dataset_data: dict = {},\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n        insert_on_create: bool = True\n    ) -&gt; Optional[\"DatasetRecord\"]:\n        \"\"\"\n        Create a new dataset record.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.create(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"example_dataset\",\n            ...     dataset_data={\"key\": \"value\"},\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     record_file=\"/path/to/record/file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"},\n            ...     insert_on_create=True\n            ... )\n            &gt;&gt;&gt; print(record)\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Required.\n            dataset_data (dict, optional): The data content. Defaults to {{}}.\n            experiment_name (str, optional): The experiment name. Defaults to None.\n            site_name (str, optional): The site name. Defaults to None.\n            season_name (str, optional): The season name. Defaults to None.\n            record_file (str, optional): The file path for the record data. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n            insert_on_create (bool, optional): Whether to insert on creation. Defaults to True.\n        Returns:\n            Optional[\"DatasetRecord\"]: The created dataset record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, site_name, season_name]):\n                raise ValueError(\"At least one of experiment_name, site_name, or season_name is required.\")\n            if not dataset_name:\n                raise ValueError(\"dataset_name is required.\")\n            if not timestamp:\n                raise ValueError(\"timestamp is required.\")\n            if not collection_date:\n                collection_date = timestamp.date()\n            if not dataset_data and not record_file:\n                raise ValueError(\"Either dataset_data or record_file is required.\")\n            dataset_record = DatasetRecord(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                dataset_data=dataset_data,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                record_file=record_file,\n                record_info=record_info\n            )\n            if insert_on_create:\n                insert_success, inserted_record_ids = cls.insert([dataset_record])\n                if not insert_success:\n                    print(f\"Failed to insert DatasetRecord: {dataset_record}\")\n                    return None\n                if not inserted_record_ids or len(inserted_record_ids) == 0:\n                    print(f\"No new DatasetRecord was inserted.\")\n                    return None\n                inserted_record_id = inserted_record_ids[0]\n                dataset_record = cls.get_by_id(inserted_record_id)\n            return dataset_record\n        except Exception as e:\n            print(f\"Error creating DatasetRecord: {e}\")\n            return None\n\n\n    @classmethod\n    def insert(cls, records: List[\"DatasetRecord\"]) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a list of dataset records into the database.\n\n        Args:\n            records (List[DatasetRecord]): The list of dataset records to insert.\n        Returns:\n            tuple[bool, List[str]]: A tuple containing a boolean indicating success and a list of inserted record IDs.\n        \"\"\"\n        try:\n            if not records or len(records) == 0:\n                print(f\"No records provided to insert.\")\n                return False, []\n            records = cls.verify_records(records)\n            records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing Records for Dataset: \" + records[0].dataset_name)]\n            records_to_insert = []\n            for record in records:\n                record_dict = record.model_dump()\n                record_dict = {k: v for k, v in record_dict.items() if v is not None}\n                records_to_insert.append(record_dict)\n            print(f\"Inserting {len(records_to_insert)} records.\")\n            inserted_record_ids = DatasetRecordModel.insert_bulk('dataset_records_unique', records_to_insert)\n            print(f\"Inserted {len(inserted_record_ids)} records.\")\n            return True, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting records: {e}\")\n            return False, []\n\n    @classmethod\n    def get(\n        cls,\n        timestamp: datetime,\n        dataset_name: str,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n    ) -&gt; Optional[\"DatasetRecord\"]:\n        \"\"\"\n        Retrieve a dataset record by its parameters.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.get(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\"\n            ... )\n            &gt;&gt;&gt; record\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            Optional[\"DatasetRecord\"]: The retrieved dataset record, or None if not found.\n        \"\"\"\n        try:\n            if not timestamp:\n                print(f\"Timestamp is required to get the DatasetRecord.\")\n                return None\n            if not dataset_name:\n                print(f\"Dataset name is required to get the DatasetRecord.\")\n                return None\n            if not experiment_name and not season_name and not site_name:\n                print(f\"At least one of experiment_name, season_name, or site_name is required to get the DatasetRecord.\")\n                return None\n            dataset_record = DatasetRecordsIMMVModel.get_by_parameters(\n                timestamp=timestamp,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not dataset_record:\n                print(f\"DatasetRecord not found.\")\n                return None\n            dataset_record = cls.model_validate(dataset_record)\n            return dataset_record\n        except Exception as e:\n            print(f\"Error getting DatasetRecord: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DatasetRecord\"]:\n        \"\"\"\n        Retrieve a dataset record by its ID.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; record\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            id (UUID | int | str): The ID of the dataset record.\n        Returns:\n            Optional[\"DatasetRecord\"]: The retrieved dataset record, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DatasetRecordModel.get(id)\n            if not db_instance:\n                print(f\"DatasetRecord with id {id} not found.\")\n                return None\n            record = cls.model_validate(db_instance)\n            return record\n        except Exception as e:\n            print(f\"Error getting DatasetRecord by id: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls, limit: int = 100) -&gt; Optional[List[\"DatasetRecord\"]]:\n        \"\"\"\n        Retrieve all dataset records.\n\n        Examples:\n            &gt;&gt;&gt; records = DatasetRecord.get_all(limit=10)\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n\n        Args:\n            limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n        Returns:\n            Optional[List[\"DatasetRecord\"]]: A list of dataset records, or None if an error occurred.\n        \"\"\"\n        try:\n            records = DatasetRecordModel.all(limit=limit)\n            if not records or len(records) == 0:\n                print(f\"No DatasetRecords found.\")\n                return None\n            records = [cls.model_validate(record) for record in records]\n            return records\n        except Exception as e:\n            print(f\"Error getting all DatasetRecords: {e}\")\n            return None\n\n\n    @classmethod\n    def search(\n        cls,\n        dataset_name: str = None,\n        dataset_data: dict = None,\n        experiment_name: str = None,    \n        season_name: str = None,\n        site_name: str = None,\n        collection_date: date = None,\n        record_info: dict = None,\n    ) -&gt; Generator[\"DatasetRecord\", None, None]:\n        \"\"\"\n        Search for dataset records based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; records = DatasetRecord.search(\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     collection_date=date(2023, 10, 1),\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n\n        Args:\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            dataset_data (dict, optional): The data content. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Yields:\n            Generator[\"DatasetRecord\", None, None]: A generator of matching dataset records.\n        \"\"\"\n        try:\n            if not any([dataset_name, dataset_data, experiment_name, season_name, site_name, collection_date, record_info]):\n                raise ValueError(\"At least one parameter must be provided.\")\n            records = DatasetRecordsIMMVModel.stream(\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                collection_date=collection_date,\n                dataset_data=dataset_data,\n                record_info=record_info\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error searching DatasetRecords: {e}\")\n            yield None\n\n    @classmethod\n    def filter(\n        cls,\n        dataset_names: List[str] = None,\n        start_timestamp: datetime = None,\n        end_timestamp: datetime = None,\n        experiment_names: List[str] = None,\n        season_names: List[str] = None,\n        site_names: List[str] = None\n    ) -&gt; Generator[\"DatasetRecord\", None, None]:\n        \"\"\"\n        Filter dataset records based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; records = DatasetRecord.filter(\n            ...     dataset_names=[\"example_dataset\"],\n            ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n            ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n            ...     experiment_names=[\"example_experiment\"],\n            ...     season_names=[\"example_season\"],\n            ...     site_names=[\"example_site\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n\n        Args:\n            dataset_names (List[str], optional): The names of the datasets. Defaults to None.\n            start_timestamp (datetime, optional): The start timestamp for filtering. Defaults to None.\n            end_timestamp (datetime, optional): The end timestamp for filtering. Defaults to None.\n            experiment_names (List[str], optional): The names of the experiments. Defaults to None.\n            season_names (List[str], optional): The names of the seasons. Defaults to None.\n            site_names (List[str], optional): The names of the sites. Defaults to None.\n        Yields:\n            Generator[\"DatasetRecord\", None, None]: A generator of matching dataset records.\n        \"\"\"\n        try:\n            if not any([dataset_names, start_timestamp, end_timestamp, experiment_names, season_names, site_names]):\n                raise ValueError(\"At least one parameter must be provided.\")\n            records = DatasetRecordModel.filter_records(\n                dataset_names=dataset_names,\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error filtering DatasetRecords: {e}\")\n            yield None\n\n\n    def update(\n        self,\n        dataset_data: dict = None,\n        record_info: dict = None\n    ) -&gt; Optional[\"DatasetRecord\"]:\n        \"\"\"\n        Update the details of a dataset record.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = record.update(\n            ...     dataset_data={\"new_key\": \"new_value\"},\n            ...     record_info={\"new_info_key\": \"new_info_value\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            dataset_data (dict, optional): The new data content. Defaults to None.\n            record_info (dict, optional): The new additional info. Defaults to None.\n        Returns:\n            Optional[\"DatasetRecord\"]: The updated dataset record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([dataset_data, record_info]):\n                print(f\"At least one parameter must be provided to update the DatasetRecord.\")\n                return None\n            current_id = self.id\n            dataset_record = DatasetRecordModel.get(current_id)\n            if not dataset_record:\n                print(f\"DatasetRecord with id {current_id} not found.\")\n                return None\n            dataset_record = DatasetRecordModel.update(\n                dataset_record,\n                dataset_data=dataset_data,\n                record_info=record_info\n            )\n            dataset_record = self.model_validate(dataset_record)\n            self.refresh()\n            return dataset_record\n        except Exception as e:\n            print(f\"Error updating DatasetRecord: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete a dataset record.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; result = record.delete()\n            &gt;&gt;&gt; print(result)\n            True\n\n        Returns:\n            bool: True if the deletion was successful, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset_record = DatasetRecordModel.get(current_id)\n            if not dataset_record:\n                print(f\"DatasetRecord with id {current_id} not found.\")\n                return False\n            DatasetRecordModel.delete(dataset_record)\n            return True\n        except Exception as e:\n            print(f\"Error deleting DatasetRecord: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"DatasetRecord\"]:\n        \"\"\"\n        Refresh the dataset record's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_record = record.refresh()\n            &gt;&gt;&gt; print(refreshed_record)\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n\n        Returns:\n            Optional[\"DatasetRecord\"]: The refreshed dataset record, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DatasetRecordModel.get(self.id)\n            if not db_instance:\n                print(f\"DatasetRecord with id {self.id} not found.\")\n                return None\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing DatasetRecord: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the dataset record.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; record_info = record.get_info()\n            &gt;&gt;&gt; record_info\n            { 'info_key': 'info_value' }\n\n\n        Returns:\n            Optional[dict]: The record info dictionary, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset_record = DatasetRecordModel.get(current_id)\n            if not dataset_record:\n                print(f\"DatasetRecord with id {current_id} not found.\")\n                return None\n            record_info = dataset_record.record_info\n            if not record_info:\n                print(f\"No record info found for DatasetRecord with id {current_id}.\")\n                return None\n            return record_info\n        except Exception as e:\n            print(f\"Error getting record info: {e}\")\n            return None\n\n    def set_info(self, record_info: dict) -&gt; Optional[\"DatasetRecord\"]:\n        \"\"\"\n        Set the additional information of the dataset record.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = record.set_info(\n            ...     record_info={\"new_info_key\": \"new_info_value\"}\n            ... )\n            &gt;&gt;&gt; updated_record.get_info()\n            { 'new_info_key': 'new_info_value' }\n\n\n        Args:\n            record_info (dict): The record info dictionary.\n        Returns:\n            Optional[\"DatasetRecord\"]: The updated dataset record, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset_record = DatasetRecordModel.get(current_id)\n            if not dataset_record:\n                print(f\"DatasetRecord with id {current_id} not found.\")\n                return None\n            dataset_record = DatasetRecordModel.update(\n                dataset_record,\n                record_info=record_info\n            )\n            dataset_record = self.model_validate(dataset_record)\n            self.refresh()\n            return dataset_record\n        except Exception as e:\n            print(f\"Error setting record info: {e}\")\n            return None\n\n    @classmethod\n    def create_file_uri(cls, record: \"DatasetRecord\") -&gt; Optional[str]:\n        \"\"\"\n        Create a file URI for the dataset record.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_file=\"/path/to/record/file.txt\"\n            ... )\n            &gt;&gt;&gt; file_uri = DatasetRecord.create_file_uri(record)\n            &gt;&gt;&gt; print(file_uri)\n            dataset_data/example_experiment/example_dataset/2023-10-01/example_site/example_season/1704163200000.txt\n\n        Args:\n            record (DatasetRecord): The dataset record.\n        Returns:\n            Optional[str]: The file URI, or None if an error occurred.\n        \"\"\"\n        try:\n            original_file_path = record.record_file\n            if not original_file_path:\n                print(f\"record_file is required to create file URI.\")\n                return None\n            if not os.path.exists(original_file_path):\n                print(f\"File {original_file_path} does not exist.\")\n                return None\n            # Assuming the file is stored in a specific structure, we can create a file URI\n            collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n            dataset_name = record.dataset_name\n            experiment_name = record.experiment_name\n            season_name = record.season_name\n            site_name = record.site_name\n            file_extension = os.path.splitext(original_file_path)[1]\n            file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n            file_key = f\"dataset_data/{experiment_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n            return file_key\n        except Exception as e:\n            print(f\"Error creating file URI: {e}\")\n            return None\n\n\n    @classmethod\n    def process_record(cls, record: \"DatasetRecord\") -&gt; \"DatasetRecord\":\n        \"\"\"\n        Process the dataset record for storage, including file upload and metadata generation.\n\n        This method handles the file upload to the storage provider and updates the record's file URI.\n\n        Examples:\n            &gt;&gt;&gt; record = DatasetRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_file=\"/path/to/record/file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; processed_record = DatasetRecord.process_record(record)\n            &gt;&gt;&gt; print(processed_record)\n            DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            record (DatasetRecord): The dataset record to process.\n        Returns:\n            DatasetRecord: The processed dataset record.\n        \"\"\"\n        try:\n            file = record.record_file\n            if not file:\n                return record\n            file_key = cls.create_file_uri(record)\n            if not file_key:\n                print(f\"Failed to create file URI for record: {record}\")\n                return record\n            content_type, _ = mimetypes.guess_type(file)\n            # Generate Metadata for upload\n            file_metadata = {\n                \"Dataset-Name\": record.dataset_name,\n                \"Experiment-Name\": record.experiment_name,\n                \"Site-Name\": record.site_name,\n                \"Season-Name\": record.season_name,\n                \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n                \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n            }\n            cls.minio_storage_provider.upload_file(\n                object_name=file_key,\n                input_file_path=file,\n                bucket_name=\"gemini\",\n                content_type=content_type,\n                metadata=file_metadata\n            )\n            record.record_file = file_key\n            return record\n        except Exception as e:\n            print(f\"Error processing record: {e}\")\n            return record\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the DatasetRecord object.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the DatasetRecord object.\"\"\"\n    return f\"DatasetRecord(id={self.id}, timestamp={self.timestamp}, dataset_name={self.dataset_name}, dataset_data={self.dataset_data}, experiment_name={self.experiment_name}, season_name={self.season_name}, site_name={self.site_name})\"\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the DatasetRecord object.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the DatasetRecord object.\"\"\"\n    return f\"DatasetRecord(id={self.id}, timestamp={self.timestamp}, dataset_name={self.dataset_name}, dataset_data={self.dataset_data}, experiment_name={self.experiment_name}, season_name={self.season_name}, site_name={self.site_name})\"\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.create","title":"<code>create(timestamp=datetime.now(), collection_date=None, dataset_name=None, dataset_data={}, experiment_name=None, site_name=None, season_name=None, record_file=None, record_info={}, insert_on_create=True)</code>  <code>classmethod</code>","text":"<p>Create a new dataset record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.create(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"example_dataset\",\n...     dataset_data={\"key\": \"value\"},\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     record_file=\"/path/to/record/file.txt\",\n...     record_info={\"info_key\": \"info_value\"},\n...     insert_on_create=True\n... )\n&gt;&gt;&gt; print(record)\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to now.</p> <code>now()</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Required.</p> <code>None</code> <code>dataset_data</code> <code>dict</code> <p>The data content. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The experiment name. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The season name. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file path for the record data. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <code>insert_on_create</code> <code>bool</code> <p>Whether to insert on creation. Defaults to True.</p> <code>True</code> <p>Returns:     Optional[\"DatasetRecord\"]: The created dataset record, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    timestamp: datetime = datetime.now(),\n    collection_date: date = None,\n    dataset_name: str = None,\n    dataset_data: dict = {},\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n    insert_on_create: bool = True\n) -&gt; Optional[\"DatasetRecord\"]:\n    \"\"\"\n    Create a new dataset record.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.create(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"example_dataset\",\n        ...     dataset_data={\"key\": \"value\"},\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     record_file=\"/path/to/record/file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"},\n        ...     insert_on_create=True\n        ... )\n        &gt;&gt;&gt; print(record)\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Required.\n        dataset_data (dict, optional): The data content. Defaults to {{}}.\n        experiment_name (str, optional): The experiment name. Defaults to None.\n        site_name (str, optional): The site name. Defaults to None.\n        season_name (str, optional): The season name. Defaults to None.\n        record_file (str, optional): The file path for the record data. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n        insert_on_create (bool, optional): Whether to insert on creation. Defaults to True.\n    Returns:\n        Optional[\"DatasetRecord\"]: The created dataset record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, site_name, season_name]):\n            raise ValueError(\"At least one of experiment_name, site_name, or season_name is required.\")\n        if not dataset_name:\n            raise ValueError(\"dataset_name is required.\")\n        if not timestamp:\n            raise ValueError(\"timestamp is required.\")\n        if not collection_date:\n            collection_date = timestamp.date()\n        if not dataset_data and not record_file:\n            raise ValueError(\"Either dataset_data or record_file is required.\")\n        dataset_record = DatasetRecord(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            dataset_data=dataset_data,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            record_file=record_file,\n            record_info=record_info\n        )\n        if insert_on_create:\n            insert_success, inserted_record_ids = cls.insert([dataset_record])\n            if not insert_success:\n                print(f\"Failed to insert DatasetRecord: {dataset_record}\")\n                return None\n            if not inserted_record_ids or len(inserted_record_ids) == 0:\n                print(f\"No new DatasetRecord was inserted.\")\n                return None\n            inserted_record_id = inserted_record_ids[0]\n            dataset_record = cls.get_by_id(inserted_record_id)\n        return dataset_record\n    except Exception as e:\n        print(f\"Error creating DatasetRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.create_file_uri","title":"<code>create_file_uri(record)</code>  <code>classmethod</code>","text":"<p>Create a file URI for the dataset record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_file=\"/path/to/record/file.txt\"\n... )\n&gt;&gt;&gt; file_uri = DatasetRecord.create_file_uri(record)\n&gt;&gt;&gt; print(file_uri)\ndataset_data/example_experiment/example_dataset/2023-10-01/example_site/example_season/1704163200000.txt\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>DatasetRecord</code> <p>The dataset record.</p> required <p>Returns:     Optional[str]: The file URI, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef create_file_uri(cls, record: \"DatasetRecord\") -&gt; Optional[str]:\n    \"\"\"\n    Create a file URI for the dataset record.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_file=\"/path/to/record/file.txt\"\n        ... )\n        &gt;&gt;&gt; file_uri = DatasetRecord.create_file_uri(record)\n        &gt;&gt;&gt; print(file_uri)\n        dataset_data/example_experiment/example_dataset/2023-10-01/example_site/example_season/1704163200000.txt\n\n    Args:\n        record (DatasetRecord): The dataset record.\n    Returns:\n        Optional[str]: The file URI, or None if an error occurred.\n    \"\"\"\n    try:\n        original_file_path = record.record_file\n        if not original_file_path:\n            print(f\"record_file is required to create file URI.\")\n            return None\n        if not os.path.exists(original_file_path):\n            print(f\"File {original_file_path} does not exist.\")\n            return None\n        # Assuming the file is stored in a specific structure, we can create a file URI\n        collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n        dataset_name = record.dataset_name\n        experiment_name = record.experiment_name\n        season_name = record.season_name\n        site_name = record.site_name\n        file_extension = os.path.splitext(original_file_path)[1]\n        file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n        file_key = f\"dataset_data/{experiment_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n        return file_key\n    except Exception as e:\n        print(f\"Error creating file URI: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.delete","title":"<code>delete()</code>","text":"<p>Delete a dataset record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; result = record.delete()\n&gt;&gt;&gt; print(result)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the deletion was successful, False otherwise.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete a dataset record.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; result = record.delete()\n        &gt;&gt;&gt; print(result)\n        True\n\n    Returns:\n        bool: True if the deletion was successful, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset_record = DatasetRecordModel.get(current_id)\n        if not dataset_record:\n            print(f\"DatasetRecord with id {current_id} not found.\")\n            return False\n        DatasetRecordModel.delete(dataset_record)\n        return True\n    except Exception as e:\n        print(f\"Error deleting DatasetRecord: {e}\")\n        return False\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.exists","title":"<code>exists(timestamp, dataset_name, experiment_name, season_name, site_name)</code>  <code>classmethod</code>","text":"<p>Check if a dataset record with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DatasetRecord.exists(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\"\n... )\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:     bool: True if the dataset record exists, False otherwise.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    timestamp: datetime,\n    dataset_name: str,\n    experiment_name: str,\n    season_name: str,\n    site_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if a dataset record with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; DatasetRecord.exists(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\"\n        ... )\n        True\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment.\n        season_name (str): The name of the season.\n        site_name (str): The name of the site.\n    Returns:\n        bool: True if the dataset record exists, False otherwise.\n    \"\"\"\n    try:\n        exists = DatasetRecordModel.exists(\n            timestamp=timestamp,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence: {e}\")\n        return False\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.filter","title":"<code>filter(dataset_names=None, start_timestamp=None, end_timestamp=None, experiment_names=None, season_names=None, site_names=None)</code>  <code>classmethod</code>","text":"<p>Filter dataset records based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; records = DatasetRecord.filter(\n...     dataset_names=[\"example_dataset\"],\n...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n...     experiment_names=[\"example_experiment\"],\n...     season_names=[\"example_season\"],\n...     site_names=[\"example_site\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_names</code> <code>List[str]</code> <p>The names of the datasets. Defaults to None.</p> <code>None</code> <code>start_timestamp</code> <code>datetime</code> <p>The start timestamp for filtering. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>The end timestamp for filtering. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>The names of the experiments. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>The names of the seasons. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>The names of the sites. Defaults to None.</p> <code>None</code> <p>Yields:     Generator[\"DatasetRecord\", None, None]: A generator of matching dataset records.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef filter(\n    cls,\n    dataset_names: List[str] = None,\n    start_timestamp: datetime = None,\n    end_timestamp: datetime = None,\n    experiment_names: List[str] = None,\n    season_names: List[str] = None,\n    site_names: List[str] = None\n) -&gt; Generator[\"DatasetRecord\", None, None]:\n    \"\"\"\n    Filter dataset records based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; records = DatasetRecord.filter(\n        ...     dataset_names=[\"example_dataset\"],\n        ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n        ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n        ...     experiment_names=[\"example_experiment\"],\n        ...     season_names=[\"example_season\"],\n        ...     site_names=[\"example_site\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n\n    Args:\n        dataset_names (List[str], optional): The names of the datasets. Defaults to None.\n        start_timestamp (datetime, optional): The start timestamp for filtering. Defaults to None.\n        end_timestamp (datetime, optional): The end timestamp for filtering. Defaults to None.\n        experiment_names (List[str], optional): The names of the experiments. Defaults to None.\n        season_names (List[str], optional): The names of the seasons. Defaults to None.\n        site_names (List[str], optional): The names of the sites. Defaults to None.\n    Yields:\n        Generator[\"DatasetRecord\", None, None]: A generator of matching dataset records.\n    \"\"\"\n    try:\n        if not any([dataset_names, start_timestamp, end_timestamp, experiment_names, season_names, site_names]):\n            raise ValueError(\"At least one parameter must be provided.\")\n        records = DatasetRecordModel.filter_records(\n            dataset_names=dataset_names,\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error filtering DatasetRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.get","title":"<code>get(timestamp, dataset_name, experiment_name=None, season_name=None, site_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a dataset record by its parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.get(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\"\n... )\n&gt;&gt;&gt; record\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"DatasetRecord\"]: The retrieved dataset record, or None if not found.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    timestamp: datetime,\n    dataset_name: str,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n) -&gt; Optional[\"DatasetRecord\"]:\n    \"\"\"\n    Retrieve a dataset record by its parameters.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.get(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\"\n        ... )\n        &gt;&gt;&gt; record\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        Optional[\"DatasetRecord\"]: The retrieved dataset record, or None if not found.\n    \"\"\"\n    try:\n        if not timestamp:\n            print(f\"Timestamp is required to get the DatasetRecord.\")\n            return None\n        if not dataset_name:\n            print(f\"Dataset name is required to get the DatasetRecord.\")\n            return None\n        if not experiment_name and not season_name and not site_name:\n            print(f\"At least one of experiment_name, season_name, or site_name is required to get the DatasetRecord.\")\n            return None\n        dataset_record = DatasetRecordsIMMVModel.get_by_parameters(\n            timestamp=timestamp,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not dataset_record:\n            print(f\"DatasetRecord not found.\")\n            return None\n        dataset_record = cls.model_validate(dataset_record)\n        return dataset_record\n    except Exception as e:\n        print(f\"Error getting DatasetRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.get_all","title":"<code>get_all(limit=100)</code>  <code>classmethod</code>","text":"<p>Retrieve all dataset records.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; records = DatasetRecord.get_all(limit=10)\n&gt;&gt;&gt; for record in records:\n...     print(record)\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The maximum number of records to retrieve. Defaults to 100.</p> <code>100</code> <p>Returns:     Optional[List[\"DatasetRecord\"]]: A list of dataset records, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef get_all(cls, limit: int = 100) -&gt; Optional[List[\"DatasetRecord\"]]:\n    \"\"\"\n    Retrieve all dataset records.\n\n    Examples:\n        &gt;&gt;&gt; records = DatasetRecord.get_all(limit=10)\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n\n    Args:\n        limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n    Returns:\n        Optional[List[\"DatasetRecord\"]]: A list of dataset records, or None if an error occurred.\n    \"\"\"\n    try:\n        records = DatasetRecordModel.all(limit=limit)\n        if not records or len(records) == 0:\n            print(f\"No DatasetRecords found.\")\n            return None\n        records = [cls.model_validate(record) for record in records]\n        return records\n    except Exception as e:\n        print(f\"Error getting all DatasetRecords: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a dataset record by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; record\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the dataset record.</p> required <p>Returns:     Optional[\"DatasetRecord\"]: The retrieved dataset record, or None if not found.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DatasetRecord\"]:\n    \"\"\"\n    Retrieve a dataset record by its ID.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; record\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        id (UUID | int | str): The ID of the dataset record.\n    Returns:\n        Optional[\"DatasetRecord\"]: The retrieved dataset record, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DatasetRecordModel.get(id)\n        if not db_instance:\n            print(f\"DatasetRecord with id {id} not found.\")\n            return None\n        record = cls.model_validate(db_instance)\n        return record\n    except Exception as e:\n        print(f\"Error getting DatasetRecord by id: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the dataset record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; record_info = record.get_info()\n&gt;&gt;&gt; record_info\n{ 'info_key': 'info_value' }\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The record info dictionary, or None if not found.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the dataset record.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; record_info = record.get_info()\n        &gt;&gt;&gt; record_info\n        { 'info_key': 'info_value' }\n\n\n    Returns:\n        Optional[dict]: The record info dictionary, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset_record = DatasetRecordModel.get(current_id)\n        if not dataset_record:\n            print(f\"DatasetRecord with id {current_id} not found.\")\n            return None\n        record_info = dataset_record.record_info\n        if not record_info:\n            print(f\"No record info found for DatasetRecord with id {current_id}.\")\n            return None\n        return record_info\n    except Exception as e:\n        print(f\"Error getting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.insert","title":"<code>insert(records)</code>  <code>classmethod</code>","text":"<p>Insert a list of dataset records into the database.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[DatasetRecord]</code> <p>The list of dataset records to insert.</p> required <p>Returns:     tuple[bool, List[str]]: A tuple containing a boolean indicating success and a list of inserted record IDs.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef insert(cls, records: List[\"DatasetRecord\"]) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a list of dataset records into the database.\n\n    Args:\n        records (List[DatasetRecord]): The list of dataset records to insert.\n    Returns:\n        tuple[bool, List[str]]: A tuple containing a boolean indicating success and a list of inserted record IDs.\n    \"\"\"\n    try:\n        if not records or len(records) == 0:\n            print(f\"No records provided to insert.\")\n            return False, []\n        records = cls.verify_records(records)\n        records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing Records for Dataset: \" + records[0].dataset_name)]\n        records_to_insert = []\n        for record in records:\n            record_dict = record.model_dump()\n            record_dict = {k: v for k, v in record_dict.items() if v is not None}\n            records_to_insert.append(record_dict)\n        print(f\"Inserting {len(records_to_insert)} records.\")\n        inserted_record_ids = DatasetRecordModel.insert_bulk('dataset_records_unique', records_to_insert)\n        print(f\"Inserted {len(inserted_record_ids)} records.\")\n        return True, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting records: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.process_record","title":"<code>process_record(record)</code>  <code>classmethod</code>","text":"<p>Process the dataset record for storage, including file upload and metadata generation.</p> <p>This method handles the file upload to the storage provider and updates the record's file URI.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_file=\"/path/to/record/file.txt\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; processed_record = DatasetRecord.process_record(record)\n&gt;&gt;&gt; print(processed_record)\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>DatasetRecord</code> <p>The dataset record to process.</p> required <p>Returns:     DatasetRecord: The processed dataset record.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef process_record(cls, record: \"DatasetRecord\") -&gt; \"DatasetRecord\":\n    \"\"\"\n    Process the dataset record for storage, including file upload and metadata generation.\n\n    This method handles the file upload to the storage provider and updates the record's file URI.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_file=\"/path/to/record/file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; processed_record = DatasetRecord.process_record(record)\n        &gt;&gt;&gt; print(processed_record)\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        record (DatasetRecord): The dataset record to process.\n    Returns:\n        DatasetRecord: The processed dataset record.\n    \"\"\"\n    try:\n        file = record.record_file\n        if not file:\n            return record\n        file_key = cls.create_file_uri(record)\n        if not file_key:\n            print(f\"Failed to create file URI for record: {record}\")\n            return record\n        content_type, _ = mimetypes.guess_type(file)\n        # Generate Metadata for upload\n        file_metadata = {\n            \"Dataset-Name\": record.dataset_name,\n            \"Experiment-Name\": record.experiment_name,\n            \"Site-Name\": record.site_name,\n            \"Season-Name\": record.season_name,\n            \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n            \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n        }\n        cls.minio_storage_provider.upload_file(\n            object_name=file_key,\n            input_file_path=file,\n            bucket_name=\"gemini\",\n            content_type=content_type,\n            metadata=file_metadata\n        )\n        record.record_file = file_key\n        return record\n    except Exception as e:\n        print(f\"Error processing record: {e}\")\n        return record\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the dataset record's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_record = record.refresh()\n&gt;&gt;&gt; print(refreshed_record)\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Returns:</p> Type Description <code>Optional[DatasetRecord]</code> <p>Optional[\"DatasetRecord\"]: The refreshed dataset record, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>def refresh(self) -&gt; Optional[\"DatasetRecord\"]:\n    \"\"\"\n    Refresh the dataset record's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_record = record.refresh()\n        &gt;&gt;&gt; print(refreshed_record)\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n\n    Returns:\n        Optional[\"DatasetRecord\"]: The refreshed dataset record, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DatasetRecordModel.get(self.id)\n        if not db_instance:\n            print(f\"DatasetRecord with id {self.id} not found.\")\n            return None\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing DatasetRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.search","title":"<code>search(dataset_name=None, dataset_data=None, experiment_name=None, season_name=None, site_name=None, collection_date=None, record_info=None)</code>  <code>classmethod</code>","text":"<p>Search for dataset records based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; records = DatasetRecord.search(\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     collection_date=date(2023, 10, 1),\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>dataset_data</code> <code>dict</code> <p>The data content. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Yields:     Generator[\"DatasetRecord\", None, None]: A generator of matching dataset records.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    dataset_name: str = None,\n    dataset_data: dict = None,\n    experiment_name: str = None,    \n    season_name: str = None,\n    site_name: str = None,\n    collection_date: date = None,\n    record_info: dict = None,\n) -&gt; Generator[\"DatasetRecord\", None, None]:\n    \"\"\"\n    Search for dataset records based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; records = DatasetRecord.search(\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     collection_date=date(2023, 10, 1),\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), dataset_name='another_dataset', dataset_data={...}, experiment_name='another_experiment', season_name='another_season', site_name='another_site')\n\n    Args:\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        dataset_data (dict, optional): The data content. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Yields:\n        Generator[\"DatasetRecord\", None, None]: A generator of matching dataset records.\n    \"\"\"\n    try:\n        if not any([dataset_name, dataset_data, experiment_name, season_name, site_name, collection_date, record_info]):\n            raise ValueError(\"At least one parameter must be provided.\")\n        records = DatasetRecordsIMMVModel.stream(\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            collection_date=collection_date,\n            dataset_data=dataset_data,\n            record_info=record_info\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error searching DatasetRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.set_info","title":"<code>set_info(record_info)</code>","text":"<p>Set the additional information of the dataset record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = record.set_info(\n...     record_info={\"new_info_key\": \"new_info_value\"}\n... )\n&gt;&gt;&gt; updated_record.get_info()\n{ 'new_info_key': 'new_info_value' }\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record_info</code> <code>dict</code> <p>The record info dictionary.</p> required <p>Returns:     Optional[\"DatasetRecord\"]: The updated dataset record, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>def set_info(self, record_info: dict) -&gt; Optional[\"DatasetRecord\"]:\n    \"\"\"\n    Set the additional information of the dataset record.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = record.set_info(\n        ...     record_info={\"new_info_key\": \"new_info_value\"}\n        ... )\n        &gt;&gt;&gt; updated_record.get_info()\n        { 'new_info_key': 'new_info_value' }\n\n\n    Args:\n        record_info (dict): The record info dictionary.\n    Returns:\n        Optional[\"DatasetRecord\"]: The updated dataset record, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset_record = DatasetRecordModel.get(current_id)\n        if not dataset_record:\n            print(f\"DatasetRecord with id {current_id} not found.\")\n            return None\n        dataset_record = DatasetRecordModel.update(\n            dataset_record,\n            record_info=record_info\n        )\n        dataset_record = self.model_validate(dataset_record)\n        self.refresh()\n        return dataset_record\n    except Exception as e:\n        print(f\"Error setting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_records/#gemini.api.dataset_record.DatasetRecord.update","title":"<code>update(dataset_data=None, record_info=None)</code>","text":"<p>Update the details of a dataset record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = record.update(\n...     dataset_data={\"new_key\": \"new_value\"},\n...     record_info={\"new_info_key\": \"new_info_value\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nDatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_data</code> <code>dict</code> <p>The new data content. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>The new additional info. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"DatasetRecord\"]: The updated dataset record, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_record.py</code> <pre><code>def update(\n    self,\n    dataset_data: dict = None,\n    record_info: dict = None\n) -&gt; Optional[\"DatasetRecord\"]:\n    \"\"\"\n    Update the details of a dataset record.\n\n    Examples:\n        &gt;&gt;&gt; record = DatasetRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = record.update(\n        ...     dataset_data={\"new_key\": \"new_value\"},\n        ...     record_info={\"new_info_key\": \"new_info_value\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        DatasetRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), dataset_name='example_dataset', dataset_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        dataset_data (dict, optional): The new data content. Defaults to None.\n        record_info (dict, optional): The new additional info. Defaults to None.\n    Returns:\n        Optional[\"DatasetRecord\"]: The updated dataset record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([dataset_data, record_info]):\n            print(f\"At least one parameter must be provided to update the DatasetRecord.\")\n            return None\n        current_id = self.id\n        dataset_record = DatasetRecordModel.get(current_id)\n        if not dataset_record:\n            print(f\"DatasetRecord with id {current_id} not found.\")\n            return None\n        dataset_record = DatasetRecordModel.update(\n            dataset_record,\n            dataset_data=dataset_data,\n            record_info=record_info\n        )\n        dataset_record = self.model_validate(dataset_record)\n        self.refresh()\n        return dataset_record\n    except Exception as e:\n        print(f\"Error updating DatasetRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/","title":"Dataset Types API","text":""},{"location":"api/dataset_types/#description","title":"Description","text":"<p>A dataset type defines the type of a specific Dataset. </p> <p>The following dataset types are pre-defined, along with their <code>dataset_type_id</code>:</p> Dataset Type <code>dataset_type_id</code> Default 0 Sensor 1 Trait 2 Script 3 Model 4 Procedure 5 Other 6"},{"location":"api/dataset_types/#module","title":"Module","text":"<p>This module defines the DatasetType class, which represents a type or category for datasets.</p> <p>It includes methods for creating, retrieving, updating, and deleting dataset types, as well as methods for checking existence, searching, and managing additional information.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a dataset type with the given name exists.</li> <li><code>create</code>: Create a new dataset type.</li> <li><code>get</code>: Retrieve a dataset type by its name.</li> <li><code>get_by_id</code>: Retrieve a dataset type by its ID.</li> <li><code>get_all</code>: Retrieve all dataset types.</li> <li><code>search</code>: Search for dataset types based on various criteria.</li> <li><code>update</code>: Update the details of a dataset type.</li> <li><code>delete</code>: Delete a dataset type.</li> <li><code>refresh</code>: Refresh the dataset type's data from the database.</li> <li><code>get_info</code>: Get the additional information of the dataset type.</li> <li><code>set_info</code>: Set the additional information of the dataset type.</li> </ul>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType","title":"<code>DatasetType</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a type or category for datasets.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the dataset type.</p> <code>dataset_type_name</code> <code>str</code> <p>The name of the dataset type.</p> <code>dataset_type_info</code> <code>Optional[dict]</code> <p>Additional information about the dataset type.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>class DatasetType(APIBase):\n    \"\"\"\n    Represents a type or category for datasets.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the dataset type.\n        dataset_type_name (str): The name of the dataset type.\n        dataset_type_info (Optional[dict]): Additional information about the dataset type.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"dataset_type_id\"))\n\n    dataset_type_name: str\n    dataset_type_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the DatasetType object.\"\"\"\n        return f\"DatasetType(dataset_type_name={self.dataset_type_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the DatasetType object.\"\"\"\n        return f\"DatasetType(dataset_type_name={self.dataset_type_name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        dataset_type_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a dataset type with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; DatasetType.exists(\"example_dataset_type\")\n            True\n            &gt;&gt;&gt; DatasetType.exists(\"non_existent_type\")\n            False\n\n        Args:\n            dataset_type_name (str): The name of the dataset type.\n        Returns:\n            bool: True if the dataset type exists, False otherwise.\n        \"\"\"\n        try:\n            exists = DatasetTypeModel.exists(dataset_type_name=dataset_type_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of dataset type: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        dataset_type_name: str,\n        dataset_type_info: dict = {},\n    ) -&gt; Optional[\"DatasetType\"]:\n        \"\"\"\n        Create a new dataset type. If a dataset type with same name already exists, it will return the existing one.\n\n        Examples:\n            &gt;&gt;&gt; DatasetType.create(\"example_dataset_type\", {\"description\": \"An example dataset type\"})\n            DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n        Args:\n            dataset_type_name (str): The name of the dataset type.\n            dataset_type_info (dict, optional): Additional information about the dataset type. Defaults to {{}}.\n        Returns:\n            Optional[\"DatasetType\"]: The created dataset type, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DatasetTypeModel.get_or_create(\n                dataset_type_name=dataset_type_name,\n                dataset_type_info=dataset_type_info,\n            )\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error creating dataset type: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, dataset_type_name: str) -&gt; Optional[\"DatasetType\"]:\n        \"\"\"\n        Retrieve a dataset type by its name.\n\n        Examples:\n            &gt;&gt;&gt; DatasetType.get(\"example_dataset_type\")\n            DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n        Args:\n            dataset_type_name (str): The name of the dataset type.\n        Returns:\n            Optional[\"DatasetType\"]: The dataset type, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DatasetTypeModel.get_by_parameters(dataset_type_name=dataset_type_name)\n            if not db_instance:\n                print(f\"Dataset type with name {dataset_type_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting dataset type: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DatasetType\"]:\n        \"\"\"\n        Retrieve a dataset type by its ID.\n\n        Examples:\n            &gt;&gt;&gt; DatasetType.get_by_id(...)\n            DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n        Args:\n            id (UUID | int | str): The ID of the dataset type.\n        Returns:\n            Optional[\"DatasetType\"]: The dataset type, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DatasetTypeModel.get(id)\n            if not db_instance:\n                print(f\"Dataset type with ID {id} does not exist.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting dataset type by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"DatasetType\"]]:\n        \"\"\"\n        Retrieve all dataset types.\n\n        Examples:\n            &gt;&gt;&gt; DatasetType.get_all()\n            [DatasetType(dataset_type_name='example_dataset_type', id=...), DatasetType(dataset_type_name='another_dataset_type', id=...)]\n\n\n        Returns:\n            Optional[List[\"DatasetType\"]]: A list of all dataset types, or None if an error occurred.\n        \"\"\"\n        try:\n            instances = DatasetTypeModel.all()\n            if not instances or len(instances) == 0:\n                print(\"No dataset types found.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error getting all dataset types: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        dataset_type_name: str = None,\n        dataset_type_info: dict = None\n    ) -&gt; Optional[List[\"DatasetType\"]]:\n        \"\"\"\n        Search for dataset types based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; DatasetType.search(dataset_type_name=\"example_dataset_type\")\n            [DatasetType(dataset_type_name='example_dataset_type', id=...)]\n\n\n        Args:\n            dataset_type_name (str, optional): The name of the dataset type. Defaults to None.\n            dataset_type_info (dict, optional): Additional information about the dataset type. Defaults to None.\n        Returns:\n            Optional[List[\"DatasetType\"]]: A list of matching dataset types, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([dataset_type_name, dataset_type_info]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n\n            instances = DatasetTypeModel.search(\n                dataset_type_name=dataset_type_name,\n                dataset_type_info=dataset_type_info\n            )\n            if not instances or len(instances) == 0:\n                print(\"No dataset types found with the provided search parameters.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error searching dataset types: {e}\")\n            return None\n\n    def update(\n            self,\n            dataset_type_name: str = None,\n            dataset_type_info: dict = None\n        ) -&gt; Optional[\"DatasetType\"]:\n        \"\"\"\n        Update the details of the dataset type.\n\n        Examples:\n            &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n            &gt;&gt;&gt; updated_dataset_type = dataset_type.update(dataset_type_name=\"new_name\", dataset_type_info{\"description\": \"Updated description\"})\n            &gt;&gt;&gt; print(updated_dataset_type)\n            DatasetType(dataset_type_name='new_name', id=...)\n\n        Args:\n            dataset_type_name (str, optional): The new name of the dataset type. Defaults to None.\n            dataset_type_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[\"DatasetType\"]: The updated dataset type, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([dataset_type_name, dataset_type_info]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n\n            current_id = self.id\n            dataset_type = DatasetTypeModel.get(current_id)\n            if not dataset_type:\n                 print(f\"Dataset type with ID {current_id} does not exist.\")\n                 return None\n\n            dataset_type = DatasetTypeModel.update(\n                dataset_type,\n                dataset_type_name=dataset_type_name,\n                dataset_type_info=dataset_type_info,\n            )\n            instance = self.model_validate(dataset_type)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error updating dataset type: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the dataset type.\n\n        Examples:\n            &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n            &gt;&gt;&gt; success = dataset_type.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the dataset type was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset_type = DatasetTypeModel.get(current_id)\n            if not dataset_type:\n                 print(f\"Dataset type with ID {current_id} does not exist.\")\n                 return False\n            DatasetTypeModel.delete(dataset_type)\n            return True\n        except Exception as e:\n            print(f\"Error deleting dataset type: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"DatasetType\"]:\n        \"\"\"\n        Refresh the dataset type's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n            &gt;&gt;&gt; refreshed_dataset_type = dataset_type.refresh()\n            &gt;&gt;&gt; print(refreshed_dataset_type)\n            DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n        Returns:\n            Optional[\"DatasetType\"]: The refreshed dataset type, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DatasetTypeModel.get(self.id)\n            if not db_instance:\n                print(f\"Dataset type with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing dataset type: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the dataset type.\n\n        Examples:\n            &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n            &gt;&gt;&gt; info = dataset_type.get_info()\n            &gt;&gt;&gt; print(info)\n            {'description': 'An example dataset type'}\n\n        Returns:\n            Optional[dict]: The dataset type's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset_type = DatasetTypeModel.get(current_id)\n            if not dataset_type:\n                print(f\"Dataset type with ID {current_id} does not exist.\")\n                return None\n            dataset_type_info = dataset_type.dataset_type_info\n            if not dataset_type_info:\n                print(\"DatasetType info is empty.\")\n                return None\n            return dataset_type_info\n        except Exception as e:\n            print(f\"Error getting dataset type info: {e}\")\n            return None\n\n    def set_info(self, dataset_type_info: dict) -&gt; Optional[\"DatasetType\"]:\n        \"\"\"\n        Set the additional information of the dataset type.\n\n        Examples:\n            &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n            &gt;&gt;&gt; updated_dataset_type = dataset_type.set_info({\"description\": \"Updated description\"})\n            &gt;&gt;&gt; print(updated_dataset_type.get_info())\n            {'description': 'Updated description'}\n\n        Args:\n            dataset_type_info (dict): The new information to set.\n        Returns:\n            Optional[\"DatasetType\"]: The updated dataset type, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset_type = DatasetTypeModel.get(current_id)\n            if not dataset_type:\n                print(f\"Dataset type with ID {current_id} does not exist.\")\n                return None\n            dataset_type = DatasetTypeModel.update(\n                dataset_type,\n                dataset_type_info=dataset_type_info,\n            )\n            instance = self.model_validate(dataset_type)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error setting dataset type info: {e}\")\n            return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the DatasetType object.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the DatasetType object.\"\"\"\n    return f\"DatasetType(dataset_type_name={self.dataset_type_name}, id={self.id})\"\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the DatasetType object.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the DatasetType object.\"\"\"\n    return f\"DatasetType(dataset_type_name={self.dataset_type_name}, id={self.id})\"\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.create","title":"<code>create(dataset_type_name, dataset_type_info={})</code>  <code>classmethod</code>","text":"<p>Create a new dataset type. If a dataset type with same name already exists, it will return the existing one.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DatasetType.create(\"example_dataset_type\", {\"description\": \"An example dataset type\"})\nDatasetType(dataset_type_name='example_dataset_type', id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_type_name</code> <code>str</code> <p>The name of the dataset type.</p> required <code>dataset_type_info</code> <code>dict</code> <p>Additional information about the dataset type. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"DatasetType\"]: The created dataset type, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    dataset_type_name: str,\n    dataset_type_info: dict = {},\n) -&gt; Optional[\"DatasetType\"]:\n    \"\"\"\n    Create a new dataset type. If a dataset type with same name already exists, it will return the existing one.\n\n    Examples:\n        &gt;&gt;&gt; DatasetType.create(\"example_dataset_type\", {\"description\": \"An example dataset type\"})\n        DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n    Args:\n        dataset_type_name (str): The name of the dataset type.\n        dataset_type_info (dict, optional): Additional information about the dataset type. Defaults to {{}}.\n    Returns:\n        Optional[\"DatasetType\"]: The created dataset type, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DatasetTypeModel.get_or_create(\n            dataset_type_name=dataset_type_name,\n            dataset_type_info=dataset_type_info,\n        )\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error creating dataset type: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.delete","title":"<code>delete()</code>","text":"<p>Delete the dataset type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n&gt;&gt;&gt; success = dataset_type.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the dataset type was deleted, False otherwise.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the dataset type.\n\n    Examples:\n        &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n        &gt;&gt;&gt; success = dataset_type.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the dataset type was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset_type = DatasetTypeModel.get(current_id)\n        if not dataset_type:\n             print(f\"Dataset type with ID {current_id} does not exist.\")\n             return False\n        DatasetTypeModel.delete(dataset_type)\n        return True\n    except Exception as e:\n        print(f\"Error deleting dataset type: {e}\")\n        return False\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.exists","title":"<code>exists(dataset_type_name)</code>  <code>classmethod</code>","text":"<p>Check if a dataset type with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DatasetType.exists(\"example_dataset_type\")\nTrue\n&gt;&gt;&gt; DatasetType.exists(\"non_existent_type\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_type_name</code> <code>str</code> <p>The name of the dataset type.</p> required <p>Returns:     bool: True if the dataset type exists, False otherwise.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    dataset_type_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a dataset type with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; DatasetType.exists(\"example_dataset_type\")\n        True\n        &gt;&gt;&gt; DatasetType.exists(\"non_existent_type\")\n        False\n\n    Args:\n        dataset_type_name (str): The name of the dataset type.\n    Returns:\n        bool: True if the dataset type exists, False otherwise.\n    \"\"\"\n    try:\n        exists = DatasetTypeModel.exists(dataset_type_name=dataset_type_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of dataset type: {e}\")\n        return False\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.get","title":"<code>get(dataset_type_name)</code>  <code>classmethod</code>","text":"<p>Retrieve a dataset type by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DatasetType.get(\"example_dataset_type\")\nDatasetType(dataset_type_name='example_dataset_type', id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_type_name</code> <code>str</code> <p>The name of the dataset type.</p> required <p>Returns:     Optional[\"DatasetType\"]: The dataset type, or None if not found.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>@classmethod\ndef get(cls, dataset_type_name: str) -&gt; Optional[\"DatasetType\"]:\n    \"\"\"\n    Retrieve a dataset type by its name.\n\n    Examples:\n        &gt;&gt;&gt; DatasetType.get(\"example_dataset_type\")\n        DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n    Args:\n        dataset_type_name (str): The name of the dataset type.\n    Returns:\n        Optional[\"DatasetType\"]: The dataset type, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DatasetTypeModel.get_by_parameters(dataset_type_name=dataset_type_name)\n        if not db_instance:\n            print(f\"Dataset type with name {dataset_type_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting dataset type: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all dataset types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DatasetType.get_all()\n[DatasetType(dataset_type_name='example_dataset_type', id=...), DatasetType(dataset_type_name='another_dataset_type', id=...)]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[DatasetType]]</code> <p>Optional[List[\"DatasetType\"]]: A list of all dataset types, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"DatasetType\"]]:\n    \"\"\"\n    Retrieve all dataset types.\n\n    Examples:\n        &gt;&gt;&gt; DatasetType.get_all()\n        [DatasetType(dataset_type_name='example_dataset_type', id=...), DatasetType(dataset_type_name='another_dataset_type', id=...)]\n\n\n    Returns:\n        Optional[List[\"DatasetType\"]]: A list of all dataset types, or None if an error occurred.\n    \"\"\"\n    try:\n        instances = DatasetTypeModel.all()\n        if not instances or len(instances) == 0:\n            print(\"No dataset types found.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error getting all dataset types: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a dataset type by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DatasetType.get_by_id(...)\nDatasetType(dataset_type_name='example_dataset_type', id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the dataset type.</p> required <p>Returns:     Optional[\"DatasetType\"]: The dataset type, or None if not found.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"DatasetType\"]:\n    \"\"\"\n    Retrieve a dataset type by its ID.\n\n    Examples:\n        &gt;&gt;&gt; DatasetType.get_by_id(...)\n        DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n    Args:\n        id (UUID | int | str): The ID of the dataset type.\n    Returns:\n        Optional[\"DatasetType\"]: The dataset type, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DatasetTypeModel.get(id)\n        if not db_instance:\n            print(f\"Dataset type with ID {id} does not exist.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting dataset type by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the dataset type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n&gt;&gt;&gt; info = dataset_type.get_info()\n&gt;&gt;&gt; print(info)\n{'description': 'An example dataset type'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The dataset type's info, or None if not found.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the dataset type.\n\n    Examples:\n        &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n        &gt;&gt;&gt; info = dataset_type.get_info()\n        &gt;&gt;&gt; print(info)\n        {'description': 'An example dataset type'}\n\n    Returns:\n        Optional[dict]: The dataset type's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset_type = DatasetTypeModel.get(current_id)\n        if not dataset_type:\n            print(f\"Dataset type with ID {current_id} does not exist.\")\n            return None\n        dataset_type_info = dataset_type.dataset_type_info\n        if not dataset_type_info:\n            print(\"DatasetType info is empty.\")\n            return None\n        return dataset_type_info\n    except Exception as e:\n        print(f\"Error getting dataset type info: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the dataset type's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n&gt;&gt;&gt; refreshed_dataset_type = dataset_type.refresh()\n&gt;&gt;&gt; print(refreshed_dataset_type)\nDatasetType(dataset_type_name='example_dataset_type', id=...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[DatasetType]</code> <p>Optional[\"DatasetType\"]: The refreshed dataset type, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>def refresh(self) -&gt; Optional[\"DatasetType\"]:\n    \"\"\"\n    Refresh the dataset type's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n        &gt;&gt;&gt; refreshed_dataset_type = dataset_type.refresh()\n        &gt;&gt;&gt; print(refreshed_dataset_type)\n        DatasetType(dataset_type_name='example_dataset_type', id=...)\n\n    Returns:\n        Optional[\"DatasetType\"]: The refreshed dataset type, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DatasetTypeModel.get(self.id)\n        if not db_instance:\n            print(f\"Dataset type with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing dataset type: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.search","title":"<code>search(dataset_type_name=None, dataset_type_info=None)</code>  <code>classmethod</code>","text":"<p>Search for dataset types based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DatasetType.search(dataset_type_name=\"example_dataset_type\")\n[DatasetType(dataset_type_name='example_dataset_type', id=...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_type_name</code> <code>str</code> <p>The name of the dataset type. Defaults to None.</p> <code>None</code> <code>dataset_type_info</code> <code>dict</code> <p>Additional information about the dataset type. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[\"DatasetType\"]]: A list of matching dataset types, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    dataset_type_name: str = None,\n    dataset_type_info: dict = None\n) -&gt; Optional[List[\"DatasetType\"]]:\n    \"\"\"\n    Search for dataset types based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; DatasetType.search(dataset_type_name=\"example_dataset_type\")\n        [DatasetType(dataset_type_name='example_dataset_type', id=...)]\n\n\n    Args:\n        dataset_type_name (str, optional): The name of the dataset type. Defaults to None.\n        dataset_type_info (dict, optional): Additional information about the dataset type. Defaults to None.\n    Returns:\n        Optional[List[\"DatasetType\"]]: A list of matching dataset types, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([dataset_type_name, dataset_type_info]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n\n        instances = DatasetTypeModel.search(\n            dataset_type_name=dataset_type_name,\n            dataset_type_info=dataset_type_info\n        )\n        if not instances or len(instances) == 0:\n            print(\"No dataset types found with the provided search parameters.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error searching dataset types: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.set_info","title":"<code>set_info(dataset_type_info)</code>","text":"<p>Set the additional information of the dataset type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n&gt;&gt;&gt; updated_dataset_type = dataset_type.set_info({\"description\": \"Updated description\"})\n&gt;&gt;&gt; print(updated_dataset_type.get_info())\n{'description': 'Updated description'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_type_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[\"DatasetType\"]: The updated dataset type, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>def set_info(self, dataset_type_info: dict) -&gt; Optional[\"DatasetType\"]:\n    \"\"\"\n    Set the additional information of the dataset type.\n\n    Examples:\n        &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n        &gt;&gt;&gt; updated_dataset_type = dataset_type.set_info({\"description\": \"Updated description\"})\n        &gt;&gt;&gt; print(updated_dataset_type.get_info())\n        {'description': 'Updated description'}\n\n    Args:\n        dataset_type_info (dict): The new information to set.\n    Returns:\n        Optional[\"DatasetType\"]: The updated dataset type, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset_type = DatasetTypeModel.get(current_id)\n        if not dataset_type:\n            print(f\"Dataset type with ID {current_id} does not exist.\")\n            return None\n        dataset_type = DatasetTypeModel.update(\n            dataset_type,\n            dataset_type_info=dataset_type_info,\n        )\n        instance = self.model_validate(dataset_type)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error setting dataset type info: {e}\")\n        return None\n</code></pre>"},{"location":"api/dataset_types/#gemini.api.dataset_type.DatasetType.update","title":"<code>update(dataset_type_name=None, dataset_type_info=None)</code>","text":"<p>Update the details of the dataset type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n&gt;&gt;&gt; updated_dataset_type = dataset_type.update(dataset_type_name=\"new_name\", dataset_type_info{\"description\": \"Updated description\"})\n&gt;&gt;&gt; print(updated_dataset_type)\nDatasetType(dataset_type_name='new_name', id=...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_type_name</code> <code>str</code> <p>The new name of the dataset type. Defaults to None.</p> <code>None</code> <code>dataset_type_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"DatasetType\"]: The updated dataset type, or None if an error occurred.</p> Source code in <code>gemini/api/dataset_type.py</code> <pre><code>def update(\n        self,\n        dataset_type_name: str = None,\n        dataset_type_info: dict = None\n    ) -&gt; Optional[\"DatasetType\"]:\n    \"\"\"\n    Update the details of the dataset type.\n\n    Examples:\n        &gt;&gt;&gt; dataset_type = DatasetType.get(\"example_dataset_type\")\n        &gt;&gt;&gt; updated_dataset_type = dataset_type.update(dataset_type_name=\"new_name\", dataset_type_info{\"description\": \"Updated description\"})\n        &gt;&gt;&gt; print(updated_dataset_type)\n        DatasetType(dataset_type_name='new_name', id=...)\n\n    Args:\n        dataset_type_name (str, optional): The new name of the dataset type. Defaults to None.\n        dataset_type_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[\"DatasetType\"]: The updated dataset type, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([dataset_type_name, dataset_type_info]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n\n        current_id = self.id\n        dataset_type = DatasetTypeModel.get(current_id)\n        if not dataset_type:\n             print(f\"Dataset type with ID {current_id} does not exist.\")\n             return None\n\n        dataset_type = DatasetTypeModel.update(\n            dataset_type,\n            dataset_type_name=dataset_type_name,\n            dataset_type_info=dataset_type_info,\n        )\n        instance = self.model_validate(dataset_type)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error updating dataset type: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/","title":"Datasets API","text":""},{"location":"api/datasets/#description","title":"Description","text":"<p>A dataset is a collection of Dataset Records. It can be of a specific Dataset Type and associated with multiple Experiments.</p>"},{"location":"api/datasets/#module","title":"Module","text":"<p>This module defines the Dataset class, which represents a dataset entity, including its metadata, type, and associations to experiments and records.</p> <p>It includes methods for creating, retrieving, updating, and deleting datasets, as well as methods for checking existence, searching, and managing associations with experiments and dataset records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a dataset with the given name exists.</li> <li><code>create</code>: Create a new dataset.</li> <li><code>get</code>: Retrieve a dataset by its name.</li> <li><code>get_by_id</code>: Retrieve a dataset by its ID.</li> <li><code>get_all</code>: Retrieve all datasets.</li> <li><code>search</code>: Search for datasets based on various criteria.</li> <li><code>update</code>: Update the details of a dataset.</li> <li><code>delete</code>: Delete a dataset.</li> <li><code>refresh</code>: Refresh the dataset's data from the database.</li> <li><code>get_info</code>: Get the additional information of the dataset.</li> <li><code>set_info</code>: Set the additional information of the dataset.</li> <li><code>associate_experiment</code>: Associate the dataset with an experiment.</li> <li><code>unassociate_experiment</code>: Unassociate the dataset from an experiment.</li> <li><code>get_associated_experiments</code>: Get all experiments associated with the dataset.</li> <li><code>get_records</code>: Get all records associated with the dataset.</li> <li><code>add_record</code>: Add a new record to the dataset.</li> </ul>"},{"location":"api/datasets/#gemini.api.dataset.Dataset","title":"<code>Dataset</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a dataset entity, including its metadata, type, and associations to experiments and records.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the dataset.</p> <code>collection_date</code> <code>date</code> <p>The collection date of the dataset.</p> <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> <code>dataset_info</code> <code>Optional[dict]</code> <p>Additional information about the dataset.</p> <code>dataset_type_id</code> <code>int</code> <p>The ID of the dataset type.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>class Dataset(APIBase):\n    \"\"\"\n    Represents a dataset entity, including its metadata, type, and associations to experiments and records.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the dataset.\n        collection_date (date): The collection date of the dataset.\n        dataset_name (str): The name of the dataset.\n        dataset_info (Optional[dict]): Additional information about the dataset.\n        dataset_type_id (int): The ID of the dataset type.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"dataset_id\"))\n\n    collection_date: date\n    dataset_name: str\n    dataset_info: Optional[dict] = None\n    dataset_type_id: int\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Dataset object.\"\"\"\n        return f\"Dataset(dataset_name={self.dataset_name}, collection_date={self.collection_date}, dataset_type={GEMINIDatasetType(self.dataset_type_id).name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Dataset object.\"\"\"\n        return f\"Dataset(dataset_name={self.dataset_name}, collection_date={self.collection_date}, dataset_type={GEMINIDatasetType(self.dataset_type_id).name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        dataset_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if a dataset with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Dataset.exists(\"my_dataset\")\n            True\n            &gt;&gt;&gt; Dataset.exists(\"non_existent_dataset\")\n            False\n\n        Args:\n            dataset_name (str): The name of the dataset.\n        Returns:\n            bool: True if the dataset exists, False otherwise.\n        \"\"\"\n        try:\n            exists = DatasetModel.exists(\n                dataset_name=dataset_name,\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of dataset: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        dataset_name: str,\n        dataset_info: dict = {},\n        dataset_type: GEMINIDatasetType = GEMINIDatasetType.Default,\n        collection_date: date = date.today(),\n        experiment_name: str = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Create a new dataset. If the dataset already exists, it will return the existing dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.create(\"my_dataset\", {\"description\": \"Test dataset\"})\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the dataset.\n            dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n            dataset_type (GEMINIDatasetType, optional): The type of the dataset. Defaults to Default.\n            collection_date (date, optional): The collection date. Defaults to today.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[\"Dataset\"]: The created dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DatasetModel.get_or_create(\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                dataset_type_id=dataset_type.value,\n            )\n            dataset = cls.model_validate(db_instance)\n            if experiment_name:\n                dataset.associate_experiment(experiment_name=experiment_name)\n            return dataset\n        except Exception as e:\n            print(f\"Error creating dataset: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        dataset_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Retrieve a dataset by its name.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the dataset.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[\"Dataset\"]: The retrieved dataset, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentDatasetsViewModel.get_by_parameters(\n                dataset_name=dataset_name,\n                experiment_name=experiment_name\n            )\n            if not db_instance:\n                print(f\"Dataset with name {dataset_name} not found.\")\n                return None\n            dataset = cls.model_validate(db_instance)\n            return dataset\n        except Exception as e:\n            print(f\"Error getting dataset: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Retrieve a dataset by its ID.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n        Args:\n            id (UUID | int | str): The ID of the dataset.\n        Returns:\n            Optional[\"Dataset\"]: The retrieved dataset, or None if not found.\n        \"\"\"\n        try:\n            db_instance = DatasetModel.get(id)\n            if not db_instance:\n                print(f\"Dataset with ID {id} does not exist.\")\n                return None\n            dataset = cls.model_validate(db_instance)\n            return dataset\n        except Exception as e:\n            print(f\"Error getting dataset by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Dataset\"]]:\n        \"\"\"\n        Retrieve all datasets.\n\n        Examples:\n            &gt;&gt;&gt; datasets = Dataset.get_all()\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(dataset_name=my_dataset1, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n            Dataset(dataset_name=my_dataset2, collection_date=2023-10-02, dataset_type=Sensor, id=UUID('...'))\n\n        Returns:\n            Optional[List[\"Dataset\"]]: A list of all datasets, or None if an error occurred.\n        \"\"\"\n        try:\n            datasets = DatasetModel.all()\n            if not datasets or len(datasets) == 0:\n                print(\"No datasets found.\")\n                return None\n            datasets = [cls.model_validate(dataset) for dataset in datasets]\n            return datasets\n        except Exception as e:\n            print(f\"Error getting all datasets: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        dataset_name: str = None,\n        dataset_info: dict = None,\n        dataset_type: GEMINIDatasetType = None,\n        collection_date: date = None,\n        experiment_name: str = None,\n    ) -&gt; Optional[List[\"Dataset\"]]:\n        \"\"\"\n        Search for datasets based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; datasets = Dataset.search(dataset_name=\"my_dataset\")\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n        Args:\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            dataset_info (dict, optional): Additional information about the dataset. Defaults to None.\n            dataset_type (GEMINIDatasetType, optional): The type of the dataset. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[List[\"Dataset\"]]: A list of datasets matching the search criteria, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([dataset_name, dataset_info, dataset_type, collection_date, experiment_name]):\n                print(\"At least one parameter must be provided.\")\n                return None\n            datasets = ExperimentDatasetsViewModel.search(\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                dataset_type=dataset_type,\n                collection_date=collection_date,\n                experiment_name=experiment_name\n            )\n            if not datasets or len(datasets) == 0:\n                print(\"No datasets found with the provided search parameters.\")\n                return None\n            datasets = [cls.model_validate(dataset) for dataset in datasets]\n            return datasets\n        except Exception as e:\n            print(f\"Error searching datasets: {e}\")\n            return None\n\n    def update(\n        self,\n        dataset_name: str = None,\n        dataset_info: dict = None,\n        dataset_type: GEMINIDatasetType = None,\n        collection_date: date = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Update the details of a dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; updated_dataset = dataset.update(dataset_name=\"new_dataset_name\", dataset_info={\"description\": \"Updated dataset\"})\n            &gt;&gt;&gt; print(updated_dataset)\n            Dataset(dataset_name=new_dataset_name, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n        Args:\n            dataset_name (str, optional): The new name of the dataset. Defaults to None.\n            dataset_info (dict, optional): The new additional information about the dataset. Defaults to None.\n            dataset_type (GEMINIDatasetType, optional): The new type of the dataset. Defaults to None.\n            collection_date (date, optional): The new collection date. Defaults to None.\n        Returns:\n            Optional[\"Dataset\"]: The updated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([dataset_name, dataset_info, dataset_type, collection_date]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n            current_id = self.id\n            dataset = DatasetModel.get(current_id)\n            if not dataset:\n                print(f\"Dataset with ID {current_id} does not exist.\")\n                return None\n            dataset = DatasetModel.update(\n                dataset,\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                dataset_type_id=dataset_type.value if dataset_type else None,\n                collection_date=collection_date\n            )\n            dataset = self.model_validate(dataset)\n            self.refresh()\n            return dataset\n        except Exception as e:\n            print(f\"Error updating dataset: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete a dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; success = dataset.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the dataset was deleted successfully, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset = DatasetModel.get(current_id)\n            if not dataset:\n                print(f\"Dataset with ID {current_id} does not exist.\")\n                return False\n            DatasetModel.delete(dataset)\n            return True\n        except Exception as e:\n            print(f\"Error deleting dataset: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Refresh the dataset's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; refreshed_dataset = dataset.refresh()\n            &gt;&gt;&gt; print(refreshed_dataset)\n            Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n        Returns:\n            Optional[\"Dataset\"]: The refreshed dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = DatasetModel.get(self.id)\n            if not db_instance:\n                print(f\"Dataset with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing dataset: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; dataset_info = dataset.get_info()\n            &gt;&gt;&gt; print(dataset_info)\n            {'description': 'Test dataset', 'created_by': 'user1'}\n\n        Returns:\n            Optional[dict]: The additional information of the dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset = DatasetModel.get(current_id)\n            if not dataset:\n                print(f\"Dataset with ID {current_id} does not exist.\")\n                return None\n            dataset_info = dataset.dataset_info\n            if not dataset_info:\n                print(\"Dataset info is empty.\")\n                return None\n            return dataset_info\n        except Exception as e:\n            print(f\"Error getting dataset info: {e}\")\n            return None\n\n    def set_info(self, dataset_info: dict) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Set the additional information of the dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; updated_dataset = dataset.set_info({\"description\": \"Updated dataset\", \"created_by\": \"user1\"})\n            &gt;&gt;&gt; print(updated_dataset.get_info())\n            {'description': 'Updated dataset', 'created_by': 'user1'}\n\n        Args:\n            dataset_info (dict): The additional information to set.\n        Returns:\n            Optional[\"Dataset\"]: The updated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            dataset = DatasetModel.get(current_id)\n            if not dataset:\n                print(f\"Dataset with ID {current_id} does not exist.\")\n                return None\n            dataset = DatasetModel.update(\n                dataset,\n                dataset_info=dataset_info,\n            )\n            dataset = self.model_validate(dataset)\n            self.refresh()\n            return dataset\n        except Exception as e:\n            print(f\"Error setting dataset info: {e}\")\n            return None\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with the dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; experiments = dataset.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n\n\n        Returns:\n            Optional[List[\"Experiment\"]]: A list of experiments associated with the dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            current_id = self.id\n            experiment_datasets = ExperimentDatasetsViewModel.search(dataset_id=current_id)\n            if not experiment_datasets or len(experiment_datasets) == 0:\n                print(f\"No experiments associated with dataset ID {current_id}.\")\n                return None\n            experiments = [Experiment.model_validate(experiment) for experiment in experiment_datasets]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate the dataset with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; experiment = dataset.associate_experiment(\"experiment1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[\"Experiment\"]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentDatasetModel.get_by_parameters(\n                experiment_id=experiment.id,\n                dataset_id=self.id\n            )\n            if existing_association:\n                print(f\"Dataset {self.dataset_name} is already associated with experiment {experiment_name}.\")\n                return experiment\n            association = ExperimentDatasetModel.get_or_create(\n                experiment_id=experiment.id,\n                dataset_id=self.id\n            )\n            if not association:\n                print(f\"Failed to associate dataset {self.dataset_name} with experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating dataset with experiment: {e}\")\n            return None \n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate the dataset from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; experiment = dataset.unassociate_experiment(\"experiment1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[\"Experiment\"]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentDatasetModel.get_by_parameters(\n                experiment_id=experiment.id,\n                dataset_id=self.id\n            )\n            if not existing_association:\n                print(f\"Dataset {self.dataset_name} is not associated with experiment {experiment_name}.\")\n                return None\n            is_deleted = ExperimentDatasetModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate dataset {self.dataset_name} from experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassociating dataset from experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if the dataset belongs to an experiment.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; belongs = dataset.belongs_to_experiment(\"experiment1\")\n            &gt;&gt;&gt; print(belongs)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment.\n        Returns:\n            bool: True if the dataset belongs to the experiment, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentDatasetModel.exists(\n                experiment_id=experiment.id,\n                dataset_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if dataset belongs to experiment: {e}\")\n            return False\n\n\n    def insert_record(\n        self,\n        timestamp: datetime = None,\n        collection_date: date = None,\n        dataset_data: dict = {},\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Add a new record to the dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; success, record_ids = dataset.insert_record(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date.today(),\n            ...     dataset_data={\"key\": \"value\"},\n            ...     experiment_name=\"experiment1\",\n            ...     season_name=\"season1\",\n            ...     site_name=\"site1\",\n            ...     record_file=\"path/to/file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID(...)]\n\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n            collection_date (date, optional): The collection date of the record. Defaults to None.\n            dataset_data (dict, optional): The data of the record. Defaults to {}.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_file (str, optional): The file associated with the record. Defaults to None.\n            record_info (dict, optional): Additional information about the record. Defaults to {}.\n        Returns:\n            tuple[bool, List[str]]: A tuple containing a success flag and a list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"Please provide at least one of the following: experiment_name, season_name, site_name.\")\n\n            if not dataset_data and not record_file:\n                raise ValueError(\"Please provide either dataset_data or record_file.\")\n\n            timestamp = timestamp if timestamp else datetime.now()\n            collection_date = collection_date if collection_date else timestamp.date()\n            dataset_name = self.dataset_name\n            dataset_record = DatasetRecord.create(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                dataset_data=dataset_data,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_file=record_file if record_file else None,\n                record_info=record_info if record_info else {},\n                insert_on_create=False\n            )\n            success, inserted_record_ids = DatasetRecord.insert([dataset_record])\n            if not success:\n                print(f\"Failed to add record for dataset {self.dataset_name}.\")\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error adding record to dataset {self.dataset_name}: {e}\")\n            return False, []\n\n    def insert_records(\n        self,\n        timestamps: List[datetime] = None,\n        collection_date: date = None,\n        dataset_data: List[dict] = [],\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_files: List[str] = None,\n        record_info: List[dict] = []\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Add new records to the dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; success, record_ids = dataset.insert_records(\n            ...     timestamps=[datetime.now(), datetime.now()],\n            ...     collection_date=date.today(),\n            ...     dataset_data=[{\"key1\": \"value1\"}, {\"key2\": \"value2\"}],\n            ...     experiment_name=\"experiment1\",\n            ...     season_name=\"season1\",\n            ...     site_name=\"site1\",\n            ...     record_files=[\"path/to/file1.txt\", \"path/to/file2.txt\"],\n            ...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID(...), UUID(...)]\n\n        Args:\n            timestamps (List[datetime], optional): The timestamps of the records. Defaults to None.\n            collection_date (date, optional): The collection date of the records. Defaults to None.\n            dataset_data (List[dict], optional): The data of the records. Defaults to [].\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_files (List[str], optional): The files associated with the records. Defaults to None.\n            record_info (List[dict], optional): Additional information about the records. Defaults to [].\n        Returns:\n            tuple[bool, List[str]]: A tuple containing a success flag and a list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"Please provide at least one of the following: experiment_name, season_name, site_name.\")\n\n            if len(timestamps) == 0:\n                raise ValueError(\"Please provide at least one timestamp.\")\n\n            if len(dataset_data) != len(timestamps):\n                raise ValueError(\"dataset_data length must match timestamps length.\")\n\n            if record_files and len(record_files) != len(timestamps):\n                raise ValueError(\"record_files length must match timestamps length.\")\n\n            collection_date = collection_date if collection_date else timestamps[0].date()\n            dataset_records = []\n            timestamps_length = len(timestamps)\n\n            for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Dataset: \" + self.dataset_name):\n                dataset_record = DatasetRecord.create(\n                    timestamp=timestamps[i],\n                    collection_date=collection_date,\n                    dataset_name=self.dataset_name,\n                    dataset_data=dataset_data[i] if dataset_data else {},\n                    experiment_name=experiment_name,\n                    season_name=season_name,\n                    site_name=site_name,\n                    record_file=record_files[i] if record_files else None,\n                    record_info=record_info[i] if record_info else {},\n                    insert_on_create=False\n                )\n                dataset_records.append(dataset_record)\n            success, inserted_record_ids = DatasetRecord.insert(dataset_records)\n            if not success:\n                print(f\"Failed to add records for dataset {self.dataset_name}.\")\n                return False, []\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error adding records to dataset {self.dataset_name}: {e}\")\n            return False, []\n\n    def search_records(\n        self,\n        collection_date: date = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_info: dict = None,\n    ) -&gt; List[DatasetRecord]:\n        \"\"\"\n        Search for records in the dataset.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; records = dataset.search_records(\n            ...     collection_date=date.today(),\n            ...     experiment_name=\"experiment1\",\n            ...     season_name=\"season1\",\n            ...     site_name=\"site1\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            DatasetRecord(id=UUID(...), dataset_name='my_dataset', timestamp='2023-10-01T12:00:00', dataset_data={...}, experiment_name='experiment1', season_name='season1', site_name='site1')\n\n        Args:\n            collection_date (date, optional): The collection date of the records. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_info (dict, optional): Additional information about the records. Defaults to None.\n        Returns:\n            List[DatasetRecord]: A list of records matching the search criteria.\n        \"\"\"\n        try:\n            record_info = record_info if record_info else {}\n            record_info = {k: v for k, v in record_info.items() if v is not None}\n\n            records = DatasetRecord.search(\n                collection_date=collection_date,\n                dataset_name=self.dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_info=record_info\n            )\n            return records\n        except Exception as e:\n            print(f\"Error searching records in dataset {self.dataset_name}: {e}\")\n            return []\n\n\n    def filter_records(\n        self,\n        start_timestamp: Optional[datetime] = None,\n        end_timestamp: Optional[datetime] = None,\n        experiment_names: Optional[List[str]] = None,\n        season_names: Optional[List[str]] = None,\n        site_names: Optional[List[str]] = None\n    ) -&gt; List[DatasetRecord]:\n        \"\"\"\n        Filter records in the dataset based on criteria.\n\n        Examples:\n            &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n            &gt;&gt;&gt; records = dataset.filter_records(\n            ...     start_timestamp=datetime(2023, 1, 1),\n            ...     end_timestamp=datetime(2023, 12, 31),\n            ...     experiment_names=[\"experiment1\", \"experiment2\"],\n            ...     season_names=[\"season1\"],\n            ...     site_names=[\"site1\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            DatasetRecord(record_id=UUID(...), dataset_name='my_dataset', timestamp='2023-10-01T12:00:00', dataset_data={...}, experiment_name='experiment1', season_name='season1', site_name='site1')\n\n\n        Args:\n            start_timestamp (Optional[datetime], optional): The start timestamp for filtering. Defaults to None.\n            end_timestamp (Optional[datetime], optional): The end timestamp for filtering. Defaults to None.\n            experiment_names (Optional[List[str]], optional): The names of the experiments. Defaults to None.\n            season_names (Optional[List[str]], optional): The names of the seasons. Defaults to None.\n            site_names (Optional[List[str]], optional): The names of the sites. Defaults to None.\n        Returns:\n            List[DatasetRecord]: A list of filtered records.\n        \"\"\"\n        try:\n            records = DatasetRecord.filter(\n                dataset_names=[self.dataset_name],\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            return records\n        except Exception as e:\n            print(f\"Error filtering records in dataset {self.dataset_name}: {e}\")\n            return []\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Dataset object.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Dataset object.\"\"\"\n    return f\"Dataset(dataset_name={self.dataset_name}, collection_date={self.collection_date}, dataset_type={GEMINIDatasetType(self.dataset_type_id).name}, id={self.id})\"\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Dataset object.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Dataset object.\"\"\"\n    return f\"Dataset(dataset_name={self.dataset_name}, collection_date={self.collection_date}, dataset_type={GEMINIDatasetType(self.dataset_type_id).name}, id={self.id})\"\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate the dataset with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; experiment = dataset.associate_experiment(\"experiment1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[\"Experiment\"]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate the dataset with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; experiment = dataset.associate_experiment(\"experiment1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[\"Experiment\"]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentDatasetModel.get_by_parameters(\n            experiment_id=experiment.id,\n            dataset_id=self.id\n        )\n        if existing_association:\n            print(f\"Dataset {self.dataset_name} is already associated with experiment {experiment_name}.\")\n            return experiment\n        association = ExperimentDatasetModel.get_or_create(\n            experiment_id=experiment.id,\n            dataset_id=self.id\n        )\n        if not association:\n            print(f\"Failed to associate dataset {self.dataset_name} with experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating dataset with experiment: {e}\")\n        return None \n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if the dataset belongs to an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; belongs = dataset.belongs_to_experiment(\"experiment1\")\n&gt;&gt;&gt; print(belongs)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:     bool: True if the dataset belongs to the experiment, False otherwise.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if the dataset belongs to an experiment.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; belongs = dataset.belongs_to_experiment(\"experiment1\")\n        &gt;&gt;&gt; print(belongs)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment.\n    Returns:\n        bool: True if the dataset belongs to the experiment, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentDatasetModel.exists(\n            experiment_id=experiment.id,\n            dataset_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if dataset belongs to experiment: {e}\")\n        return False\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.create","title":"<code>create(dataset_name, dataset_info={}, dataset_type=GEMINIDatasetType.Default, collection_date=date.today(), experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new dataset. If the dataset already exists, it will return the existing dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.create(\"my_dataset\", {\"description\": \"Test dataset\"})\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>dataset_info</code> <code>dict</code> <p>Additional information about the dataset. Defaults to {{}}.</p> <code>{}</code> <code>dataset_type</code> <code>GEMINIDatasetType</code> <p>The type of the dataset. Defaults to Default.</p> <code>Default</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to today.</p> <code>today()</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Dataset\"]: The created dataset, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    dataset_name: str,\n    dataset_info: dict = {},\n    dataset_type: GEMINIDatasetType = GEMINIDatasetType.Default,\n    collection_date: date = date.today(),\n    experiment_name: str = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Create a new dataset. If the dataset already exists, it will return the existing dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.create(\"my_dataset\", {\"description\": \"Test dataset\"})\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the dataset.\n        dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n        dataset_type (GEMINIDatasetType, optional): The type of the dataset. Defaults to Default.\n        collection_date (date, optional): The collection date. Defaults to today.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[\"Dataset\"]: The created dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DatasetModel.get_or_create(\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            dataset_type_id=dataset_type.value,\n        )\n        dataset = cls.model_validate(db_instance)\n        if experiment_name:\n            dataset.associate_experiment(experiment_name=experiment_name)\n        return dataset\n    except Exception as e:\n        print(f\"Error creating dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.delete","title":"<code>delete()</code>","text":"<p>Delete a dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; success = dataset.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the dataset was deleted successfully, False otherwise.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete a dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; success = dataset.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the dataset was deleted successfully, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset = DatasetModel.get(current_id)\n        if not dataset:\n            print(f\"Dataset with ID {current_id} does not exist.\")\n            return False\n        DatasetModel.delete(dataset)\n        return True\n    except Exception as e:\n        print(f\"Error deleting dataset: {e}\")\n        return False\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.exists","title":"<code>exists(dataset_name)</code>  <code>classmethod</code>","text":"<p>Check if a dataset with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dataset.exists(\"my_dataset\")\nTrue\n&gt;&gt;&gt; Dataset.exists(\"non_existent_dataset\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <p>Returns:     bool: True if the dataset exists, False otherwise.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    dataset_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if a dataset with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Dataset.exists(\"my_dataset\")\n        True\n        &gt;&gt;&gt; Dataset.exists(\"non_existent_dataset\")\n        False\n\n    Args:\n        dataset_name (str): The name of the dataset.\n    Returns:\n        bool: True if the dataset exists, False otherwise.\n    \"\"\"\n    try:\n        exists = DatasetModel.exists(\n            dataset_name=dataset_name,\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of dataset: {e}\")\n        return False\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.filter_records","title":"<code>filter_records(start_timestamp=None, end_timestamp=None, experiment_names=None, season_names=None, site_names=None)</code>","text":"<p>Filter records in the dataset based on criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; records = dataset.filter_records(\n...     start_timestamp=datetime(2023, 1, 1),\n...     end_timestamp=datetime(2023, 12, 31),\n...     experiment_names=[\"experiment1\", \"experiment2\"],\n...     season_names=[\"season1\"],\n...     site_names=[\"site1\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nDatasetRecord(record_id=UUID(...), dataset_name='my_dataset', timestamp='2023-10-01T12:00:00', dataset_data={...}, experiment_name='experiment1', season_name='season1', site_name='site1')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>Optional[datetime]</code> <p>The start timestamp for filtering. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>Optional[datetime]</code> <p>The end timestamp for filtering. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>Optional[List[str]]</code> <p>The names of the experiments. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>Optional[List[str]]</code> <p>The names of the seasons. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>Optional[List[str]]</code> <p>The names of the sites. Defaults to None.</p> <code>None</code> <p>Returns:     List[DatasetRecord]: A list of filtered records.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def filter_records(\n    self,\n    start_timestamp: Optional[datetime] = None,\n    end_timestamp: Optional[datetime] = None,\n    experiment_names: Optional[List[str]] = None,\n    season_names: Optional[List[str]] = None,\n    site_names: Optional[List[str]] = None\n) -&gt; List[DatasetRecord]:\n    \"\"\"\n    Filter records in the dataset based on criteria.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; records = dataset.filter_records(\n        ...     start_timestamp=datetime(2023, 1, 1),\n        ...     end_timestamp=datetime(2023, 12, 31),\n        ...     experiment_names=[\"experiment1\", \"experiment2\"],\n        ...     season_names=[\"season1\"],\n        ...     site_names=[\"site1\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        DatasetRecord(record_id=UUID(...), dataset_name='my_dataset', timestamp='2023-10-01T12:00:00', dataset_data={...}, experiment_name='experiment1', season_name='season1', site_name='site1')\n\n\n    Args:\n        start_timestamp (Optional[datetime], optional): The start timestamp for filtering. Defaults to None.\n        end_timestamp (Optional[datetime], optional): The end timestamp for filtering. Defaults to None.\n        experiment_names (Optional[List[str]], optional): The names of the experiments. Defaults to None.\n        season_names (Optional[List[str]], optional): The names of the seasons. Defaults to None.\n        site_names (Optional[List[str]], optional): The names of the sites. Defaults to None.\n    Returns:\n        List[DatasetRecord]: A list of filtered records.\n    \"\"\"\n    try:\n        records = DatasetRecord.filter(\n            dataset_names=[self.dataset_name],\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        return records\n    except Exception as e:\n        print(f\"Error filtering records in dataset {self.dataset_name}: {e}\")\n        return []\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.get","title":"<code>get(dataset_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a dataset by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Dataset\"]: The retrieved dataset, or None if not found.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    dataset_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Retrieve a dataset by its name.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the dataset.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[\"Dataset\"]: The retrieved dataset, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentDatasetsViewModel.get_by_parameters(\n            dataset_name=dataset_name,\n            experiment_name=experiment_name\n        )\n        if not db_instance:\n            print(f\"Dataset with name {dataset_name} not found.\")\n            return None\n        dataset = cls.model_validate(db_instance)\n        return dataset\n    except Exception as e:\n        print(f\"Error getting dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all datasets.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; datasets = Dataset.get_all()\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(dataset_name=my_dataset1, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\nDataset(dataset_name=my_dataset2, collection_date=2023-10-02, dataset_type=Sensor, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Dataset]]</code> <p>Optional[List[\"Dataset\"]]: A list of all datasets, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Dataset\"]]:\n    \"\"\"\n    Retrieve all datasets.\n\n    Examples:\n        &gt;&gt;&gt; datasets = Dataset.get_all()\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(dataset_name=my_dataset1, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n        Dataset(dataset_name=my_dataset2, collection_date=2023-10-02, dataset_type=Sensor, id=UUID('...'))\n\n    Returns:\n        Optional[List[\"Dataset\"]]: A list of all datasets, or None if an error occurred.\n    \"\"\"\n    try:\n        datasets = DatasetModel.all()\n        if not datasets or len(datasets) == 0:\n            print(\"No datasets found.\")\n            return None\n        datasets = [cls.model_validate(dataset) for dataset in datasets]\n        return datasets\n    except Exception as e:\n        print(f\"Error getting all datasets: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with the dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; experiments = dataset.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[\"Experiment\"]]: A list of experiments associated with the dataset, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with the dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; experiments = dataset.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n\n\n    Returns:\n        Optional[List[\"Experiment\"]]: A list of experiments associated with the dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        current_id = self.id\n        experiment_datasets = ExperimentDatasetsViewModel.search(dataset_id=current_id)\n        if not experiment_datasets or len(experiment_datasets) == 0:\n            print(f\"No experiments associated with dataset ID {current_id}.\")\n            return None\n        experiments = [Experiment.model_validate(experiment) for experiment in experiment_datasets]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a dataset by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the dataset.</p> required <p>Returns:     Optional[\"Dataset\"]: The retrieved dataset, or None if not found.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Retrieve a dataset by its ID.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n    Args:\n        id (UUID | int | str): The ID of the dataset.\n    Returns:\n        Optional[\"Dataset\"]: The retrieved dataset, or None if not found.\n    \"\"\"\n    try:\n        db_instance = DatasetModel.get(id)\n        if not db_instance:\n            print(f\"Dataset with ID {id} does not exist.\")\n            return None\n        dataset = cls.model_validate(db_instance)\n        return dataset\n    except Exception as e:\n        print(f\"Error getting dataset by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; dataset_info = dataset.get_info()\n&gt;&gt;&gt; print(dataset_info)\n{'description': 'Test dataset', 'created_by': 'user1'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The additional information of the dataset, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; dataset_info = dataset.get_info()\n        &gt;&gt;&gt; print(dataset_info)\n        {'description': 'Test dataset', 'created_by': 'user1'}\n\n    Returns:\n        Optional[dict]: The additional information of the dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset = DatasetModel.get(current_id)\n        if not dataset:\n            print(f\"Dataset with ID {current_id} does not exist.\")\n            return None\n        dataset_info = dataset.dataset_info\n        if not dataset_info:\n            print(\"Dataset info is empty.\")\n            return None\n        return dataset_info\n    except Exception as e:\n        print(f\"Error getting dataset info: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.insert_record","title":"<code>insert_record(timestamp=None, collection_date=None, dataset_data={}, experiment_name=None, season_name=None, site_name=None, record_file=None, record_info={})</code>","text":"<p>Add a new record to the dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; success, record_ids = dataset.insert_record(\n...     timestamp=datetime.now(),\n...     collection_date=date.today(),\n...     dataset_data={\"key\": \"value\"},\n...     experiment_name=\"experiment1\",\n...     season_name=\"season1\",\n...     site_name=\"site1\",\n...     record_file=\"path/to/file.txt\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID(...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date of the record. Defaults to None.</p> <code>None</code> <code>dataset_data</code> <code>dict</code> <p>The data of the record. Defaults to {}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file associated with the record. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional information about the record. Defaults to {}.</p> <code>{}</code> <p>Returns:     tuple[bool, List[str]]: A tuple containing a success flag and a list of inserted record IDs.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def insert_record(\n    self,\n    timestamp: datetime = None,\n    collection_date: date = None,\n    dataset_data: dict = {},\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Add a new record to the dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; success, record_ids = dataset.insert_record(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date.today(),\n        ...     dataset_data={\"key\": \"value\"},\n        ...     experiment_name=\"experiment1\",\n        ...     season_name=\"season1\",\n        ...     site_name=\"site1\",\n        ...     record_file=\"path/to/file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID(...)]\n\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n        collection_date (date, optional): The collection date of the record. Defaults to None.\n        dataset_data (dict, optional): The data of the record. Defaults to {}.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_file (str, optional): The file associated with the record. Defaults to None.\n        record_info (dict, optional): Additional information about the record. Defaults to {}.\n    Returns:\n        tuple[bool, List[str]]: A tuple containing a success flag and a list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"Please provide at least one of the following: experiment_name, season_name, site_name.\")\n\n        if not dataset_data and not record_file:\n            raise ValueError(\"Please provide either dataset_data or record_file.\")\n\n        timestamp = timestamp if timestamp else datetime.now()\n        collection_date = collection_date if collection_date else timestamp.date()\n        dataset_name = self.dataset_name\n        dataset_record = DatasetRecord.create(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            dataset_data=dataset_data,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_file=record_file if record_file else None,\n            record_info=record_info if record_info else {},\n            insert_on_create=False\n        )\n        success, inserted_record_ids = DatasetRecord.insert([dataset_record])\n        if not success:\n            print(f\"Failed to add record for dataset {self.dataset_name}.\")\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error adding record to dataset {self.dataset_name}: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.insert_records","title":"<code>insert_records(timestamps=None, collection_date=None, dataset_data=[], experiment_name=None, season_name=None, site_name=None, record_files=None, record_info=[])</code>","text":"<p>Add new records to the dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; success, record_ids = dataset.insert_records(\n...     timestamps=[datetime.now(), datetime.now()],\n...     collection_date=date.today(),\n...     dataset_data=[{\"key1\": \"value1\"}, {\"key2\": \"value2\"}],\n...     experiment_name=\"experiment1\",\n...     season_name=\"season1\",\n...     site_name=\"site1\",\n...     record_files=[\"path/to/file1.txt\", \"path/to/file2.txt\"],\n...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID(...), UUID(...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamps</code> <code>List[datetime]</code> <p>The timestamps of the records. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date of the records. Defaults to None.</p> <code>None</code> <code>dataset_data</code> <code>List[dict]</code> <p>The data of the records. Defaults to [].</p> <code>[]</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_files</code> <code>List[str]</code> <p>The files associated with the records. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>List[dict]</code> <p>Additional information about the records. Defaults to [].</p> <code>[]</code> <p>Returns:     tuple[bool, List[str]]: A tuple containing a success flag and a list of inserted record IDs.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def insert_records(\n    self,\n    timestamps: List[datetime] = None,\n    collection_date: date = None,\n    dataset_data: List[dict] = [],\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_files: List[str] = None,\n    record_info: List[dict] = []\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Add new records to the dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; success, record_ids = dataset.insert_records(\n        ...     timestamps=[datetime.now(), datetime.now()],\n        ...     collection_date=date.today(),\n        ...     dataset_data=[{\"key1\": \"value1\"}, {\"key2\": \"value2\"}],\n        ...     experiment_name=\"experiment1\",\n        ...     season_name=\"season1\",\n        ...     site_name=\"site1\",\n        ...     record_files=[\"path/to/file1.txt\", \"path/to/file2.txt\"],\n        ...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID(...), UUID(...)]\n\n    Args:\n        timestamps (List[datetime], optional): The timestamps of the records. Defaults to None.\n        collection_date (date, optional): The collection date of the records. Defaults to None.\n        dataset_data (List[dict], optional): The data of the records. Defaults to [].\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_files (List[str], optional): The files associated with the records. Defaults to None.\n        record_info (List[dict], optional): Additional information about the records. Defaults to [].\n    Returns:\n        tuple[bool, List[str]]: A tuple containing a success flag and a list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"Please provide at least one of the following: experiment_name, season_name, site_name.\")\n\n        if len(timestamps) == 0:\n            raise ValueError(\"Please provide at least one timestamp.\")\n\n        if len(dataset_data) != len(timestamps):\n            raise ValueError(\"dataset_data length must match timestamps length.\")\n\n        if record_files and len(record_files) != len(timestamps):\n            raise ValueError(\"record_files length must match timestamps length.\")\n\n        collection_date = collection_date if collection_date else timestamps[0].date()\n        dataset_records = []\n        timestamps_length = len(timestamps)\n\n        for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Dataset: \" + self.dataset_name):\n            dataset_record = DatasetRecord.create(\n                timestamp=timestamps[i],\n                collection_date=collection_date,\n                dataset_name=self.dataset_name,\n                dataset_data=dataset_data[i] if dataset_data else {},\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_file=record_files[i] if record_files else None,\n                record_info=record_info[i] if record_info else {},\n                insert_on_create=False\n            )\n            dataset_records.append(dataset_record)\n        success, inserted_record_ids = DatasetRecord.insert(dataset_records)\n        if not success:\n            print(f\"Failed to add records for dataset {self.dataset_name}.\")\n            return False, []\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error adding records to dataset {self.dataset_name}: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the dataset's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; refreshed_dataset = dataset.refresh()\n&gt;&gt;&gt; print(refreshed_dataset)\nDataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Dataset]</code> <p>Optional[\"Dataset\"]: The refreshed dataset, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Refresh the dataset's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; refreshed_dataset = dataset.refresh()\n        &gt;&gt;&gt; print(refreshed_dataset)\n        Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n    Returns:\n        Optional[\"Dataset\"]: The refreshed dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = DatasetModel.get(self.id)\n        if not db_instance:\n            print(f\"Dataset with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.search","title":"<code>search(dataset_name=None, dataset_info=None, dataset_type=None, collection_date=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for datasets based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; datasets = Dataset.search(dataset_name=\"my_dataset\")\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>dataset_info</code> <code>dict</code> <p>Additional information about the dataset. Defaults to None.</p> <code>None</code> <code>dataset_type</code> <code>GEMINIDatasetType</code> <p>The type of the dataset. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[\"Dataset\"]]: A list of datasets matching the search criteria, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    dataset_name: str = None,\n    dataset_info: dict = None,\n    dataset_type: GEMINIDatasetType = None,\n    collection_date: date = None,\n    experiment_name: str = None,\n) -&gt; Optional[List[\"Dataset\"]]:\n    \"\"\"\n    Search for datasets based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; datasets = Dataset.search(dataset_name=\"my_dataset\")\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(dataset_name=my_dataset, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n    Args:\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        dataset_info (dict, optional): Additional information about the dataset. Defaults to None.\n        dataset_type (GEMINIDatasetType, optional): The type of the dataset. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[List[\"Dataset\"]]: A list of datasets matching the search criteria, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([dataset_name, dataset_info, dataset_type, collection_date, experiment_name]):\n            print(\"At least one parameter must be provided.\")\n            return None\n        datasets = ExperimentDatasetsViewModel.search(\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            dataset_type=dataset_type,\n            collection_date=collection_date,\n            experiment_name=experiment_name\n        )\n        if not datasets or len(datasets) == 0:\n            print(\"No datasets found with the provided search parameters.\")\n            return None\n        datasets = [cls.model_validate(dataset) for dataset in datasets]\n        return datasets\n    except Exception as e:\n        print(f\"Error searching datasets: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.search_records","title":"<code>search_records(collection_date=None, experiment_name=None, season_name=None, site_name=None, record_info=None)</code>","text":"<p>Search for records in the dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; records = dataset.search_records(\n...     collection_date=date.today(),\n...     experiment_name=\"experiment1\",\n...     season_name=\"season1\",\n...     site_name=\"site1\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nDatasetRecord(id=UUID(...), dataset_name='my_dataset', timestamp='2023-10-01T12:00:00', dataset_data={...}, experiment_name='experiment1', season_name='season1', site_name='site1')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>collection_date</code> <code>date</code> <p>The collection date of the records. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional information about the records. Defaults to None.</p> <code>None</code> <p>Returns:     List[DatasetRecord]: A list of records matching the search criteria.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def search_records(\n    self,\n    collection_date: date = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_info: dict = None,\n) -&gt; List[DatasetRecord]:\n    \"\"\"\n    Search for records in the dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; records = dataset.search_records(\n        ...     collection_date=date.today(),\n        ...     experiment_name=\"experiment1\",\n        ...     season_name=\"season1\",\n        ...     site_name=\"site1\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        DatasetRecord(id=UUID(...), dataset_name='my_dataset', timestamp='2023-10-01T12:00:00', dataset_data={...}, experiment_name='experiment1', season_name='season1', site_name='site1')\n\n    Args:\n        collection_date (date, optional): The collection date of the records. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_info (dict, optional): Additional information about the records. Defaults to None.\n    Returns:\n        List[DatasetRecord]: A list of records matching the search criteria.\n    \"\"\"\n    try:\n        record_info = record_info if record_info else {}\n        record_info = {k: v for k, v in record_info.items() if v is not None}\n\n        records = DatasetRecord.search(\n            collection_date=collection_date,\n            dataset_name=self.dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_info=record_info\n        )\n        return records\n    except Exception as e:\n        print(f\"Error searching records in dataset {self.dataset_name}: {e}\")\n        return []\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.set_info","title":"<code>set_info(dataset_info)</code>","text":"<p>Set the additional information of the dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; updated_dataset = dataset.set_info({\"description\": \"Updated dataset\", \"created_by\": \"user1\"})\n&gt;&gt;&gt; print(updated_dataset.get_info())\n{'description': 'Updated dataset', 'created_by': 'user1'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_info</code> <code>dict</code> <p>The additional information to set.</p> required <p>Returns:     Optional[\"Dataset\"]: The updated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def set_info(self, dataset_info: dict) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Set the additional information of the dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; updated_dataset = dataset.set_info({\"description\": \"Updated dataset\", \"created_by\": \"user1\"})\n        &gt;&gt;&gt; print(updated_dataset.get_info())\n        {'description': 'Updated dataset', 'created_by': 'user1'}\n\n    Args:\n        dataset_info (dict): The additional information to set.\n    Returns:\n        Optional[\"Dataset\"]: The updated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        dataset = DatasetModel.get(current_id)\n        if not dataset:\n            print(f\"Dataset with ID {current_id} does not exist.\")\n            return None\n        dataset = DatasetModel.update(\n            dataset,\n            dataset_info=dataset_info,\n        )\n        dataset = self.model_validate(dataset)\n        self.refresh()\n        return dataset\n    except Exception as e:\n        print(f\"Error setting dataset info: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate the dataset from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; experiment = dataset.unassociate_experiment(\"experiment1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[\"Experiment\"]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate the dataset from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; experiment = dataset.unassociate_experiment(\"experiment1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=experiment1, experiment_start_date='2023-10-01', experiment_end_date='2023-10-31', id=UUID('...'))\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[\"Experiment\"]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentDatasetModel.get_by_parameters(\n            experiment_id=experiment.id,\n            dataset_id=self.id\n        )\n        if not existing_association:\n            print(f\"Dataset {self.dataset_name} is not associated with experiment {experiment_name}.\")\n            return None\n        is_deleted = ExperimentDatasetModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate dataset {self.dataset_name} from experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassociating dataset from experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/datasets/#gemini.api.dataset.Dataset.update","title":"<code>update(dataset_name=None, dataset_info=None, dataset_type=None, collection_date=None)</code>","text":"<p>Update the details of a dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n&gt;&gt;&gt; updated_dataset = dataset.update(dataset_name=\"new_dataset_name\", dataset_info={\"description\": \"Updated dataset\"})\n&gt;&gt;&gt; print(updated_dataset)\nDataset(dataset_name=new_dataset_name, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The new name of the dataset. Defaults to None.</p> <code>None</code> <code>dataset_info</code> <code>dict</code> <p>The new additional information about the dataset. Defaults to None.</p> <code>None</code> <code>dataset_type</code> <code>GEMINIDatasetType</code> <p>The new type of the dataset. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The new collection date. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Dataset\"]: The updated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/dataset.py</code> <pre><code>def update(\n    self,\n    dataset_name: str = None,\n    dataset_info: dict = None,\n    dataset_type: GEMINIDatasetType = None,\n    collection_date: date = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Update the details of a dataset.\n\n    Examples:\n        &gt;&gt;&gt; dataset = Dataset.get(\"my_dataset\")\n        &gt;&gt;&gt; updated_dataset = dataset.update(dataset_name=\"new_dataset_name\", dataset_info={\"description\": \"Updated dataset\"})\n        &gt;&gt;&gt; print(updated_dataset)\n        Dataset(dataset_name=new_dataset_name, collection_date=2023-10-01, dataset_type=Default, id=UUID('...'))\n\n    Args:\n        dataset_name (str, optional): The new name of the dataset. Defaults to None.\n        dataset_info (dict, optional): The new additional information about the dataset. Defaults to None.\n        dataset_type (GEMINIDatasetType, optional): The new type of the dataset. Defaults to None.\n        collection_date (date, optional): The new collection date. Defaults to None.\n    Returns:\n        Optional[\"Dataset\"]: The updated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([dataset_name, dataset_info, dataset_type, collection_date]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n        current_id = self.id\n        dataset = DatasetModel.get(current_id)\n        if not dataset:\n            print(f\"Dataset with ID {current_id} does not exist.\")\n            return None\n        dataset = DatasetModel.update(\n            dataset,\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            dataset_type_id=dataset_type.value if dataset_type else None,\n            collection_date=collection_date\n        )\n        dataset = self.model_validate(dataset)\n        self.refresh()\n        return dataset\n    except Exception as e:\n        print(f\"Error updating dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/experiments/","title":"Experiments API","text":""},{"location":"api/experiments/#description","title":"Description","text":"<p>An experiment is the core entity of the GEMINI Framework. An experiment can have one or many of the following: </p> <ul> <li>Cultivars</li> <li>Datasets</li> <li>Models</li> <li>Plots</li> <li>Procedures</li> <li>Scripts</li> <li>Seasons</li> <li>Sensors</li> <li>Sites</li> <li>Traits</li> </ul>"},{"location":"api/experiments/#module","title":"Module","text":"<p>This module defines the Experiment class, which represents an experiment entity, including its metadata and associations to seasons, cultivars, procedures, scripts, models, sensors, sites, datasets, traits, and plots.</p> <p>It includes methods for creating, retrieving, updating, and deleting experiments, as well as methods for checking existence, searching, and managing associations with related entities.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if an experiment with the given name exists.</li> <li><code>create</code>: Create a new experiment.</li> <li><code>get</code>: Retrieve an experiment by its name.</li> <li><code>get_by_id</code>: Retrieve an experiment by its ID.</li> <li><code>get_all</code>: Retrieve all experiments.</li> <li><code>search</code>: Search for experiments based on various criteria.</li> <li><code>update</code>: Update the details of an experiment.</li> <li><code>delete</code>: Delete an experiment.</li> <li><code>refresh</code>: Refresh the experiment's data from the database.</li> <li><code>get_info</code>: Get the additional information of the experiment.</li> <li><code>set_info</code>: Set the additional information of the experiment.</li> <li>Association methods for seasons, cultivars, procedures, scripts, models, sensors, sensor platforms, sites, datasets, traits, and plots.</li> </ul>"},{"location":"api/experiments/#gemini.api.experiment.Experiment","title":"<code>Experiment</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents an experiment entity, including its metadata and associations to seasons, cultivars, procedures, scripts, models, sensors, sites, datasets, traits, and plots.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the experiment.</p> <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> <code>experiment_info</code> <code>Optional[dict]</code> <p>Additional information about the experiment.</p> <code>experiment_start_date</code> <code>Optional[date]</code> <p>The start date of the experiment.</p> <code>experiment_end_date</code> <code>Optional[date]</code> <p>The end date of the experiment.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>class Experiment(APIBase):\n    \"\"\"\n    Represents an experiment entity, including its metadata and associations to seasons, cultivars, procedures, scripts, models, sensors, sites, datasets, traits, and plots.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the experiment.\n        experiment_name (str): The name of the experiment.\n        experiment_info (Optional[dict]): Additional information about the experiment.\n        experiment_start_date (Optional[date]): The start date of the experiment.\n        experiment_end_date (Optional[date]): The end date of the experiment.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"experiment_id\"))\n\n    experiment_name: str\n    experiment_info: Optional[dict] = None\n    experiment_start_date: Optional[date] = None\n    experiment_end_date: Optional[date] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Experiment object.\"\"\"\n        return f\"Experiment(experiment_name={self.experiment_name}, experiment_start_date={self.experiment_start_date}, experiment_end_date={self.experiment_end_date}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Experiment object.\"\"\"\n        return f\"Experiment(experiment_name={self.experiment_name}, experiment_start_date={self.experiment_start_date}, experiment_end_date={self.experiment_end_date}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        experiment_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if an experiment with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Experiment.exists(\"My Experiment\")\n            True\n            &gt;&gt;&gt; Experiment.exists(\"Nonexistent Experiment\")\n            False\n\n        Args:\n            experiment_name (str): The name of the experiment.\n        Returns:\n            bool: True if the experiment exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ExperimentModel.exists(experiment_name=experiment_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of experiment: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        experiment_name: str,\n        experiment_info: dict = {},\n        experiment_start_date: date = date.today(),\n        experiment_end_date: date = date.today(),\n    ) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Create a new experiment. If an experiment with the same name already exists, it will return the existing one.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.create(\"My Experiment\", {\"description\": \"Test experiment\"})\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment.\n            experiment_info (dict, optional): Additional information about the experiment. Defaults to {{}}.\n            experiment_start_date (date, optional): The start date. Defaults to today.\n            experiment_end_date (date, optional): The end date. Defaults to today.\n        Returns:\n            Optional[\"Experiment\"]: The created experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ExperimentModel.get_or_create(\n                experiment_name=experiment_name,\n                experiment_info=experiment_info,\n                experiment_start_date=experiment_start_date,\n                experiment_end_date=experiment_end_date,\n            )\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(\"Error creating experiment:\", e)\n            return None\n\n    @classmethod\n    def get(cls, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Retrieve an experiment by its name.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment.\n        Returns:\n            Optional[\"Experiment\"]: The experiment, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentModel.get_by_parameters(\n                experiment_name=experiment_name,\n            )\n            if not db_instance:\n                print(f\"Experiment with name {experiment_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(\"Error getting experiment:\", e)\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Retrieve an experiment by its ID.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the experiment.\n        Returns:\n            Optional[\"Experiment\"]: The experiment, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentModel.get(id)\n            if not db_instance:\n                print(f\"Experiment with ID {id} does not exist.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(\"Error getting experiment by ID:\", e)\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Retrieve all experiments.\n\n        Examples:\n            &gt;&gt;&gt; experiments = Experiment.get_all()\n            &gt;&gt;&gt; for exp in experiments:\n            ...     print(exp)\n            Experiment(experiment_name=Experiment 1, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Experiment\"]]: A list of all experiments, or None if an error occurred.\n        \"\"\"\n        try:\n            experiments = ExperimentModel.all()\n            if not experiments or len(experiments) == 0:\n                print(\"No experiments found.\")\n                return None\n            experiments = [cls.model_validate(experiment) for experiment in experiments]\n            return experiments\n        except Exception as e:\n            print(\"Error getting all experiments:\", e)\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        experiment_name: str = None,\n        experiment_info: dict = None,\n        experiment_start_date: date = None,\n        experiment_end_date: date = None\n    ) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Search for experiments based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; experiments = Experiment.search(experiment_name=\"My Experiment\")\n            &gt;&gt;&gt; for exp in experiments:\n            ...     print(exp)\n            Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n        Args:\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            experiment_info (dict, optional): Additional information. Defaults to None.\n            experiment_start_date (date, optional): The start date. Defaults to None.\n            experiment_end_date (date, optional): The end date. Defaults to None.\n        Returns:\n            Optional[List[\"Experiment\"]]: A list of matching experiments, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, experiment_info, experiment_start_date, experiment_end_date]):\n                print(\"At least one parameter must be provided for search.\")\n                return None\n            experiments = ExperimentModel.search(\n                experiment_name=experiment_name,\n                experiment_info=experiment_info,\n                experiment_start_date=experiment_start_date,\n                experiment_end_date=experiment_end_date\n            )\n            if not experiments or len(experiments) == 0:\n                print(\"No experiments found with the provided search parameters.\")\n                return None\n            experiments = [cls.model_validate(experiment) for experiment in experiments]\n            return experiments\n        except Exception as e:\n            print(\"Error searching experiments:\", e)\n            return None\n\n    def update(\n        self,\n        experiment_name: str = None, \n        experiment_info: dict = None,\n        experiment_start_date: date = None,\n        experiment_end_date: date = None\n    ) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Update the details of the experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; updated_experiment = experiment.update(experiment_name=\"Updated Experiment\")\n            &gt;&gt;&gt; print(updated_experiment)\n            Experiment(experiment_name=Updated Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n        Args:\n            experiment_name (str, optional): The new name. Defaults to None.\n            experiment_info (dict, optional): The new information. Defaults to None.\n            experiment_start_date (date, optional): The new start date. Defaults to None.\n            experiment_end_date (date, optional): The new end date. Defaults to None.\n        Returns:\n            Optional[\"Experiment\"]: The updated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, experiment_info, experiment_start_date, experiment_end_date]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n\n            current_id = self.id\n            experiment = ExperimentModel.get(current_id)\n            if not experiment:\n                print(f\"Experiment with ID {current_id} does not exist.\")\n                return None\n\n            updated_experiment = ExperimentModel.update(\n                experiment,\n                experiment_name=experiment_name,\n                experiment_info=experiment_info,\n                experiment_start_date=experiment_start_date,\n                experiment_end_date=experiment_end_date\n            )\n            updated_experiment = self.model_validate(updated_experiment)\n            self.refresh()\n            return updated_experiment\n        except Exception as e:\n            print(\"Error updating experiment:\", e)\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; success = experiment.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the experiment was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            experiment = ExperimentModel.get(current_id)\n            if not experiment:\n                print(f\"Experiment with ID {current_id} does not exist.\")\n                return False\n            ExperimentModel.delete(experiment)\n            return True\n        except Exception as e:\n            print(\"Error deleting experiment:\", e)\n            return False\n\n    def refresh(self) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Refresh the experiment's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; refreshed_experiment = experiment.refresh()\n            &gt;&gt;&gt; print(refreshed_experiment)\n            Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n        Returns:\n            Optional[\"Experiment\"]: The refreshed experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ExperimentModel.get(self.id)\n            if not db_instance:\n                print(f\"Experiment with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(\"Error refreshing experiment:\", e)\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; info = experiment.get_info()\n            &gt;&gt;&gt; print(info)\n            {'description': 'Test experiment', 'created_by': 'user'}\n\n        Returns:\n            Optional[dict]: The experiment's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            experiment = ExperimentModel.get(current_id)\n            if not experiment:\n                print(f\"Experiment with ID {current_id} does not exist.\")\n                return None\n            experiment_info = experiment.experiment_info\n            if not experiment_info:\n                print(\"Experiment info is empty.\")\n                return None\n            return experiment_info\n        except Exception as e:\n            print(\"Error getting experiment info:\", e)\n            return None\n\n    def set_info(self, experiment_info: dict) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Set the additional information of the experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; updated_experiment = experiment.set_info({\"description\": \"Updated description\"})\n            &gt;&gt;&gt; print(updated_experiment.get_info())\n            {'description': 'Updated description'}\n\n        Args:\n            experiment_info (dict): The new information to set.\n        Returns:\n            Optional[\"Experiment\"]: The updated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            experiment = ExperimentModel.get(current_id)\n            if not experiment:\n                print(f\"Experiment with ID {current_id} does not exist.\")\n                return None\n            updated_experiment = ExperimentModel.update(\n                experiment,\n                experiment_info=experiment_info,\n            )\n            updated_experiment = self.model_validate(updated_experiment)\n            self.refresh()\n            return updated_experiment\n        except Exception as e:\n            print(\"Error setting experiment info:\", e)\n            return None\n\n    # region Season\n\n    def get_associated_seasons(self) -&gt; Optional[List[\"Season\"]]:\n        \"\"\"\n        Get all seasons associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; seasons = experiment.get_associated_seasons()\n            &gt;&gt;&gt; for season in seasons:\n            ...     print(season)\n            Season(season_name=Spring 2024, season_start_date=2024-03-01, season_end_date=2024-05-31, id=UUID(...))\n            Season(season_name=Summer 2024, season_start_date=2024-06-01, season_end_date=2024-08-31, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Season\"]]: A list of associated seasons, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.season import Season\n            experiment_seasons = ExperimentSeasonsViewModel.search(experiment_id=self.id)\n            if not experiment_seasons or len(experiment_seasons) == 0:\n                print(\"No seasons found for this experiment.\")\n                return None\n            seasons = [Season.model_validate(season) for season in experiment_seasons]\n            return seasons\n        except Exception as e:\n            print(\"Error getting associated seasons:\", e)\n            return None\n\n    def create_new_season(\n        self,\n        season_name: str,\n        season_info: dict = {},\n        season_start_date: date = date.today(),\n        season_end_date: date = date.today(),\n    ) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Create and associate a new season with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_season = experiment.create_new_season(\"Spring 2024\", {\"description\": \"Spring season\"})\n            &gt;&gt;&gt; print(new_season)\n            Season(season_name=Spring 2024, season_start_date=2024-03-01, season_end_date=2024-05-31, id=UUID(...))\n\n        Args:\n            season_name (str): The name of the new season.\n            season_info (dict, optional): Additional information about the season. Defaults to {{}}.\n            season_start_date (date, optional): The start date of the season. Defaults to today.\n            season_end_date (date, optional): The end date of the season. Defaults to today.\n        Returns:\n            Optional[\"Season\"]: The created and associated season, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.season import Season\n            new_season = Season.create(\n                season_name=season_name,\n                season_info=season_info,\n                season_start_date=season_start_date,\n                season_end_date=season_end_date,\n                experiment_name=self.experiment_name\n            )\n            if not new_season:\n                print(\"Error creating new season.\")\n                return None\n            return new_season\n        except Exception as e:\n            print(\"Error creating new season:\", e)\n            return None\n\n    # endregion\n\n    # region Cultivar\n    def get_associated_cultivars(self) -&gt; Optional[List[\"Cultivar\"]]:\n        \"\"\"\n        Get all cultivars associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; cultivars = experiment.get_associated_cultivars()\n            &gt;&gt;&gt; for cultivar in cultivars:\n            ...     print(cultivar)\n            Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Cultivar\"]]: A list of associated cultivars, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            experiment_cultivars = ExperimentCultivarsViewModel.search(experiment_id=self.id)\n            if not experiment_cultivars or len(experiment_cultivars) == 0:\n                print(\"No cultivars found for this experiment.\")\n                return None\n            cultivars = [Cultivar.model_validate(cultivar) for cultivar in experiment_cultivars]\n            return cultivars\n        except Exception as e:\n            print(\"Error getting associated cultivars:\", e)\n            return None\n\n    def create_new_cultivar(\n        self,\n        cultivar_population: str,\n        cultivar_accession: str,\n        cultivar_info: dict = {},\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Create and associate a new cultivar with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_cultivar = experiment.create_new_cultivar(\"Population A\", \"Accession 123\", {\"description\": \"New cultivar\"})\n            &gt;&gt;&gt; print(new_cultivar)\n            Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n        Args:\n            cultivar_population (str): The population of the new cultivar.\n            cultivar_accession (str): The accession of the new cultivar.\n            cultivar_info (dict, optional): Additional information about the cultivar. Defaults to {{}}.\n        Returns:\n            Optional[\"Cultivar\"]: The created and associated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            new_cultivar = Cultivar.create(\n                cultivar_population=cultivar_population,\n                cultivar_accession=cultivar_accession,\n                cultivar_info=cultivar_info,\n                experiment_name=self.experiment_name\n            )\n            if not new_cultivar:\n                print(\"Error creating new cultivar.\")\n                return None\n            return new_cultivar\n        except Exception as e:\n            print(\"Error creating new cultivar:\", e)\n            return None\n\n    def associate_cultivar(\n        self,\n        cultivar_population: str,\n        cultivar_accession: str,\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Associate an existing cultivar with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; cultivar = experiment.associate_cultivar(\"Population A\", \"Accession 123\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n        Args:\n            cultivar_population (str): The population of the cultivar.\n            cultivar_accession (str): The accession of the cultivar.\n        Returns:\n            Optional[\"Cultivar\"]: The associated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(cultivar_population=cultivar_population, cultivar_accession=cultivar_accession)\n            if not cultivar:\n                print(\"Cultivar not found.\")\n                return None\n            cultivar.associate_experiment(experiment_name=self.experiment_name)\n            return cultivar\n        except Exception as e:\n            print(\"Error associating cultivar:\", e)\n            return None\n\n    def unassociate_cultivar(\n        self,\n        cultivar_population: str,\n        cultivar_accession: str,\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Unassociate a cultivar from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; cultivar = experiment.unassociate_cultivar(\"Population A\", \"Accession 123\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n        Args:\n            cultivar_population (str): The population of the cultivar.\n            cultivar_accession (str): The accession of the cultivar.\n        Returns:\n            Optional[\"Cultivar\"]: The unassociated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(cultivar_population=cultivar_population, cultivar_accession=cultivar_accession)\n            if not cultivar:\n                print(\"Cultivar not found.\")\n                return None\n            cultivar.unassociate_experiment(experiment_name=self.experiment_name)\n            return cultivar\n        except Exception as e:\n            print(\"Error unassociating cultivar:\", e)\n            return None\n\n    def belongs_to_cultivar(\n        self,\n        cultivar_population: str,\n        cultivar_accession: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific cultivar.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_cultivar(\"Population A\", \"Accession 123\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            cultivar_population (str): The population of the cultivar.\n            cultivar_accession (str): The accession of the cultivar.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(cultivar_population=cultivar_population, cultivar_accession=cultivar_accession)\n            if not cultivar:\n                print(\"Cultivar not found.\")\n                return False\n            association_exists = cultivar.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to cultivar:\", e)\n            return False\n\n    # endregion\n\n    # region Procedure\n    def get_associated_procedures(self) -&gt; Optional[List[\"Procedure\"]]:\n        \"\"\"\n        Get all procedures associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; procedures = experiment.get_associated_procedures()\n            &gt;&gt;&gt; for procedure in procedures:\n            ...     print(procedure)\n            Procedure(procedure_name=Procedure 1, id=UUID(...))\n            Procedure(procedure_name=Procedure 2, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Procedure\"]]: A list of associated procedures, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            experiment_procedures = ExperimentProceduresViewModel.search(experiment_id=self.id)\n            if not experiment_procedures or len(experiment_procedures) == 0:\n                print(\"No procedures found for this experiment.\")\n                return None\n            procedures = [Procedure.model_validate(procedure) for procedure in experiment_procedures]\n            return procedures\n        except Exception as e:\n            print(\"Error getting associated procedures:\", e)\n            return None\n\n    def create_new_procedure(\n        self,\n        procedure_name: str,\n        procedure_info: dict = {}\n    ) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Create and associate a new procedure with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_procedure = experiment.create_new_procedure(\"Procedure 1\", {\"description\": \"Test procedure\"})\n            &gt;&gt;&gt; print(new_procedure)\n            Procedure(procedure_name=Procedure 1, id=UUID(...))\n\n        Args:\n            procedure_name (str): The name of the new procedure.\n            procedure_info (dict, optional): Additional information about the procedure. Defaults to {{}}.\n        Returns:\n            Optional[\"Procedure\"]: The created and associated procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            new_procedure = Procedure.create(\n                procedure_name=procedure_name,\n                procedure_info=procedure_info,\n                experiment_name=self.experiment_name\n            )\n            if not new_procedure:\n                print(\"Error creating new procedure.\")\n                return None\n            return new_procedure\n        except Exception as e:\n            print(\"Error creating new procedure:\", e)\n            return None\n\n    def associate_procedure(\n        self,\n        procedure_name: str,\n    ) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Associate an existing procedure with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; procedure = experiment.associate_procedure(\"Procedure 1\")\n            &gt;&gt;&gt; print(procedure)\n            Procedure(procedure_name=Procedure 1, id=UUID(...))\n\n        Args:\n            procedure_name (str): The name of the procedure.\n        Returns:\n            Optional[\"Procedure\"]: The associated procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            procedure = Procedure.get(procedure_name=procedure_name)\n            if not procedure:\n                print(\"Procedure not found.\")\n                return None\n            procedure.associate_experiment(experiment_name=self.experiment_name)\n            return procedure\n        except Exception as e:\n            print(\"Error associating procedure:\", e)\n            return None\n\n    def unassociate_procedure(\n        self,\n        procedure_name: str,\n    ) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Unassociate a procedure from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; procedure = experiment.unassociate_procedure(\"Procedure 1\")\n            &gt;&gt;&gt; print(procedure)\n            Procedure(procedure_name=Procedure 1, id=UUID(...))\n\n        Args:\n            procedure_name (str): The name of the procedure.\n        Returns:\n            Optional[\"Procedure\"]: The unassociated procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            procedure = Procedure.get(procedure_name=procedure_name)\n            if not procedure:\n                print(\"Procedure not found.\")\n                return None\n            procedure.unassociate_experiment(experiment_name=self.experiment_name)\n            return procedure\n        except Exception as e:\n            print(\"Error unassociating procedure:\", e)\n            return None\n\n    def belongs_to_procedure(\n        self,\n        procedure_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific procedure.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_procedure(\"Procedure 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            procedure_name (str): The name of the procedure.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            procedure = Procedure.get(procedure_name=procedure_name)\n            if not procedure:\n                print(\"Procedure not found.\")\n                return False\n            association_exists = procedure.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to procedure:\", e)\n            return False\n\n    # endregion\n\n    # region Script\n    def get_associated_scripts(self) -&gt; Optional[List[\"Script\"]]:\n        \"\"\"\n        Get all scripts associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; scripts = experiment.get_associated_scripts()\n            &gt;&gt;&gt; for script in scripts:\n            ...     print(script)\n            Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n            Script(script_name=Script 2, script_url='http://example.com/script2', script_extension='.js', id=UUID(...))\n\n        Returns:\n            Optional[List[\"Script\"]]: A list of associated scripts, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            experiment_scripts = ExperimentScriptsViewModel.search(experiment_id=self.id)\n            if not experiment_scripts or len(experiment_scripts) == 0:\n                print(\"No scripts found for this experiment.\")\n                return None\n            scripts = [Script.model_validate(script) for script in experiment_scripts]\n            return scripts\n        except Exception as e:\n            print(\"Error getting associated scripts:\", e)\n            return None\n\n    def create_new_script(\n        self,\n        script_name: str,\n        script_extension: str = None,\n        script_url: str = None,\n        script_info: dict = {}\n    ) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Create and associate a new script with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_script = experiment.create_new_script(\"Script 1\", script_extension=\".py\", script_url=\"http://example.com/script1\", script_info={\"description\": \"Test script\"})\n            &gt;&gt;&gt; print(new_script)\n            Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n\n        Args:\n            script_name (str): The name of the new script.\n            script_extension (str, optional): The extension of the script. Defaults to None.\n            script_url (str, optional): The URL of the script. Defaults to None.\n            script_info (dict, optional): Additional information about the script. Defaults to {{}}.\n        Returns:\n            Optional[\"Script\"]: The created and associated script, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            new_script = Script.create(\n                script_name=script_name,\n                script_url=script_url,\n                script_info=script_info,\n                script_extension=script_extension,\n                experiment_name=self.experiment_name\n            )\n            if not new_script:\n                print(\"Error creating new script.\")\n                return None\n            return new_script\n        except Exception as e:\n            print(\"Error creating new script:\", e)\n            return None\n\n    def associate_script(\n        self,\n        script_name: str,\n    ) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Associate an existing script with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; script = experiment.associate_script(\"Script 1\")\n            &gt;&gt;&gt; print(script)\n            Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n\n        Args:\n            script_name (str): The name of the script.\n        Returns:\n            Optional[\"Script\"]: The associated script, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            script = Script.get(script_name=script_name)\n            if not script:\n                print(\"Script not found.\")\n                return None\n            script.associate_experiment(experiment_name=self.experiment_name)\n            return script\n        except Exception as e:\n            print(\"Error associating script:\", e)\n            return None\n\n    def unassociate_script(\n        self,\n        script_name: str,\n    ) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Unassociate a script from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; script = experiment.unassociate_script(\"Script 1\")\n            &gt;&gt;&gt; print(script)\n            Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n\n        Args:\n            script_name (str): The name of the script.\n        Returns:\n            Optional[\"Script\"]: The unassociated script, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            script = Script.get(script_name=script_name)\n            if not script:\n                print(\"Script not found.\")\n                return None\n            script.unassociate_experiment(experiment_name=self.experiment_name)\n            return script\n        except Exception as e:\n            print(\"Error unassociating script:\", e)\n            return None\n\n    def belongs_to_script(\n        self,\n        script_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific script.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_script(\"Script 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            script_name (str): The name of the script.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            script = Script.get(script_name=script_name)\n            if not script:\n                print(\"Script not found.\")\n                return False\n            association_exists = script.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to script:\", e)\n            return False\n    # endregion\n\n    # region Model\n    def get_associated_models(self) -&gt; Optional[List[\"Model\"]]:\n        \"\"\"\n        Get all models associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; models = experiment.get_associated_models()\n            &gt;&gt;&gt; for model in models:\n            ...     print(model)\n            Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n            Model(model_name=Model 2, model_url='http://example.com/model2', id=UUID(...))\n\n        Returns:\n            Optional[List[\"Model\"]]: A list of associated models, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            experiment_models = ExperimentModelsViewModel.search(experiment_id=self.id)\n            if not experiment_models or len(experiment_models) == 0:\n                print(\"No models found for this experiment.\")\n                return None\n            models = [Model.model_validate(model) for model in experiment_models]\n            return models\n        except Exception as e:\n            print(\"Error getting associated models:\", e)\n            return None\n\n    def create_new_model(\n        self,\n        model_name: str,\n        model_url: str = None,\n        model_info: dict = {}\n    ) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Create and associate a new model with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_model = experiment.create_new_model(\"Model 1\", model_url=\"http://example.com/model1\", model_info={\"description\": \"Test model\"})\n            &gt;&gt;&gt; print(new_model)\n            Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n\n        Args:\n            model_name (str): The name of the new model.\n            model_url (str, optional): The URL of the model. Defaults to None.\n            model_info (dict, optional): Additional information about the model. Defaults to {{}}.\n        Returns:\n            Optional[\"Model\"]: The created and associated model, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            new_model = Model.create(\n                model_name=model_name,\n                model_info=model_info,\n                model_url=model_url,\n                experiment_name=self.experiment_name\n            )\n            if not new_model:\n                print(\"Error creating new model.\")\n                return None\n            return new_model\n        except Exception as e:\n            print(\"Error creating new model:\", e)\n            return None\n\n    def associate_model(\n        self,\n        model_name: str,\n    ) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Associate an existing model with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; model = experiment.associate_model(\"Model 1\")\n            &gt;&gt;&gt; print(model)\n            Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n\n        Args:\n            model_name (str): The name of the model.\n        Returns:\n            Optional[\"Model\"]: The associated model, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            model = Model.get(model_name=model_name)\n            if not model:\n                print(\"Model not found.\")\n                return None\n            model.associate_experiment(experiment_name=self.experiment_name)\n            return model\n        except Exception as e:\n            print(\"Error associating model:\", e)\n            return None\n\n    def unassociate_model(\n        self,\n        model_name: str,\n    ) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Unassociate a model from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; model = experiment.unassociate_model(\"Model 1\")\n            &gt;&gt;&gt; print(model)\n            Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n\n        Args:\n            model_name (str): The name of the model.\n        Returns:\n            Optional[\"Model\"]: The unassociated model, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            model = Model.get(model_name=model_name)\n            if not model:\n                print(\"Model not found.\")\n                return None\n            model.unassociate_experiment(experiment_name=self.experiment_name)\n            return model\n        except Exception as e:\n            print(\"Error unassociating model:\", e)\n            return None\n\n    def belongs_to_model(\n        self,\n        model_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific model.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_model(\"Model 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            model_name (str): The name of the model.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            model = Model.get(model_name=model_name)\n            if not model:\n                print(\"Model not found.\")\n                return False\n            association_exists = model.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to model:\", e)\n            return False\n    # endregion\n\n    # region Sensor\n    def get_associated_sensors(self) -&gt; Optional[List[\"Sensor\"]]:\n        \"\"\"\n        Get all sensors associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; sensors = experiment.get_associated_sensors()\n            &gt;&gt;&gt; for sensor in sensors:\n            ...     print(sensor)\n            Sensor(sensor_name=Sensor 1, id=UUID(...))\n            Sensor(sensor_name=Sensor 2, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Sensor\"]]: A list of associated sensors, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            experiment_sensors = ExperimentSensorsViewModel.search(experiment_id=self.id)\n            if not experiment_sensors or len(experiment_sensors) == 0:\n                print(\"No sensors found for this experiment.\")\n                return None\n            sensors = [Sensor.model_validate(sensor) for sensor in experiment_sensors]\n            return sensors\n        except Exception as e:\n            print(\"Error getting associated sensors:\", e)\n            return None\n\n    def create_new_sensor(\n        self,\n        sensor_name: str,\n        sensor_type: GEMINISensorType = GEMINISensorType.Default,\n        sensor_data_type: GEMINIDataType = GEMINIDataType.Default,\n        sensor_data_format: GEMINIDataFormat = GEMINIDataFormat.Default,\n        sensor_info: dict = {},\n        sensor_platform_name: str = None\n    ) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Create and associate a new sensor with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_sensor = experiment.create_new_sensor(\"Sensor 1\", sensor_type=GEMINISensorType.RGB, sensor_data_type=GEMINIDataType.Sensor, sensor_data_format=GEMINIDataFormat.Default, sensor_info={\"description\": \"Test sensor\"}, sensor_platform_name=\"Platform 1\")\n            &gt;&gt;&gt; print(new_sensor)\n            Sensor(sensor_name=Sensor 1, id=UUID(...))\n\n        Args:\n            sensor_name (str): The name of the new sensor.\n            sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to Default.\n            sensor_data_type (GEMINIDataType, optional): The data type. Defaults to Default.\n            sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to Default.\n            sensor_info (dict, optional): Additional information about the sensor. Defaults to {{}}.\n            sensor_platform_name (str, optional): The name of the sensor platform. Defaults to None.\n        Returns:\n            Optional[\"Sensor\"]: The created and associated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            new_sensor = Sensor.create(\n                sensor_name=sensor_name,\n                sensor_type=sensor_type,\n                sensor_data_type=sensor_data_type,\n                sensor_data_format=sensor_data_format,\n                sensor_info=sensor_info,\n                experiment_name=self.experiment_name,\n                sensor_platform_name=sensor_platform_name\n            )\n            if not new_sensor:\n                print(\"Error creating new sensor.\")\n                return None\n            return new_sensor\n        except Exception as e:\n            print(\"Error creating new sensor:\", e)\n            return None\n\n    def associate_sensor(\n        self,\n        sensor_name: str,\n    ) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Associate an existing sensor with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; sensor = experiment.associate_sensor(\"Sensor 1\")\n            &gt;&gt;&gt; print(sensor)\n            Sensor(sensor_name=Sensor 1, id=UUID(...))\n\n        Args:\n            sensor_name (str): The name of the sensor.\n        Returns:\n            Optional[\"Sensor\"]: The associated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            sensor = Sensor.get(sensor_name=sensor_name)\n            if not sensor:\n                print(\"Sensor not found.\")\n                return None\n            sensor.associate_experiment(experiment_name=self.experiment_name)\n            return sensor\n        except Exception as e:\n            print(\"Error associating sensor:\", e)\n            return None\n\n    def unassociate_sensor(\n        self,\n        sensor_name: str,\n    ) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Unassociate a sensor from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; sensor = experiment.unassociate_sensor(\"Sensor 1\")\n            &gt;&gt;&gt; print(sensor)\n            Sensor(sensor_name=Sensor 1, id=UUID(...))\n\n        Args:\n            sensor_name (str): The name of the sensor.\n        Returns:\n            Optional[\"Sensor\"]: The unassociated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            sensor = Sensor.get(sensor_name=sensor_name)\n            if not sensor:\n                print(\"Sensor not found.\")\n                return None\n            sensor.unassociate_experiment(experiment_name=self.experiment_name)\n            return sensor\n        except Exception as e:\n            print(\"Error unassociating sensor:\", e)\n            return None\n\n    def belongs_to_sensor(\n        self,\n        sensor_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific sensor.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_sensor(\"Sensor 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            sensor_name (str): The name of the sensor.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            sensor = Sensor.get(sensor_name=sensor_name)\n            if not sensor:\n                print(\"Sensor not found.\")\n                return False\n            association_exists = sensor.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to sensor:\", e)\n            return False\n    # endregion\n\n    # region Sensor Platform\n    def get_associated_sensor_platforms(self) -&gt; Optional[List[\"SensorPlatform\"]]:\n        \"\"\"\n        Get all sensor platforms associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; sensor_platforms = experiment.get_associated_sensor_platforms()\n            &gt;&gt;&gt; for sensor_platform in sensor_platforms:\n            ...     print(sensor_platform)\n            SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n            SensorPlatform(sensor_platform_name=Platform 2, id=UUID(...))\n\n        Returns:\n            Optional[List[\"SensorPlatform\"]]: A list of associated sensor platforms, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            experiment_sensor_platforms = ExperimentSensorPlatformsViewModel.search(experiment_id=self.id)\n            if not experiment_sensor_platforms or len(experiment_sensor_platforms) == 0:\n                print(\"No sensor platforms found for this experiment.\")\n                return None\n            sensor_platforms = [SensorPlatform.model_validate(sensor_platform) for sensor_platform in experiment_sensor_platforms]\n            return sensor_platforms\n        except Exception as e:\n            print(\"Error getting associated sensor platforms:\", e)\n            return None\n\n    def create_new_sensor_platform(\n        self,\n        sensor_platform_name: str,\n        sensor_platform_info: dict = {}\n    ) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Create and associate a new sensor platform with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_sensor_platform = experiment.create_new_sensor_platform(\"Platform 1\", {\"description\": \"Test platform\"})\n            &gt;&gt;&gt; print(new_sensor_platform)\n            SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n\n        Args:\n            sensor_platform_name (str): The name of the new sensor platform.\n            sensor_platform_info (dict, optional): Additional information about the sensor platform. Defaults to {{}}.\n        Returns:\n            Optional[\"SensorPlatform\"]: The created and associated sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            new_sensor_platform = SensorPlatform.create(\n                sensor_platform_name=sensor_platform_name,\n                sensor_platform_info=sensor_platform_info,\n                experiment_name=self.experiment_name\n            )\n            if not new_sensor_platform:\n                print(\"Error creating new sensor platform.\")\n                return None\n            return new_sensor_platform\n        except Exception as e:\n            print(\"Error creating new sensor platform:\", e)\n            return None\n\n    def associate_sensor_platform(\n        self,\n        sensor_platform_name: str,\n    ) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Associate an existing sensor platform with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; sensor_platform = experiment.associate_sensor_platform(\"Platform 1\")\n            &gt;&gt;&gt; print(sensor_platform)\n            SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform.\n        Returns:\n            Optional[\"SensorPlatform\"]: The associated sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n            if not sensor_platform:\n                print(\"Sensor platform not found.\")\n                return None\n            sensor_platform.associate_experiment(experiment_name=self.experiment_name)\n            return sensor_platform\n        except Exception as e:\n            print(\"Error associating sensor platform:\", e)\n            return None\n\n    def unassociate_sensor_platform(\n        self,\n        sensor_platform_name: str,\n    ) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Unassociate a sensor platform from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; sensor_platform = experiment.unassociate_sensor_platform(\"Platform 1\")\n            &gt;&gt;&gt; print(sensor_platform)\n            SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform.\n        Returns:\n            Optional[\"SensorPlatform\"]: The unassociated sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n            if not sensor_platform:\n                print(\"Sensor platform not found.\")\n                return None\n            sensor_platform.unassociate_experiment(experiment_name=self.experiment_name)\n            return sensor_platform\n        except Exception as e:\n            print(\"Error unassociating sensor platform:\", e)\n            return None\n\n    def belongs_to_sensor_platform(\n        self,\n        sensor_platform_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_sensor_platform(\"Platform 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n            if not sensor_platform:\n                print(\"Sensor platform not found.\")\n                return False\n            association_exists = sensor_platform.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to sensor platform:\", e)\n            return False\n    # endregion\n\n    # region Site\n    def get_associated_sites(self) -&gt; Optional[List[\"Site\"]]:\n        \"\"\"\n        Get all sites associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; sites = experiment.get_associated_sites()\n            &gt;&gt;&gt; for site in sites:\n            ...     print(site)\n            Site(site_name=Site 1, id=UUID(...))\n            Site(site_name=Site 2, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Site\"]]: A list of associated sites, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            experiment_sites = ExperimentSitesViewModel.search(experiment_id=self.id)\n            if not experiment_sites or len(experiment_sites) == 0:\n                print(\"No sites found for this experiment.\")\n                return None\n            sites = [Site.model_validate(site) for site in experiment_sites]\n            return sites\n        except Exception as e:\n            print(\"Error getting associated sites:\", e)\n            return None\n\n    def create_new_site(\n        self,\n        site_name: str,\n        site_city: str = None,\n        site_state: str = None,\n        site_country: str = None,\n        site_info: dict = {}\n    ) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Create and associate a new site with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_site = experiment.create_new_site(\"Site 1\", site_city=\"City\", site_state=\"State\", site_country=\"Country\", site_info={\"description\": \"Test site\"})\n            &gt;&gt;&gt; print(new_site)\n            Site(site_name=Site 1, id=UUID(...))\n\n        Args:\n            site_name (str): The name of the new site.\n            site_city (str, optional): The city of the site. Defaults to None.\n            site_state (str, optional): The state of the site. Defaults to None.\n            site_country (str, optional): The country of the site. Defaults to None.\n            site_info (dict, optional): Additional information about the site. Defaults to {{}}.\n        Returns:\n            Optional[\"Site\"]: The created and associated site, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            new_site = Site.create(\n                site_name=site_name,\n                site_city=site_city,\n                site_state=site_state,\n                site_country=site_country,\n                site_info=site_info,\n                experiment_name=self.experiment_name\n            )\n            if not new_site:\n                print(\"Error creating new site.\")\n                return None\n            return new_site\n        except Exception as e:\n            print(\"Error creating new site:\", e)\n            return None\n\n    def associate_site(\n        self,\n        site_name: str,\n    ) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Associate an existing site with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; site = experiment.associate_site(\"Site 1\")\n            &gt;&gt;&gt; print(site)\n            Site(site_name=Site 1, id=UUID(...))\n\n        Args:\n            site_name (str): The name of the site.\n        Returns:\n            Optional[\"Site\"]: The associated site, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            site = Site.get(site_name=site_name)\n            if not site:\n                print(\"Site not found.\")\n                return None\n            site.associate_experiment(experiment_name=self.experiment_name)\n            return site\n        except Exception as e:\n            print(\"Error associating site:\", e)\n            return None\n\n    def unassociate_site(\n        self,\n        site_name: str,\n    ) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Unassociate a site from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; site = experiment.unassociate_site(\"Site 1\")\n            &gt;&gt;&gt; print(site)\n            Site(site_name=Site 1, id=UUID(...))\n\n        Args:\n            site_name (str): The name of the site.\n        Returns:\n            Optional[\"Site\"]: The unassociated site, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            site = Site.get(site_name=site_name)\n            if not site:\n                print(\"Site not found.\")\n                return None\n            site.unassociate_experiment(experiment_name=self.experiment_name)\n            return site\n        except Exception as e:\n            print(\"Error unassociating site:\", e)\n            return None\n\n    def belongs_to_site(\n        self,\n        site_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific site.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_site(\"Site 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            site_name (str): The name of the site.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            site = Site.get(site_name=site_name)\n            if not site:\n                print(\"Site not found.\")\n                return False\n            association_exists = site.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to site:\", e)\n            return False\n    # endregion\n\n    # region Dataset\n    def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n        \"\"\"\n        Get all datasets associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; datasets = experiment.get_associated_datasets()\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n            Dataset(dataset_name=Dataset 2, collection_date=date(2023, 10, 2), dataset_type=Default, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Dataset\"]]: A list of associated datasets, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            experiment_datasets = ExperimentDatasetsViewModel.search(experiment_id=self.id)\n            if not experiment_datasets or len(experiment_datasets) == 0:\n                print(\"No datasets found for this experiment.\")\n                return None\n            datasets = [Dataset.model_validate(dataset) for dataset in experiment_datasets]\n            return datasets\n        except Exception as e:\n            print(\"Error getting associated datasets:\", e)\n            return None\n\n    def create_new_dataset(\n        self,\n        dataset_name: str,\n        dataset_info: dict = {},\n        dataset_type: GEMINIDatasetType = GEMINIDatasetType.Default,\n        collection_date: date = date.today()\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Create and associate a new dataset with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_dataset = experiment.create_new_dataset(\"Dataset 1\", dataset_info={\"description\": \"Test dataset\"}, dataset_type=GEMINIDatasetType.Default, collection_date=date.today())\n            &gt;&gt;&gt; print(new_dataset)\n            Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n\n\n        Args:\n            dataset_name (str): The name of the new dataset.\n            dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n            dataset_type (GEMINIDatasetType, optional): The type of the dataset. Defaults to Default.\n            collection_date (date, optional): The collection date. Defaults to today.\n        Returns:\n            Optional[\"Dataset\"]: The created and associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            new_dataset = Dataset.create(\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                dataset_type=dataset_type,\n                collection_date=collection_date,\n                experiment_name=self.experiment_name\n            )\n            if not new_dataset:\n                print(\"Error creating new dataset.\")\n                return None\n            return new_dataset\n        except Exception as e:\n            print(\"Error creating new dataset:\", e)\n            return None\n\n    def associate_dataset(\n        self,\n        dataset_name: str,\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Associate an existing dataset with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; dataset = experiment.associate_dataset(\"Dataset 1\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n\n        Args:\n            dataset_name (str): The name of the dataset.\n        Returns:\n            Optional[\"Dataset\"]: The associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name=dataset_name)\n            if not dataset:\n                print(\"Dataset not found.\")\n                return None\n            dataset.associate_experiment(experiment_name=self.experiment_name)\n            return dataset\n        except Exception as e:\n            print(\"Error associating dataset:\", e)\n            return None\n\n    def unassociate_dataset(\n        self,\n        dataset_name: str,\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Unassociate a dataset from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; dataset = experiment.unassociate_dataset(\"Dataset 1\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n\n        Args:\n            dataset_name (str): The name of the dataset.\n        Returns:\n            Optional[\"Dataset\"]: The unassociated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name=dataset_name)\n            if not dataset:\n                print(\"Dataset not found.\")\n                return None\n            dataset.unassociate_experiment(experiment_name=self.experiment_name)\n            return dataset\n        except Exception as e:\n            print(\"Error unassociating dataset:\", e)\n            return None\n\n    def belongs_to_dataset(\n        self,\n        dataset_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific dataset.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_dataset(\"Dataset 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n\n        Args:\n            dataset_name (str): The name of the dataset.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name=dataset_name)\n            if not dataset:\n                print(\"Dataset not found.\")\n                return False\n            association_exists = dataset.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to dataset:\", e)\n            return False\n\n    # endregion\n\n    # region Trait\n    def get_associated_traits(self) -&gt; Optional[List[\"Trait\"]]:\n        \"\"\"\n        Get all traits associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; traits = experiment.get_associated_traits()\n            &gt;&gt;&gt; for trait in traits:\n            ...     print(trait)\n            Trait(trait_name=Trait 1, id=UUID(...))\n            Trait(trait_name=Trait 2, id=UUID(...))\n\n        Returns:\n            Optional[List[\"Trait\"]]: A list of associated traits, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.trait import Trait\n            experiment_traits = ExperimentTraitsViewModel.search(experiment_id=self.id)\n            if not experiment_traits or len(experiment_traits) == 0:\n                print(\"No traits found for this experiment.\")\n                return None\n            traits = [Trait.model_validate(trait) for trait in experiment_traits]\n            return traits\n        except Exception as e:\n            print(\"Error getting associated traits:\", e)\n            return None\n\n    def create_new_trait(\n        self,\n        trait_name: str,\n        trait_units: str = None,\n        trait_metrics: dict = {},\n        trait_level: GEMINITraitLevel = GEMINITraitLevel.Default,\n        trait_info: dict = {},\n    ) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Create and associate a new trait with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_trait = experiment.create_new_trait(\"Trait 1\", trait_units=\"kg\", trait_metrics={\"metric1\": 1.0}, trait_level=GEMINITraitLevel.Default, trait_info={\"description\": \"Test trait\"})\n            &gt;&gt;&gt; print(new_trait)\n            Trait(trait_name=Trait 1, id=UUID(...))\n\n        Args:\n            trait_name (str): The name of the new trait.\n            trait_units (str, optional): The units of the trait. Defaults to None.\n            trait_metrics (dict, optional): Metrics for the trait. Defaults to {{}}.\n            trait_level (GEMINITraitLevel, optional): The level of the trait. Defaults to Default.\n            trait_info (dict, optional): Additional information about the trait. Defaults to {{}}.\n        Returns:\n            Optional[\"Trait\"]: The created and associated trait, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.trait import Trait\n            new_trait = Trait.create(\n                trait_name=trait_name,\n                trait_units=trait_units,\n                trait_metrics=trait_metrics,\n                trait_level=trait_level,\n                trait_info=trait_info,\n                experiment_name=self.experiment_name\n            )\n            if not new_trait:\n                print(\"Error creating new trait.\")\n                return None\n            return new_trait\n        except Exception as e:\n            print(\"Error creating new trait:\", e)\n            return None\n\n    def associate_trait(\n        self,\n        trait_name: str,\n    ) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Associate an existing trait with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; trait = experiment.associate_trait(\"Trait 1\")\n            &gt;&gt;&gt; print(trait)\n            Trait(trait_name=Trait 1, id=UUID(...))\n\n        Args:\n            trait_name (str): The name of the trait.\n        Returns:\n            Optional[\"Trait\"]: The associated trait, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.trait import Trait\n            trait = Trait.get(trait_name=trait_name)\n            if not trait:\n                print(\"Trait not found.\")\n                return None\n            trait.associate_experiment(experiment_name=self.experiment_name)\n            return trait\n        except Exception as e:\n            print(\"Error associating trait:\", e)\n            return None\n\n    def unassociate_trait(\n        self,\n        trait_name: str,\n    ) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Unassociate a trait from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; trait = experiment.unassociate_trait(\"Trait 1\")\n            &gt;&gt;&gt; print(trait)\n            Trait(trait_name=Trait 1, id=UUID(...))\n\n        Args:\n            trait_name (str): The name of the trait.\n        Returns:\n            Optional[\"Trait\"]: The unassociated trait, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.trait import Trait\n            trait = Trait.get(trait_name=trait_name)\n            if not trait:\n                print(\"Trait not found.\")\n                return None\n            trait.unassociate_experiment(experiment_name=self.experiment_name)\n            return trait\n        except Exception as e:\n            print(\"Error unassociating trait:\", e)\n            return None\n\n    def belongs_to_trait(\n        self,\n        trait_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific trait.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_trait(\"Trait 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            trait_name (str): The name of the trait.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.trait import Trait\n            trait = Trait.get(trait_name=trait_name)\n            if not trait:\n                print(\"Trait not found.\")\n                return False\n            association_exists = trait.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to trait:\", e)\n            return False\n    # endregion\n\n    # region Plot\n\n    def get_associated_plots(self) -&gt; Optional[List[\"Plot\"]]:\n        \"\"\"\n        Get all plots associated with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; plots = experiment.get_associated_plots()\n            &gt;&gt;&gt; for plot in plots:\n            ...     print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n            Plot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n\n\n        Returns:\n            Optional[List[\"Plot\"]]: A list of associated plots, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plots = PlotViewModel.search(experiment_id=self.id)\n            if not plots or len(plots) == 0:\n                print(\"No plots found for this experiment.\")\n                return None\n            plots = [Plot.model_validate(plot) for plot in plots]\n            return plots\n        except Exception as e:\n            print(\"Error getting associated plots:\", e)\n            return None\n\n    def create_new_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        season_name: str = None,\n        site_name: str = None,\n        plot_info: dict = {}\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Create and associate a new plot with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; new_plot = experiment.create_new_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\", plot_info={\"description\": \"Test plot\"})\n            &gt;&gt;&gt; print(new_plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            season_name (str, optional): The season name. Defaults to None.\n            site_name (str, optional): The site name. Defaults to None.\n            plot_info (dict, optional): Additional information about the plot. Defaults to {{}}.\n        Returns:\n            Optional[\"Plot\"]: The created and associated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            new_plot = Plot.create(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                season_name=season_name,\n                site_name=site_name,\n                plot_info=plot_info,\n                experiment_name=self.experiment_name\n            )\n            if not new_plot:\n                print(\"Error creating new plot.\")\n                return None\n            return new_plot\n        except Exception as e:\n            print(\"Error creating new plot:\", e)\n            return None\n\n    def associate_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        season_name: str = None,\n        site_name: str = None,\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Associate an existing plot with this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; plot = experiment.associate_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            season_name (str, optional): The season name. Defaults to None.\n            site_name (str, optional): The site name. Defaults to None.\n        Returns:\n            Optional[\"Plot\"]: The associated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(\"Plot not found.\")\n                return None\n            plot.associate_experiment(experiment_name=self.experiment_name)\n            return plot\n        except Exception as e:\n            print(\"Error associating plot:\", e)\n            return None\n\n    def unassociate_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        season_name: str = None,\n        site_name: str = None,\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Unassociate a plot from this experiment.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; plot = experiment.unassociate_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            season_name (str, optional): The season name. Defaults to None.\n            site_name (str, optional): The site name. Defaults to None.\n        Returns:\n            Optional[\"Plot\"]: The unassociated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(\"Plot not found.\")\n                return None\n            plot.unassociate_experiment()\n            return plot\n        except Exception as e:\n            print(\"Error unassociating plot:\", e)\n            return None\n\n    def belongs_to_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        season_name: str = None,\n        site_name: str = None,\n    ) -&gt; bool:\n        \"\"\"\n        Check if the experiment is associated with a specific plot.\n\n        Examples:\n            &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n            &gt;&gt;&gt; is_associated = experiment.belongs_to_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            season_name (str, optional): The season name. Defaults to None.\n            site_name (str, optional): The site name. Defaults to None.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(\"Plot not found.\")\n                return False\n            association_exists = plot.belongs_to_experiment(experiment_name=self.experiment_name)\n            return association_exists\n        except Exception as e:\n            print(\"Error checking if belongs to plot:\", e)\n            return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Experiment object.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Experiment object.\"\"\"\n    return f\"Experiment(experiment_name={self.experiment_name}, experiment_start_date={self.experiment_start_date}, experiment_end_date={self.experiment_end_date}, id={self.id})\"\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Experiment object.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Experiment object.\"\"\"\n    return f\"Experiment(experiment_name={self.experiment_name}, experiment_start_date={self.experiment_start_date}, experiment_end_date={self.experiment_end_date}, id={self.id})\"\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_cultivar","title":"<code>associate_cultivar(cultivar_population, cultivar_accession)</code>","text":"<p>Associate an existing cultivar with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; cultivar = experiment.associate_cultivar(\"Population A\", \"Accession 123\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar.</p> required <p>Returns:     Optional[\"Cultivar\"]: The associated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_cultivar(\n    self,\n    cultivar_population: str,\n    cultivar_accession: str,\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Associate an existing cultivar with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; cultivar = experiment.associate_cultivar(\"Population A\", \"Accession 123\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n    Args:\n        cultivar_population (str): The population of the cultivar.\n        cultivar_accession (str): The accession of the cultivar.\n    Returns:\n        Optional[\"Cultivar\"]: The associated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(cultivar_population=cultivar_population, cultivar_accession=cultivar_accession)\n        if not cultivar:\n            print(\"Cultivar not found.\")\n            return None\n        cultivar.associate_experiment(experiment_name=self.experiment_name)\n        return cultivar\n    except Exception as e:\n        print(\"Error associating cultivar:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_dataset","title":"<code>associate_dataset(dataset_name)</code>","text":"<p>Associate an existing dataset with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; dataset = experiment.associate_dataset(\"Dataset 1\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <p>Returns:     Optional[\"Dataset\"]: The associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_dataset(\n    self,\n    dataset_name: str,\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Associate an existing dataset with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; dataset = experiment.associate_dataset(\"Dataset 1\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n\n    Args:\n        dataset_name (str): The name of the dataset.\n    Returns:\n        Optional[\"Dataset\"]: The associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name=dataset_name)\n        if not dataset:\n            print(\"Dataset not found.\")\n            return None\n        dataset.associate_experiment(experiment_name=self.experiment_name)\n        return dataset\n    except Exception as e:\n        print(\"Error associating dataset:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_model","title":"<code>associate_model(model_name)</code>","text":"<p>Associate an existing model with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; model = experiment.associate_model(\"Model 1\")\n&gt;&gt;&gt; print(model)\nModel(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <p>Returns:     Optional[\"Model\"]: The associated model, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_model(\n    self,\n    model_name: str,\n) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Associate an existing model with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; model = experiment.associate_model(\"Model 1\")\n        &gt;&gt;&gt; print(model)\n        Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n\n    Args:\n        model_name (str): The name of the model.\n    Returns:\n        Optional[\"Model\"]: The associated model, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        model = Model.get(model_name=model_name)\n        if not model:\n            print(\"Model not found.\")\n            return None\n        model.associate_experiment(experiment_name=self.experiment_name)\n        return model\n    except Exception as e:\n        print(\"Error associating model:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_plot","title":"<code>associate_plot(plot_number, plot_row_number, plot_column_number, season_name=None, site_name=None)</code>","text":"<p>Associate an existing plot with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; plot = experiment.associate_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>season_name</code> <code>str</code> <p>The season name. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Plot\"]: The associated plot, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    season_name: str = None,\n    site_name: str = None,\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Associate an existing plot with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; plot = experiment.associate_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        season_name (str, optional): The season name. Defaults to None.\n        site_name (str, optional): The site name. Defaults to None.\n    Returns:\n        Optional[\"Plot\"]: The associated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(\"Plot not found.\")\n            return None\n        plot.associate_experiment(experiment_name=self.experiment_name)\n        return plot\n    except Exception as e:\n        print(\"Error associating plot:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_procedure","title":"<code>associate_procedure(procedure_name)</code>","text":"<p>Associate an existing procedure with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; procedure = experiment.associate_procedure(\"Procedure 1\")\n&gt;&gt;&gt; print(procedure)\nProcedure(procedure_name=Procedure 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <p>Returns:     Optional[\"Procedure\"]: The associated procedure, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_procedure(\n    self,\n    procedure_name: str,\n) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Associate an existing procedure with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; procedure = experiment.associate_procedure(\"Procedure 1\")\n        &gt;&gt;&gt; print(procedure)\n        Procedure(procedure_name=Procedure 1, id=UUID(...))\n\n    Args:\n        procedure_name (str): The name of the procedure.\n    Returns:\n        Optional[\"Procedure\"]: The associated procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        procedure = Procedure.get(procedure_name=procedure_name)\n        if not procedure:\n            print(\"Procedure not found.\")\n            return None\n        procedure.associate_experiment(experiment_name=self.experiment_name)\n        return procedure\n    except Exception as e:\n        print(\"Error associating procedure:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_script","title":"<code>associate_script(script_name)</code>","text":"<p>Associate an existing script with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; script = experiment.associate_script(\"Script 1\")\n&gt;&gt;&gt; print(script)\nScript(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <p>Returns:     Optional[\"Script\"]: The associated script, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_script(\n    self,\n    script_name: str,\n) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Associate an existing script with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; script = experiment.associate_script(\"Script 1\")\n        &gt;&gt;&gt; print(script)\n        Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n\n    Args:\n        script_name (str): The name of the script.\n    Returns:\n        Optional[\"Script\"]: The associated script, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        script = Script.get(script_name=script_name)\n        if not script:\n            print(\"Script not found.\")\n            return None\n        script.associate_experiment(experiment_name=self.experiment_name)\n        return script\n    except Exception as e:\n        print(\"Error associating script:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_sensor","title":"<code>associate_sensor(sensor_name)</code>","text":"<p>Associate an existing sensor with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; sensor = experiment.associate_sensor(\"Sensor 1\")\n&gt;&gt;&gt; print(sensor)\nSensor(sensor_name=Sensor 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <p>Returns:     Optional[\"Sensor\"]: The associated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_sensor(\n    self,\n    sensor_name: str,\n) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Associate an existing sensor with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; sensor = experiment.associate_sensor(\"Sensor 1\")\n        &gt;&gt;&gt; print(sensor)\n        Sensor(sensor_name=Sensor 1, id=UUID(...))\n\n    Args:\n        sensor_name (str): The name of the sensor.\n    Returns:\n        Optional[\"Sensor\"]: The associated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        sensor = Sensor.get(sensor_name=sensor_name)\n        if not sensor:\n            print(\"Sensor not found.\")\n            return None\n        sensor.associate_experiment(experiment_name=self.experiment_name)\n        return sensor\n    except Exception as e:\n        print(\"Error associating sensor:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_sensor_platform","title":"<code>associate_sensor_platform(sensor_platform_name)</code>","text":"<p>Associate an existing sensor platform with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; sensor_platform = experiment.associate_sensor_platform(\"Platform 1\")\n&gt;&gt;&gt; print(sensor_platform)\nSensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform.</p> required <p>Returns:     Optional[\"SensorPlatform\"]: The associated sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_sensor_platform(\n    self,\n    sensor_platform_name: str,\n) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Associate an existing sensor platform with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; sensor_platform = experiment.associate_sensor_platform(\"Platform 1\")\n        &gt;&gt;&gt; print(sensor_platform)\n        SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform.\n    Returns:\n        Optional[\"SensorPlatform\"]: The associated sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n        if not sensor_platform:\n            print(\"Sensor platform not found.\")\n            return None\n        sensor_platform.associate_experiment(experiment_name=self.experiment_name)\n        return sensor_platform\n    except Exception as e:\n        print(\"Error associating sensor platform:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_site","title":"<code>associate_site(site_name)</code>","text":"<p>Associate an existing site with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; site = experiment.associate_site(\"Site 1\")\n&gt;&gt;&gt; print(site)\nSite(site_name=Site 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:     Optional[\"Site\"]: The associated site, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_site(\n    self,\n    site_name: str,\n) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Associate an existing site with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; site = experiment.associate_site(\"Site 1\")\n        &gt;&gt;&gt; print(site)\n        Site(site_name=Site 1, id=UUID(...))\n\n    Args:\n        site_name (str): The name of the site.\n    Returns:\n        Optional[\"Site\"]: The associated site, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        site = Site.get(site_name=site_name)\n        if not site:\n            print(\"Site not found.\")\n            return None\n        site.associate_experiment(experiment_name=self.experiment_name)\n        return site\n    except Exception as e:\n        print(\"Error associating site:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.associate_trait","title":"<code>associate_trait(trait_name)</code>","text":"<p>Associate an existing trait with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; trait = experiment.associate_trait(\"Trait 1\")\n&gt;&gt;&gt; print(trait)\nTrait(trait_name=Trait 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <p>Returns:     Optional[\"Trait\"]: The associated trait, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def associate_trait(\n    self,\n    trait_name: str,\n) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Associate an existing trait with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; trait = experiment.associate_trait(\"Trait 1\")\n        &gt;&gt;&gt; print(trait)\n        Trait(trait_name=Trait 1, id=UUID(...))\n\n    Args:\n        trait_name (str): The name of the trait.\n    Returns:\n        Optional[\"Trait\"]: The associated trait, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.trait import Trait\n        trait = Trait.get(trait_name=trait_name)\n        if not trait:\n            print(\"Trait not found.\")\n            return None\n        trait.associate_experiment(experiment_name=self.experiment_name)\n        return trait\n    except Exception as e:\n        print(\"Error associating trait:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_cultivar","title":"<code>belongs_to_cultivar(cultivar_population, cultivar_accession)</code>","text":"<p>Check if the experiment is associated with a specific cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_cultivar(\"Population A\", \"Accession 123\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_cultivar(\n    self,\n    cultivar_population: str,\n    cultivar_accession: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific cultivar.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_cultivar(\"Population A\", \"Accession 123\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        cultivar_population (str): The population of the cultivar.\n        cultivar_accession (str): The accession of the cultivar.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(cultivar_population=cultivar_population, cultivar_accession=cultivar_accession)\n        if not cultivar:\n            print(\"Cultivar not found.\")\n            return False\n        association_exists = cultivar.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to cultivar:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_dataset","title":"<code>belongs_to_dataset(dataset_name)</code>","text":"<p>Check if the experiment is associated with a specific dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_dataset(\"Dataset 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_dataset(\n    self,\n    dataset_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific dataset.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_dataset(\"Dataset 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n\n    Args:\n        dataset_name (str): The name of the dataset.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name=dataset_name)\n        if not dataset:\n            print(\"Dataset not found.\")\n            return False\n        association_exists = dataset.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to dataset:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_model","title":"<code>belongs_to_model(model_name)</code>","text":"<p>Check if the experiment is associated with a specific model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_model(\"Model 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_model(\n    self,\n    model_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific model.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_model(\"Model 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        model_name (str): The name of the model.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        model = Model.get(model_name=model_name)\n        if not model:\n            print(\"Model not found.\")\n            return False\n        association_exists = model.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to model:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_plot","title":"<code>belongs_to_plot(plot_number, plot_row_number, plot_column_number, season_name=None, site_name=None)</code>","text":"<p>Check if the experiment is associated with a specific plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>season_name</code> <code>str</code> <p>The season name. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    season_name: str = None,\n    site_name: str = None,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific plot.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        season_name (str, optional): The season name. Defaults to None.\n        site_name (str, optional): The site name. Defaults to None.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(\"Plot not found.\")\n            return False\n        association_exists = plot.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to plot:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_procedure","title":"<code>belongs_to_procedure(procedure_name)</code>","text":"<p>Check if the experiment is associated with a specific procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_procedure(\"Procedure 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_procedure(\n    self,\n    procedure_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific procedure.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_procedure(\"Procedure 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        procedure_name (str): The name of the procedure.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        procedure = Procedure.get(procedure_name=procedure_name)\n        if not procedure:\n            print(\"Procedure not found.\")\n            return False\n        association_exists = procedure.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to procedure:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_script","title":"<code>belongs_to_script(script_name)</code>","text":"<p>Check if the experiment is associated with a specific script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_script(\"Script 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_script(\n    self,\n    script_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific script.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_script(\"Script 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        script_name (str): The name of the script.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        script = Script.get(script_name=script_name)\n        if not script:\n            print(\"Script not found.\")\n            return False\n        association_exists = script.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to script:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_sensor","title":"<code>belongs_to_sensor(sensor_name)</code>","text":"<p>Check if the experiment is associated with a specific sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_sensor(\"Sensor 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_sensor(\n    self,\n    sensor_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific sensor.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_sensor(\"Sensor 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        sensor_name (str): The name of the sensor.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        sensor = Sensor.get(sensor_name=sensor_name)\n        if not sensor:\n            print(\"Sensor not found.\")\n            return False\n        association_exists = sensor.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to sensor:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_sensor_platform","title":"<code>belongs_to_sensor_platform(sensor_platform_name)</code>","text":"<p>Check if the experiment is associated with a specific sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_sensor_platform(\"Platform 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_sensor_platform(\n    self,\n    sensor_platform_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_sensor_platform(\"Platform 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n        if not sensor_platform:\n            print(\"Sensor platform not found.\")\n            return False\n        association_exists = sensor_platform.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to sensor platform:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_site","title":"<code>belongs_to_site(site_name)</code>","text":"<p>Check if the experiment is associated with a specific site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_site(\"Site 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_site(\n    self,\n    site_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific site.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_site(\"Site 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        site_name (str): The name of the site.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        site = Site.get(site_name=site_name)\n        if not site:\n            print(\"Site not found.\")\n            return False\n        association_exists = site.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to site:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.belongs_to_trait","title":"<code>belongs_to_trait(trait_name)</code>","text":"<p>Check if the experiment is associated with a specific trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; is_associated = experiment.belongs_to_trait(\"Trait 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def belongs_to_trait(\n    self,\n    trait_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if the experiment is associated with a specific trait.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; is_associated = experiment.belongs_to_trait(\"Trait 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        trait_name (str): The name of the trait.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.trait import Trait\n        trait = Trait.get(trait_name=trait_name)\n        if not trait:\n            print(\"Trait not found.\")\n            return False\n        association_exists = trait.belongs_to_experiment(experiment_name=self.experiment_name)\n        return association_exists\n    except Exception as e:\n        print(\"Error checking if belongs to trait:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create","title":"<code>create(experiment_name, experiment_info={}, experiment_start_date=date.today(), experiment_end_date=date.today())</code>  <code>classmethod</code>","text":"<p>Create a new experiment. If an experiment with the same name already exists, it will return the existing one.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.create(\"My Experiment\", {\"description\": \"Test experiment\"})\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>experiment_info</code> <code>dict</code> <p>Additional information about the experiment. Defaults to {{}}.</p> <code>{}</code> <code>experiment_start_date</code> <code>date</code> <p>The start date. Defaults to today.</p> <code>today()</code> <code>experiment_end_date</code> <code>date</code> <p>The end date. Defaults to today.</p> <code>today()</code> <p>Returns:     Optional[\"Experiment\"]: The created experiment, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    experiment_name: str,\n    experiment_info: dict = {},\n    experiment_start_date: date = date.today(),\n    experiment_end_date: date = date.today(),\n) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Create a new experiment. If an experiment with the same name already exists, it will return the existing one.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.create(\"My Experiment\", {\"description\": \"Test experiment\"})\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment.\n        experiment_info (dict, optional): Additional information about the experiment. Defaults to {{}}.\n        experiment_start_date (date, optional): The start date. Defaults to today.\n        experiment_end_date (date, optional): The end date. Defaults to today.\n    Returns:\n        Optional[\"Experiment\"]: The created experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ExperimentModel.get_or_create(\n            experiment_name=experiment_name,\n            experiment_info=experiment_info,\n            experiment_start_date=experiment_start_date,\n            experiment_end_date=experiment_end_date,\n        )\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(\"Error creating experiment:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_cultivar","title":"<code>create_new_cultivar(cultivar_population, cultivar_accession, cultivar_info={})</code>","text":"<p>Create and associate a new cultivar with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_cultivar = experiment.create_new_cultivar(\"Population A\", \"Accession 123\", {\"description\": \"New cultivar\"})\n&gt;&gt;&gt; print(new_cultivar)\nCultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the new cultivar.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession of the new cultivar.</p> required <code>cultivar_info</code> <code>dict</code> <p>Additional information about the cultivar. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"Cultivar\"]: The created and associated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_cultivar(\n    self,\n    cultivar_population: str,\n    cultivar_accession: str,\n    cultivar_info: dict = {},\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Create and associate a new cultivar with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_cultivar = experiment.create_new_cultivar(\"Population A\", \"Accession 123\", {\"description\": \"New cultivar\"})\n        &gt;&gt;&gt; print(new_cultivar)\n        Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n    Args:\n        cultivar_population (str): The population of the new cultivar.\n        cultivar_accession (str): The accession of the new cultivar.\n        cultivar_info (dict, optional): Additional information about the cultivar. Defaults to {{}}.\n    Returns:\n        Optional[\"Cultivar\"]: The created and associated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        new_cultivar = Cultivar.create(\n            cultivar_population=cultivar_population,\n            cultivar_accession=cultivar_accession,\n            cultivar_info=cultivar_info,\n            experiment_name=self.experiment_name\n        )\n        if not new_cultivar:\n            print(\"Error creating new cultivar.\")\n            return None\n        return new_cultivar\n    except Exception as e:\n        print(\"Error creating new cultivar:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_dataset","title":"<code>create_new_dataset(dataset_name, dataset_info={}, dataset_type=GEMINIDatasetType.Default, collection_date=date.today())</code>","text":"<p>Create and associate a new dataset with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_dataset = experiment.create_new_dataset(\"Dataset 1\", dataset_info={\"description\": \"Test dataset\"}, dataset_type=GEMINIDatasetType.Default, collection_date=date.today())\n&gt;&gt;&gt; print(new_dataset)\nDataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the new dataset.</p> required <code>dataset_info</code> <code>dict</code> <p>Additional information about the dataset. Defaults to {{}}.</p> <code>{}</code> <code>dataset_type</code> <code>GEMINIDatasetType</code> <p>The type of the dataset. Defaults to Default.</p> <code>Default</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to today.</p> <code>today()</code> <p>Returns:     Optional[\"Dataset\"]: The created and associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_dataset(\n    self,\n    dataset_name: str,\n    dataset_info: dict = {},\n    dataset_type: GEMINIDatasetType = GEMINIDatasetType.Default,\n    collection_date: date = date.today()\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Create and associate a new dataset with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_dataset = experiment.create_new_dataset(\"Dataset 1\", dataset_info={\"description\": \"Test dataset\"}, dataset_type=GEMINIDatasetType.Default, collection_date=date.today())\n        &gt;&gt;&gt; print(new_dataset)\n        Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n\n\n    Args:\n        dataset_name (str): The name of the new dataset.\n        dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n        dataset_type (GEMINIDatasetType, optional): The type of the dataset. Defaults to Default.\n        collection_date (date, optional): The collection date. Defaults to today.\n    Returns:\n        Optional[\"Dataset\"]: The created and associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        new_dataset = Dataset.create(\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            dataset_type=dataset_type,\n            collection_date=collection_date,\n            experiment_name=self.experiment_name\n        )\n        if not new_dataset:\n            print(\"Error creating new dataset.\")\n            return None\n        return new_dataset\n    except Exception as e:\n        print(\"Error creating new dataset:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_model","title":"<code>create_new_model(model_name, model_url=None, model_info={})</code>","text":"<p>Create and associate a new model with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_model = experiment.create_new_model(\"Model 1\", model_url=\"http://example.com/model1\", model_info={\"description\": \"Test model\"})\n&gt;&gt;&gt; print(new_model)\nModel(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the new model.</p> required <code>model_url</code> <code>str</code> <p>The URL of the model. Defaults to None.</p> <code>None</code> <code>model_info</code> <code>dict</code> <p>Additional information about the model. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"Model\"]: The created and associated model, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_model(\n    self,\n    model_name: str,\n    model_url: str = None,\n    model_info: dict = {}\n) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Create and associate a new model with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_model = experiment.create_new_model(\"Model 1\", model_url=\"http://example.com/model1\", model_info={\"description\": \"Test model\"})\n        &gt;&gt;&gt; print(new_model)\n        Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n\n    Args:\n        model_name (str): The name of the new model.\n        model_url (str, optional): The URL of the model. Defaults to None.\n        model_info (dict, optional): Additional information about the model. Defaults to {{}}.\n    Returns:\n        Optional[\"Model\"]: The created and associated model, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        new_model = Model.create(\n            model_name=model_name,\n            model_info=model_info,\n            model_url=model_url,\n            experiment_name=self.experiment_name\n        )\n        if not new_model:\n            print(\"Error creating new model.\")\n            return None\n        return new_model\n    except Exception as e:\n        print(\"Error creating new model:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_plot","title":"<code>create_new_plot(plot_number, plot_row_number, plot_column_number, season_name=None, site_name=None, plot_info={})</code>","text":"<p>Create and associate a new plot with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_plot = experiment.create_new_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\", plot_info={\"description\": \"Test plot\"})\n&gt;&gt;&gt; print(new_plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>season_name</code> <code>str</code> <p>The season name. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name. Defaults to None.</p> <code>None</code> <code>plot_info</code> <code>dict</code> <p>Additional information about the plot. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"Plot\"]: The created and associated plot, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    season_name: str = None,\n    site_name: str = None,\n    plot_info: dict = {}\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Create and associate a new plot with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_plot = experiment.create_new_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\", plot_info={\"description\": \"Test plot\"})\n        &gt;&gt;&gt; print(new_plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        season_name (str, optional): The season name. Defaults to None.\n        site_name (str, optional): The site name. Defaults to None.\n        plot_info (dict, optional): Additional information about the plot. Defaults to {{}}.\n    Returns:\n        Optional[\"Plot\"]: The created and associated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        new_plot = Plot.create(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            season_name=season_name,\n            site_name=site_name,\n            plot_info=plot_info,\n            experiment_name=self.experiment_name\n        )\n        if not new_plot:\n            print(\"Error creating new plot.\")\n            return None\n        return new_plot\n    except Exception as e:\n        print(\"Error creating new plot:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_procedure","title":"<code>create_new_procedure(procedure_name, procedure_info={})</code>","text":"<p>Create and associate a new procedure with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_procedure = experiment.create_new_procedure(\"Procedure 1\", {\"description\": \"Test procedure\"})\n&gt;&gt;&gt; print(new_procedure)\nProcedure(procedure_name=Procedure 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the new procedure.</p> required <code>procedure_info</code> <code>dict</code> <p>Additional information about the procedure. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"Procedure\"]: The created and associated procedure, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_procedure(\n    self,\n    procedure_name: str,\n    procedure_info: dict = {}\n) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Create and associate a new procedure with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_procedure = experiment.create_new_procedure(\"Procedure 1\", {\"description\": \"Test procedure\"})\n        &gt;&gt;&gt; print(new_procedure)\n        Procedure(procedure_name=Procedure 1, id=UUID(...))\n\n    Args:\n        procedure_name (str): The name of the new procedure.\n        procedure_info (dict, optional): Additional information about the procedure. Defaults to {{}}.\n    Returns:\n        Optional[\"Procedure\"]: The created and associated procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        new_procedure = Procedure.create(\n            procedure_name=procedure_name,\n            procedure_info=procedure_info,\n            experiment_name=self.experiment_name\n        )\n        if not new_procedure:\n            print(\"Error creating new procedure.\")\n            return None\n        return new_procedure\n    except Exception as e:\n        print(\"Error creating new procedure:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_script","title":"<code>create_new_script(script_name, script_extension=None, script_url=None, script_info={})</code>","text":"<p>Create and associate a new script with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_script = experiment.create_new_script(\"Script 1\", script_extension=\".py\", script_url=\"http://example.com/script1\", script_info={\"description\": \"Test script\"})\n&gt;&gt;&gt; print(new_script)\nScript(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the new script.</p> required <code>script_extension</code> <code>str</code> <p>The extension of the script. Defaults to None.</p> <code>None</code> <code>script_url</code> <code>str</code> <p>The URL of the script. Defaults to None.</p> <code>None</code> <code>script_info</code> <code>dict</code> <p>Additional information about the script. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"Script\"]: The created and associated script, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_script(\n    self,\n    script_name: str,\n    script_extension: str = None,\n    script_url: str = None,\n    script_info: dict = {}\n) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Create and associate a new script with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_script = experiment.create_new_script(\"Script 1\", script_extension=\".py\", script_url=\"http://example.com/script1\", script_info={\"description\": \"Test script\"})\n        &gt;&gt;&gt; print(new_script)\n        Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n\n    Args:\n        script_name (str): The name of the new script.\n        script_extension (str, optional): The extension of the script. Defaults to None.\n        script_url (str, optional): The URL of the script. Defaults to None.\n        script_info (dict, optional): Additional information about the script. Defaults to {{}}.\n    Returns:\n        Optional[\"Script\"]: The created and associated script, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        new_script = Script.create(\n            script_name=script_name,\n            script_url=script_url,\n            script_info=script_info,\n            script_extension=script_extension,\n            experiment_name=self.experiment_name\n        )\n        if not new_script:\n            print(\"Error creating new script.\")\n            return None\n        return new_script\n    except Exception as e:\n        print(\"Error creating new script:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_season","title":"<code>create_new_season(season_name, season_info={}, season_start_date=date.today(), season_end_date=date.today())</code>","text":"<p>Create and associate a new season with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_season = experiment.create_new_season(\"Spring 2024\", {\"description\": \"Spring season\"})\n&gt;&gt;&gt; print(new_season)\nSeason(season_name=Spring 2024, season_start_date=2024-03-01, season_end_date=2024-05-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The name of the new season.</p> required <code>season_info</code> <code>dict</code> <p>Additional information about the season. Defaults to {{}}.</p> <code>{}</code> <code>season_start_date</code> <code>date</code> <p>The start date of the season. Defaults to today.</p> <code>today()</code> <code>season_end_date</code> <code>date</code> <p>The end date of the season. Defaults to today.</p> <code>today()</code> <p>Returns:     Optional[\"Season\"]: The created and associated season, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_season(\n    self,\n    season_name: str,\n    season_info: dict = {},\n    season_start_date: date = date.today(),\n    season_end_date: date = date.today(),\n) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Create and associate a new season with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_season = experiment.create_new_season(\"Spring 2024\", {\"description\": \"Spring season\"})\n        &gt;&gt;&gt; print(new_season)\n        Season(season_name=Spring 2024, season_start_date=2024-03-01, season_end_date=2024-05-31, id=UUID(...))\n\n    Args:\n        season_name (str): The name of the new season.\n        season_info (dict, optional): Additional information about the season. Defaults to {{}}.\n        season_start_date (date, optional): The start date of the season. Defaults to today.\n        season_end_date (date, optional): The end date of the season. Defaults to today.\n    Returns:\n        Optional[\"Season\"]: The created and associated season, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.season import Season\n        new_season = Season.create(\n            season_name=season_name,\n            season_info=season_info,\n            season_start_date=season_start_date,\n            season_end_date=season_end_date,\n            experiment_name=self.experiment_name\n        )\n        if not new_season:\n            print(\"Error creating new season.\")\n            return None\n        return new_season\n    except Exception as e:\n        print(\"Error creating new season:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_sensor","title":"<code>create_new_sensor(sensor_name, sensor_type=GEMINISensorType.Default, sensor_data_type=GEMINIDataType.Default, sensor_data_format=GEMINIDataFormat.Default, sensor_info={}, sensor_platform_name=None)</code>","text":"<p>Create and associate a new sensor with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_sensor = experiment.create_new_sensor(\"Sensor 1\", sensor_type=GEMINISensorType.RGB, sensor_data_type=GEMINIDataType.Sensor, sensor_data_format=GEMINIDataFormat.Default, sensor_info={\"description\": \"Test sensor\"}, sensor_platform_name=\"Platform 1\")\n&gt;&gt;&gt; print(new_sensor)\nSensor(sensor_name=Sensor 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the new sensor.</p> required <code>sensor_type</code> <code>GEMINISensorType</code> <p>The type of the sensor. Defaults to Default.</p> <code>Default</code> <code>sensor_data_type</code> <code>GEMINIDataType</code> <p>The data type. Defaults to Default.</p> <code>Default</code> <code>sensor_data_format</code> <code>GEMINIDataFormat</code> <p>The data format. Defaults to Default.</p> <code>Default</code> <code>sensor_info</code> <code>dict</code> <p>Additional information about the sensor. Defaults to {{}}.</p> <code>{}</code> <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Sensor\"]: The created and associated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_sensor(\n    self,\n    sensor_name: str,\n    sensor_type: GEMINISensorType = GEMINISensorType.Default,\n    sensor_data_type: GEMINIDataType = GEMINIDataType.Default,\n    sensor_data_format: GEMINIDataFormat = GEMINIDataFormat.Default,\n    sensor_info: dict = {},\n    sensor_platform_name: str = None\n) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Create and associate a new sensor with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_sensor = experiment.create_new_sensor(\"Sensor 1\", sensor_type=GEMINISensorType.RGB, sensor_data_type=GEMINIDataType.Sensor, sensor_data_format=GEMINIDataFormat.Default, sensor_info={\"description\": \"Test sensor\"}, sensor_platform_name=\"Platform 1\")\n        &gt;&gt;&gt; print(new_sensor)\n        Sensor(sensor_name=Sensor 1, id=UUID(...))\n\n    Args:\n        sensor_name (str): The name of the new sensor.\n        sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to Default.\n        sensor_data_type (GEMINIDataType, optional): The data type. Defaults to Default.\n        sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to Default.\n        sensor_info (dict, optional): Additional information about the sensor. Defaults to {{}}.\n        sensor_platform_name (str, optional): The name of the sensor platform. Defaults to None.\n    Returns:\n        Optional[\"Sensor\"]: The created and associated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        new_sensor = Sensor.create(\n            sensor_name=sensor_name,\n            sensor_type=sensor_type,\n            sensor_data_type=sensor_data_type,\n            sensor_data_format=sensor_data_format,\n            sensor_info=sensor_info,\n            experiment_name=self.experiment_name,\n            sensor_platform_name=sensor_platform_name\n        )\n        if not new_sensor:\n            print(\"Error creating new sensor.\")\n            return None\n        return new_sensor\n    except Exception as e:\n        print(\"Error creating new sensor:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_sensor_platform","title":"<code>create_new_sensor_platform(sensor_platform_name, sensor_platform_info={})</code>","text":"<p>Create and associate a new sensor platform with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_sensor_platform = experiment.create_new_sensor_platform(\"Platform 1\", {\"description\": \"Test platform\"})\n&gt;&gt;&gt; print(new_sensor_platform)\nSensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the new sensor platform.</p> required <code>sensor_platform_info</code> <code>dict</code> <p>Additional information about the sensor platform. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"SensorPlatform\"]: The created and associated sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_sensor_platform(\n    self,\n    sensor_platform_name: str,\n    sensor_platform_info: dict = {}\n) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Create and associate a new sensor platform with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_sensor_platform = experiment.create_new_sensor_platform(\"Platform 1\", {\"description\": \"Test platform\"})\n        &gt;&gt;&gt; print(new_sensor_platform)\n        SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n\n    Args:\n        sensor_platform_name (str): The name of the new sensor platform.\n        sensor_platform_info (dict, optional): Additional information about the sensor platform. Defaults to {{}}.\n    Returns:\n        Optional[\"SensorPlatform\"]: The created and associated sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        new_sensor_platform = SensorPlatform.create(\n            sensor_platform_name=sensor_platform_name,\n            sensor_platform_info=sensor_platform_info,\n            experiment_name=self.experiment_name\n        )\n        if not new_sensor_platform:\n            print(\"Error creating new sensor platform.\")\n            return None\n        return new_sensor_platform\n    except Exception as e:\n        print(\"Error creating new sensor platform:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_site","title":"<code>create_new_site(site_name, site_city=None, site_state=None, site_country=None, site_info={})</code>","text":"<p>Create and associate a new site with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_site = experiment.create_new_site(\"Site 1\", site_city=\"City\", site_state=\"State\", site_country=\"Country\", site_info={\"description\": \"Test site\"})\n&gt;&gt;&gt; print(new_site)\nSite(site_name=Site 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the new site.</p> required <code>site_city</code> <code>str</code> <p>The city of the site. Defaults to None.</p> <code>None</code> <code>site_state</code> <code>str</code> <p>The state of the site. Defaults to None.</p> <code>None</code> <code>site_country</code> <code>str</code> <p>The country of the site. Defaults to None.</p> <code>None</code> <code>site_info</code> <code>dict</code> <p>Additional information about the site. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"Site\"]: The created and associated site, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_site(\n    self,\n    site_name: str,\n    site_city: str = None,\n    site_state: str = None,\n    site_country: str = None,\n    site_info: dict = {}\n) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Create and associate a new site with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_site = experiment.create_new_site(\"Site 1\", site_city=\"City\", site_state=\"State\", site_country=\"Country\", site_info={\"description\": \"Test site\"})\n        &gt;&gt;&gt; print(new_site)\n        Site(site_name=Site 1, id=UUID(...))\n\n    Args:\n        site_name (str): The name of the new site.\n        site_city (str, optional): The city of the site. Defaults to None.\n        site_state (str, optional): The state of the site. Defaults to None.\n        site_country (str, optional): The country of the site. Defaults to None.\n        site_info (dict, optional): Additional information about the site. Defaults to {{}}.\n    Returns:\n        Optional[\"Site\"]: The created and associated site, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        new_site = Site.create(\n            site_name=site_name,\n            site_city=site_city,\n            site_state=site_state,\n            site_country=site_country,\n            site_info=site_info,\n            experiment_name=self.experiment_name\n        )\n        if not new_site:\n            print(\"Error creating new site.\")\n            return None\n        return new_site\n    except Exception as e:\n        print(\"Error creating new site:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.create_new_trait","title":"<code>create_new_trait(trait_name, trait_units=None, trait_metrics={}, trait_level=GEMINITraitLevel.Default, trait_info={})</code>","text":"<p>Create and associate a new trait with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; new_trait = experiment.create_new_trait(\"Trait 1\", trait_units=\"kg\", trait_metrics={\"metric1\": 1.0}, trait_level=GEMINITraitLevel.Default, trait_info={\"description\": \"Test trait\"})\n&gt;&gt;&gt; print(new_trait)\nTrait(trait_name=Trait 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the new trait.</p> required <code>trait_units</code> <code>str</code> <p>The units of the trait. Defaults to None.</p> <code>None</code> <code>trait_metrics</code> <code>dict</code> <p>Metrics for the trait. Defaults to {{}}.</p> <code>{}</code> <code>trait_level</code> <code>GEMINITraitLevel</code> <p>The level of the trait. Defaults to Default.</p> <code>Default</code> <code>trait_info</code> <code>dict</code> <p>Additional information about the trait. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[\"Trait\"]: The created and associated trait, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def create_new_trait(\n    self,\n    trait_name: str,\n    trait_units: str = None,\n    trait_metrics: dict = {},\n    trait_level: GEMINITraitLevel = GEMINITraitLevel.Default,\n    trait_info: dict = {},\n) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Create and associate a new trait with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; new_trait = experiment.create_new_trait(\"Trait 1\", trait_units=\"kg\", trait_metrics={\"metric1\": 1.0}, trait_level=GEMINITraitLevel.Default, trait_info={\"description\": \"Test trait\"})\n        &gt;&gt;&gt; print(new_trait)\n        Trait(trait_name=Trait 1, id=UUID(...))\n\n    Args:\n        trait_name (str): The name of the new trait.\n        trait_units (str, optional): The units of the trait. Defaults to None.\n        trait_metrics (dict, optional): Metrics for the trait. Defaults to {{}}.\n        trait_level (GEMINITraitLevel, optional): The level of the trait. Defaults to Default.\n        trait_info (dict, optional): Additional information about the trait. Defaults to {{}}.\n    Returns:\n        Optional[\"Trait\"]: The created and associated trait, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.trait import Trait\n        new_trait = Trait.create(\n            trait_name=trait_name,\n            trait_units=trait_units,\n            trait_metrics=trait_metrics,\n            trait_level=trait_level,\n            trait_info=trait_info,\n            experiment_name=self.experiment_name\n        )\n        if not new_trait:\n            print(\"Error creating new trait.\")\n            return None\n        return new_trait\n    except Exception as e:\n        print(\"Error creating new trait:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.delete","title":"<code>delete()</code>","text":"<p>Delete the experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; success = experiment.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the experiment was deleted, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; success = experiment.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the experiment was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        experiment = ExperimentModel.get(current_id)\n        if not experiment:\n            print(f\"Experiment with ID {current_id} does not exist.\")\n            return False\n        ExperimentModel.delete(experiment)\n        return True\n    except Exception as e:\n        print(\"Error deleting experiment:\", e)\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.exists","title":"<code>exists(experiment_name)</code>  <code>classmethod</code>","text":"<p>Check if an experiment with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Experiment.exists(\"My Experiment\")\nTrue\n&gt;&gt;&gt; Experiment.exists(\"Nonexistent Experiment\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:     bool: True if the experiment exists, False otherwise.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    experiment_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if an experiment with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Experiment.exists(\"My Experiment\")\n        True\n        &gt;&gt;&gt; Experiment.exists(\"Nonexistent Experiment\")\n        False\n\n    Args:\n        experiment_name (str): The name of the experiment.\n    Returns:\n        bool: True if the experiment exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ExperimentModel.exists(experiment_name=experiment_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of experiment: {e}\")\n        return False\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get","title":"<code>get(experiment_name)</code>  <code>classmethod</code>","text":"<p>Retrieve an experiment by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:     Optional[\"Experiment\"]: The experiment, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>@classmethod\ndef get(cls, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Retrieve an experiment by its name.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment.\n    Returns:\n        Optional[\"Experiment\"]: The experiment, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentModel.get_by_parameters(\n            experiment_name=experiment_name,\n        )\n        if not db_instance:\n            print(f\"Experiment with name {experiment_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(\"Error getting experiment:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all experiments.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiments = Experiment.get_all()\n&gt;&gt;&gt; for exp in experiments:\n...     print(exp)\nExperiment(experiment_name=Experiment 1, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[\"Experiment\"]]: A list of all experiments, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Retrieve all experiments.\n\n    Examples:\n        &gt;&gt;&gt; experiments = Experiment.get_all()\n        &gt;&gt;&gt; for exp in experiments:\n        ...     print(exp)\n        Experiment(experiment_name=Experiment 1, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Experiment\"]]: A list of all experiments, or None if an error occurred.\n    \"\"\"\n    try:\n        experiments = ExperimentModel.all()\n        if not experiments or len(experiments) == 0:\n            print(\"No experiments found.\")\n            return None\n        experiments = [cls.model_validate(experiment) for experiment in experiments]\n        return experiments\n    except Exception as e:\n        print(\"Error getting all experiments:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_cultivars","title":"<code>get_associated_cultivars()</code>","text":"<p>Get all cultivars associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; cultivars = experiment.get_associated_cultivars()\n&gt;&gt;&gt; for cultivar in cultivars:\n...     print(cultivar)\nCultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Cultivar]]</code> <p>Optional[List[\"Cultivar\"]]: A list of associated cultivars, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_cultivars(self) -&gt; Optional[List[\"Cultivar\"]]:\n    \"\"\"\n    Get all cultivars associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; cultivars = experiment.get_associated_cultivars()\n        &gt;&gt;&gt; for cultivar in cultivars:\n        ...     print(cultivar)\n        Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Cultivar\"]]: A list of associated cultivars, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        experiment_cultivars = ExperimentCultivarsViewModel.search(experiment_id=self.id)\n        if not experiment_cultivars or len(experiment_cultivars) == 0:\n            print(\"No cultivars found for this experiment.\")\n            return None\n        cultivars = [Cultivar.model_validate(cultivar) for cultivar in experiment_cultivars]\n        return cultivars\n    except Exception as e:\n        print(\"Error getting associated cultivars:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_datasets","title":"<code>get_associated_datasets()</code>","text":"<p>Get all datasets associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; datasets = experiment.get_associated_datasets()\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\nDataset(dataset_name=Dataset 2, collection_date=date(2023, 10, 2), dataset_type=Default, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Dataset]]</code> <p>Optional[List[\"Dataset\"]]: A list of associated datasets, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n    \"\"\"\n    Get all datasets associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; datasets = experiment.get_associated_datasets()\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n        Dataset(dataset_name=Dataset 2, collection_date=date(2023, 10, 2), dataset_type=Default, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Dataset\"]]: A list of associated datasets, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        experiment_datasets = ExperimentDatasetsViewModel.search(experiment_id=self.id)\n        if not experiment_datasets or len(experiment_datasets) == 0:\n            print(\"No datasets found for this experiment.\")\n            return None\n        datasets = [Dataset.model_validate(dataset) for dataset in experiment_datasets]\n        return datasets\n    except Exception as e:\n        print(\"Error getting associated datasets:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_models","title":"<code>get_associated_models()</code>","text":"<p>Get all models associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; models = experiment.get_associated_models()\n&gt;&gt;&gt; for model in models:\n...     print(model)\nModel(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\nModel(model_name=Model 2, model_url='http://example.com/model2', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Model]]</code> <p>Optional[List[\"Model\"]]: A list of associated models, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_models(self) -&gt; Optional[List[\"Model\"]]:\n    \"\"\"\n    Get all models associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; models = experiment.get_associated_models()\n        &gt;&gt;&gt; for model in models:\n        ...     print(model)\n        Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n        Model(model_name=Model 2, model_url='http://example.com/model2', id=UUID(...))\n\n    Returns:\n        Optional[List[\"Model\"]]: A list of associated models, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        experiment_models = ExperimentModelsViewModel.search(experiment_id=self.id)\n        if not experiment_models or len(experiment_models) == 0:\n            print(\"No models found for this experiment.\")\n            return None\n        models = [Model.model_validate(model) for model in experiment_models]\n        return models\n    except Exception as e:\n        print(\"Error getting associated models:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_plots","title":"<code>get_associated_plots()</code>","text":"<p>Get all plots associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; plots = experiment.get_associated_plots()\n&gt;&gt;&gt; for plot in plots:\n...     print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\nPlot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Plot]]</code> <p>Optional[List[\"Plot\"]]: A list of associated plots, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_plots(self) -&gt; Optional[List[\"Plot\"]]:\n    \"\"\"\n    Get all plots associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; plots = experiment.get_associated_plots()\n        &gt;&gt;&gt; for plot in plots:\n        ...     print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n        Plot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n\n\n    Returns:\n        Optional[List[\"Plot\"]]: A list of associated plots, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plots = PlotViewModel.search(experiment_id=self.id)\n        if not plots or len(plots) == 0:\n            print(\"No plots found for this experiment.\")\n            return None\n        plots = [Plot.model_validate(plot) for plot in plots]\n        return plots\n    except Exception as e:\n        print(\"Error getting associated plots:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_procedures","title":"<code>get_associated_procedures()</code>","text":"<p>Get all procedures associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; procedures = experiment.get_associated_procedures()\n&gt;&gt;&gt; for procedure in procedures:\n...     print(procedure)\nProcedure(procedure_name=Procedure 1, id=UUID(...))\nProcedure(procedure_name=Procedure 2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Procedure]]</code> <p>Optional[List[\"Procedure\"]]: A list of associated procedures, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_procedures(self) -&gt; Optional[List[\"Procedure\"]]:\n    \"\"\"\n    Get all procedures associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; procedures = experiment.get_associated_procedures()\n        &gt;&gt;&gt; for procedure in procedures:\n        ...     print(procedure)\n        Procedure(procedure_name=Procedure 1, id=UUID(...))\n        Procedure(procedure_name=Procedure 2, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Procedure\"]]: A list of associated procedures, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        experiment_procedures = ExperimentProceduresViewModel.search(experiment_id=self.id)\n        if not experiment_procedures or len(experiment_procedures) == 0:\n            print(\"No procedures found for this experiment.\")\n            return None\n        procedures = [Procedure.model_validate(procedure) for procedure in experiment_procedures]\n        return procedures\n    except Exception as e:\n        print(\"Error getting associated procedures:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_scripts","title":"<code>get_associated_scripts()</code>","text":"<p>Get all scripts associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; scripts = experiment.get_associated_scripts()\n&gt;&gt;&gt; for script in scripts:\n...     print(script)\nScript(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\nScript(script_name=Script 2, script_url='http://example.com/script2', script_extension='.js', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Script]]</code> <p>Optional[List[\"Script\"]]: A list of associated scripts, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_scripts(self) -&gt; Optional[List[\"Script\"]]:\n    \"\"\"\n    Get all scripts associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; scripts = experiment.get_associated_scripts()\n        &gt;&gt;&gt; for script in scripts:\n        ...     print(script)\n        Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n        Script(script_name=Script 2, script_url='http://example.com/script2', script_extension='.js', id=UUID(...))\n\n    Returns:\n        Optional[List[\"Script\"]]: A list of associated scripts, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        experiment_scripts = ExperimentScriptsViewModel.search(experiment_id=self.id)\n        if not experiment_scripts or len(experiment_scripts) == 0:\n            print(\"No scripts found for this experiment.\")\n            return None\n        scripts = [Script.model_validate(script) for script in experiment_scripts]\n        return scripts\n    except Exception as e:\n        print(\"Error getting associated scripts:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_seasons","title":"<code>get_associated_seasons()</code>","text":"<p>Get all seasons associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; seasons = experiment.get_associated_seasons()\n&gt;&gt;&gt; for season in seasons:\n...     print(season)\nSeason(season_name=Spring 2024, season_start_date=2024-03-01, season_end_date=2024-05-31, id=UUID(...))\nSeason(season_name=Summer 2024, season_start_date=2024-06-01, season_end_date=2024-08-31, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Season]]</code> <p>Optional[List[\"Season\"]]: A list of associated seasons, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_seasons(self) -&gt; Optional[List[\"Season\"]]:\n    \"\"\"\n    Get all seasons associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; seasons = experiment.get_associated_seasons()\n        &gt;&gt;&gt; for season in seasons:\n        ...     print(season)\n        Season(season_name=Spring 2024, season_start_date=2024-03-01, season_end_date=2024-05-31, id=UUID(...))\n        Season(season_name=Summer 2024, season_start_date=2024-06-01, season_end_date=2024-08-31, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Season\"]]: A list of associated seasons, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.season import Season\n        experiment_seasons = ExperimentSeasonsViewModel.search(experiment_id=self.id)\n        if not experiment_seasons or len(experiment_seasons) == 0:\n            print(\"No seasons found for this experiment.\")\n            return None\n        seasons = [Season.model_validate(season) for season in experiment_seasons]\n        return seasons\n    except Exception as e:\n        print(\"Error getting associated seasons:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_sensor_platforms","title":"<code>get_associated_sensor_platforms()</code>","text":"<p>Get all sensor platforms associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; sensor_platforms = experiment.get_associated_sensor_platforms()\n&gt;&gt;&gt; for sensor_platform in sensor_platforms:\n...     print(sensor_platform)\nSensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\nSensorPlatform(sensor_platform_name=Platform 2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[SensorPlatform]]</code> <p>Optional[List[\"SensorPlatform\"]]: A list of associated sensor platforms, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_sensor_platforms(self) -&gt; Optional[List[\"SensorPlatform\"]]:\n    \"\"\"\n    Get all sensor platforms associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; sensor_platforms = experiment.get_associated_sensor_platforms()\n        &gt;&gt;&gt; for sensor_platform in sensor_platforms:\n        ...     print(sensor_platform)\n        SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n        SensorPlatform(sensor_platform_name=Platform 2, id=UUID(...))\n\n    Returns:\n        Optional[List[\"SensorPlatform\"]]: A list of associated sensor platforms, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        experiment_sensor_platforms = ExperimentSensorPlatformsViewModel.search(experiment_id=self.id)\n        if not experiment_sensor_platforms or len(experiment_sensor_platforms) == 0:\n            print(\"No sensor platforms found for this experiment.\")\n            return None\n        sensor_platforms = [SensorPlatform.model_validate(sensor_platform) for sensor_platform in experiment_sensor_platforms]\n        return sensor_platforms\n    except Exception as e:\n        print(\"Error getting associated sensor platforms:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_sensors","title":"<code>get_associated_sensors()</code>","text":"<p>Get all sensors associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; sensors = experiment.get_associated_sensors()\n&gt;&gt;&gt; for sensor in sensors:\n...     print(sensor)\nSensor(sensor_name=Sensor 1, id=UUID(...))\nSensor(sensor_name=Sensor 2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Sensor]]</code> <p>Optional[List[\"Sensor\"]]: A list of associated sensors, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_sensors(self) -&gt; Optional[List[\"Sensor\"]]:\n    \"\"\"\n    Get all sensors associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; sensors = experiment.get_associated_sensors()\n        &gt;&gt;&gt; for sensor in sensors:\n        ...     print(sensor)\n        Sensor(sensor_name=Sensor 1, id=UUID(...))\n        Sensor(sensor_name=Sensor 2, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Sensor\"]]: A list of associated sensors, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        experiment_sensors = ExperimentSensorsViewModel.search(experiment_id=self.id)\n        if not experiment_sensors or len(experiment_sensors) == 0:\n            print(\"No sensors found for this experiment.\")\n            return None\n        sensors = [Sensor.model_validate(sensor) for sensor in experiment_sensors]\n        return sensors\n    except Exception as e:\n        print(\"Error getting associated sensors:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_sites","title":"<code>get_associated_sites()</code>","text":"<p>Get all sites associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; sites = experiment.get_associated_sites()\n&gt;&gt;&gt; for site in sites:\n...     print(site)\nSite(site_name=Site 1, id=UUID(...))\nSite(site_name=Site 2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Site]]</code> <p>Optional[List[\"Site\"]]: A list of associated sites, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_sites(self) -&gt; Optional[List[\"Site\"]]:\n    \"\"\"\n    Get all sites associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; sites = experiment.get_associated_sites()\n        &gt;&gt;&gt; for site in sites:\n        ...     print(site)\n        Site(site_name=Site 1, id=UUID(...))\n        Site(site_name=Site 2, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Site\"]]: A list of associated sites, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        experiment_sites = ExperimentSitesViewModel.search(experiment_id=self.id)\n        if not experiment_sites or len(experiment_sites) == 0:\n            print(\"No sites found for this experiment.\")\n            return None\n        sites = [Site.model_validate(site) for site in experiment_sites]\n        return sites\n    except Exception as e:\n        print(\"Error getting associated sites:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_associated_traits","title":"<code>get_associated_traits()</code>","text":"<p>Get all traits associated with this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; traits = experiment.get_associated_traits()\n&gt;&gt;&gt; for trait in traits:\n...     print(trait)\nTrait(trait_name=Trait 1, id=UUID(...))\nTrait(trait_name=Trait 2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Trait]]</code> <p>Optional[List[\"Trait\"]]: A list of associated traits, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_associated_traits(self) -&gt; Optional[List[\"Trait\"]]:\n    \"\"\"\n    Get all traits associated with this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; traits = experiment.get_associated_traits()\n        &gt;&gt;&gt; for trait in traits:\n        ...     print(trait)\n        Trait(trait_name=Trait 1, id=UUID(...))\n        Trait(trait_name=Trait 2, id=UUID(...))\n\n    Returns:\n        Optional[List[\"Trait\"]]: A list of associated traits, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.trait import Trait\n        experiment_traits = ExperimentTraitsViewModel.search(experiment_id=self.id)\n        if not experiment_traits or len(experiment_traits) == 0:\n            print(\"No traits found for this experiment.\")\n            return None\n        traits = [Trait.model_validate(trait) for trait in experiment_traits]\n        return traits\n    except Exception as e:\n        print(\"Error getting associated traits:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve an experiment by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the experiment.</p> required <p>Returns:     Optional[\"Experiment\"]: The experiment, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Retrieve an experiment by its ID.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the experiment.\n    Returns:\n        Optional[\"Experiment\"]: The experiment, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentModel.get(id)\n        if not db_instance:\n            print(f\"Experiment with ID {id} does not exist.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(\"Error getting experiment by ID:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; info = experiment.get_info()\n&gt;&gt;&gt; print(info)\n{'description': 'Test experiment', 'created_by': 'user'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The experiment's info, or None if not found.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; info = experiment.get_info()\n        &gt;&gt;&gt; print(info)\n        {'description': 'Test experiment', 'created_by': 'user'}\n\n    Returns:\n        Optional[dict]: The experiment's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        experiment = ExperimentModel.get(current_id)\n        if not experiment:\n            print(f\"Experiment with ID {current_id} does not exist.\")\n            return None\n        experiment_info = experiment.experiment_info\n        if not experiment_info:\n            print(\"Experiment info is empty.\")\n            return None\n        return experiment_info\n    except Exception as e:\n        print(\"Error getting experiment info:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the experiment's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; refreshed_experiment = experiment.refresh()\n&gt;&gt;&gt; print(refreshed_experiment)\nExperiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Experiment]</code> <p>Optional[\"Experiment\"]: The refreshed experiment, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Refresh the experiment's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; refreshed_experiment = experiment.refresh()\n        &gt;&gt;&gt; print(refreshed_experiment)\n        Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n    Returns:\n        Optional[\"Experiment\"]: The refreshed experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ExperimentModel.get(self.id)\n        if not db_instance:\n            print(f\"Experiment with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(\"Error refreshing experiment:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.search","title":"<code>search(experiment_name=None, experiment_info=None, experiment_start_date=None, experiment_end_date=None)</code>  <code>classmethod</code>","text":"<p>Search for experiments based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiments = Experiment.search(experiment_name=\"My Experiment\")\n&gt;&gt;&gt; for exp in experiments:\n...     print(exp)\nExperiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>experiment_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>experiment_start_date</code> <code>date</code> <p>The start date. Defaults to None.</p> <code>None</code> <code>experiment_end_date</code> <code>date</code> <p>The end date. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[\"Experiment\"]]: A list of matching experiments, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    experiment_name: str = None,\n    experiment_info: dict = None,\n    experiment_start_date: date = None,\n    experiment_end_date: date = None\n) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Search for experiments based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; experiments = Experiment.search(experiment_name=\"My Experiment\")\n        &gt;&gt;&gt; for exp in experiments:\n        ...     print(exp)\n        Experiment(experiment_name=My Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n    Args:\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        experiment_info (dict, optional): Additional information. Defaults to None.\n        experiment_start_date (date, optional): The start date. Defaults to None.\n        experiment_end_date (date, optional): The end date. Defaults to None.\n    Returns:\n        Optional[List[\"Experiment\"]]: A list of matching experiments, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, experiment_info, experiment_start_date, experiment_end_date]):\n            print(\"At least one parameter must be provided for search.\")\n            return None\n        experiments = ExperimentModel.search(\n            experiment_name=experiment_name,\n            experiment_info=experiment_info,\n            experiment_start_date=experiment_start_date,\n            experiment_end_date=experiment_end_date\n        )\n        if not experiments or len(experiments) == 0:\n            print(\"No experiments found with the provided search parameters.\")\n            return None\n        experiments = [cls.model_validate(experiment) for experiment in experiments]\n        return experiments\n    except Exception as e:\n        print(\"Error searching experiments:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.set_info","title":"<code>set_info(experiment_info)</code>","text":"<p>Set the additional information of the experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; updated_experiment = experiment.set_info({\"description\": \"Updated description\"})\n&gt;&gt;&gt; print(updated_experiment.get_info())\n{'description': 'Updated description'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[\"Experiment\"]: The updated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def set_info(self, experiment_info: dict) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Set the additional information of the experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; updated_experiment = experiment.set_info({\"description\": \"Updated description\"})\n        &gt;&gt;&gt; print(updated_experiment.get_info())\n        {'description': 'Updated description'}\n\n    Args:\n        experiment_info (dict): The new information to set.\n    Returns:\n        Optional[\"Experiment\"]: The updated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        experiment = ExperimentModel.get(current_id)\n        if not experiment:\n            print(f\"Experiment with ID {current_id} does not exist.\")\n            return None\n        updated_experiment = ExperimentModel.update(\n            experiment,\n            experiment_info=experiment_info,\n        )\n        updated_experiment = self.model_validate(updated_experiment)\n        self.refresh()\n        return updated_experiment\n    except Exception as e:\n        print(\"Error setting experiment info:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_cultivar","title":"<code>unassociate_cultivar(cultivar_population, cultivar_accession)</code>","text":"<p>Unassociate a cultivar from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; cultivar = experiment.unassociate_cultivar(\"Population A\", \"Accession 123\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar.</p> required <p>Returns:     Optional[\"Cultivar\"]: The unassociated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_cultivar(\n    self,\n    cultivar_population: str,\n    cultivar_accession: str,\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Unassociate a cultivar from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; cultivar = experiment.unassociate_cultivar(\"Population A\", \"Accession 123\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_population=Population A, cultivar_accession=Accession 123, id=UUID(...))\n\n    Args:\n        cultivar_population (str): The population of the cultivar.\n        cultivar_accession (str): The accession of the cultivar.\n    Returns:\n        Optional[\"Cultivar\"]: The unassociated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(cultivar_population=cultivar_population, cultivar_accession=cultivar_accession)\n        if not cultivar:\n            print(\"Cultivar not found.\")\n            return None\n        cultivar.unassociate_experiment(experiment_name=self.experiment_name)\n        return cultivar\n    except Exception as e:\n        print(\"Error unassociating cultivar:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_dataset","title":"<code>unassociate_dataset(dataset_name)</code>","text":"<p>Unassociate a dataset from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; dataset = experiment.unassociate_dataset(\"Dataset 1\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <p>Returns:     Optional[\"Dataset\"]: The unassociated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_dataset(\n    self,\n    dataset_name: str,\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Unassociate a dataset from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; dataset = experiment.unassociate_dataset(\"Dataset 1\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=Dataset 1, collection_date=date(2023, 10, 1), dataset_type=Default, id=UUID(...))\n\n    Args:\n        dataset_name (str): The name of the dataset.\n    Returns:\n        Optional[\"Dataset\"]: The unassociated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name=dataset_name)\n        if not dataset:\n            print(\"Dataset not found.\")\n            return None\n        dataset.unassociate_experiment(experiment_name=self.experiment_name)\n        return dataset\n    except Exception as e:\n        print(\"Error unassociating dataset:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_model","title":"<code>unassociate_model(model_name)</code>","text":"<p>Unassociate a model from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; model = experiment.unassociate_model(\"Model 1\")\n&gt;&gt;&gt; print(model)\nModel(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <p>Returns:     Optional[\"Model\"]: The unassociated model, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_model(\n    self,\n    model_name: str,\n) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Unassociate a model from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; model = experiment.unassociate_model(\"Model 1\")\n        &gt;&gt;&gt; print(model)\n        Model(model_name=Model 1, model_url='http://example.com/model1', id=UUID(...))\n\n    Args:\n        model_name (str): The name of the model.\n    Returns:\n        Optional[\"Model\"]: The unassociated model, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        model = Model.get(model_name=model_name)\n        if not model:\n            print(\"Model not found.\")\n            return None\n        model.unassociate_experiment(experiment_name=self.experiment_name)\n        return model\n    except Exception as e:\n        print(\"Error unassociating model:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_plot","title":"<code>unassociate_plot(plot_number, plot_row_number, plot_column_number, season_name=None, site_name=None)</code>","text":"<p>Unassociate a plot from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; plot = experiment.unassociate_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>season_name</code> <code>str</code> <p>The season name. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Plot\"]: The unassociated plot, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    season_name: str = None,\n    site_name: str = None,\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Unassociate a plot from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; plot = experiment.unassociate_plot(1, 1, 1, season_name=\"Spring\", site_name=\"Site 1\")\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        season_name (str, optional): The season name. Defaults to None.\n        site_name (str, optional): The site name. Defaults to None.\n    Returns:\n        Optional[\"Plot\"]: The unassociated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(\"Plot not found.\")\n            return None\n        plot.unassociate_experiment()\n        return plot\n    except Exception as e:\n        print(\"Error unassociating plot:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_procedure","title":"<code>unassociate_procedure(procedure_name)</code>","text":"<p>Unassociate a procedure from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; procedure = experiment.unassociate_procedure(\"Procedure 1\")\n&gt;&gt;&gt; print(procedure)\nProcedure(procedure_name=Procedure 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <p>Returns:     Optional[\"Procedure\"]: The unassociated procedure, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_procedure(\n    self,\n    procedure_name: str,\n) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Unassociate a procedure from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; procedure = experiment.unassociate_procedure(\"Procedure 1\")\n        &gt;&gt;&gt; print(procedure)\n        Procedure(procedure_name=Procedure 1, id=UUID(...))\n\n    Args:\n        procedure_name (str): The name of the procedure.\n    Returns:\n        Optional[\"Procedure\"]: The unassociated procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        procedure = Procedure.get(procedure_name=procedure_name)\n        if not procedure:\n            print(\"Procedure not found.\")\n            return None\n        procedure.unassociate_experiment(experiment_name=self.experiment_name)\n        return procedure\n    except Exception as e:\n        print(\"Error unassociating procedure:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_script","title":"<code>unassociate_script(script_name)</code>","text":"<p>Unassociate a script from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; script = experiment.unassociate_script(\"Script 1\")\n&gt;&gt;&gt; print(script)\nScript(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <p>Returns:     Optional[\"Script\"]: The unassociated script, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_script(\n    self,\n    script_name: str,\n) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Unassociate a script from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; script = experiment.unassociate_script(\"Script 1\")\n        &gt;&gt;&gt; print(script)\n        Script(script_name=Script 1, script_url='http://example.com/script1', script_extension='.py', id=UUID(...))\n\n    Args:\n        script_name (str): The name of the script.\n    Returns:\n        Optional[\"Script\"]: The unassociated script, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        script = Script.get(script_name=script_name)\n        if not script:\n            print(\"Script not found.\")\n            return None\n        script.unassociate_experiment(experiment_name=self.experiment_name)\n        return script\n    except Exception as e:\n        print(\"Error unassociating script:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_sensor","title":"<code>unassociate_sensor(sensor_name)</code>","text":"<p>Unassociate a sensor from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; sensor = experiment.unassociate_sensor(\"Sensor 1\")\n&gt;&gt;&gt; print(sensor)\nSensor(sensor_name=Sensor 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <p>Returns:     Optional[\"Sensor\"]: The unassociated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_sensor(\n    self,\n    sensor_name: str,\n) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Unassociate a sensor from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; sensor = experiment.unassociate_sensor(\"Sensor 1\")\n        &gt;&gt;&gt; print(sensor)\n        Sensor(sensor_name=Sensor 1, id=UUID(...))\n\n    Args:\n        sensor_name (str): The name of the sensor.\n    Returns:\n        Optional[\"Sensor\"]: The unassociated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        sensor = Sensor.get(sensor_name=sensor_name)\n        if not sensor:\n            print(\"Sensor not found.\")\n            return None\n        sensor.unassociate_experiment(experiment_name=self.experiment_name)\n        return sensor\n    except Exception as e:\n        print(\"Error unassociating sensor:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_sensor_platform","title":"<code>unassociate_sensor_platform(sensor_platform_name)</code>","text":"<p>Unassociate a sensor platform from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; sensor_platform = experiment.unassociate_sensor_platform(\"Platform 1\")\n&gt;&gt;&gt; print(sensor_platform)\nSensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform.</p> required <p>Returns:     Optional[\"SensorPlatform\"]: The unassociated sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_sensor_platform(\n    self,\n    sensor_platform_name: str,\n) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Unassociate a sensor platform from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; sensor_platform = experiment.unassociate_sensor_platform(\"Platform 1\")\n        &gt;&gt;&gt; print(sensor_platform)\n        SensorPlatform(sensor_platform_name=Platform 1, id=UUID(...))\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform.\n    Returns:\n        Optional[\"SensorPlatform\"]: The unassociated sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n        if not sensor_platform:\n            print(\"Sensor platform not found.\")\n            return None\n        sensor_platform.unassociate_experiment(experiment_name=self.experiment_name)\n        return sensor_platform\n    except Exception as e:\n        print(\"Error unassociating sensor platform:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_site","title":"<code>unassociate_site(site_name)</code>","text":"<p>Unassociate a site from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; site = experiment.unassociate_site(\"Site 1\")\n&gt;&gt;&gt; print(site)\nSite(site_name=Site 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:     Optional[\"Site\"]: The unassociated site, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_site(\n    self,\n    site_name: str,\n) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Unassociate a site from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; site = experiment.unassociate_site(\"Site 1\")\n        &gt;&gt;&gt; print(site)\n        Site(site_name=Site 1, id=UUID(...))\n\n    Args:\n        site_name (str): The name of the site.\n    Returns:\n        Optional[\"Site\"]: The unassociated site, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        site = Site.get(site_name=site_name)\n        if not site:\n            print(\"Site not found.\")\n            return None\n        site.unassociate_experiment(experiment_name=self.experiment_name)\n        return site\n    except Exception as e:\n        print(\"Error unassociating site:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.unassociate_trait","title":"<code>unassociate_trait(trait_name)</code>","text":"<p>Unassociate a trait from this experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; trait = experiment.unassociate_trait(\"Trait 1\")\n&gt;&gt;&gt; print(trait)\nTrait(trait_name=Trait 1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <p>Returns:     Optional[\"Trait\"]: The unassociated trait, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def unassociate_trait(\n    self,\n    trait_name: str,\n) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Unassociate a trait from this experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; trait = experiment.unassociate_trait(\"Trait 1\")\n        &gt;&gt;&gt; print(trait)\n        Trait(trait_name=Trait 1, id=UUID(...))\n\n    Args:\n        trait_name (str): The name of the trait.\n    Returns:\n        Optional[\"Trait\"]: The unassociated trait, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.trait import Trait\n        trait = Trait.get(trait_name=trait_name)\n        if not trait:\n            print(\"Trait not found.\")\n            return None\n        trait.unassociate_experiment(experiment_name=self.experiment_name)\n        return trait\n    except Exception as e:\n        print(\"Error unassociating trait:\", e)\n        return None\n</code></pre>"},{"location":"api/experiments/#gemini.api.experiment.Experiment.update","title":"<code>update(experiment_name=None, experiment_info=None, experiment_start_date=None, experiment_end_date=None)</code>","text":"<p>Update the details of the experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n&gt;&gt;&gt; updated_experiment = experiment.update(experiment_name=\"Updated Experiment\")\n&gt;&gt;&gt; print(updated_experiment)\nExperiment(experiment_name=Updated Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>experiment_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <code>experiment_start_date</code> <code>date</code> <p>The new start date. Defaults to None.</p> <code>None</code> <code>experiment_end_date</code> <code>date</code> <p>The new end date. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Experiment\"]: The updated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/experiment.py</code> <pre><code>def update(\n    self,\n    experiment_name: str = None, \n    experiment_info: dict = None,\n    experiment_start_date: date = None,\n    experiment_end_date: date = None\n) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Update the details of the experiment.\n\n    Examples:\n        &gt;&gt;&gt; experiment = Experiment.get(\"My Experiment\")\n        &gt;&gt;&gt; updated_experiment = experiment.update(experiment_name=\"Updated Experiment\")\n        &gt;&gt;&gt; print(updated_experiment)\n        Experiment(experiment_name=Updated Experiment, experiment_start_date=2023-10-01, experiment_end_date=2023-10-01, id=UUID(...))\n\n    Args:\n        experiment_name (str, optional): The new name. Defaults to None.\n        experiment_info (dict, optional): The new information. Defaults to None.\n        experiment_start_date (date, optional): The new start date. Defaults to None.\n        experiment_end_date (date, optional): The new end date. Defaults to None.\n    Returns:\n        Optional[\"Experiment\"]: The updated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, experiment_info, experiment_start_date, experiment_end_date]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n\n        current_id = self.id\n        experiment = ExperimentModel.get(current_id)\n        if not experiment:\n            print(f\"Experiment with ID {current_id} does not exist.\")\n            return None\n\n        updated_experiment = ExperimentModel.update(\n            experiment,\n            experiment_name=experiment_name,\n            experiment_info=experiment_info,\n            experiment_start_date=experiment_start_date,\n            experiment_end_date=experiment_end_date\n        )\n        updated_experiment = self.model_validate(updated_experiment)\n        self.refresh()\n        return updated_experiment\n    except Exception as e:\n        print(\"Error updating experiment:\", e)\n        return None\n</code></pre>"},{"location":"api/model_records/","title":"Model Records API","text":""},{"location":"api/model_records/#description","title":"Description","text":"<p>A model record is a record that belongs to a specific Model, a specific Experiment, Season and Site.</p> <p>It is defined by the following properties:</p> Property Type Description <code>id</code> <code>UUID</code> The unique identifier of the model record. <code>timestamp</code> <code>datetime</code> The timestamp of the record. <code>collection_date</code> <code>date</code> The collection date of the record. <code>model_name</code> <code>string</code> The name of the associated model. <code>model_id</code> <code>UUID</code> The ID of the associated model. <code>model_data</code> <code>dict</code> The data associated with the model record. <code>dataset_id</code> <code>UUID</code> The ID of the associated dataset. <code>dataset_name</code> <code>string</code> The name of the associated dataset. <code>experiment_name</code> <code>string</code> The name of the associated experiment. <code>experiment_id</code> <code>UUID</code> The ID of the associated experiment. <code>season_name</code> <code>string</code> The name of the associated season. <code>season_id</code> <code>UUID</code> The ID of the associated season. <code>site_name</code> <code>string</code> The name of the associated site. <code>site_id</code> <code>UUID</code> The ID of the associated site. <code>record_file</code> <code>string</code> The file path for the record data in the object storage. <code>record_info</code> <code>dict</code> Additional information about the record. <p>A model record is uniquely identified within a model by its <code>timestamp</code>, <code>model_name</code>, <code>dataset_name</code>, <code>experiment_name</code>, <code>season_name</code>, and <code>site_name</code>. There will be no two model records with the same timestamp and belonging to the same model, dataset, experiment, season and site.</p>"},{"location":"api/model_records/#module","title":"Module","text":"<p>This module defines the ModelRecord class, which represents a record of a model, including metadata, associations to datasets and experiments, and file handling capabilities.</p> <p>It includes methods for creating, retrieving, updating, and deleting model records, as well as methods for checking existence, searching, and managing file handling for records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a model record with the given parameters exists.</li> <li><code>create</code>: Create a new model record.</li> <li><code>get_by_id</code>: Retrieve a model record by its ID.</li> <li><code>get_all</code>: Retrieve all model records.</li> <li><code>search</code>: Search for model records based on various criteria.</li> <li><code>update</code>: Update the details of a model record.</li> <li><code>delete</code>: Delete a model record.</li> <li><code>refresh</code>: Refresh the model record's data from the database.</li> <li><code>get_info</code>: Get the additional information of the model record.</li> <li><code>set_info</code>: Set the additional information of the model record.</li> <li>File handling methods from FileHandlerMixin for managing record files.</li> </ul>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord","title":"<code>ModelRecord</code>","text":"<p>               Bases: <code>APIBase</code>, <code>FileHandlerMixin</code></p> <p>Represents a record of a model, including metadata, associations to datasets and experiments, and file handling capabilities.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the model record.</p> <code>timestamp</code> <code>Optional[datetime]</code> <p>The timestamp of the record.</p> <code>collection_date</code> <code>Optional[date]</code> <p>The collection date of the record.</p> <code>dataset_id</code> <code>Optional[ID]</code> <p>The ID of the associated dataset.</p> <code>dataset_name</code> <code>Optional[str]</code> <p>The name of the associated dataset.</p> <code>model_id</code> <code>Optional[ID]</code> <p>The ID of the associated model.</p> <code>model_name</code> <code>Optional[str]</code> <p>The name of the associated model.</p> <code>model_data</code> <code>Optional[dict]</code> <p>The data content of the model record.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> <code>experiment_name</code> <p>Optional[str] = None</p> <code>season_id</code> <code>Optional[ID]</code> <p>Optional[ID] = None</p> <code>season_name</code> <code>Optional[str]</code> <p>Optional[str] = None</p> <code>site_id</code> <code>Optional[ID]</code> <p>Optional[ID] = None</p> <code>site_name</code> <code>Optional[str]</code> <p>Optional[str] = None</p> <code>record_file</code> <code>Optional[str]</code> <p>Optional[str] = None</p> <code>record_info</code> <code>Optional[dict]</code> <p>Optional[dict] = None</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>class ModelRecord(APIBase, FileHandlerMixin):\n    \"\"\"\n    Represents a record of a model, including metadata, associations to datasets and experiments, and file handling capabilities.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the model record.\n        timestamp (Optional[datetime]): The timestamp of the record.\n        collection_date (Optional[date]): The collection date of the record.\n        dataset_id (Optional[ID]): The ID of the associated dataset.\n        dataset_name (Optional[str]): The name of the associated dataset.\n        model_id (Optional[ID]): The ID of the associated model.\n        model_name (Optional[str]): The name of the associated model.\n        model_data (Optional[dict]): The data content of the model record.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n        experiment_name : Optional[str] = None\n        season_id: Optional[ID] = None\n        season_name: Optional[str] = None\n        site_id: Optional[ID] = None\n        site_name: Optional[str] = None\n        record_file: Optional[str] = None\n        record_info: Optional[dict] = None\n\n    \"\"\"\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"model_record_id\"))\n\n    timestamp: Optional[datetime] = None\n    collection_date: Optional[date] = None\n    dataset_id: Optional[ID] = None\n    dataset_name: Optional[str] = None\n    model_id: Optional[ID] = None\n    model_name: Optional[str] = None\n    model_data: Optional[dict] = None\n    experiment_id: Optional[ID] = None\n    experiment_name : Optional[str] = None\n    season_id: Optional[ID] = None\n    season_name: Optional[str] = None\n    site_id: Optional[ID] = None\n    site_name: Optional[str] = None\n    record_file: Optional[str] = None\n    record_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the ModelRecord object.\"\"\"\n        return f\"ModelRecord(id={self.id}, timestamp={self.timestamp}, model_data={self.model_data}, model_name={self.model_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the ModelRecord object.\"\"\"\n        return f\"ModelRecord(id={self.id}, timestamp={self.timestamp}, model_data={self.model_data}, model_name={self.model_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n\n    @classmethod\n    def exists(\n        cls,\n        timestamp: datetime,\n        model_name: str,\n        dataset_name: str,\n        experiment_name: str,\n        season_name: str,\n        site_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a model record with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; ModelRecord.exists(\n            ...     timestamp=datetime.now(),\n            ...     model_name=\"example_model\",\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\"\n            ... )\n            True\n\n        Args:\n            timestamp (datetime): The timestamp of the model record.\n            model_name (str): The name of the model.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment.\n            season_name (str): The name of the season.\n            site_name (str): The name of the site.\n\n        Returns:\n            bool: True if the model record exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ModelRecordModel.exists(\n                timestamp=timestamp,\n                model_name=model_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of ModelRecord: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        timestamp: datetime = datetime.now(),\n        collection_date: date = None,\n        dataset_name: str = None,\n        model_name: str = None,\n        model_data: dict = {},\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n        insert_on_create: bool = True\n    ) -&gt; Optional[\"ModelRecord\"]:\n        \"\"\"\n        Create a new model record.\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.create(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date.today(),\n            ...     dataset_name=\"example_dataset\",\n            ...     model_name=\"example_model\",\n            ...     model_data={\"key\": \"value\"},\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     record_file=\"path/to/record_file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"},\n            ...     insert_on_create=True\n            ... )\n            &gt;&gt;&gt; print(model_record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n        Args:\n            timestamp (datetime): The timestamp of the model record. Defaults to the current time.\n            collection_date (date): The collection date of the model record. Defaults to the timestamp's date.\n            dataset_name (str): The name of the associated dataset. Required.\n            model_name (str): The name of the associated model. Required.\n            model_data (dict): The data content of the model record. Defaults to an empty dictionary\n            experiment_name (str): The name of the associated experiment. Optional.\n            site_name (str): The name of the associated site. Optional.\n            season_name (str): The name of the associated season. Optional.\n            record_file (str): The file path of the model record. Optional.\n            record_info (dict): Additional information about the model record. Defaults to an empty dictionary.\n            insert_on_create (bool): Whether to insert the record into the database upon creation. Defaults to True.\n\n        Returns:\n            Optional[\"ModelRecord\"]: The created model record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, site_name, season_name]):\n                raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n            if not model_name:\n                raise ValueError(\"Model name is required.\")\n            if not dataset_name:\n                raise ValueError(\"Dataset name is required.\")\n            if not timestamp:\n                raise ValueError(\"Timestamp is required.\")\n            if not collection_date:\n                collection_date = timestamp.date()\n            if not model_data and not record_file:\n                raise ValueError(\"At least one of model_data or record_file must be provided.\")\n            model_record = ModelRecord(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                model_name=model_name,\n                model_data=model_data,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                record_file=record_file,\n                record_info=record_info\n            )\n            if insert_on_create:\n                insert_success, inserted_record_ids = cls.insert([model_record])\n                if not insert_success:\n                    print(f\"Failed to insert ModelRecord: {model_record}\")\n                    return None\n                if not inserted_record_ids or len(inserted_record_ids) == 0:\n                    print(f\"No new ModelRecord was inserted.\")\n                    return None\n                inserted_record_id = inserted_record_ids[0]\n                model_record = cls.get_by_id(inserted_record_id)\n            return model_record\n        except Exception as e:\n            print(f\"Error creating ModelRecord: {e}\")\n            raise None\n\n    @classmethod\n    def insert(cls, records: List[\"ModelRecord\"]) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a list of model records into the database.\n\n        Args:\n            records (List[ModelRecord]): List of model records to insert.\n\n\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not records or len(records) == 0:\n                print(f\"No records provided for insertion.\")\n                return False, []\n            records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing ModelRecords\")]\n            records_to_insert = []\n            for record in records:\n                record_dict = record.model_dump()\n                record_dict = {k: v for k, v in record_dict.items() if v is not None}\n                records_to_insert.append(record_dict)\n            print(f\"Inserting {len(records_to_insert)} records.\")\n            inserted_record_ids = ModelRecordModel.insert_bulk('model_records_unique', records_to_insert)\n            print(f\"Inserted {len(inserted_record_ids)} records.\")\n            return True, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting ModelRecords: {e}\")\n            return False, []\n\n    @classmethod\n    def get(\n        cls,\n        timestamp: datetime,\n        model_name: str,\n        dataset_name: str,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; Optional[\"ModelRecord\"]:\n        \"\"\"\n        Retrieve model records based on provided parameters.\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.get(\n            ...     timestamp=datetime.now(),\n            ...     model_name=\"example_model\",\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\"\n            ...     site_name=\"example_site\"\n            ... )\n            &gt;&gt;&gt; print(model_record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n        Args:\n            timestamp (datetime): The timestamp of the model record.\n            model_name (str): The name of the model.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment. Optional.\n            season_name (str): The name of the season. Optional.\n            site_name (str): The name of the site. Optional.\n\n\n        Returns:\n            Optional[List[\"ModelRecord\"]]: List of matching model records, or None if not found.\n        \"\"\"\n        try:\n            if not timestamp:\n                print(f\"Timestamp is required to get ModelRecord.\")\n                return None\n            if not dataset_name:\n                print(f\"Dataset name is required to get ModelRecord.\")\n                return None\n            if not model_name:\n                print(f\"Model name is required to get ModelRecord.\")\n                return None\n            if not experiment_name and not season_name and not site_name:\n                print(f\"At least one of experiment_name, season_name, or site_name is required to get ModelRecord.\")\n                return None\n            model_record = ModelRecordsIMMVModel.get_by_parameters(\n                timestamp=timestamp,\n                model_name=model_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not model_record:\n                print(f\"No ModelRecord found for the given parameters.\")\n                return None\n            model_record = cls.model_validate(model_record)\n            return model_record\n        except Exception as e:\n            print(f\"Error getting ModelRecord: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ModelRecord\"]:\n        \"\"\"\n        Retrieve a model record by its ID\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(model_record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n        Args:\n            id (UUID | int | str): The unique identifier of the model record.\n\n        Returns:\n            Optional[\"ModelRecord\"]: The model record, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ModelRecordModel.get(id)\n            if not db_instance:\n                print(f\"No ModelRecord found with ID: {id}\")\n                return None\n            record = cls.model_validate(db_instance)\n            return record\n        except Exception as e:\n            print(f\"Error getting ModelRecord by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls, limit: int = 100) -&gt; Optional[List[\"ModelRecord\"]]:\n        \"\"\"\n        Retrieve all model records, up to a specified limit.\n\n        Examples:\n            &gt;&gt;&gt; model_records = ModelRecord.get_all(limit=10)\n            &gt;&gt;&gt; for record in model_records:\n            ...     print(record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n            ModelRecord(id=UUID(...), timestamp=2023-10-02 12:00:00, model_name=example_model2, model_data={...}, dataset_name=example_dataset2, experiment_name=example_experiment2, site_name=example_site2, season_name=example_season2)\n\n        Args:\n            limit (int): The maximum number of model records to retrieve. Defaults to 100.\n\n        Returns:\n            Optional[List[\"ModelRecord\"]]: List of model records, or None if not found.\n        \"\"\"\n        try:\n            records = ModelRecordModel.all(limit=limit)\n            if not records or len(records) == 0:\n                print(f\"No ModelRecords found.\")\n                return None\n            records = [cls.model_validate(record) for record in records]\n            return records\n        except Exception as e:\n            print(f\"Error getting all ModelRecords: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        model_name: str = None,\n        model_data: dict = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        collection_date: date = None,\n        record_info: dict = None\n    ) -&gt; Generator[\"ModelRecord\", None, None]:\n        \"\"\"\n        Search for model records based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; for record in ModelRecord.search(\n            ...     model_name=\"example_model\",\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     collection_date=date.today(),\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... ):\n            ...     print(record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n        Args:\n            model_name (str): The name of the model. Optional.\n            model_data (dict): The data content of the model record. Optional.\n            dataset_name (str): The name of the associated dataset. Optional.\n            experiment_name (str): The name of the associated experiment. Optional.\n            site_name (str): The name of the associated site. Optional.\n            season_name (str): The name of the associated season. Optional.\n            collection_date (date): The collection date of the model record. Optional.\n            record_info (dict): Additional information about the model record. Optional.\n\n\n        Returns:\n            Optional[List[\"ModelRecord\"]]: List of matching model records, or None if not found.\n        \"\"\"\n        try:\n            if not any([model_name, dataset_name, experiment_name, site_name, season_name, collection_date, record_info]):\n                print(f\"At least one parameter must be provided for search.\")\n                return\n            records = ModelRecordsIMMVModel.stream(\n                model_name=model_name,\n                model_data=model_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                collection_date=collection_date,\n                record_info=record_info\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error searching ModelRecords: {e}\")\n            yield None\n\n    @classmethod\n    def filter(\n        cls,\n        model_names: List[str] = None,\n        dataset_names: List[str] = None,\n        start_timestamp: datetime = None,\n        end_timestamp: datetime = None,\n        experiment_names: List[str] = None,\n        site_names: List[str] = None,\n        season_names: List[str] = None\n    ) -&gt; Generator[\"ModelRecord\", None, None]:\n        \"\"\"\n        Filter model records based on custom logic.\n\n        Examples:\n            &gt;&gt;&gt; for record in ModelRecord.filter(\n            ...     model_names=[\"example_model\"],\n            ...     dataset_names=[\"example_dataset\"],\n            ...     start_timestamp=datetime(2023, 1, 1),\n            ...     end_timestamp=datetime(2023, 12, 31),\n            ...     experiment_names=[\"example_experiment\"],\n            ...     site_names=[\"example_site\"],\n            ...     season_names=[\"example_season\"]\n            ... ):\n            ...     print(record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n        Args:\n            model_names (List[str]): List of model names to filter by. Optional.\n            dataset_names (List[str]): List of dataset names to filter by. Optional.\n            start_timestamp (datetime): Start timestamp for filtering. Optional.\n            end_timestamp (datetime): End timestamp for filtering. Optional.\n            experiment_names (List[str]): List of experiment names to filter by. Optional.\n            site_names (List[str]): List of site names to filter by. Optional.\n            season_names (List[str]): List of season names to filter by. Optional.\n\n        Returns:\n            Optional[List[\"ModelRecord\"]]: List of filtered model records, or None if not found.\n        \"\"\"\n        try:\n            if not any([model_names, dataset_names, start_timestamp, end_timestamp, experiment_names, site_names, season_names]):\n                print(f\"At least one parameter must be provided for filter.\")\n                return\n            records = ModelRecordModel.filter_records(\n                model_names=model_names,\n                dataset_names=dataset_names,\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                experiment_names=experiment_names,\n                site_names=site_names,\n                season_names=season_names\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error filtering ModelRecords: {e}\")\n            yield None\n\n    def update(\n        self,\n        model_data: dict = None,\n        record_info: dict = None\n    ) -&gt; Optional[\"ModelRecord\"]:\n        \"\"\"\n        Update the details of the model record.\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = model_record.update(\n            ...     model_data={\"new_key\": \"new_value\"},\n            ...     record_info={\"new_info_key\": \"new_info_value\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n        Returns:\n            Optional[\"ModelRecord\"]: The updated model record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([model_data, record_info]):\n                print(f\"At least one parameter must be provided for update.\")\n                return None\n            current_id = self.id\n            model_record = ModelRecordModel.get(current_id)\n            if not model_record:\n                print(f\"No ModelRecord found with ID: {current_id}\")\n                return None\n            model_record = ModelRecordModel.update(\n                model_record,\n                model_data=model_data,\n                record_info=record_info\n            )\n            model_record = self.model_validate(model_record)\n            self.refresh()\n            return model_record\n        except Exception as e:\n            print(f\"Error updating ModelRecord: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the model record.\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; deleted = model_record.delete()\n            &gt;&gt;&gt; print(deleted)\n            True\n\n        Returns:\n            bool: True if the model record was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            model_record = ModelRecordModel.get(current_id)\n            if not model_record:\n                print(f\"No ModelRecord found with ID: {current_id}\")\n                return False\n            ModelRecordModel.delete(model_record)\n            return True\n        except Exception as e:\n            print(f\"Error deleting ModelRecord: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"ModelRecord\"]:\n        \"\"\"\n        Refresh the model record's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_record = model_record.refresh()\n            &gt;&gt;&gt; print(refreshed_record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n        Returns:\n            Optional[\"ModelRecord\"]: The refreshed model record, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ModelRecordModel.get(self.id)\n            if not db_instance:\n                print(f\"No ModelRecord found with ID: {self.id}\")\n                return None\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing ModelRecord: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the model record.\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; record_info = model_record.get_info()\n            &gt;&gt;&gt; print(record_info)\n            {'info_key': 'info_value'}\n\n        Returns:\n            Optional[dict]: The model record's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            model_record = ModelRecordModel.get(current_id)\n            if not model_record:\n                print(f\"No ModelRecord found with ID: {current_id}\")\n                return None\n            record_info = model_record.record_info\n            if not record_info:\n                print(f\"No record info found for ModelRecord with ID: {current_id}\")\n                return None\n            return record_info\n        except Exception as e:\n            print(f\"Error getting record info: {e}\")\n            return None\n\n    def set_info(self, record_info: dict) -&gt; Optional[\"ModelRecord\"]:\n        \"\"\"\n        Set the additional information of the model record.\n\n        Examples:\n            &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; record_info = model_record.get_info()\n            &gt;&gt;&gt; print(record_info)\n            {'info_key': 'info_value'}\n\n        Returns:\n            Optional[\"ModelRecord\"]: The updated model record, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            model_record = ModelRecordModel.get(current_id)\n            if not model_record:\n                print(f\"No ModelRecord found with ID: {current_id}\")\n                return None\n            ModelRecordModel.update(\n                model_record,\n                record_info=record_info\n            )\n            model_record = self.model_validate(model_record)\n            self.refresh()\n            return model_record\n        except Exception as e:\n            print(f\"Error setting record info: {e}\")\n            return None\n\n    @classmethod\n    def create_file_uri(cls, record: \"ModelRecord\") -&gt; Optional[str]:\n        \"\"\"\n        Create a file URI for the given model record.\n\n        Examples:\n            &gt;&gt;&gt; record = ModelRecord(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date.today(),\n            ...     dataset_name=\"example_dataset\",\n            ...     model_name=\"example_model\",\n            ...     model_data={\"key\": \"value\"},\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     record_file=\"path/to/record_file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; file_uri = ModelRecord.create_file_uri(record)\n            &gt;&gt;&gt; print(file_uri)\n            model_data/example_experiment/example_model/example_dataset/2023-10-01/example_site/example_season/1700000000000.txt\n\n        Returns:\n            Optional[str]: The file URI, or None if creation failed.\n        \"\"\"\n        try:\n            original_file_path = record.record_file\n            if not original_file_path:\n                print(f\"record_file is required to create file URI.\")\n                return None\n            if not os.path.exists(original_file_path):\n                print(f\"File {original_file_path} does not exist.\")\n                return None\n            collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n            model_name = record.model_name\n            dataset_name = record.dataset_name\n            experiment_name = record.experiment_name\n            season_name = record.season_name\n            site_name = record.site_name\n            file_extension = os.path.splitext(original_file_path)[1]\n            file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n            file_key = f\"model_data/{experiment_name}/{model_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n            return file_key\n        except Exception as e:\n            print(f\"Error creating file URI: {e}\")\n            return None\n\n\n    @classmethod\n    def process_record(cls, record: \"ModelRecord\") -&gt; \"ModelRecord\":\n        \"\"\"\n        Process a model record (custom logic).\n\n        This method handles the file upload to the storage provider and updates the record's file URI.\n\n        Examples:\n            &gt;&gt;&gt; record = ModelRecord(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date.today(),\n            ...     dataset_name=\"example_dataset\",\n            ...     model_name=\"example_model\",\n            ...     model_data={\"key\": \"value\"},\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     record_file=\"path/to/record_file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; processed_record = ModelRecord.process_record(record)\n            &gt;&gt;&gt; print(processed_record)\n            ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n        Args:\n            record (ModelRecord): The model record to process.\n\n        Returns:\n            ModelRecord: The processed model record.\n        \"\"\"\n        try:\n            file = record.record_file\n            if not file:\n                print(f\"record_file is required to process ModelRecord.\")\n                return record\n            file_key = cls.create_file_uri(record)\n            if not file_key:\n                print(f\"Failed to create file URI for ModelRecord: {record}\")\n                return record\n            content_type, _ = mimetypes.guess_type(file)\n            # Generate Metadata for upload\n            file_metadata = {\n                \"Model-Name\": record.model_name,\n                \"Dataset-Name\": record.dataset_name,\n                \"Experiment-Name\": record.experiment_name,\n                \"Site-Name\": record.site_name,\n                \"Season-Name\": record.season_name,\n                \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n                \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n            }\n            cls.minio_storage_provider.upload_file(\n                object_name=file_key,\n                input_file_path=file,\n                bucket_name=\"gemini\",\n                content_type=content_type,\n                metadata=file_metadata\n            )\n            record.record_file = file_key\n            return record\n        except Exception as e:\n            print(f\"Error processing ModelRecord: {e}\")\n            return record\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the ModelRecord object.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the ModelRecord object.\"\"\"\n    return f\"ModelRecord(id={self.id}, timestamp={self.timestamp}, model_data={self.model_data}, model_name={self.model_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the ModelRecord object.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the ModelRecord object.\"\"\"\n    return f\"ModelRecord(id={self.id}, timestamp={self.timestamp}, model_data={self.model_data}, model_name={self.model_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.create","title":"<code>create(timestamp=datetime.now(), collection_date=None, dataset_name=None, model_name=None, model_data={}, experiment_name=None, site_name=None, season_name=None, record_file=None, record_info={}, insert_on_create=True)</code>  <code>classmethod</code>","text":"<p>Create a new model record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.create(\n...     timestamp=datetime.now(),\n...     collection_date=date.today(),\n...     dataset_name=\"example_dataset\",\n...     model_name=\"example_model\",\n...     model_data={\"key\": \"value\"},\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     record_file=\"path/to/record_file.txt\",\n...     record_info={\"info_key\": \"info_value\"},\n...     insert_on_create=True\n... )\n&gt;&gt;&gt; print(model_record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the model record. Defaults to the current time.</p> <code>now()</code> <code>collection_date</code> <code>date</code> <p>The collection date of the model record. Defaults to the timestamp's date.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the associated dataset. Required.</p> <code>None</code> <code>model_name</code> <code>str</code> <p>The name of the associated model. Required.</p> <code>None</code> <code>model_data</code> <code>dict</code> <p>The data content of the model record. Defaults to an empty dictionary</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the associated experiment. Optional.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the associated site. Optional.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the associated season. Optional.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file path of the model record. Optional.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional information about the model record. Defaults to an empty dictionary.</p> <code>{}</code> <code>insert_on_create</code> <code>bool</code> <p>Whether to insert the record into the database upon creation. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[ModelRecord]</code> <p>Optional[\"ModelRecord\"]: The created model record, or None if an error occurred.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    timestamp: datetime = datetime.now(),\n    collection_date: date = None,\n    dataset_name: str = None,\n    model_name: str = None,\n    model_data: dict = {},\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n    insert_on_create: bool = True\n) -&gt; Optional[\"ModelRecord\"]:\n    \"\"\"\n    Create a new model record.\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.create(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date.today(),\n        ...     dataset_name=\"example_dataset\",\n        ...     model_name=\"example_model\",\n        ...     model_data={\"key\": \"value\"},\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     record_file=\"path/to/record_file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"},\n        ...     insert_on_create=True\n        ... )\n        &gt;&gt;&gt; print(model_record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n    Args:\n        timestamp (datetime): The timestamp of the model record. Defaults to the current time.\n        collection_date (date): The collection date of the model record. Defaults to the timestamp's date.\n        dataset_name (str): The name of the associated dataset. Required.\n        model_name (str): The name of the associated model. Required.\n        model_data (dict): The data content of the model record. Defaults to an empty dictionary\n        experiment_name (str): The name of the associated experiment. Optional.\n        site_name (str): The name of the associated site. Optional.\n        season_name (str): The name of the associated season. Optional.\n        record_file (str): The file path of the model record. Optional.\n        record_info (dict): Additional information about the model record. Defaults to an empty dictionary.\n        insert_on_create (bool): Whether to insert the record into the database upon creation. Defaults to True.\n\n    Returns:\n        Optional[\"ModelRecord\"]: The created model record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, site_name, season_name]):\n            raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n        if not model_name:\n            raise ValueError(\"Model name is required.\")\n        if not dataset_name:\n            raise ValueError(\"Dataset name is required.\")\n        if not timestamp:\n            raise ValueError(\"Timestamp is required.\")\n        if not collection_date:\n            collection_date = timestamp.date()\n        if not model_data and not record_file:\n            raise ValueError(\"At least one of model_data or record_file must be provided.\")\n        model_record = ModelRecord(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            model_name=model_name,\n            model_data=model_data,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            record_file=record_file,\n            record_info=record_info\n        )\n        if insert_on_create:\n            insert_success, inserted_record_ids = cls.insert([model_record])\n            if not insert_success:\n                print(f\"Failed to insert ModelRecord: {model_record}\")\n                return None\n            if not inserted_record_ids or len(inserted_record_ids) == 0:\n                print(f\"No new ModelRecord was inserted.\")\n                return None\n            inserted_record_id = inserted_record_ids[0]\n            model_record = cls.get_by_id(inserted_record_id)\n        return model_record\n    except Exception as e:\n        print(f\"Error creating ModelRecord: {e}\")\n        raise None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.create_file_uri","title":"<code>create_file_uri(record)</code>  <code>classmethod</code>","text":"<p>Create a file URI for the given model record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ModelRecord(\n...     timestamp=datetime.now(),\n...     collection_date=date.today(),\n...     dataset_name=\"example_dataset\",\n...     model_name=\"example_model\",\n...     model_data={\"key\": \"value\"},\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     record_file=\"path/to/record_file.txt\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; file_uri = ModelRecord.create_file_uri(record)\n&gt;&gt;&gt; print(file_uri)\nmodel_data/example_experiment/example_model/example_dataset/2023-10-01/example_site/example_season/1700000000000.txt\n</code></pre> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The file URI, or None if creation failed.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef create_file_uri(cls, record: \"ModelRecord\") -&gt; Optional[str]:\n    \"\"\"\n    Create a file URI for the given model record.\n\n    Examples:\n        &gt;&gt;&gt; record = ModelRecord(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date.today(),\n        ...     dataset_name=\"example_dataset\",\n        ...     model_name=\"example_model\",\n        ...     model_data={\"key\": \"value\"},\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     record_file=\"path/to/record_file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; file_uri = ModelRecord.create_file_uri(record)\n        &gt;&gt;&gt; print(file_uri)\n        model_data/example_experiment/example_model/example_dataset/2023-10-01/example_site/example_season/1700000000000.txt\n\n    Returns:\n        Optional[str]: The file URI, or None if creation failed.\n    \"\"\"\n    try:\n        original_file_path = record.record_file\n        if not original_file_path:\n            print(f\"record_file is required to create file URI.\")\n            return None\n        if not os.path.exists(original_file_path):\n            print(f\"File {original_file_path} does not exist.\")\n            return None\n        collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n        model_name = record.model_name\n        dataset_name = record.dataset_name\n        experiment_name = record.experiment_name\n        season_name = record.season_name\n        site_name = record.site_name\n        file_extension = os.path.splitext(original_file_path)[1]\n        file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n        file_key = f\"model_data/{experiment_name}/{model_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n        return file_key\n    except Exception as e:\n        print(f\"Error creating file URI: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.delete","title":"<code>delete()</code>","text":"<p>Delete the model record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; deleted = model_record.delete()\n&gt;&gt;&gt; print(deleted)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the model record was deleted, False otherwise.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the model record.\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; deleted = model_record.delete()\n        &gt;&gt;&gt; print(deleted)\n        True\n\n    Returns:\n        bool: True if the model record was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        model_record = ModelRecordModel.get(current_id)\n        if not model_record:\n            print(f\"No ModelRecord found with ID: {current_id}\")\n            return False\n        ModelRecordModel.delete(model_record)\n        return True\n    except Exception as e:\n        print(f\"Error deleting ModelRecord: {e}\")\n        return False\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.exists","title":"<code>exists(timestamp, model_name, dataset_name, experiment_name, season_name, site_name)</code>  <code>classmethod</code>","text":"<p>Check if a model record with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ModelRecord.exists(\n...     timestamp=datetime.now(),\n...     model_name=\"example_model\",\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\"\n... )\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the model record.</p> required <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the model record exists, False otherwise.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    timestamp: datetime,\n    model_name: str,\n    dataset_name: str,\n    experiment_name: str,\n    season_name: str,\n    site_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a model record with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; ModelRecord.exists(\n        ...     timestamp=datetime.now(),\n        ...     model_name=\"example_model\",\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\"\n        ... )\n        True\n\n    Args:\n        timestamp (datetime): The timestamp of the model record.\n        model_name (str): The name of the model.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment.\n        season_name (str): The name of the season.\n        site_name (str): The name of the site.\n\n    Returns:\n        bool: True if the model record exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ModelRecordModel.exists(\n            timestamp=timestamp,\n            model_name=model_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of ModelRecord: {e}\")\n        return False\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.filter","title":"<code>filter(model_names=None, dataset_names=None, start_timestamp=None, end_timestamp=None, experiment_names=None, site_names=None, season_names=None)</code>  <code>classmethod</code>","text":"<p>Filter model records based on custom logic.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; for record in ModelRecord.filter(\n...     model_names=[\"example_model\"],\n...     dataset_names=[\"example_dataset\"],\n...     start_timestamp=datetime(2023, 1, 1),\n...     end_timestamp=datetime(2023, 12, 31),\n...     experiment_names=[\"example_experiment\"],\n...     site_names=[\"example_site\"],\n...     season_names=[\"example_season\"]\n... ):\n...     print(record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_names</code> <code>List[str]</code> <p>List of model names to filter by. Optional.</p> <code>None</code> <code>dataset_names</code> <code>List[str]</code> <p>List of dataset names to filter by. Optional.</p> <code>None</code> <code>start_timestamp</code> <code>datetime</code> <p>Start timestamp for filtering. Optional.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>End timestamp for filtering. Optional.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>List of experiment names to filter by. Optional.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>List of site names to filter by. Optional.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>List of season names to filter by. Optional.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>Optional[List[\"ModelRecord\"]]: List of filtered model records, or None if not found.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef filter(\n    cls,\n    model_names: List[str] = None,\n    dataset_names: List[str] = None,\n    start_timestamp: datetime = None,\n    end_timestamp: datetime = None,\n    experiment_names: List[str] = None,\n    site_names: List[str] = None,\n    season_names: List[str] = None\n) -&gt; Generator[\"ModelRecord\", None, None]:\n    \"\"\"\n    Filter model records based on custom logic.\n\n    Examples:\n        &gt;&gt;&gt; for record in ModelRecord.filter(\n        ...     model_names=[\"example_model\"],\n        ...     dataset_names=[\"example_dataset\"],\n        ...     start_timestamp=datetime(2023, 1, 1),\n        ...     end_timestamp=datetime(2023, 12, 31),\n        ...     experiment_names=[\"example_experiment\"],\n        ...     site_names=[\"example_site\"],\n        ...     season_names=[\"example_season\"]\n        ... ):\n        ...     print(record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n    Args:\n        model_names (List[str]): List of model names to filter by. Optional.\n        dataset_names (List[str]): List of dataset names to filter by. Optional.\n        start_timestamp (datetime): Start timestamp for filtering. Optional.\n        end_timestamp (datetime): End timestamp for filtering. Optional.\n        experiment_names (List[str]): List of experiment names to filter by. Optional.\n        site_names (List[str]): List of site names to filter by. Optional.\n        season_names (List[str]): List of season names to filter by. Optional.\n\n    Returns:\n        Optional[List[\"ModelRecord\"]]: List of filtered model records, or None if not found.\n    \"\"\"\n    try:\n        if not any([model_names, dataset_names, start_timestamp, end_timestamp, experiment_names, site_names, season_names]):\n            print(f\"At least one parameter must be provided for filter.\")\n            return\n        records = ModelRecordModel.filter_records(\n            model_names=model_names,\n            dataset_names=dataset_names,\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            experiment_names=experiment_names,\n            site_names=site_names,\n            season_names=season_names\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error filtering ModelRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.get","title":"<code>get(timestamp, model_name, dataset_name, experiment_name=None, season_name=None, site_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve model records based on provided parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.get(\n...     timestamp=datetime.now(),\n...     model_name=\"example_model\",\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\"\n...     site_name=\"example_site\"\n... )\n&gt;&gt;&gt; print(model_record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the model record.</p> required <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Optional.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Optional.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Optional.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[ModelRecord]</code> <p>Optional[List[\"ModelRecord\"]]: List of matching model records, or None if not found.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    timestamp: datetime,\n    model_name: str,\n    dataset_name: str,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; Optional[\"ModelRecord\"]:\n    \"\"\"\n    Retrieve model records based on provided parameters.\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.get(\n        ...     timestamp=datetime.now(),\n        ...     model_name=\"example_model\",\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\"\n        ...     site_name=\"example_site\"\n        ... )\n        &gt;&gt;&gt; print(model_record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n    Args:\n        timestamp (datetime): The timestamp of the model record.\n        model_name (str): The name of the model.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment. Optional.\n        season_name (str): The name of the season. Optional.\n        site_name (str): The name of the site. Optional.\n\n\n    Returns:\n        Optional[List[\"ModelRecord\"]]: List of matching model records, or None if not found.\n    \"\"\"\n    try:\n        if not timestamp:\n            print(f\"Timestamp is required to get ModelRecord.\")\n            return None\n        if not dataset_name:\n            print(f\"Dataset name is required to get ModelRecord.\")\n            return None\n        if not model_name:\n            print(f\"Model name is required to get ModelRecord.\")\n            return None\n        if not experiment_name and not season_name and not site_name:\n            print(f\"At least one of experiment_name, season_name, or site_name is required to get ModelRecord.\")\n            return None\n        model_record = ModelRecordsIMMVModel.get_by_parameters(\n            timestamp=timestamp,\n            model_name=model_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not model_record:\n            print(f\"No ModelRecord found for the given parameters.\")\n            return None\n        model_record = cls.model_validate(model_record)\n        return model_record\n    except Exception as e:\n        print(f\"Error getting ModelRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.get_all","title":"<code>get_all(limit=100)</code>  <code>classmethod</code>","text":"<p>Retrieve all model records, up to a specified limit.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_records = ModelRecord.get_all(limit=10)\n&gt;&gt;&gt; for record in model_records:\n...     print(record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\nModelRecord(id=UUID(...), timestamp=2023-10-02 12:00:00, model_name=example_model2, model_data={...}, dataset_name=example_dataset2, experiment_name=example_experiment2, site_name=example_site2, season_name=example_season2)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The maximum number of model records to retrieve. Defaults to 100.</p> <code>100</code> <p>Returns:</p> Type Description <code>Optional[List[ModelRecord]]</code> <p>Optional[List[\"ModelRecord\"]]: List of model records, or None if not found.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef get_all(cls, limit: int = 100) -&gt; Optional[List[\"ModelRecord\"]]:\n    \"\"\"\n    Retrieve all model records, up to a specified limit.\n\n    Examples:\n        &gt;&gt;&gt; model_records = ModelRecord.get_all(limit=10)\n        &gt;&gt;&gt; for record in model_records:\n        ...     print(record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n        ModelRecord(id=UUID(...), timestamp=2023-10-02 12:00:00, model_name=example_model2, model_data={...}, dataset_name=example_dataset2, experiment_name=example_experiment2, site_name=example_site2, season_name=example_season2)\n\n    Args:\n        limit (int): The maximum number of model records to retrieve. Defaults to 100.\n\n    Returns:\n        Optional[List[\"ModelRecord\"]]: List of model records, or None if not found.\n    \"\"\"\n    try:\n        records = ModelRecordModel.all(limit=limit)\n        if not records or len(records) == 0:\n            print(f\"No ModelRecords found.\")\n            return None\n        records = [cls.model_validate(record) for record in records]\n        return records\n    except Exception as e:\n        print(f\"Error getting all ModelRecords: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a model record by its ID</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(model_record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The unique identifier of the model record.</p> required <p>Returns:</p> Type Description <code>Optional[ModelRecord]</code> <p>Optional[\"ModelRecord\"]: The model record, or None if not found.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ModelRecord\"]:\n    \"\"\"\n    Retrieve a model record by its ID\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(model_record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n    Args:\n        id (UUID | int | str): The unique identifier of the model record.\n\n    Returns:\n        Optional[\"ModelRecord\"]: The model record, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ModelRecordModel.get(id)\n        if not db_instance:\n            print(f\"No ModelRecord found with ID: {id}\")\n            return None\n        record = cls.model_validate(db_instance)\n        return record\n    except Exception as e:\n        print(f\"Error getting ModelRecord by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the model record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; record_info = model_record.get_info()\n&gt;&gt;&gt; print(record_info)\n{'info_key': 'info_value'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The model record's info, or None if not found.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the model record.\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; record_info = model_record.get_info()\n        &gt;&gt;&gt; print(record_info)\n        {'info_key': 'info_value'}\n\n    Returns:\n        Optional[dict]: The model record's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        model_record = ModelRecordModel.get(current_id)\n        if not model_record:\n            print(f\"No ModelRecord found with ID: {current_id}\")\n            return None\n        record_info = model_record.record_info\n        if not record_info:\n            print(f\"No record info found for ModelRecord with ID: {current_id}\")\n            return None\n        return record_info\n    except Exception as e:\n        print(f\"Error getting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.insert","title":"<code>insert(records)</code>  <code>classmethod</code>","text":"<p>Insert a list of model records into the database.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[ModelRecord]</code> <p>List of model records to insert.</p> required <p>Returns:</p> Type Description <code>tuple[bool, List[str]]</code> <p>tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef insert(cls, records: List[\"ModelRecord\"]) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a list of model records into the database.\n\n    Args:\n        records (List[ModelRecord]): List of model records to insert.\n\n\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not records or len(records) == 0:\n            print(f\"No records provided for insertion.\")\n            return False, []\n        records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing ModelRecords\")]\n        records_to_insert = []\n        for record in records:\n            record_dict = record.model_dump()\n            record_dict = {k: v for k, v in record_dict.items() if v is not None}\n            records_to_insert.append(record_dict)\n        print(f\"Inserting {len(records_to_insert)} records.\")\n        inserted_record_ids = ModelRecordModel.insert_bulk('model_records_unique', records_to_insert)\n        print(f\"Inserted {len(inserted_record_ids)} records.\")\n        return True, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting ModelRecords: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.process_record","title":"<code>process_record(record)</code>  <code>classmethod</code>","text":"<p>Process a model record (custom logic).</p> <p>This method handles the file upload to the storage provider and updates the record's file URI.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ModelRecord(\n...     timestamp=datetime.now(),\n...     collection_date=date.today(),\n...     dataset_name=\"example_dataset\",\n...     model_name=\"example_model\",\n...     model_data={\"key\": \"value\"},\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     record_file=\"path/to/record_file.txt\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; processed_record = ModelRecord.process_record(record)\n&gt;&gt;&gt; print(processed_record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Args:     record (ModelRecord): The model record to process.</p> <p>Returns:</p> Name Type Description <code>ModelRecord</code> <code>ModelRecord</code> <p>The processed model record.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef process_record(cls, record: \"ModelRecord\") -&gt; \"ModelRecord\":\n    \"\"\"\n    Process a model record (custom logic).\n\n    This method handles the file upload to the storage provider and updates the record's file URI.\n\n    Examples:\n        &gt;&gt;&gt; record = ModelRecord(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date.today(),\n        ...     dataset_name=\"example_dataset\",\n        ...     model_name=\"example_model\",\n        ...     model_data={\"key\": \"value\"},\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     record_file=\"path/to/record_file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; processed_record = ModelRecord.process_record(record)\n        &gt;&gt;&gt; print(processed_record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n    Args:\n        record (ModelRecord): The model record to process.\n\n    Returns:\n        ModelRecord: The processed model record.\n    \"\"\"\n    try:\n        file = record.record_file\n        if not file:\n            print(f\"record_file is required to process ModelRecord.\")\n            return record\n        file_key = cls.create_file_uri(record)\n        if not file_key:\n            print(f\"Failed to create file URI for ModelRecord: {record}\")\n            return record\n        content_type, _ = mimetypes.guess_type(file)\n        # Generate Metadata for upload\n        file_metadata = {\n            \"Model-Name\": record.model_name,\n            \"Dataset-Name\": record.dataset_name,\n            \"Experiment-Name\": record.experiment_name,\n            \"Site-Name\": record.site_name,\n            \"Season-Name\": record.season_name,\n            \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n            \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n        }\n        cls.minio_storage_provider.upload_file(\n            object_name=file_key,\n            input_file_path=file,\n            bucket_name=\"gemini\",\n            content_type=content_type,\n            metadata=file_metadata\n        )\n        record.record_file = file_key\n        return record\n    except Exception as e:\n        print(f\"Error processing ModelRecord: {e}\")\n        return record\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the model record's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_record = model_record.refresh()\n&gt;&gt;&gt; print(refreshed_record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ModelRecord]</code> <p>Optional[\"ModelRecord\"]: The refreshed model record, or None if an error occurred.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>def refresh(self) -&gt; Optional[\"ModelRecord\"]:\n    \"\"\"\n    Refresh the model record's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_record = model_record.refresh()\n        &gt;&gt;&gt; print(refreshed_record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n    Returns:\n        Optional[\"ModelRecord\"]: The refreshed model record, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ModelRecordModel.get(self.id)\n        if not db_instance:\n            print(f\"No ModelRecord found with ID: {self.id}\")\n            return None\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing ModelRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.search","title":"<code>search(model_name=None, model_data=None, dataset_name=None, experiment_name=None, site_name=None, season_name=None, collection_date=None, record_info=None)</code>  <code>classmethod</code>","text":"<p>Search for model records based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; for record in ModelRecord.search(\n...     model_name=\"example_model\",\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     collection_date=date.today(),\n...     record_info={\"info_key\": \"info_value\"}\n... ):\n...     print(record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model. Optional.</p> <code>None</code> <code>model_data</code> <code>dict</code> <p>The data content of the model record. Optional.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the associated dataset. Optional.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the associated experiment. Optional.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the associated site. Optional.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the associated season. Optional.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date of the model record. Optional.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional information about the model record. Optional.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>Optional[List[\"ModelRecord\"]]: List of matching model records, or None if not found.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    model_name: str = None,\n    model_data: dict = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    collection_date: date = None,\n    record_info: dict = None\n) -&gt; Generator[\"ModelRecord\", None, None]:\n    \"\"\"\n    Search for model records based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; for record in ModelRecord.search(\n        ...     model_name=\"example_model\",\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     collection_date=date.today(),\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... ):\n        ...     print(record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n    Args:\n        model_name (str): The name of the model. Optional.\n        model_data (dict): The data content of the model record. Optional.\n        dataset_name (str): The name of the associated dataset. Optional.\n        experiment_name (str): The name of the associated experiment. Optional.\n        site_name (str): The name of the associated site. Optional.\n        season_name (str): The name of the associated season. Optional.\n        collection_date (date): The collection date of the model record. Optional.\n        record_info (dict): Additional information about the model record. Optional.\n\n\n    Returns:\n        Optional[List[\"ModelRecord\"]]: List of matching model records, or None if not found.\n    \"\"\"\n    try:\n        if not any([model_name, dataset_name, experiment_name, site_name, season_name, collection_date, record_info]):\n            print(f\"At least one parameter must be provided for search.\")\n            return\n        records = ModelRecordsIMMVModel.stream(\n            model_name=model_name,\n            model_data=model_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            collection_date=collection_date,\n            record_info=record_info\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error searching ModelRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.set_info","title":"<code>set_info(record_info)</code>","text":"<p>Set the additional information of the model record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; record_info = model_record.get_info()\n&gt;&gt;&gt; print(record_info)\n{'info_key': 'info_value'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ModelRecord]</code> <p>Optional[\"ModelRecord\"]: The updated model record, or None if an error occurred.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>def set_info(self, record_info: dict) -&gt; Optional[\"ModelRecord\"]:\n    \"\"\"\n    Set the additional information of the model record.\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; record_info = model_record.get_info()\n        &gt;&gt;&gt; print(record_info)\n        {'info_key': 'info_value'}\n\n    Returns:\n        Optional[\"ModelRecord\"]: The updated model record, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        model_record = ModelRecordModel.get(current_id)\n        if not model_record:\n            print(f\"No ModelRecord found with ID: {current_id}\")\n            return None\n        ModelRecordModel.update(\n            model_record,\n            record_info=record_info\n        )\n        model_record = self.model_validate(model_record)\n        self.refresh()\n        return model_record\n    except Exception as e:\n        print(f\"Error setting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_records/#gemini.api.model_record.ModelRecord.update","title":"<code>update(model_data=None, record_info=None)</code>","text":"<p>Update the details of the model record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = model_record.update(\n...     model_data={\"new_key\": \"new_value\"},\n...     record_info={\"new_info_key\": \"new_info_value\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ModelRecord]</code> <p>Optional[\"ModelRecord\"]: The updated model record, or None if an error occurred.</p> Source code in <code>gemini/api/model_record.py</code> <pre><code>def update(\n    self,\n    model_data: dict = None,\n    record_info: dict = None\n) -&gt; Optional[\"ModelRecord\"]:\n    \"\"\"\n    Update the details of the model record.\n\n    Examples:\n        &gt;&gt;&gt; model_record = ModelRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = model_record.update(\n        ...     model_data={\"new_key\": \"new_value\"},\n        ...     record_info={\"new_info_key\": \"new_info_value\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        ModelRecord(id=UUID(...), timestamp=2023-10-01 12:00:00, model_name=example_model, model_data={...}, dataset_name=example_dataset, experiment_name=example_experiment, site_name=example_site, season_name=example_season)\n\n    Returns:\n        Optional[\"ModelRecord\"]: The updated model record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([model_data, record_info]):\n            print(f\"At least one parameter must be provided for update.\")\n            return None\n        current_id = self.id\n        model_record = ModelRecordModel.get(current_id)\n        if not model_record:\n            print(f\"No ModelRecord found with ID: {current_id}\")\n            return None\n        model_record = ModelRecordModel.update(\n            model_record,\n            model_data=model_data,\n            record_info=record_info\n        )\n        model_record = self.model_validate(model_record)\n        self.refresh()\n        return model_record\n    except Exception as e:\n        print(f\"Error updating ModelRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/","title":"Model Runs API","text":""},{"location":"api/model_runs/#description","title":"Description","text":"<p>A model run is a single execution instance or epoch of a specific Model.</p>"},{"location":"api/model_runs/#module","title":"Module","text":"<p>This module defines the ModelRun class, which represents a run of a model, including metadata, associations to models, and run information.</p> <p>It includes methods for creating, retrieving, updating, and deleting model runs, as well as methods for checking existence, searching, and managing associations with models.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a model run with the given parameters exists.</li> <li><code>create</code>: Create a new model run.</li> <li><code>get</code>: Retrieve a model run by its info and name.</li> <li><code>get_by_id</code>: Retrieve a model run by its ID.</li> <li><code>get_all</code>: Retrieve all model runs.</li> <li><code>search</code>: Search for model runs based on various criteria.</li> <li><code>update</code>: Update the details of a model run.</li> <li><code>delete</code>: Delete a model run.</li> <li><code>refresh</code>: Refresh the model run's data from the database.</li> <li><code>get_info</code>: Get the additional information of the model run.</li> <li><code>set_info</code>: Set the additional information of the model run.</li> <li>Association methods for models.</li> </ul>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun","title":"<code>ModelRun</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a run of a model, including metadata, associations to models, and run information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the model run.</p> <code>model_id</code> <code>Optional[ID]</code> <p>The ID of the associated model.</p> <code>model_run_info</code> <code>Optional[dict]</code> <p>Additional information about the model run.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>class ModelRun(APIBase):\n    \"\"\"\n    Represents a run of a model, including metadata, associations to models, and run information.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the model run.\n        model_id (Optional[ID]): The ID of the associated model.\n        model_run_info (Optional[dict]): Additional information about the model run.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"model_run_id\"))\n\n    model_id : Optional[ID] = None\n    model_run_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the ModelRun object.\"\"\"\n        return f\"ModelRun(id={self.id}, model_id={self.model_id}, model_run_info={self.model_run_info})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the ModelRun object.\"\"\"\n        return f\"ModelRun(id={self.id}, model_id={self.model_id}, model_run_info={self.model_run_info})\"\n\n    @classmethod\n    def exists(\n        cls,\n        model_run_info: dict,\n        model_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if a model run with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; ModelRun.exists(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n            True\n            &gt;&gt;&gt; ModelRun.exists(model_run_info={\"run_id\": \"67890\"}, model_name=\"non_existent_model\")\n            False\n\n        Args:\n            model_run_info (dict): The run information to check.\n            model_name (str, optional): The name of the model. Defaults to None.\n        Returns:\n            bool: True if the model run exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ModelRunsViewModel.exists(\n                model_name=model_name,\n                model_run_info=model_run_info\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of model run: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        model_run_info: dict = {},\n        model_name: str = None\n    ) -&gt; Optional[\"ModelRun\"]:\n        \"\"\"\n        Create a new model run.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.create(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n            &gt;&gt;&gt; print(model_run)\n            ModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})\n\n        Args:\n            model_run_info (dict): The run information for the new model run.\n            model_name (str, optional): The name of the model. Defaults to None.\n        Returns:\n            Optional[\"ModelRun\"]: The created model run, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ModelRunModel.get_or_create(\n                model_run_info=model_run_info\n            )\n            model_run = cls.model_validate(db_instance)\n            if model_name:\n                model_run.associate_model(model_name=model_name)\n            return model_run\n        except Exception as e:\n            print(f\"Error creating model run: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, model_run_info: dict, model_name: str = None) -&gt; Optional[\"ModelRun\"]:\n        \"\"\"\n        Retrieve a model run by its info and name.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n            &gt;&gt;&gt; print(model_run)\n            ModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})\n\n        Args:\n            model_run_info (dict): The run information to search for.\n            model_name (str, optional): The name of the model. Defaults to None.\n        Returns:\n            Optional[\"ModelRun\"]: The model run, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ModelRunsViewModel.get_by_parameters(\n                model_run_info=model_run_info,\n                model_name=model_name\n            )\n            if not db_instance:\n                print(f\"Model run with info {model_run_info} and model name {model_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting model run: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ModelRun\"]:\n        \"\"\"\n        Retrieve a model run by its ID.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; print(model_run)\n            ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={})\n\n        Args:\n            id (UUID | int | str): The ID of the model run.\n        Returns:\n            Optional[\"ModelRun\"]: The model run, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ModelRunModel.get(id)\n            if not db_instance:\n                print(f\"Model run with id {id} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting model run by id: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"ModelRun\"]]:\n        \"\"\"\n        Retrieve all model runs.\n\n        Examples:\n            &gt;&gt;&gt; model_runs = ModelRun.get_all()\n            &gt;&gt;&gt; print(model_runs)\n            [ModelRun(id=UUID('...'), model_id=None, model_run_info={}), ModelRun(id=UUID('...'), model_id=None, model_run_info={})]\n\n        Returns:\n            Optional[List[\"ModelRun\"]]: List of all model runs, or None if not found.\n        \"\"\"\n        try:\n            model_runs = ModelRunModel.all()\n            if not model_runs or len(model_runs) == 0:\n                print(\"No model runs found.\")\n                return None\n            model_runs = [cls.model_validate(model_run) for model_run in model_runs]\n            return model_runs\n        except Exception as e:\n            print(f\"Error getting all model runs: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        model_run_info: dict = None,\n        model_name: str = None\n    ) -&gt; Optional[List[\"ModelRun\"]]:\n        \"\"\"\n        Search for model runs based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; model_runs = ModelRun.search(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n            &gt;&gt;&gt; print(model_runs)\n            [ModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})]\n\n        Args:\n            model_run_info (dict, optional): The run information to search for. Defaults to None.\n            model_name (str, optional): The name of the model. Defaults to None.\n        Returns:\n            Optional[List[\"ModelRun\"]]: List of matching model runs, or None if not found.\n        \"\"\"\n        try:\n            if not any([model_name, model_run_info]):\n                print(\"At least one of model_name or model_run_info must be provided.\")\n                return None\n            model_runs = ModelRunsViewModel.search(\n                model_run_info=model_run_info,\n                model_name=model_name\n            )\n            if not model_runs or len(model_runs) == 0:\n                print(\"No model runs found for the given search criteria.\")\n                return None\n            model_runs = [cls.model_validate(model_run) for model_run in model_runs]\n            return model_runs\n        except Exception as e:\n            print(f\"Error searching model runs: {e}\")\n            return None\n\n    def update(self, model_run_info: dict = None) -&gt; Optional[\"ModelRun\"]:\n        \"\"\"\n        Update the details of the model run.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; updated_run = model_run.update(model_run_info={\"run_id\": \"67890\"})\n            &gt;&gt;&gt; print(updated_run)\n            ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={'run_id': '67890'})\n\n        Args:\n            model_run_info (dict, optional): The new run information. Defaults to None.\n        Returns:\n            Optional[\"ModelRun\"]: The updated model run, or None if an error occurred.\n        \"\"\"\n        try:\n            if not model_run_info:\n                print(\"Model run info cannot be empty.\")\n                return None\n            current_id = self.id\n            model_run = ModelRunModel.get(current_id)\n            if not model_run:\n                print(f\"Model run with id {current_id} does not exist.\")\n                return None\n            model_run = ModelRunModel.update(\n                model_run,\n                model_run_info=model_run_info   \n            )\n            instance = self.model_validate(model_run)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error updating model run: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the model run.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; success = model_run.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the model run was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            model_run = ModelRunModel.get(current_id)\n            if not model_run:\n                print(f\"Model run with id {current_id} does not exist.\")\n                return False\n            ModelRunModel.delete(model_run)\n            return True\n        except Exception as e:\n            print(f\"Error deleting model run: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"ModelRun\"]:\n        \"\"\"\n        Refresh the model run's data from the database. It is rarely called by the user\n        as it is automatically called on access.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; refreshed_run = model_run.refresh()\n            &gt;&gt;&gt; print(refreshed_run)\n            ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={})\n\n        Returns:\n            Optional[\"ModelRun\"]: The refreshed model run, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ModelRunModel.get(self.id)\n            if not db_instance:\n                print(f\"Model run with id {self.id} not found.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing model run: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the model run.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; info = model_run.get_info()\n            &gt;&gt;&gt; print(info)\n            {'run_id': '12345', 'start_time': '2023-10-01T12:00:00Z'}\n\n        Returns:\n            Optional[dict]: The model run's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            model_run = ModelRunModel.get(current_id)\n            if not model_run:\n                print(f\"Model run with id {current_id} does not exist.\")\n                return None\n            model_run_info = model_run.model_run_info\n            if not model_run_info:\n                print(\"ModelRun info is empty.\")\n                return None\n            return model_run_info\n        except Exception as e:\n            print(f\"Error getting model run info: {e}\")\n            return None\n\n    def set_info(self, model_run_info: dict) -&gt; Optional[\"ModelRun\"]:\n        \"\"\"\n        Set the additional information of the model run.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; updated_run = model_run.set_info(model_run_info={\"run_id\": \"67890\", \"start_time\": \"2023-10-01T12:00:00Z\"})\n            &gt;&gt;&gt; print(updated_run)\n            ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={'run_id': '67890', 'start_time': '2023-10-01T12:00:00Z'})\n\n        Args:\n            model_run_info (dict): The new run information to set.\n        Returns:\n            Optional[\"ModelRun\"]: The updated model run, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            model_run = ModelRunModel.get(current_id)\n            if not model_run:\n                print(f\"Model run with id {current_id} does not exist.\")\n                return None\n            model_run = ModelRunModel.update(\n                model_run,\n                model_run_info=model_run_info,\n            )\n            instance = self.model_validate(model_run)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error setting model run info: {e}\")\n            return None\n\n    def get_associated_model(self) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Get the model associated with this model run.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; model = model_run.get_associated_model()\n            &gt;&gt;&gt; print(model)\n            Model(id=UUID('...'), model_name='example_model', ...)\n\n        Returns:\n            Optional[\"Model\"]: The associated model, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            if self.model_id is None:\n                print(\"Model run does not have an associated model.\")\n                return None\n            model = Model.get_by_id(self.model_id)\n            if not model:\n                print(f\"Model with id {self.model_id} does not exist.\")\n                return None\n            return model\n        except Exception as e:\n            print(f\"Error getting model for model run: {e}\")\n            return None\n\n    def associate_model(self, model_name: str) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Associate this model run with a model.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; model = model_run.associate_model(model_name=\"example_model\")\n            &gt;&gt;&gt; print(model)\n            Model(id=UUID('...'), model_name='example_model', ...)\n\n        Args:\n            model_name (str): The name of the model to associate.\n        Returns:\n            Optional[\"Model\"]: The associated model, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            model = Model.get(model_name=model_name)\n            if not model:\n                print(f\"Model with name {model_name} does not exist.\")\n                return None\n            existing_association = ModelRunModel.get_by_parameters(\n                model_id=model.id,\n                id=self.id\n            )\n            if existing_association:\n                print(f\"Model run with id {self.id} is already associated with model {model_name}.\")\n                return None\n            # Assign the model to the model run\n            db_model_run = ModelRunModel.get(self.id)\n            if not db_model_run:\n                print(f\"Model run with id {self.id} does not exist.\")\n                return None\n            db_model_run = ModelRunModel.update_parameter(\n                db_model_run,\n                \"model_id\",\n                model.id\n            )\n            self.refresh()\n            return model\n        except Exception as e:\n            print(f\"Error assigning model to model run: {e}\")\n            return None\n\n    def belongs_to_model(self, model_name: str) -&gt; bool:\n        \"\"\"\n        Check if this model run is associated with a specific model.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; is_associated = model_run.belongs_to_model(model_name=\"example_model\")\n            &gt;&gt;&gt; print(is_associated)\n            True        \n\n        Args:\n            model_name (str): The name of the model to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            model = Model.get(model_name=model_name)\n            if not model:\n                print(f\"Model with name {model_name} does not exist.\")\n                return False\n            association_exists = ModelRunModel.exists(\n                id=self.id,\n                model_id=model.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if model run belongs to model: {e}\")\n            return False\n\n    def unassociate_model(self) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Unassociate this model run from its model.\n\n        Examples:\n            &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n            &gt;&gt;&gt; model = model_run.unassociate_model()\n            &gt;&gt;&gt; print(model)\n            Model(id=UUID('...'), model_name='example_model', ...)\n\n        Returns:\n            Optional[\"Model\"]: The unassociated model, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.model import Model\n            model_run = ModelRunModel.get(self.id)\n            if not model_run:\n                print(f\"Model run with id {self.id} does not exist.\")\n                return None\n            model = Model.get_by_id(model_run.model_id)\n            model_run = ModelRunModel.update_parameter(\n                model_run,\n                \"model_id\",\n                None\n            )\n            self.refresh()\n            return model\n        except Exception as e:\n            print(f\"Error unassigning model from model run: {e}\")\n            return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the ModelRun object.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the ModelRun object.\"\"\"\n    return f\"ModelRun(id={self.id}, model_id={self.model_id}, model_run_info={self.model_run_info})\"\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the ModelRun object.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the ModelRun object.\"\"\"\n    return f\"ModelRun(id={self.id}, model_id={self.model_id}, model_run_info={self.model_run_info})\"\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.associate_model","title":"<code>associate_model(model_name)</code>","text":"<p>Associate this model run with a model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; model = model_run.associate_model(model_name=\"example_model\")\n&gt;&gt;&gt; print(model)\nModel(id=UUID('...'), model_name='example_model', ...)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to associate.</p> required <p>Returns:     Optional[\"Model\"]: The associated model, or None if an error occurred.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def associate_model(self, model_name: str) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Associate this model run with a model.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; model = model_run.associate_model(model_name=\"example_model\")\n        &gt;&gt;&gt; print(model)\n        Model(id=UUID('...'), model_name='example_model', ...)\n\n    Args:\n        model_name (str): The name of the model to associate.\n    Returns:\n        Optional[\"Model\"]: The associated model, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        model = Model.get(model_name=model_name)\n        if not model:\n            print(f\"Model with name {model_name} does not exist.\")\n            return None\n        existing_association = ModelRunModel.get_by_parameters(\n            model_id=model.id,\n            id=self.id\n        )\n        if existing_association:\n            print(f\"Model run with id {self.id} is already associated with model {model_name}.\")\n            return None\n        # Assign the model to the model run\n        db_model_run = ModelRunModel.get(self.id)\n        if not db_model_run:\n            print(f\"Model run with id {self.id} does not exist.\")\n            return None\n        db_model_run = ModelRunModel.update_parameter(\n            db_model_run,\n            \"model_id\",\n            model.id\n        )\n        self.refresh()\n        return model\n    except Exception as e:\n        print(f\"Error assigning model to model run: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.belongs_to_model","title":"<code>belongs_to_model(model_name)</code>","text":"<p>Check if this model run is associated with a specific model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; is_associated = model_run.belongs_to_model(model_name=\"example_model\")\n&gt;&gt;&gt; print(is_associated)\nTrue        \n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def belongs_to_model(self, model_name: str) -&gt; bool:\n    \"\"\"\n    Check if this model run is associated with a specific model.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; is_associated = model_run.belongs_to_model(model_name=\"example_model\")\n        &gt;&gt;&gt; print(is_associated)\n        True        \n\n    Args:\n        model_name (str): The name of the model to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        model = Model.get(model_name=model_name)\n        if not model:\n            print(f\"Model with name {model_name} does not exist.\")\n            return False\n        association_exists = ModelRunModel.exists(\n            id=self.id,\n            model_id=model.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if model run belongs to model: {e}\")\n        return False\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.create","title":"<code>create(model_run_info={}, model_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new model run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.create(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n&gt;&gt;&gt; print(model_run)\nModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_run_info</code> <code>dict</code> <p>The run information for the new model run.</p> <code>{}</code> <code>model_name</code> <code>str</code> <p>The name of the model. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"ModelRun\"]: The created model run, or None if an error occurred.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    model_run_info: dict = {},\n    model_name: str = None\n) -&gt; Optional[\"ModelRun\"]:\n    \"\"\"\n    Create a new model run.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.create(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n        &gt;&gt;&gt; print(model_run)\n        ModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})\n\n    Args:\n        model_run_info (dict): The run information for the new model run.\n        model_name (str, optional): The name of the model. Defaults to None.\n    Returns:\n        Optional[\"ModelRun\"]: The created model run, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ModelRunModel.get_or_create(\n            model_run_info=model_run_info\n        )\n        model_run = cls.model_validate(db_instance)\n        if model_name:\n            model_run.associate_model(model_name=model_name)\n        return model_run\n    except Exception as e:\n        print(f\"Error creating model run: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.delete","title":"<code>delete()</code>","text":"<p>Delete the model run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; success = model_run.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the model run was deleted, False otherwise.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the model run.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; success = model_run.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the model run was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        model_run = ModelRunModel.get(current_id)\n        if not model_run:\n            print(f\"Model run with id {current_id} does not exist.\")\n            return False\n        ModelRunModel.delete(model_run)\n        return True\n    except Exception as e:\n        print(f\"Error deleting model run: {e}\")\n        return False\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.exists","title":"<code>exists(model_run_info, model_name=None)</code>  <code>classmethod</code>","text":"<p>Check if a model run with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ModelRun.exists(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\nTrue\n&gt;&gt;&gt; ModelRun.exists(model_run_info={\"run_id\": \"67890\"}, model_name=\"non_existent_model\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_run_info</code> <code>dict</code> <p>The run information to check.</p> required <code>model_name</code> <code>str</code> <p>The name of the model. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if the model run exists, False otherwise.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    model_run_info: dict,\n    model_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if a model run with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; ModelRun.exists(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n        True\n        &gt;&gt;&gt; ModelRun.exists(model_run_info={\"run_id\": \"67890\"}, model_name=\"non_existent_model\")\n        False\n\n    Args:\n        model_run_info (dict): The run information to check.\n        model_name (str, optional): The name of the model. Defaults to None.\n    Returns:\n        bool: True if the model run exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ModelRunsViewModel.exists(\n            model_name=model_name,\n            model_run_info=model_run_info\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of model run: {e}\")\n        return False\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.get","title":"<code>get(model_run_info, model_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a model run by its info and name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n&gt;&gt;&gt; print(model_run)\nModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_run_info</code> <code>dict</code> <p>The run information to search for.</p> required <code>model_name</code> <code>str</code> <p>The name of the model. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"ModelRun\"]: The model run, or None if not found.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>@classmethod\ndef get(cls, model_run_info: dict, model_name: str = None) -&gt; Optional[\"ModelRun\"]:\n    \"\"\"\n    Retrieve a model run by its info and name.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n        &gt;&gt;&gt; print(model_run)\n        ModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})\n\n    Args:\n        model_run_info (dict): The run information to search for.\n        model_name (str, optional): The name of the model. Defaults to None.\n    Returns:\n        Optional[\"ModelRun\"]: The model run, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ModelRunsViewModel.get_by_parameters(\n            model_run_info=model_run_info,\n            model_name=model_name\n        )\n        if not db_instance:\n            print(f\"Model run with info {model_run_info} and model name {model_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting model run: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all model runs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_runs = ModelRun.get_all()\n&gt;&gt;&gt; print(model_runs)\n[ModelRun(id=UUID('...'), model_id=None, model_run_info={}), ModelRun(id=UUID('...'), model_id=None, model_run_info={})]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[ModelRun]]</code> <p>Optional[List[\"ModelRun\"]]: List of all model runs, or None if not found.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"ModelRun\"]]:\n    \"\"\"\n    Retrieve all model runs.\n\n    Examples:\n        &gt;&gt;&gt; model_runs = ModelRun.get_all()\n        &gt;&gt;&gt; print(model_runs)\n        [ModelRun(id=UUID('...'), model_id=None, model_run_info={}), ModelRun(id=UUID('...'), model_id=None, model_run_info={})]\n\n    Returns:\n        Optional[List[\"ModelRun\"]]: List of all model runs, or None if not found.\n    \"\"\"\n    try:\n        model_runs = ModelRunModel.all()\n        if not model_runs or len(model_runs) == 0:\n            print(\"No model runs found.\")\n            return None\n        model_runs = [cls.model_validate(model_run) for model_run in model_runs]\n        return model_runs\n    except Exception as e:\n        print(f\"Error getting all model runs: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.get_associated_model","title":"<code>get_associated_model()</code>","text":"<p>Get the model associated with this model run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; model = model_run.get_associated_model()\n&gt;&gt;&gt; print(model)\nModel(id=UUID('...'), model_name='example_model', ...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Model]</code> <p>Optional[\"Model\"]: The associated model, or None if not found.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def get_associated_model(self) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Get the model associated with this model run.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; model = model_run.get_associated_model()\n        &gt;&gt;&gt; print(model)\n        Model(id=UUID('...'), model_name='example_model', ...)\n\n    Returns:\n        Optional[\"Model\"]: The associated model, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        if self.model_id is None:\n            print(\"Model run does not have an associated model.\")\n            return None\n        model = Model.get_by_id(self.model_id)\n        if not model:\n            print(f\"Model with id {self.model_id} does not exist.\")\n            return None\n        return model\n    except Exception as e:\n        print(f\"Error getting model for model run: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a model run by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; print(model_run)\nModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the model run.</p> required <p>Returns:     Optional[\"ModelRun\"]: The model run, or None if not found.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ModelRun\"]:\n    \"\"\"\n    Retrieve a model run by its ID.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; print(model_run)\n        ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={})\n\n    Args:\n        id (UUID | int | str): The ID of the model run.\n    Returns:\n        Optional[\"ModelRun\"]: The model run, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ModelRunModel.get(id)\n        if not db_instance:\n            print(f\"Model run with id {id} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting model run by id: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the model run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; info = model_run.get_info()\n&gt;&gt;&gt; print(info)\n{'run_id': '12345', 'start_time': '2023-10-01T12:00:00Z'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The model run's info, or None if not found.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the model run.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; info = model_run.get_info()\n        &gt;&gt;&gt; print(info)\n        {'run_id': '12345', 'start_time': '2023-10-01T12:00:00Z'}\n\n    Returns:\n        Optional[dict]: The model run's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        model_run = ModelRunModel.get(current_id)\n        if not model_run:\n            print(f\"Model run with id {current_id} does not exist.\")\n            return None\n        model_run_info = model_run.model_run_info\n        if not model_run_info:\n            print(\"ModelRun info is empty.\")\n            return None\n        return model_run_info\n    except Exception as e:\n        print(f\"Error getting model run info: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the model run's data from the database. It is rarely called by the user as it is automatically called on access.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; refreshed_run = model_run.refresh()\n&gt;&gt;&gt; print(refreshed_run)\nModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={})\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ModelRun]</code> <p>Optional[\"ModelRun\"]: The refreshed model run, or None if an error occurred.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def refresh(self) -&gt; Optional[\"ModelRun\"]:\n    \"\"\"\n    Refresh the model run's data from the database. It is rarely called by the user\n    as it is automatically called on access.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; refreshed_run = model_run.refresh()\n        &gt;&gt;&gt; print(refreshed_run)\n        ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={})\n\n    Returns:\n        Optional[\"ModelRun\"]: The refreshed model run, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ModelRunModel.get(self.id)\n        if not db_instance:\n            print(f\"Model run with id {self.id} not found.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing model run: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.search","title":"<code>search(model_run_info=None, model_name=None)</code>  <code>classmethod</code>","text":"<p>Search for model runs based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_runs = ModelRun.search(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n&gt;&gt;&gt; print(model_runs)\n[ModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_run_info</code> <code>dict</code> <p>The run information to search for. Defaults to None.</p> <code>None</code> <code>model_name</code> <code>str</code> <p>The name of the model. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[\"ModelRun\"]]: List of matching model runs, or None if not found.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    model_run_info: dict = None,\n    model_name: str = None\n) -&gt; Optional[List[\"ModelRun\"]]:\n    \"\"\"\n    Search for model runs based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; model_runs = ModelRun.search(model_run_info={\"run_id\": \"12345\"}, model_name=\"example_model\")\n        &gt;&gt;&gt; print(model_runs)\n        [ModelRun(id=UUID('...'), model_id=None, model_run_info={'run_id': '12345'})]\n\n    Args:\n        model_run_info (dict, optional): The run information to search for. Defaults to None.\n        model_name (str, optional): The name of the model. Defaults to None.\n    Returns:\n        Optional[List[\"ModelRun\"]]: List of matching model runs, or None if not found.\n    \"\"\"\n    try:\n        if not any([model_name, model_run_info]):\n            print(\"At least one of model_name or model_run_info must be provided.\")\n            return None\n        model_runs = ModelRunsViewModel.search(\n            model_run_info=model_run_info,\n            model_name=model_name\n        )\n        if not model_runs or len(model_runs) == 0:\n            print(\"No model runs found for the given search criteria.\")\n            return None\n        model_runs = [cls.model_validate(model_run) for model_run in model_runs]\n        return model_runs\n    except Exception as e:\n        print(f\"Error searching model runs: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.set_info","title":"<code>set_info(model_run_info)</code>","text":"<p>Set the additional information of the model run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; updated_run = model_run.set_info(model_run_info={\"run_id\": \"67890\", \"start_time\": \"2023-10-01T12:00:00Z\"})\n&gt;&gt;&gt; print(updated_run)\nModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={'run_id': '67890', 'start_time': '2023-10-01T12:00:00Z'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_run_info</code> <code>dict</code> <p>The new run information to set.</p> required <p>Returns:     Optional[\"ModelRun\"]: The updated model run, or None if an error occurred.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def set_info(self, model_run_info: dict) -&gt; Optional[\"ModelRun\"]:\n    \"\"\"\n    Set the additional information of the model run.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; updated_run = model_run.set_info(model_run_info={\"run_id\": \"67890\", \"start_time\": \"2023-10-01T12:00:00Z\"})\n        &gt;&gt;&gt; print(updated_run)\n        ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={'run_id': '67890', 'start_time': '2023-10-01T12:00:00Z'})\n\n    Args:\n        model_run_info (dict): The new run information to set.\n    Returns:\n        Optional[\"ModelRun\"]: The updated model run, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        model_run = ModelRunModel.get(current_id)\n        if not model_run:\n            print(f\"Model run with id {current_id} does not exist.\")\n            return None\n        model_run = ModelRunModel.update(\n            model_run,\n            model_run_info=model_run_info,\n        )\n        instance = self.model_validate(model_run)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error setting model run info: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.unassociate_model","title":"<code>unassociate_model()</code>","text":"<p>Unassociate this model run from its model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; model = model_run.unassociate_model()\n&gt;&gt;&gt; print(model)\nModel(id=UUID('...'), model_name='example_model', ...)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Model]</code> <p>Optional[\"Model\"]: The unassociated model, or None if an error occurred.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def unassociate_model(self) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Unassociate this model run from its model.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; model = model_run.unassociate_model()\n        &gt;&gt;&gt; print(model)\n        Model(id=UUID('...'), model_name='example_model', ...)\n\n    Returns:\n        Optional[\"Model\"]: The unassociated model, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.model import Model\n        model_run = ModelRunModel.get(self.id)\n        if not model_run:\n            print(f\"Model run with id {self.id} does not exist.\")\n            return None\n        model = Model.get_by_id(model_run.model_id)\n        model_run = ModelRunModel.update_parameter(\n            model_run,\n            \"model_id\",\n            None\n        )\n        self.refresh()\n        return model\n    except Exception as e:\n        print(f\"Error unassigning model from model run: {e}\")\n        return None\n</code></pre>"},{"location":"api/model_runs/#gemini.api.model_run.ModelRun.update","title":"<code>update(model_run_info=None)</code>","text":"<p>Update the details of the model run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n&gt;&gt;&gt; updated_run = model_run.update(model_run_info={\"run_id\": \"67890\"})\n&gt;&gt;&gt; print(updated_run)\nModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={'run_id': '67890'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_run_info</code> <code>dict</code> <p>The new run information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"ModelRun\"]: The updated model run, or None if an error occurred.</p> Source code in <code>gemini/api/model_run.py</code> <pre><code>def update(self, model_run_info: dict = None) -&gt; Optional[\"ModelRun\"]:\n    \"\"\"\n    Update the details of the model run.\n\n    Examples:\n        &gt;&gt;&gt; model_run = ModelRun.get_by_id(UUID('12345678-1234-1234-1234-123456789012'))\n        &gt;&gt;&gt; updated_run = model_run.update(model_run_info={\"run_id\": \"67890\"})\n        &gt;&gt;&gt; print(updated_run)\n        ModelRun(id=UUID('12345678-1234-1234-1234-123456789012'), model_id=None, model_run_info={'run_id': '67890'})\n\n    Args:\n        model_run_info (dict, optional): The new run information. Defaults to None.\n    Returns:\n        Optional[\"ModelRun\"]: The updated model run, or None if an error occurred.\n    \"\"\"\n    try:\n        if not model_run_info:\n            print(\"Model run info cannot be empty.\")\n            return None\n        current_id = self.id\n        model_run = ModelRunModel.get(current_id)\n        if not model_run:\n            print(f\"Model run with id {current_id} does not exist.\")\n            return None\n        model_run = ModelRunModel.update(\n            model_run,\n            model_run_info=model_run_info   \n        )\n        instance = self.model_validate(model_run)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error updating model run: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/","title":"Models API","text":""},{"location":"api/models/#description","title":"Description","text":"<p>A model represents a script, program, data model, or learning model. It comprises a collection of Model Records and includes one or more Model Runs. Additionally, it can be associated with multiple Experiments.</p>"},{"location":"api/models/#module","title":"Module","text":"<p>This module defines the Model class, which represents a model entity, including its metadata, associations to runs, experiments, datasets, and records.</p> <p>It includes methods for creating, retrieving, updating, and deleting models, as well as methods for checking existence, searching, and managing associations with related entities and records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a model with the given name exists.</li> <li><code>create</code>: Create a new model.</li> <li><code>get</code>: Retrieve a model by its name.</li> <li><code>get_by_id</code>: Retrieve a model by its ID.</li> <li><code>get_all</code>: Retrieve all models.</li> <li><code>search</code>: Search for models based on various criteria.</li> <li><code>update</code>: Update the details of a model.</li> <li><code>delete</code>: Delete a model.</li> <li><code>refresh</code>: Refresh the model's data from the database.</li> <li><code>get_info</code>: Get the additional information of the model.</li> <li><code>set_info</code>: Set the additional information of the model.</li> <li>Association methods for runs, experiments, datasets, and records.</li> </ul>"},{"location":"api/models/#gemini.api.model.Model","title":"<code>Model</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a model entity, including its metadata, associations to runs, experiments, datasets, and records.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the model.</p> <code>model_name</code> <code>str</code> <p>The name of the model.</p> <code>model_url</code> <code>Optional[str]</code> <p>The URL of the model.</p> <code>model_info</code> <code>Optional[dict]</code> <p>Additional information about the model.</p> Source code in <code>gemini/api/model.py</code> <pre><code>class Model(APIBase):\n    \"\"\"\n    Represents a model entity, including its metadata, associations to runs, experiments, datasets, and records.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the model.\n        model_name (str): The name of the model.\n        model_url (Optional[str]): The URL of the model.\n        model_info (Optional[dict]): Additional information about the model.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"model_id\"))\n\n    model_name: str\n    model_url: Optional[str] = None\n    model_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Model object.\"\"\"\n        return f\"Model(model_name={self.model_name}, model_url={self.model_url}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Model object.\"\"\"\n        return f\"Model(model_name={self.model_name}, model_url={self.model_url}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        model_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a model with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Model.exists(\"example_model\")\n            True\n            &gt;&gt;&gt; Model.exists(\"non_existent_model\")\n            False\n\n        Args:\n            model_name (str): The name of the model.\n        Returns:\n            bool: True if the model exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ModelModel.exists(model_name=model_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of model: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        model_name: str,\n        model_url: str = None,\n        model_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Create a new model.\n\n        If the model already exists, it will return the existing model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.create(\"example_model\", \"http://example.com/model\")\n            &gt;&gt;&gt; print(model)\n            Model(model_name=example_model, model_url=http://example.com/model, id=123e456-e789-12d3-a456-426614174000)\n\n        Args:\n            model_name (str): The name of the model.\n            model_url (str, optional): The URL of the model. Defaults to None.\n            model_info (dict, optional): Additional information about the model. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[\"Model\"]: The created model, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ModelModel.get_or_create(\n                model_name=model_name,\n                model_url=model_url,\n                model_info=model_info,\n            )\n            model = cls.model_validate(db_instance)\n            if experiment_name:\n                model.associate_experiment(experiment_name=experiment_name)\n            return model\n        except Exception as e:\n            print(f\"Error creating model: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        model_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Retrieve a model by its name.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; print(model)\n            Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n        Args:\n            model_name (str): The name of the model.\n        Returns:\n            Optional[\"Model\"]: The model, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentModelsViewModel.get_by_parameters(\n                model_name=model_name,\n                experiment_name=experiment_name\n            )\n            if not db_instance:\n                print(f\"Model with name {model_name} not found.\")\n                return None\n            model = cls.model_validate(db_instance)\n            return model\n        except Exception as e:\n            print(f\"Error getting model: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Retrieve a model by its ID.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get_by_id(UUID('...'))\n            Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n        Args:\n            id (UUID | int | str): The ID of the model.\n        Returns:\n            Optional[\"Model\"]: The model, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ModelModel.get(id)\n            if not db_instance:\n                print(f\"Model with ID {id} does not exist.\")\n                return None\n            model = cls.model_validate(db_instance)\n            return model\n        except Exception as e:\n            print(f\"Error getting model by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Model\"]]:\n        \"\"\"\n        Retrieve all models.\n\n        Examples:\n            &gt;&gt;&gt; models = Model.get_all()\n            &gt;&gt;&gt; for model in models:\n            ...     print(model)\n            Model(model_name=example_model1, model_url=http://example.com/model1, id=UUID('...'))\n            Model(model_name=example_model2, model_url=http://example.com/model2, id=UUID('...'))\n\n        Returns:\n            Optional[List[\"Model\"]]: List of all models, or None if not found.\n        \"\"\"\n        try:\n            models = ModelModel.all()\n            if not models or len(models) == 0:\n                print(\"No models found.\")\n                return None\n            models = [cls.model_validate(model) for model in models]\n            return models\n        except Exception as e:\n            print(f\"Error getting all models: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        model_name: str = None,\n        model_info: dict = None,\n        model_url: str = None,\n        experiment_name: str = None\n    ) -&gt; Optional[List[\"Model\"]]:\n        \"\"\"\n        Search for models based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; models = Model.search(model_name=\"example_model\")\n            &gt;&gt;&gt; for model in models:\n            ...     print(model)\n            Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n        Args:\n            model_name (str, optional): The name of the model. Defaults to None.\n            model_url (str, optional): The URL of the model. Defaults to None.\n            model_info (dict, optional): Additional information. Defaults to None.\n            experiment_name (str, optional): The name of the experiment to filter by. Defaults to None.\n        Returns:\n            Optional[List[\"Model\"]]: List of matching models, or None if not found.\n        \"\"\"\n        try:\n            if not any([model_name, model_info, model_url, experiment_name]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n            models = ExperimentModelsViewModel.search(\n                model_name=model_name,\n                model_info=model_info,\n                model_url=model_url,\n                experiment_name=experiment_name\n            )\n            if not models or len(models) == 0:\n                print(\"No models found with the provided search parameters.\")\n                return None\n            models = [cls.model_validate(model) for model in models]\n            return models\n        except Exception as e:\n            print(f\"Error searching models: {e}\")\n            return None\n\n    def update(\n        self,\n        model_name: str = None,\n        model_url: str = None,\n        model_info: dict = None\n    ) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Update the details of the model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; updated_model = model.update(model_name=\"new_example_model\")\n            &gt;&gt;&gt; print(updated_model)\n            Model(model_name=new_example_model, model_url=http://example.com/model, id=UUID('...'))\n        Args:\n            model_name (str, optional): The new name. Defaults to None.\n            model_url (str, optional): The new URL. Defaults to None.\n            model_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[\"Model\"]: The updated model, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([model_name, model_url, model_info]):\n                print(\"At least one update parameter must be provided.\")\n                return None\n            current_id = self.id\n            model = ModelModel.get(current_id)\n            if not model:\n                print(f\"Model with ID {current_id} does not exist.\")\n                return None\n            model = ModelModel.update(\n                model,\n                model_name=model_name,\n                model_url=model_url,\n                model_info=model_info\n            )\n            model = self.model_validate(model)\n            self.refresh()\n            return model\n        except Exception as e:\n            print(f\"Error updating model: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; success = model.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the model was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            model = ModelModel.get(current_id)\n            if not model:\n                print(f\"Model with ID {current_id} does not exist.\")\n                return False\n            ModelModel.delete(model)\n            return True\n        except Exception as e:\n            print(f\"Error deleting model: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Refresh the model's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; refreshed_model = model.refresh()\n            &gt;&gt;&gt; print(refreshed_model)\n            Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n        Returns:\n            Optional[\"Model\"]: The refreshed model, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ModelModel.get(self.id)\n            if not db_instance:\n                print(f\"Model with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing model: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; info = model.get_info()\n            &gt;&gt;&gt; print(info)\n            {'key1': 'value1', 'key2': 'value2'}\n\n        Returns:\n            Optional[dict]: The model's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            model = ModelModel.get(current_id)\n            if not model:\n                print(f\"Model with ID {current_id} does not exist.\")\n                return None\n            model_info = model.model_info\n            if not model_info:\n                print(\"Model info is empty.\")\n                return None\n            return model_info\n        except Exception as e:\n            print(f\"Error getting model info: {e}\")\n            return None\n\n    def set_info(self, model_info: dict) -&gt; Optional[\"Model\"]:\n        \"\"\"\n        Set the additional information of the model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; updated_model = model.set_info({\"key1\": \"new_value1\", \"key2\": \"new_value2\"})\n            &gt;&gt;&gt; print(updated_model.get_info())\n            {'key1': 'new_value1', 'key2': 'new_value2'}\n\n        Args:\n            model_info (dict): The new information to set.\n        Returns:\n            Optional[\"Model\"]: The updated model, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            model = ModelModel.get(current_id)\n            if not model:\n                print(f\"Model with ID {current_id} does not exist.\")\n                return None\n            model = ModelModel.update(\n                model,\n                model_info=model_info\n            )\n            model = self.model_validate(model)\n            self.refresh()\n            return model\n        except Exception as e:\n            print(f\"Error setting model info: {e}\")\n            return None\n\n    def get_associated_runs(self) -&gt; Optional[List[\"ModelRun\"]]:\n        \"\"\"\n        Get all runs associated with this model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; runs = model.get_associated_runs()\n            &gt;&gt;&gt; for run in runs:\n            ...     print(run)\n            ModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n            ModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n\n        Returns:\n            Optional[List[\"ModelRun\"]]: A list of associated runs, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.model_run import ModelRun\n            current_id = self.id\n            model_runs = ModelRunsViewModel.search(model_id=current_id)\n            if not model_runs or len(model_runs) == 0:\n                print(f\"No runs associated with model {self.model_name}.\")\n                return None\n            runs = [ModelRun.model_validate(model_run) for model_run in model_runs]\n            return runs\n        except Exception as e:\n            print(f\"Error getting associated runs: {e}\")\n            return None\n\n    def create_new_run(self, model_run_info: dict) -&gt; Optional[\"ModelRun\"]:\n        \"\"\"\n        Create and associate a new run with this model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; run_info = {\"run_name\": \"example_run\", \"run_parameters\": {\"param1\": \"value1\"}}\n            &gt;&gt;&gt; new_run = model.create_new_run(run_info)\n            &gt;&gt;&gt; print(new_run)\n            ModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n\n        Args:\n            model_run_info (dict): The run information for the new run.\n        Returns:\n            Optional[\"ModelRun\"]: The created and associated run, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.model_run import ModelRun\n            current_name = self.model_name\n            model_run = ModelRun.create(\n                model_run_info=model_run_info,\n                model_name=current_name\n            )\n            if not model_run:\n                print(f\"Failed to create run for model {self.model_name}.\")\n                return None\n            return model_run\n        except Exception as e:\n            print(f\"Error creating run: {e}\")\n            return None\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with this model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; experiments = model.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n            Experiment(id=UUID(...), experiment_name=\"another_experiment\", experiment_start_date=\"2023-11-01\", experiment_end_date=\"2023-11-30\")\n\n        Returns:\n            Optional[List[\"Experiment\"]]: A list of associated experiments, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            current_id = self.id\n            experiment_models = ExperimentModelsViewModel.search(model_id=current_id)\n            if not experiment_models or len(experiment_models) == 0:\n                print(f\"No experiments associated with model {self.model_name}.\")\n                return None\n            experiments = [Experiment.model_validate(experiment) for experiment in experiment_models]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this model with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; experiment = model.associate_experiment(\"example_experiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[\"Experiment\"]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentModelModel.exists(\n                experiment_id=experiment.id,\n                model_id=self.id\n            )\n            if existing_association:\n                print(f\"Model {self.model_name} is already associated with experiment {experiment_name}.\")\n                return experiment\n            new_association = ExperimentModelModel.get_or_create(\n                experiment_id=experiment.id,\n                model_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate model {self.model_name} with experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating experiment: {e}\")\n            return None\n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this model from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; experiment = model.unassociate_experiment(\"example_experiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[\"Experiment\"]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentModelModel.get_by_parameters(\n                experiment_id=experiment.id,\n                model_id=self.id\n            )\n            if not existing_association:\n                print(f\"Model {self.model_name} is not associated with experiment {experiment_name}.\")\n                return None\n            is_deleted = ExperimentModelModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to disassociate model {self.model_name} from experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error disassociating experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this model is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; is_associated = model.belongs_to_experiment(\"example_experiment\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentModelModel.exists(\n                experiment_id=experiment.id,\n                model_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking experiment membership: {e}\")\n            return False\n\n    def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n        \"\"\"\n        Get all datasets associated with this model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; datasets = model.get_associated_datasets()\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n            Dataset(dataset_name=\"another_dataset\", collection_date=\"2023-11-01\", dataset_type=Model, id=UUID('...'))\n\n        Returns:\n            Optional[List[\"Dataset\"]]: A list of associated datasets, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            current_id = self.id\n            model_datasets = ModelDatasetsViewModel.search(model_id=current_id)\n            if not model_datasets or len(model_datasets) == 0:\n                print(f\"No datasets associated with model {self.model_name}.\")\n                return None\n            datasets = [Dataset.model_validate(model_dataset) for model_dataset in model_datasets]\n            return datasets\n        except Exception as e:\n            print(f\"Error getting associated datasets: {e}\")\n            return None\n\n    def create_new_dataset(\n        self,\n        dataset_name: str,\n        dataset_info: dict = {},\n        collection_date: date = None,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Create and associate a new dataset with this model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; dataset = model.create_new_dataset(\"example_dataset\", {\"key\": \"value\"})\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the new dataset.\n            dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n            collection_date (date, optional): The collection date. Defaults to today.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[\"Dataset\"]: The created and associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.create(\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                collection_date=collection_date,\n                experiment_name=experiment_name,\n                dataset_type=GEMINIDatasetType.Model\n            )\n            if not dataset:\n                print(f\"Failed to create dataset for model {self.model_name}.\")\n                return None\n            dataset = self.associate_dataset(dataset_name=dataset_name)\n            return dataset\n        except Exception as e:\n            print(f\"Error creating dataset: {e}\")\n            return None\n\n    def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Associate this model with a dataset.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; dataset = model.associate_dataset(\"example_dataset\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the dataset to associate.\n        Returns:\n            Optional[\"Dataset\"]: The associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name=dataset_name)\n            if not dataset:\n                print(f\"Dataset {dataset_name} does not exist.\")\n                return None\n            existing_association = ModelDatasetModel.exists(\n                dataset_id=dataset.id,\n                model_id=self.id\n            )\n            if existing_association:\n                print(f\"Model {self.model_name} is already associated with dataset {dataset_name}.\")\n                return dataset\n            new_association = ModelDatasetModel.get_or_create(\n                dataset_id=dataset.id,\n                model_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate model {self.model_name} with dataset {dataset_name}.\")\n                return None\n            self.refresh()\n            return dataset\n        except Exception as e:\n            print(f\"Error associating dataset: {e}\")\n            return None\n\n\n    def insert_record(\n        self,\n        timestamp: datetime = None,\n        collection_date: date = None,\n        model_data: dict = {},\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a single model record for this model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; success, record_ids = model.insert_record(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date.today(),\n            ...     model_data={\"key\": \"value\"},\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_file=\"path/to/record/file\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID('...')]\n\n        Args:\n            timestamp (datetime, optional): The timestamp for the record. Defaults to now.\n            collection_date (date, optional): The collection date for the record. Defaults to today.\n            model_data (dict, optional): The model data dictionary. Defaults to {}.\n            dataset_name (str, optional): The dataset name. Defaults to None.\n            experiment_name (str, optional): The experiment name. Defaults to None.\n            season_name (str, optional): The season name. Defaults to None.\n            site_name (str, optional): The site name. Defaults to None.\n            record_file (str, optional): The record file path. Defaults to None.\n            record_info (dict, optional): Additional record information dictionary. Defaults to {}.\n        Returns:\n            Optional[ModelRecord]: The inserted model record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n            if not model_data and not record_file:\n                raise ValueError(\"Either model_data or record_file must be provided.\")\n\n            timestamp = timestamp if timestamp else datetime.now()\n            collection_date = collection_date if collection_date else timestamp.date()\n            if not dataset_name:\n                dataset_name = f\"{self.model_name} Dataset {collection_date}\"\n            model_name = self.model_name\n            model_record = ModelRecord.create(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                model_name=model_name,\n                model_data=model_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_file=record_file,\n                record_info=record_info,\n                insert_on_create=False\n            )\n            success, inserted_record_ids = ModelRecord.insert([model_record])\n            if not success:\n                raise Exception(\"Failed to insert model record.\")\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting model record: {e}\")\n            return False, []\n\n    def insert_records(\n        self,\n        timestamps: List[datetime] = None,\n        collection_date: date = None,\n        model_data: List[dict] = [],\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_files: List[str] = [],\n        record_info: List[dict] = []\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert multiple model records for this model.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; timestamps = [datetime.now(), datetime.now()]\n            &gt;&gt;&gt; model_data = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n            &gt;&gt;&gt; success, record_ids = model.insert_records(\n            ...     timestamps=timestamps,\n            ...     collection_date=date.today(),\n            ...     model_data=model_data,\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_files=[\"path/to/record1\", \"path/to/record2\"],\n            ...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID('...'), UUID('...')]\n\n        Args:\n            timestamps (List[datetime]): List of timestamps for the records.\n            collection_date (date, optional): The collection date for the records. Defaults to None.\n            model_data (List[dict], optional): List of model data dictionaries. Defaults to [].\n            dataset_name (str, optional): The dataset name. Defaults to None.\n            experiment_name (str, optional): The experiment name. Defaults to None.\n            season_name (str, optional): The season name. Defaults to None.\n            site_name (str, optional): The site name. Defaults to None.\n            record_files (List[str], optional): List of record file paths. Defaults to [].\n            record_info (List[dict], optional): List of additional record information dictionaries. Defaults to [].\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n            if len(timestamps) == 0:\n                raise ValueError(\"At least one timestamp must be provided.\")\n\n            if len(model_data) != len(timestamps):\n                raise ValueError(\"model_data must have the same length as timestamps.\")\n\n            if record_files and len(record_files) != len(timestamps):\n                raise ValueError(\"record_files must have the same length as timestamps.\")\n\n            collection_date = collection_date if collection_date else timestamps[0].date()\n\n            if not dataset_name:\n                dataset_name = f\"{self.model_name} Dataset {collection_date}\"\n\n            model_records = []\n            timestamps_length = len(timestamps)\n\n            for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Model \" + self.model_name):\n                model_record = ModelRecord.create(\n                    timestamp = timestamps[i],\n                    collection_date = collection_date,\n                    model_name= self.model_name,\n                    model_data = model_data[i]  if model_data else {},\n                    dataset_name = dataset_name,\n                    experiment_name = experiment_name,\n                    season_name = season_name,\n                    site_name = site_name,\n                    record_file= record_files[i] if record_files else None,\n                    record_info = record_info[i] if record_info else {},\n                    insert_on_create=False\n                )\n                model_records.append(model_record)\n\n            success, inserted_record_ids = ModelRecord.insert(model_records)\n            if not success:\n                print(\"Failed to insert model records.\")\n                return False, []\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting model records: {e}\")\n            return False, []\n\n    def search_records(\n        self,\n        collection_date: date = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_info: dict = None\n    ) -&gt; List[ModelRecord]:\n        \"\"\"\n        Search for model records associated with this model based on search parameters.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; records = model.search_records(\n            ...     collection_date=date.today(),\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ModelRecord(id=UUID(...), model_name='example_model', dataset_name='example_dataset', timestamp='2023-10-01T12:00:00', model_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            collection_date (date, optional): The collection date to filter by. Defaults to None.\n            dataset_name (str, optional): The dataset name to filter by. Defaults to None.\n            experiment_name (str, optional): The experiment name to filter by. Defaults to None.\n            season_name (str, optional): The season name to filter by. Defaults to None.\n            site_name (str, optional): The site name to filter by. Defaults to None.\n            record_info (dict, optional): Additional record information to filter by. Defaults to None.\n        Returns:\n            Optional[List[ModelRecord]]: List of matching model records, or None if not found.\n        \"\"\"\n        try:\n            record_info = record_info if record_info else {}\n            record_info = {k: v for k, v in record_info.items() if v is not None}\n\n            records = ModelRecord.search(\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                model_name=self.model_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_info=record_info\n            )\n            return records\n        except Exception as e:\n            print(f\"Error searching model records: {e}\")\n            return []\n\n    def filter_records(\n        self,\n        start_timestamp: Optional[datetime] = None,\n        end_timestamp: Optional[datetime] = None,\n        dataset_names: Optional[List[str]] = None,\n        experiment_names: Optional[List[str]] = None,\n        season_names: Optional[List[str]] = None,\n        site_names: Optional[List[str]] = None\n    ) -&gt; List[ModelRecord]:\n        \"\"\"\n        Filter model records associated with this model using a custom filter function.\n\n        Examples:\n            &gt;&gt;&gt; model = Model.get(\"example_model\")\n            &gt;&gt;&gt; records = model.filter_records(\n            ...     start_timestamp=datetime(2023, 1, 1),\n            ...     end_timestamp=datetime(2023, 12, 31),\n            ...     dataset_names=[\"example_dataset\"],\n            ...     experiment_names=[\"example_experiment\"],\n            ...     season_names=[\"example_season\"],\n            ...     site_names=[\"example_site\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ModelRecord(id=UUID(...), model_name='example_model', dataset_name='example_dataset', timestamp='2023-10-01T12:00:00, model_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            start_timestamp (Optional[datetime], optional): The start timestamp for filtering. Defaults to None.\n            end_timestamp (Optional[datetime], optional): The end timestamp for filtering. Defaults to None\n            dataset_names (Optional[List[str]], optional): List of dataset names to filter by. Defaults to None.\n            experiment_names (Optional[List[str]], optional): List of experiment names to filter by. Defaults\n            season_names (Optional[List[str]], optional): List of season names to filter by. Defaults to None.\n            site_names (Optional[List[str]], optional): List of site names to filter by. Defaults to None.\n        Returns:\n            Optional[List[ModelRecord]]: List of filtered model records, or None if not found.\n        \"\"\"\n        try:\n            records = ModelRecord.filter(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                model_names=[self.model_name],\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            return records\n        except Exception as e:\n            print(f\"Error filtering model records: {e}\")\n            return []\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Model object.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Model object.\"\"\"\n    return f\"Model(model_name={self.model_name}, model_url={self.model_url}, id={self.id})\"\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Model object.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Model object.\"\"\"\n    return f\"Model(model_name={self.model_name}, model_url={self.model_url}, id={self.id})\"\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.associate_dataset","title":"<code>associate_dataset(dataset_name)</code>","text":"<p>Associate this model with a dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; dataset = model.associate_dataset(\"example_dataset\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to associate.</p> required <p>Returns:     Optional[\"Dataset\"]: The associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Associate this model with a dataset.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; dataset = model.associate_dataset(\"example_dataset\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the dataset to associate.\n    Returns:\n        Optional[\"Dataset\"]: The associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name=dataset_name)\n        if not dataset:\n            print(f\"Dataset {dataset_name} does not exist.\")\n            return None\n        existing_association = ModelDatasetModel.exists(\n            dataset_id=dataset.id,\n            model_id=self.id\n        )\n        if existing_association:\n            print(f\"Model {self.model_name} is already associated with dataset {dataset_name}.\")\n            return dataset\n        new_association = ModelDatasetModel.get_or_create(\n            dataset_id=dataset.id,\n            model_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate model {self.model_name} with dataset {dataset_name}.\")\n            return None\n        self.refresh()\n        return dataset\n    except Exception as e:\n        print(f\"Error associating dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this model with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; experiment = model.associate_experiment(\"example_experiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[\"Experiment\"]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this model with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; experiment = model.associate_experiment(\"example_experiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[\"Experiment\"]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentModelModel.exists(\n            experiment_id=experiment.id,\n            model_id=self.id\n        )\n        if existing_association:\n            print(f\"Model {self.model_name} is already associated with experiment {experiment_name}.\")\n            return experiment\n        new_association = ExperimentModelModel.get_or_create(\n            experiment_id=experiment.id,\n            model_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate model {self.model_name} with experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this model is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; is_associated = model.belongs_to_experiment(\"example_experiment\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this model is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; is_associated = model.belongs_to_experiment(\"example_experiment\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentModelModel.exists(\n            experiment_id=experiment.id,\n            model_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking experiment membership: {e}\")\n        return False\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.create","title":"<code>create(model_name, model_url=None, model_info={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new model.</p> <p>If the model already exists, it will return the existing model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.create(\"example_model\", \"http://example.com/model\")\n&gt;&gt;&gt; print(model)\nModel(model_name=example_model, model_url=http://example.com/model, id=123e456-e789-12d3-a456-426614174000)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <code>model_url</code> <code>str</code> <p>The URL of the model. Defaults to None.</p> <code>None</code> <code>model_info</code> <code>dict</code> <p>Additional information about the model. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Model\"]: The created model, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    model_name: str,\n    model_url: str = None,\n    model_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Create a new model.\n\n    If the model already exists, it will return the existing model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.create(\"example_model\", \"http://example.com/model\")\n        &gt;&gt;&gt; print(model)\n        Model(model_name=example_model, model_url=http://example.com/model, id=123e456-e789-12d3-a456-426614174000)\n\n    Args:\n        model_name (str): The name of the model.\n        model_url (str, optional): The URL of the model. Defaults to None.\n        model_info (dict, optional): Additional information about the model. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[\"Model\"]: The created model, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ModelModel.get_or_create(\n            model_name=model_name,\n            model_url=model_url,\n            model_info=model_info,\n        )\n        model = cls.model_validate(db_instance)\n        if experiment_name:\n            model.associate_experiment(experiment_name=experiment_name)\n        return model\n    except Exception as e:\n        print(f\"Error creating model: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.create_new_dataset","title":"<code>create_new_dataset(dataset_name, dataset_info={}, collection_date=None, experiment_name=None)</code>","text":"<p>Create and associate a new dataset with this model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; dataset = model.create_new_dataset(\"example_dataset\", {\"key\": \"value\"})\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the new dataset.</p> required <code>dataset_info</code> <code>dict</code> <p>Additional information about the dataset. Defaults to {{}}.</p> <code>{}</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to today.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[\"Dataset\"]: The created and associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def create_new_dataset(\n    self,\n    dataset_name: str,\n    dataset_info: dict = {},\n    collection_date: date = None,\n    experiment_name: str = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Create and associate a new dataset with this model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; dataset = model.create_new_dataset(\"example_dataset\", {\"key\": \"value\"})\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the new dataset.\n        dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n        collection_date (date, optional): The collection date. Defaults to today.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[\"Dataset\"]: The created and associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.create(\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            collection_date=collection_date,\n            experiment_name=experiment_name,\n            dataset_type=GEMINIDatasetType.Model\n        )\n        if not dataset:\n            print(f\"Failed to create dataset for model {self.model_name}.\")\n            return None\n        dataset = self.associate_dataset(dataset_name=dataset_name)\n        return dataset\n    except Exception as e:\n        print(f\"Error creating dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.create_new_run","title":"<code>create_new_run(model_run_info)</code>","text":"<p>Create and associate a new run with this model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; run_info = {\"run_name\": \"example_run\", \"run_parameters\": {\"param1\": \"value1\"}}\n&gt;&gt;&gt; new_run = model.create_new_run(run_info)\n&gt;&gt;&gt; print(new_run)\nModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_run_info</code> <code>dict</code> <p>The run information for the new run.</p> required <p>Returns:     Optional[\"ModelRun\"]: The created and associated run, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def create_new_run(self, model_run_info: dict) -&gt; Optional[\"ModelRun\"]:\n    \"\"\"\n    Create and associate a new run with this model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; run_info = {\"run_name\": \"example_run\", \"run_parameters\": {\"param1\": \"value1\"}}\n        &gt;&gt;&gt; new_run = model.create_new_run(run_info)\n        &gt;&gt;&gt; print(new_run)\n        ModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n\n    Args:\n        model_run_info (dict): The run information for the new run.\n    Returns:\n        Optional[\"ModelRun\"]: The created and associated run, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.model_run import ModelRun\n        current_name = self.model_name\n        model_run = ModelRun.create(\n            model_run_info=model_run_info,\n            model_name=current_name\n        )\n        if not model_run:\n            print(f\"Failed to create run for model {self.model_name}.\")\n            return None\n        return model_run\n    except Exception as e:\n        print(f\"Error creating run: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.delete","title":"<code>delete()</code>","text":"<p>Delete the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; success = model.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the model was deleted, False otherwise.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; success = model.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the model was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        model = ModelModel.get(current_id)\n        if not model:\n            print(f\"Model with ID {current_id} does not exist.\")\n            return False\n        ModelModel.delete(model)\n        return True\n    except Exception as e:\n        print(f\"Error deleting model: {e}\")\n        return False\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.exists","title":"<code>exists(model_name)</code>  <code>classmethod</code>","text":"<p>Check if a model with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Model.exists(\"example_model\")\nTrue\n&gt;&gt;&gt; Model.exists(\"non_existent_model\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <p>Returns:     bool: True if the model exists, False otherwise.</p> Source code in <code>gemini/api/model.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    model_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a model with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Model.exists(\"example_model\")\n        True\n        &gt;&gt;&gt; Model.exists(\"non_existent_model\")\n        False\n\n    Args:\n        model_name (str): The name of the model.\n    Returns:\n        bool: True if the model exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ModelModel.exists(model_name=model_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of model: {e}\")\n        return False\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.filter_records","title":"<code>filter_records(start_timestamp=None, end_timestamp=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>","text":"<p>Filter model records associated with this model using a custom filter function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; records = model.filter_records(\n...     start_timestamp=datetime(2023, 1, 1),\n...     end_timestamp=datetime(2023, 12, 31),\n...     dataset_names=[\"example_dataset\"],\n...     experiment_names=[\"example_experiment\"],\n...     season_names=[\"example_season\"],\n...     site_names=[\"example_site\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nModelRecord(id=UUID(...), model_name='example_model', dataset_name='example_dataset', timestamp='2023-10-01T12:00:00, model_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>Optional[datetime]</code> <p>The start timestamp for filtering. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>Optional[datetime]</code> <p>The end timestamp for filtering. Defaults to None</p> <code>None</code> <code>dataset_names</code> <code>Optional[List[str]]</code> <p>List of dataset names to filter by. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>Optional[List[str]]</code> <p>List of experiment names to filter by. Defaults</p> <code>None</code> <code>season_names</code> <code>Optional[List[str]]</code> <p>List of season names to filter by. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>Optional[List[str]]</code> <p>List of site names to filter by. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[ModelRecord]]: List of filtered model records, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def filter_records(\n    self,\n    start_timestamp: Optional[datetime] = None,\n    end_timestamp: Optional[datetime] = None,\n    dataset_names: Optional[List[str]] = None,\n    experiment_names: Optional[List[str]] = None,\n    season_names: Optional[List[str]] = None,\n    site_names: Optional[List[str]] = None\n) -&gt; List[ModelRecord]:\n    \"\"\"\n    Filter model records associated with this model using a custom filter function.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; records = model.filter_records(\n        ...     start_timestamp=datetime(2023, 1, 1),\n        ...     end_timestamp=datetime(2023, 12, 31),\n        ...     dataset_names=[\"example_dataset\"],\n        ...     experiment_names=[\"example_experiment\"],\n        ...     season_names=[\"example_season\"],\n        ...     site_names=[\"example_site\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ModelRecord(id=UUID(...), model_name='example_model', dataset_name='example_dataset', timestamp='2023-10-01T12:00:00, model_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        start_timestamp (Optional[datetime], optional): The start timestamp for filtering. Defaults to None.\n        end_timestamp (Optional[datetime], optional): The end timestamp for filtering. Defaults to None\n        dataset_names (Optional[List[str]], optional): List of dataset names to filter by. Defaults to None.\n        experiment_names (Optional[List[str]], optional): List of experiment names to filter by. Defaults\n        season_names (Optional[List[str]], optional): List of season names to filter by. Defaults to None.\n        site_names (Optional[List[str]], optional): List of site names to filter by. Defaults to None.\n    Returns:\n        Optional[List[ModelRecord]]: List of filtered model records, or None if not found.\n    \"\"\"\n    try:\n        records = ModelRecord.filter(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            model_names=[self.model_name],\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        return records\n    except Exception as e:\n        print(f\"Error filtering model records: {e}\")\n        return []\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.get","title":"<code>get(model_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a model by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; print(model)\nModel(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model.</p> required <p>Returns:     Optional[\"Model\"]: The model, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    model_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Retrieve a model by its name.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; print(model)\n        Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n    Args:\n        model_name (str): The name of the model.\n    Returns:\n        Optional[\"Model\"]: The model, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentModelsViewModel.get_by_parameters(\n            model_name=model_name,\n            experiment_name=experiment_name\n        )\n        if not db_instance:\n            print(f\"Model with name {model_name} not found.\")\n            return None\n        model = cls.model_validate(db_instance)\n        return model\n    except Exception as e:\n        print(f\"Error getting model: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all models.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; models = Model.get_all()\n&gt;&gt;&gt; for model in models:\n...     print(model)\nModel(model_name=example_model1, model_url=http://example.com/model1, id=UUID('...'))\nModel(model_name=example_model2, model_url=http://example.com/model2, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Model]]</code> <p>Optional[List[\"Model\"]]: List of all models, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Model\"]]:\n    \"\"\"\n    Retrieve all models.\n\n    Examples:\n        &gt;&gt;&gt; models = Model.get_all()\n        &gt;&gt;&gt; for model in models:\n        ...     print(model)\n        Model(model_name=example_model1, model_url=http://example.com/model1, id=UUID('...'))\n        Model(model_name=example_model2, model_url=http://example.com/model2, id=UUID('...'))\n\n    Returns:\n        Optional[List[\"Model\"]]: List of all models, or None if not found.\n    \"\"\"\n    try:\n        models = ModelModel.all()\n        if not models or len(models) == 0:\n            print(\"No models found.\")\n            return None\n        models = [cls.model_validate(model) for model in models]\n        return models\n    except Exception as e:\n        print(f\"Error getting all models: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.get_associated_datasets","title":"<code>get_associated_datasets()</code>","text":"<p>Get all datasets associated with this model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; datasets = model.get_associated_datasets()\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\nDataset(dataset_name=\"another_dataset\", collection_date=\"2023-11-01\", dataset_type=Model, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Dataset]]</code> <p>Optional[List[\"Dataset\"]]: A list of associated datasets, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n    \"\"\"\n    Get all datasets associated with this model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; datasets = model.get_associated_datasets()\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(dataset_name=\"example_dataset\", collection_date=\"2023-10-01\", dataset_type=Model, id=UUID('...'))\n        Dataset(dataset_name=\"another_dataset\", collection_date=\"2023-11-01\", dataset_type=Model, id=UUID('...'))\n\n    Returns:\n        Optional[List[\"Dataset\"]]: A list of associated datasets, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        current_id = self.id\n        model_datasets = ModelDatasetsViewModel.search(model_id=current_id)\n        if not model_datasets or len(model_datasets) == 0:\n            print(f\"No datasets associated with model {self.model_name}.\")\n            return None\n        datasets = [Dataset.model_validate(model_dataset) for model_dataset in model_datasets]\n        return datasets\n    except Exception as e:\n        print(f\"Error getting associated datasets: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with this model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; experiments = model.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\nExperiment(id=UUID(...), experiment_name=\"another_experiment\", experiment_start_date=\"2023-11-01\", experiment_end_date=\"2023-11-30\")\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[\"Experiment\"]]: A list of associated experiments, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with this model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; experiments = model.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n        Experiment(id=UUID(...), experiment_name=\"another_experiment\", experiment_start_date=\"2023-11-01\", experiment_end_date=\"2023-11-30\")\n\n    Returns:\n        Optional[List[\"Experiment\"]]: A list of associated experiments, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        current_id = self.id\n        experiment_models = ExperimentModelsViewModel.search(model_id=current_id)\n        if not experiment_models or len(experiment_models) == 0:\n            print(f\"No experiments associated with model {self.model_name}.\")\n            return None\n        experiments = [Experiment.model_validate(experiment) for experiment in experiment_models]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.get_associated_runs","title":"<code>get_associated_runs()</code>","text":"<p>Get all runs associated with this model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; runs = model.get_associated_runs()\n&gt;&gt;&gt; for run in runs:\n...     print(run)\nModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\nModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[ModelRun]]</code> <p>Optional[List[\"ModelRun\"]]: A list of associated runs, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def get_associated_runs(self) -&gt; Optional[List[\"ModelRun\"]]:\n    \"\"\"\n    Get all runs associated with this model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; runs = model.get_associated_runs()\n        &gt;&gt;&gt; for run in runs:\n        ...     print(run)\n        ModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n        ModelRun(id=UUID(...), model_id=UUID(...), model_run_info={...})\n\n    Returns:\n        Optional[List[\"ModelRun\"]]: A list of associated runs, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.model_run import ModelRun\n        current_id = self.id\n        model_runs = ModelRunsViewModel.search(model_id=current_id)\n        if not model_runs or len(model_runs) == 0:\n            print(f\"No runs associated with model {self.model_name}.\")\n            return None\n        runs = [ModelRun.model_validate(model_run) for model_run in model_runs]\n        return runs\n    except Exception as e:\n        print(f\"Error getting associated runs: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a model by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get_by_id(UUID('...'))\nModel(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the model.</p> required <p>Returns:     Optional[\"Model\"]: The model, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Retrieve a model by its ID.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get_by_id(UUID('...'))\n        Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n    Args:\n        id (UUID | int | str): The ID of the model.\n    Returns:\n        Optional[\"Model\"]: The model, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ModelModel.get(id)\n        if not db_instance:\n            print(f\"Model with ID {id} does not exist.\")\n            return None\n        model = cls.model_validate(db_instance)\n        return model\n    except Exception as e:\n        print(f\"Error getting model by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; info = model.get_info()\n&gt;&gt;&gt; print(info)\n{'key1': 'value1', 'key2': 'value2'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The model's info, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; info = model.get_info()\n        &gt;&gt;&gt; print(info)\n        {'key1': 'value1', 'key2': 'value2'}\n\n    Returns:\n        Optional[dict]: The model's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        model = ModelModel.get(current_id)\n        if not model:\n            print(f\"Model with ID {current_id} does not exist.\")\n            return None\n        model_info = model.model_info\n        if not model_info:\n            print(\"Model info is empty.\")\n            return None\n        return model_info\n    except Exception as e:\n        print(f\"Error getting model info: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.insert_record","title":"<code>insert_record(timestamp=None, collection_date=None, model_data={}, dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_file=None, record_info={})</code>","text":"<p>Insert a single model record for this model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; success, record_ids = model.insert_record(\n...     timestamp=datetime.now(),\n...     collection_date=date.today(),\n...     model_data={\"key\": \"value\"},\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_file=\"path/to/record/file\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID('...')]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp for the record. Defaults to now.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date for the record. Defaults to today.</p> <code>None</code> <code>model_data</code> <code>dict</code> <p>The model data dictionary. Defaults to {}.</p> <code>{}</code> <code>dataset_name</code> <code>str</code> <p>The dataset name. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The experiment name. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The season name. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The record file path. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional record information dictionary. Defaults to {}.</p> <code>{}</code> <p>Returns:     Optional[ModelRecord]: The inserted model record, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def insert_record(\n    self,\n    timestamp: datetime = None,\n    collection_date: date = None,\n    model_data: dict = {},\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a single model record for this model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; success, record_ids = model.insert_record(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date.today(),\n        ...     model_data={\"key\": \"value\"},\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_file=\"path/to/record/file\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID('...')]\n\n    Args:\n        timestamp (datetime, optional): The timestamp for the record. Defaults to now.\n        collection_date (date, optional): The collection date for the record. Defaults to today.\n        model_data (dict, optional): The model data dictionary. Defaults to {}.\n        dataset_name (str, optional): The dataset name. Defaults to None.\n        experiment_name (str, optional): The experiment name. Defaults to None.\n        season_name (str, optional): The season name. Defaults to None.\n        site_name (str, optional): The site name. Defaults to None.\n        record_file (str, optional): The record file path. Defaults to None.\n        record_info (dict, optional): Additional record information dictionary. Defaults to {}.\n    Returns:\n        Optional[ModelRecord]: The inserted model record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n        if not model_data and not record_file:\n            raise ValueError(\"Either model_data or record_file must be provided.\")\n\n        timestamp = timestamp if timestamp else datetime.now()\n        collection_date = collection_date if collection_date else timestamp.date()\n        if not dataset_name:\n            dataset_name = f\"{self.model_name} Dataset {collection_date}\"\n        model_name = self.model_name\n        model_record = ModelRecord.create(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            model_name=model_name,\n            model_data=model_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_file=record_file,\n            record_info=record_info,\n            insert_on_create=False\n        )\n        success, inserted_record_ids = ModelRecord.insert([model_record])\n        if not success:\n            raise Exception(\"Failed to insert model record.\")\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting model record: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.insert_records","title":"<code>insert_records(timestamps=None, collection_date=None, model_data=[], dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_files=[], record_info=[])</code>","text":"<p>Insert multiple model records for this model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; timestamps = [datetime.now(), datetime.now()]\n&gt;&gt;&gt; model_data = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n&gt;&gt;&gt; success, record_ids = model.insert_records(\n...     timestamps=timestamps,\n...     collection_date=date.today(),\n...     model_data=model_data,\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_files=[\"path/to/record1\", \"path/to/record2\"],\n...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID('...'), UUID('...')]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamps</code> <code>List[datetime]</code> <p>List of timestamps for the records.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date for the records. Defaults to None.</p> <code>None</code> <code>model_data</code> <code>List[dict]</code> <p>List of model data dictionaries. Defaults to [].</p> <code>[]</code> <code>dataset_name</code> <code>str</code> <p>The dataset name. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The experiment name. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The season name. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name. Defaults to None.</p> <code>None</code> <code>record_files</code> <code>List[str]</code> <p>List of record file paths. Defaults to [].</p> <code>[]</code> <code>record_info</code> <code>List[dict]</code> <p>List of additional record information dictionaries. Defaults to [].</p> <code>[]</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def insert_records(\n    self,\n    timestamps: List[datetime] = None,\n    collection_date: date = None,\n    model_data: List[dict] = [],\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_files: List[str] = [],\n    record_info: List[dict] = []\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert multiple model records for this model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; timestamps = [datetime.now(), datetime.now()]\n        &gt;&gt;&gt; model_data = [{\"key1\": \"value1\"}, {\"key2\": \"value2\"}]\n        &gt;&gt;&gt; success, record_ids = model.insert_records(\n        ...     timestamps=timestamps,\n        ...     collection_date=date.today(),\n        ...     model_data=model_data,\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_files=[\"path/to/record1\", \"path/to/record2\"],\n        ...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID('...'), UUID('...')]\n\n    Args:\n        timestamps (List[datetime]): List of timestamps for the records.\n        collection_date (date, optional): The collection date for the records. Defaults to None.\n        model_data (List[dict], optional): List of model data dictionaries. Defaults to [].\n        dataset_name (str, optional): The dataset name. Defaults to None.\n        experiment_name (str, optional): The experiment name. Defaults to None.\n        season_name (str, optional): The season name. Defaults to None.\n        site_name (str, optional): The site name. Defaults to None.\n        record_files (List[str], optional): List of record file paths. Defaults to [].\n        record_info (List[dict], optional): List of additional record information dictionaries. Defaults to [].\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n        if len(timestamps) == 0:\n            raise ValueError(\"At least one timestamp must be provided.\")\n\n        if len(model_data) != len(timestamps):\n            raise ValueError(\"model_data must have the same length as timestamps.\")\n\n        if record_files and len(record_files) != len(timestamps):\n            raise ValueError(\"record_files must have the same length as timestamps.\")\n\n        collection_date = collection_date if collection_date else timestamps[0].date()\n\n        if not dataset_name:\n            dataset_name = f\"{self.model_name} Dataset {collection_date}\"\n\n        model_records = []\n        timestamps_length = len(timestamps)\n\n        for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Model \" + self.model_name):\n            model_record = ModelRecord.create(\n                timestamp = timestamps[i],\n                collection_date = collection_date,\n                model_name= self.model_name,\n                model_data = model_data[i]  if model_data else {},\n                dataset_name = dataset_name,\n                experiment_name = experiment_name,\n                season_name = season_name,\n                site_name = site_name,\n                record_file= record_files[i] if record_files else None,\n                record_info = record_info[i] if record_info else {},\n                insert_on_create=False\n            )\n            model_records.append(model_record)\n\n        success, inserted_record_ids = ModelRecord.insert(model_records)\n        if not success:\n            print(\"Failed to insert model records.\")\n            return False, []\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting model records: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the model's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; refreshed_model = model.refresh()\n&gt;&gt;&gt; print(refreshed_model)\nModel(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Model]</code> <p>Optional[\"Model\"]: The refreshed model, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Refresh the model's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; refreshed_model = model.refresh()\n        &gt;&gt;&gt; print(refreshed_model)\n        Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n    Returns:\n        Optional[\"Model\"]: The refreshed model, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ModelModel.get(self.id)\n        if not db_instance:\n            print(f\"Model with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing model: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.search","title":"<code>search(model_name=None, model_info=None, model_url=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for models based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; models = Model.search(model_name=\"example_model\")\n&gt;&gt;&gt; for model in models:\n...     print(model)\nModel(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_name</code> <code>str</code> <p>The name of the model. Defaults to None.</p> <code>None</code> <code>model_url</code> <code>str</code> <p>The URL of the model. Defaults to None.</p> <code>None</code> <code>model_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to filter by. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[\"Model\"]]: List of matching models, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    model_name: str = None,\n    model_info: dict = None,\n    model_url: str = None,\n    experiment_name: str = None\n) -&gt; Optional[List[\"Model\"]]:\n    \"\"\"\n    Search for models based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; models = Model.search(model_name=\"example_model\")\n        &gt;&gt;&gt; for model in models:\n        ...     print(model)\n        Model(model_name=example_model, model_url=http://example.com/model, id=UUID('...'))\n\n    Args:\n        model_name (str, optional): The name of the model. Defaults to None.\n        model_url (str, optional): The URL of the model. Defaults to None.\n        model_info (dict, optional): Additional information. Defaults to None.\n        experiment_name (str, optional): The name of the experiment to filter by. Defaults to None.\n    Returns:\n        Optional[List[\"Model\"]]: List of matching models, or None if not found.\n    \"\"\"\n    try:\n        if not any([model_name, model_info, model_url, experiment_name]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n        models = ExperimentModelsViewModel.search(\n            model_name=model_name,\n            model_info=model_info,\n            model_url=model_url,\n            experiment_name=experiment_name\n        )\n        if not models or len(models) == 0:\n            print(\"No models found with the provided search parameters.\")\n            return None\n        models = [cls.model_validate(model) for model in models]\n        return models\n    except Exception as e:\n        print(f\"Error searching models: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.search_records","title":"<code>search_records(collection_date=None, dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_info=None)</code>","text":"<p>Search for model records associated with this model based on search parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; records = model.search_records(\n...     collection_date=date.today(),\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nModelRecord(id=UUID(...), model_name='example_model', dataset_name='example_dataset', timestamp='2023-10-01T12:00:00', model_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>collection_date</code> <code>date</code> <p>The collection date to filter by. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The dataset name to filter by. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The experiment name to filter by. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The season name to filter by. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The site name to filter by. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional record information to filter by. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[ModelRecord]]: List of matching model records, or None if not found.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def search_records(\n    self,\n    collection_date: date = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_info: dict = None\n) -&gt; List[ModelRecord]:\n    \"\"\"\n    Search for model records associated with this model based on search parameters.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; records = model.search_records(\n        ...     collection_date=date.today(),\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ModelRecord(id=UUID(...), model_name='example_model', dataset_name='example_dataset', timestamp='2023-10-01T12:00:00', model_data={...}, experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        collection_date (date, optional): The collection date to filter by. Defaults to None.\n        dataset_name (str, optional): The dataset name to filter by. Defaults to None.\n        experiment_name (str, optional): The experiment name to filter by. Defaults to None.\n        season_name (str, optional): The season name to filter by. Defaults to None.\n        site_name (str, optional): The site name to filter by. Defaults to None.\n        record_info (dict, optional): Additional record information to filter by. Defaults to None.\n    Returns:\n        Optional[List[ModelRecord]]: List of matching model records, or None if not found.\n    \"\"\"\n    try:\n        record_info = record_info if record_info else {}\n        record_info = {k: v for k, v in record_info.items() if v is not None}\n\n        records = ModelRecord.search(\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            model_name=self.model_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_info=record_info\n        )\n        return records\n    except Exception as e:\n        print(f\"Error searching model records: {e}\")\n        return []\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.set_info","title":"<code>set_info(model_info)</code>","text":"<p>Set the additional information of the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; updated_model = model.set_info({\"key1\": \"new_value1\", \"key2\": \"new_value2\"})\n&gt;&gt;&gt; print(updated_model.get_info())\n{'key1': 'new_value1', 'key2': 'new_value2'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>model_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[\"Model\"]: The updated model, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def set_info(self, model_info: dict) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Set the additional information of the model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; updated_model = model.set_info({\"key1\": \"new_value1\", \"key2\": \"new_value2\"})\n        &gt;&gt;&gt; print(updated_model.get_info())\n        {'key1': 'new_value1', 'key2': 'new_value2'}\n\n    Args:\n        model_info (dict): The new information to set.\n    Returns:\n        Optional[\"Model\"]: The updated model, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        model = ModelModel.get(current_id)\n        if not model:\n            print(f\"Model with ID {current_id} does not exist.\")\n            return None\n        model = ModelModel.update(\n            model,\n            model_info=model_info\n        )\n        model = self.model_validate(model)\n        self.refresh()\n        return model\n    except Exception as e:\n        print(f\"Error setting model info: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate this model from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; experiment = model.unassociate_experiment(\"example_experiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[\"Experiment\"]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this model from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; experiment = model.unassociate_experiment(\"example_experiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(id=UUID(...), experiment_name=\"example_experiment\", experiment_start_date=\"2023-10-01\", experiment_end_date=\"2023-10-31\")\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[\"Experiment\"]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentModelModel.get_by_parameters(\n            experiment_id=experiment.id,\n            model_id=self.id\n        )\n        if not existing_association:\n            print(f\"Model {self.model_name} is not associated with experiment {experiment_name}.\")\n            return None\n        is_deleted = ExperimentModelModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to disassociate model {self.model_name} from experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error disassociating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/models/#gemini.api.model.Model.update","title":"<code>update(model_name=None, model_url=None, model_info=None)</code>","text":"<p>Update the details of the model.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model = Model.get(\"example_model\")\n&gt;&gt;&gt; updated_model = model.update(model_name=\"new_example_model\")\n&gt;&gt;&gt; print(updated_model)\nModel(model_name=new_example_model, model_url=http://example.com/model, id=UUID('...'))\n</code></pre> <p>Args:     model_name (str, optional): The new name. Defaults to None.     model_url (str, optional): The new URL. Defaults to None.     model_info (dict, optional): The new information. Defaults to None. Returns:     Optional[\"Model\"]: The updated model, or None if an error occurred.</p> Source code in <code>gemini/api/model.py</code> <pre><code>def update(\n    self,\n    model_name: str = None,\n    model_url: str = None,\n    model_info: dict = None\n) -&gt; Optional[\"Model\"]:\n    \"\"\"\n    Update the details of the model.\n\n    Examples:\n        &gt;&gt;&gt; model = Model.get(\"example_model\")\n        &gt;&gt;&gt; updated_model = model.update(model_name=\"new_example_model\")\n        &gt;&gt;&gt; print(updated_model)\n        Model(model_name=new_example_model, model_url=http://example.com/model, id=UUID('...'))\n    Args:\n        model_name (str, optional): The new name. Defaults to None.\n        model_url (str, optional): The new URL. Defaults to None.\n        model_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[\"Model\"]: The updated model, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([model_name, model_url, model_info]):\n            print(\"At least one update parameter must be provided.\")\n            return None\n        current_id = self.id\n        model = ModelModel.get(current_id)\n        if not model:\n            print(f\"Model with ID {current_id} does not exist.\")\n            return None\n        model = ModelModel.update(\n            model,\n            model_name=model_name,\n            model_url=model_url,\n            model_info=model_info\n        )\n        model = self.model_validate(model)\n        self.refresh()\n        return model\n    except Exception as e:\n        print(f\"Error updating model: {e}\")\n        return None\n</code></pre>"},{"location":"api/overview/","title":"Overview","text":"<p>The GEMINI Python API offers a robust and programmatic interface for managing and interacting with GEMINI data directly from Python interpreters, scripts, and notebooks (like Jupyter Notebooks). It comprises several classes with functions for accessing data.</p> <ul> <li>Cultivars</li> <li>Data Formats</li> <li>Data Types</li> <li>Datasets</li> <li>Dataset Records</li> <li>Experiments</li> <li>Models</li> <li>Model Records</li> <li>Plants</li> <li>Plots</li> <li>Procedures</li> <li>Procedure Records</li> <li>Scripts</li> <li>Script Records</li> <li>Seasons</li> <li>Sensor Platforms</li> <li>Sensor Types</li> <li>Sensors</li> <li>Sites</li> <li>Trait Levels</li> <li>Traits</li> <li>Trait Records</li> </ul>"},{"location":"api/plants/","title":"Plants API","text":""},{"location":"api/plants/#description","title":"Description","text":"<p>A plant represents a single plant within a Plot, associated with a specific Cultivar. Each plant is uniquely identified by its <code>plant_number</code> within its plot. A plant can only belong to one plot.</p>"},{"location":"api/plants/#module","title":"Module","text":"<p>This module defines the Plant class, which represents a plant entity, including its metadata, associations to cultivars and plots, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting plants, as well as methods for checking existence, searching, and managing associations with cultivars and plots.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a plant with the given parameters exists.</li> <li><code>create</code>: Create a new plant.</li> <li><code>get</code>: Retrieve a plant by its parameters.</li> <li><code>get_by_id</code>: Retrieve a plant by its ID.</li> <li><code>get_all</code>: Retrieve all plants.</li> <li><code>search</code>: Search for plants based on various criteria.</li> <li><code>update</code>: Update the details of a plant.</li> <li><code>delete</code>: Delete a plant.</li> <li><code>refresh</code>: Refresh the plant's data from the database.</li> <li><code>get_info</code>: Get the additional information of the plant.</li> <li><code>set_info</code>: Set the additional information of the plant.</li> <li>Association methods for cultivars and plots.</li> </ul>"},{"location":"api/plants/#gemini.api.plant.Plant","title":"<code>Plant</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a plant entity, including its metadata, associations to cultivars and plots, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the plant.</p> <code>plant_number</code> <code>int</code> <p>The number of the plant within the plot.</p> <code>plant_info</code> <code>Optional[dict]</code> <p>Additional information about the plant.</p> <code>plot_id</code> <code>Optional[UUID]</code> <p>The ID of the associated plot.</p> <code>cultivar_id</code> <code>Optional[UUID]</code> <p>The ID of the associated cultivar.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>class Plant(APIBase):\n    \"\"\"\n    Represents a plant entity, including its metadata, associations to cultivars and plots, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the plant.\n        plant_number (int): The number of the plant within the plot.\n        plant_info (Optional[dict]): Additional information about the plant.\n        plot_id (Optional[UUID]): The ID of the associated plot.\n        cultivar_id (Optional[UUID]): The ID of the associated cultivar.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"plant_id\"))\n\n    plant_number: int\n    plant_info: Optional[dict] = None\n    plot_id: Optional[UUID] = None\n    cultivar_id: Optional[UUID] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Plant object.\"\"\"\n        return f\"Plant(plot_id={self.plot_id}, plant_number={self.plant_number}, plant_info={self.plant_info}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Plant object.\"\"\"\n        return f\"Plant(plot_id={self.plot_id}, plant_number={self.plant_number}, plant_info={self.plant_info}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        plant_number: int,\n        cultivar_accession: str = None,\n        cultivar_population: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n    ) -&gt; bool:\n        \"\"\"\n        Check if a plant with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; Plant.exists(plant_number=1)\n            True\n            &gt;&gt;&gt; Plant.exists(plant_number=1, cultivar_accession=\"AC123\")\n            True\n            &gt;&gt;&gt; Plant.exists(plant_number=1, plot_number=2, plot_row_number=3, plot_column_number=4)\n            False\n\n        Args:\n            plant_number (int): The number of the plant within the plot.\n            cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n        Returns:\n            bool: True if the plant exists, False otherwise.\n        \"\"\"\n        try:\n            exists = PlantViewModel.exists(\n                plant_number=plant_number,\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of plant: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        plant_number: int,\n        plant_info: dict = None,\n        cultivar_accession: str = None,\n        cultivar_population: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; \"Plant\":\n        \"\"\"\n        Create a new plant and associate it with cultivar and plot if provided.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.create(plant_number=1, plant_info={\"height\": 100})\n            &gt;&gt;&gt; plant\n            Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n        Args:\n            plant_number (int): The number of the plant within the plot.\n            plant_info (dict, optional): Additional information about the plant. Defaults to None.\n            cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            Plant: The created plant instance, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = PlantModel.get_or_create(\n                plant_number=plant_number,\n                plant_info=plant_info\n            )\n            plant = cls.model_validate(db_instance)\n            if all([cultivar_accession, cultivar_population]):\n                plant.associate_cultivar(\n                    cultivar_accession=cultivar_accession,\n                    cultivar_population=cultivar_population\n                )\n            if all([plot_number, plot_row_number, plot_column_number, experiment_name, season_name, site_name]):\n                plant.associate_plot(\n                    plot_number=plot_number,\n                    plot_row_number=plot_row_number,\n                    plot_column_number=plot_column_number,\n                    experiment_name=experiment_name,\n                    season_name=season_name,\n                    site_name=site_name\n                )\n            return plant\n        except Exception as e:\n            print(f\"Error creating plant: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        plant_number: int,\n        cultivar_accession: str = None,\n        cultivar_population: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None\n    ) -&gt; Optional[\"Plant\"]:\n        \"\"\"\n        Retrieve a plant by its parameters.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get(plant_number=1)\n            &gt;&gt;&gt; plant\n            Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n        Args:\n            plant_number (int): The number of the plant within the plot.\n            cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n        Returns:\n            Optional[Plant]: The plant instance, or None if not found.\n        \"\"\"\n        try:\n            db_instance = PlantViewModel.get_by_parameters(\n                plant_number=plant_number,\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number\n            )\n            if not db_instance:\n                print(f\"Plant with number {plant_number} not found.\")\n                return None\n            plant = cls.model_validate(db_instance) if db_instance else None\n            return plant\n        except Exception as e:\n            print(f\"Error getting plant: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Plant\"]:\n        \"\"\"\n        Retrieve a plant by its ID.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; plant\n            Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the plant.\n        Returns:\n            Optional[Plant]: The plant instance, or None if not found.\n        \"\"\"\n        try:\n            db_instance = PlantModel.get(id)\n            if not db_instance:\n                print(f\"Plant with ID {id} does not exist.\")\n                return None\n            plant = cls.model_validate(db_instance) if db_instance else None\n            return plant\n        except Exception as e:\n            print(f\"Error getting plant by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Plant\"]]:\n        \"\"\"\n        Retrieve all plants.\n\n        Examples:\n            &gt;&gt;&gt; plants = Plant.get_all()\n            &gt;&gt;&gt; plants\n            [Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...)), ...]\n\n        Returns:\n            Optional[List[Plant]]: A list of all plants, or None if not found.\n        \"\"\"\n        try:\n            plants = PlantModel.all()\n            if not plants or len(plants) == 0:\n                print(\"No plants found.\")\n                return None\n            plants = [cls.model_validate(plant) for plant in plants]\n            return plants\n        except Exception as e:\n            print(f\"Error getting all plants: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls, \n        plant_number: int = None,\n        cultivar_accession: str = None,\n        cultivar_population: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None\n    ) -&gt; Optional[List[\"Plant\"]]:\n        \"\"\"\n        Search for plants based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; plants = Plant.search(plant_number=1)\n            &gt;&gt;&gt; plants\n            [Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...)), ...]\n\n        Args:\n            plant_number (int, optional): The number of the plant within the plot. Defaults to None.\n            cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n        Returns:\n            Optional[List[Plant]]: A list of matching plants, or None if not found.\n        \"\"\"\n        try:\n            if not any([plant_number, cultivar_accession, cultivar_population, experiment_name, season_name, site_name, plot_number, plot_row_number, plot_column_number]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n            plants = PlantViewModel.search(\n                plant_number=plant_number,\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number\n            )\n            if not plants or len(plants) == 0:\n                print(\"No plants found with the provided search parameters.\")\n                return None\n            plants = [cls.model_validate(plant) for plant in plants]\n            return plants\n        except Exception as e:\n            print(f\"Error searching for plants: {e}\")\n            return None\n\n    def update(\n        self,\n        plant_number: int = None,\n        plant_info: dict = None\n    ) -&gt; Optional[\"Plant\"]:\n        \"\"\"\n        Update the details of the plant.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_plant = plant.update(plant_number=2, plant_info={\"height\": 150})\n            &gt;&gt;&gt; updated_plant\n            Plant(plot_id=UUID(...), plant_number=2, plant_info={'height': 150}, id=UUID(...))\n\n        Args:\n            plant_number (int, optional): The new plant number. Defaults to None.\n            plant_info (dict, optional): The new plant information. Defaults to None.\n        Returns:\n            Optional[Plant]: The updated plant instance, or None if an error occurred.\n        \"\"\"\n        try:\n            if not plant_info and not plant_number:\n                print(\"At least one parameter must be provided for update.\")\n                return None\n            current_id = self.id\n            plant = PlantModel.get(current_id)\n            if not plant:\n                print(f\"Plant with ID {current_id} does not exist.\")\n                return None\n            plant = PlantModel.update(\n                plant,\n                plant_number=plant_number,\n                plant_info=plant_info\n            )\n            plant = self.model_validate(plant)\n            self.refresh()  # Update the current instance\n            return plant\n        except Exception as e:\n            print(f\"Error updating plant: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the plant.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; deleted = plant.delete()\n            &gt;&gt;&gt; deleted\n            True\n\n        Returns:\n            bool: True if the plant was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            plant = PlantModel.get(current_id)\n            if not plant:\n                print(f\"Plant with ID {current_id} does not exist.\")\n                return False\n            PlantModel.delete(plant)\n            return True\n        except Exception as e:\n            print(f\"Error deleting plant: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Plant\"]:\n        \"\"\"\n        Refresh the plant's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_plant = plant.refresh()\n            &gt;&gt;&gt; refreshed_plant\n            Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n        Returns:\n            Optional[Plant]: The refreshed plant instance, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = PlantModel.get(self.id)\n            if not db_instance:\n                print(f\"Plant with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing plant: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the plant.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; plant_info = plant.get_info()\n            &gt;&gt;&gt; plant_info\n            {'height': 100, 'width': 50}\n\n        Returns:\n            Optional[dict]: The plant's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            plant = PlantModel.get(current_id)\n            if not plant:\n                print(f\"Plant with ID {current_id} does not exist.\")\n                return None\n            plant_info = plant.plant_info\n            if not plant_info:\n                print(\"Plant info is empty.\")\n                return None\n            return plant_info\n        except Exception as e:\n            print(f\"Error getting plant info: {e}\")\n            return None\n\n    def set_info(self, plant_info: dict) -&gt; Optional[\"Plant\"]:\n        \"\"\"\n        Set the additional information of the plant.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_plant = plant.set_info({\"height\": 150, \"width\": 75})\n            &gt;&gt;&gt; updated_plant.get_info()\n            {'height': 150, 'width': 75}\n\n        Args:\n            plant_info (dict): The new information to set.\n        Returns:\n            Optional[Plant]: The updated plant instance, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            plant = PlantModel.get(current_id)\n            if not plant:\n                print(f\"Plant with ID {current_id} does not exist.\")\n                return None\n            plant = PlantModel.update(\n                plant,\n                plant_info=plant_info\n            )\n            plant = self.model_validate(plant)\n            self.refresh()  # Update the current instance\n            return plant\n        except Exception as e:\n            print(f\"Error setting plant info: {e}\")\n            return None\n\n    def get_associated_cultivar(self) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Get the cultivar associated with this plant.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; cultivar = plant.get_associated_cultivar()\n            &gt;&gt;&gt; cultivar\n            Cultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n\n        Returns:\n            Optional[Cultivar]: The associated cultivar, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            if not self.cultivar_id:\n                print(\"No cultivar assigned to this plant.\")\n                return None\n            cultivar = Cultivar.get_by_id(self.cultivar_id)\n            if not cultivar:\n                print(f\"Cultivar with ID {self.cultivar_id} does not exist.\")\n                return None\n            return cultivar\n        except Exception as e:\n            print(f\"Error getting cultivar: {e}\")\n            return None\n\n    def associate_cultivar(\n        self,\n        cultivar_accession: str,\n        cultivar_population: str\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Associate this plant with a cultivar.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; cultivar = plant.associate_cultivar(cultivar_accession=\"AC123\", cultivar_population=\"Population1\")\n            &gt;&gt;&gt; cultivar\n            Cultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n\n        Args:\n            cultivar_accession (str): The accession of the cultivar.\n            cultivar_population (str): The population of the cultivar.\n        Returns:\n            Optional[Cultivar]: The associated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population\n            )\n            if not cultivar:\n                print(f\"Cultivar with accession {cultivar_accession} and population {cultivar_population} not found.\")\n                return None\n            existing_association = PlantModel.exists(\n                id=self.id,\n                cultivar_id=cultivar.id\n            )\n            if existing_association:\n                print(f\"Plant with ID {self.id} already has cultivar {cultivar.id} assigned.\")\n                return None\n            db_plant = PlantModel.get(self.id)\n            db_plant = PlantModel.update_parameter(\n                db_plant,\n                \"cultivar_id\",\n                cultivar.id\n            )\n            print(f\"Assigned cultivar {cultivar.id} to plant {self.id}.\")\n            self.refresh()\n            return cultivar\n        except Exception as e:\n            print(f\"Error assigning cultivar: {e}\")\n            return None\n\n    def belongs_to_cultivar(\n        self,\n        cultivar_accession: str = None,\n        cultivar_population: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if this plant is associated with a specific cultivar.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = plant.belongs_to_cultivar(cultivar_accession=\"AC123\", cultivar_population=\"Population1\")\n            &gt;&gt;&gt; is_associated\n            True\n\n        Args:\n            cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population\n            )\n            if not cultivar:\n                print(\"Cultivar not found.\")\n                return False\n            association_exists = PlantModel.exists(\n                id=self.id,\n                cultivar_id=cultivar.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking cultivar assignment: {e}\")\n            return False\n\n    def unassociate_cultivar(self) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Unassociate this plant from its cultivar.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; cultivar = plant.unassociate_cultivar()\n            &gt;&gt;&gt; cultivar\n            Cultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n\n        Returns:\n            Optional[Cultivar]: The unassociated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            if not self.cultivar_id:\n                print(\"No cultivar assigned to this plant.\")\n                return False\n            cultivar = Cultivar.get_by_id(self.cultivar_id)\n            db_plant = PlantModel.get(self.id)\n            db_plant = PlantModel.update_parameter(\n                db_plant,\n                \"cultivar_id\",\n                None\n            )\n            self.refresh()  # Update the current instance\n            return cultivar\n        except Exception as e:\n            print(f\"Error unassigning cultivar: {e}\")\n            return False\n\n    def get_associated_plot(self) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Get the plot associated with this plant.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; plot = plant.get_associated_plot()\n            &gt;&gt;&gt; plot\n            Plot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Returns:\n            Optional[Plot]: The associated plot, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            if not self.plot_id:\n                print(\"No plot assigned to this plant.\")\n                return None\n            plot = Plot.get_by_id(self.plot_id)\n            if not plot:\n                print(f\"Plot with ID {self.plot_id} does not exist.\")\n                return None\n            return plot\n        except Exception as e:\n            print(f\"Error getting plot: {e}\")\n            return None\n\n    def associate_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Associate this plant with a plot.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; plot = plant.associate_plot(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment1\", season_name=\"Season1\", site_name=\"Site1\")\n            &gt;&gt;&gt; plot\n            Plot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The plot row number.\n            plot_column_number (int): The plot column number.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            Optional[Plot]: The associated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(\"Plot not found.\")\n                return None\n            existing_association = PlantModel.get_by_parameters(\n                id=self.id,\n                plot_id=plot.id\n            )\n            if existing_association:\n                print(f\"Plant with ID {self.id} already has plot {plot.id} assigned.\")\n                return None\n            db_plant = PlantModel.get(self.id)\n            db_plant = PlantModel.update_parameter(\n                db_plant,\n                \"plot_id\",\n                plot.id\n            )\n            self.refresh()  # Update the current instance\n            return plot\n        except Exception as e:\n            print(f\"Error assigning plot: {e}\")\n            return None\n\n\n    def belongs_to_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if this plant is associated with a specific plot.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = plant.belongs_to_plot(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment1\", season_name=\"Season1\", site_name=\"Site1\")\n            &gt;&gt;&gt; is_associated\n            True\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The plot row number.\n            plot_column_number (int): The plot column number.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(\"Plot not found.\")\n                return False\n            association_exists = PlantModel.exists(\n                id=self.id,\n                plot_id=plot.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking plot assignment: {e}\")\n            return False\n\n    def unassociate_plot(self) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Unassociate this plant from its plot.\n\n        Examples:\n            &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n            &gt;&gt;&gt; plot = plant.unassociate_plot()\n            &gt;&gt;&gt; plot\n            Plot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Returns:\n            Optional[Plot]: The unassociated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            if not self.plot_id:\n                print(\"No plot assigned to this plant.\")\n                return None\n            # Assuming we want to unassign the plot by setting plot_id to None\n            plot = Plot.get_by_id(self.plot_id)\n            db_plant = PlantModel.get(self.id)\n            db_plant = PlantModel.update_parameter(\n                db_plant,\n                \"plot_id\",\n                None\n            )\n            self.refresh()  # Update the current instance\n            return plot\n        except Exception as e:\n            print(f\"Error unassigning plot: {e}\")\n            return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Plant object.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Plant object.\"\"\"\n    return f\"Plant(plot_id={self.plot_id}, plant_number={self.plant_number}, plant_info={self.plant_info}, id={self.id})\"\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Plant object.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Plant object.\"\"\"\n    return f\"Plant(plot_id={self.plot_id}, plant_number={self.plant_number}, plant_info={self.plant_info}, id={self.id})\"\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.associate_cultivar","title":"<code>associate_cultivar(cultivar_accession, cultivar_population)</code>","text":"<p>Associate this plant with a cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; cultivar = plant.associate_cultivar(cultivar_accession=\"AC123\", cultivar_population=\"Population1\")\n&gt;&gt;&gt; cultivar\nCultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar.</p> required <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <p>Returns:     Optional[Cultivar]: The associated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def associate_cultivar(\n    self,\n    cultivar_accession: str,\n    cultivar_population: str\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Associate this plant with a cultivar.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; cultivar = plant.associate_cultivar(cultivar_accession=\"AC123\", cultivar_population=\"Population1\")\n        &gt;&gt;&gt; cultivar\n        Cultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n\n    Args:\n        cultivar_accession (str): The accession of the cultivar.\n        cultivar_population (str): The population of the cultivar.\n    Returns:\n        Optional[Cultivar]: The associated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population\n        )\n        if not cultivar:\n            print(f\"Cultivar with accession {cultivar_accession} and population {cultivar_population} not found.\")\n            return None\n        existing_association = PlantModel.exists(\n            id=self.id,\n            cultivar_id=cultivar.id\n        )\n        if existing_association:\n            print(f\"Plant with ID {self.id} already has cultivar {cultivar.id} assigned.\")\n            return None\n        db_plant = PlantModel.get(self.id)\n        db_plant = PlantModel.update_parameter(\n            db_plant,\n            \"cultivar_id\",\n            cultivar.id\n        )\n        print(f\"Assigned cultivar {cultivar.id} to plant {self.id}.\")\n        self.refresh()\n        return cultivar\n    except Exception as e:\n        print(f\"Error assigning cultivar: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.associate_plot","title":"<code>associate_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, site_name=None)</code>","text":"<p>Associate this plant with a plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; plot = plant.associate_plot(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment1\", season_name=\"Season1\", site_name=\"Site1\")\n&gt;&gt;&gt; plot\nPlot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The plot row number.</p> required <code>plot_column_number</code> <code>int</code> <p>The plot column number.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plot]: The associated plot, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def associate_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Associate this plant with a plot.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; plot = plant.associate_plot(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment1\", season_name=\"Season1\", site_name=\"Site1\")\n        &gt;&gt;&gt; plot\n        Plot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The plot row number.\n        plot_column_number (int): The plot column number.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        Optional[Plot]: The associated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(\"Plot not found.\")\n            return None\n        existing_association = PlantModel.get_by_parameters(\n            id=self.id,\n            plot_id=plot.id\n        )\n        if existing_association:\n            print(f\"Plant with ID {self.id} already has plot {plot.id} assigned.\")\n            return None\n        db_plant = PlantModel.get(self.id)\n        db_plant = PlantModel.update_parameter(\n            db_plant,\n            \"plot_id\",\n            plot.id\n        )\n        self.refresh()  # Update the current instance\n        return plot\n    except Exception as e:\n        print(f\"Error assigning plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.belongs_to_cultivar","title":"<code>belongs_to_cultivar(cultivar_accession=None, cultivar_population=None)</code>","text":"<p>Check if this plant is associated with a specific cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = plant.belongs_to_cultivar(cultivar_accession=\"AC123\", cultivar_population=\"Population1\")\n&gt;&gt;&gt; is_associated\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def belongs_to_cultivar(\n    self,\n    cultivar_accession: str = None,\n    cultivar_population: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if this plant is associated with a specific cultivar.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = plant.belongs_to_cultivar(cultivar_accession=\"AC123\", cultivar_population=\"Population1\")\n        &gt;&gt;&gt; is_associated\n        True\n\n    Args:\n        cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population\n        )\n        if not cultivar:\n            print(\"Cultivar not found.\")\n            return False\n        association_exists = PlantModel.exists(\n            id=self.id,\n            cultivar_id=cultivar.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking cultivar assignment: {e}\")\n        return False\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.belongs_to_plot","title":"<code>belongs_to_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, site_name=None)</code>","text":"<p>Check if this plant is associated with a specific plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = plant.belongs_to_plot(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment1\", season_name=\"Season1\", site_name=\"Site1\")\n&gt;&gt;&gt; is_associated\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The plot row number.</p> required <code>plot_column_number</code> <code>int</code> <p>The plot column number.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def belongs_to_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if this plant is associated with a specific plot.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = plant.belongs_to_plot(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment1\", season_name=\"Season1\", site_name=\"Site1\")\n        &gt;&gt;&gt; is_associated\n        True\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The plot row number.\n        plot_column_number (int): The plot column number.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(\"Plot not found.\")\n            return False\n        association_exists = PlantModel.exists(\n            id=self.id,\n            plot_id=plot.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking plot assignment: {e}\")\n        return False\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.create","title":"<code>create(plant_number, plant_info=None, cultivar_accession=None, cultivar_population=None, plot_number=None, plot_row_number=None, plot_column_number=None, experiment_name=None, season_name=None, site_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new plant and associate it with cultivar and plot if provided.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.create(plant_number=1, plant_info={\"height\": 100})\n&gt;&gt;&gt; plant\nPlant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plant_number</code> <code>int</code> <p>The number of the plant within the plot.</p> required <code>plant_info</code> <code>dict</code> <p>Additional information about the plant. Defaults to None.</p> <code>None</code> <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     Plant: The created plant instance, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    plant_number: int,\n    plant_info: dict = None,\n    cultivar_accession: str = None,\n    cultivar_population: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; \"Plant\":\n    \"\"\"\n    Create a new plant and associate it with cultivar and plot if provided.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.create(plant_number=1, plant_info={\"height\": 100})\n        &gt;&gt;&gt; plant\n        Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n    Args:\n        plant_number (int): The number of the plant within the plot.\n        plant_info (dict, optional): Additional information about the plant. Defaults to None.\n        cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        Plant: The created plant instance, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = PlantModel.get_or_create(\n            plant_number=plant_number,\n            plant_info=plant_info\n        )\n        plant = cls.model_validate(db_instance)\n        if all([cultivar_accession, cultivar_population]):\n            plant.associate_cultivar(\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population\n            )\n        if all([plot_number, plot_row_number, plot_column_number, experiment_name, season_name, site_name]):\n            plant.associate_plot(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n        return plant\n    except Exception as e:\n        print(f\"Error creating plant: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.delete","title":"<code>delete()</code>","text":"<p>Delete the plant.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; deleted = plant.delete()\n&gt;&gt;&gt; deleted\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the plant was deleted, False otherwise.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the plant.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; deleted = plant.delete()\n        &gt;&gt;&gt; deleted\n        True\n\n    Returns:\n        bool: True if the plant was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        plant = PlantModel.get(current_id)\n        if not plant:\n            print(f\"Plant with ID {current_id} does not exist.\")\n            return False\n        PlantModel.delete(plant)\n        return True\n    except Exception as e:\n        print(f\"Error deleting plant: {e}\")\n        return False\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.exists","title":"<code>exists(plant_number, cultivar_accession=None, cultivar_population=None, experiment_name=None, season_name=None, site_name=None, plot_number=None, plot_row_number=None, plot_column_number=None)</code>  <code>classmethod</code>","text":"<p>Check if a plant with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Plant.exists(plant_number=1)\nTrue\n&gt;&gt;&gt; Plant.exists(plant_number=1, cultivar_accession=\"AC123\")\nTrue\n&gt;&gt;&gt; Plant.exists(plant_number=1, plot_number=2, plot_row_number=3, plot_column_number=4)\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plant_number</code> <code>int</code> <p>The number of the plant within the plot.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if the plant exists, False otherwise.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    plant_number: int,\n    cultivar_accession: str = None,\n    cultivar_population: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n) -&gt; bool:\n    \"\"\"\n    Check if a plant with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; Plant.exists(plant_number=1)\n        True\n        &gt;&gt;&gt; Plant.exists(plant_number=1, cultivar_accession=\"AC123\")\n        True\n        &gt;&gt;&gt; Plant.exists(plant_number=1, plot_number=2, plot_row_number=3, plot_column_number=4)\n        False\n\n    Args:\n        plant_number (int): The number of the plant within the plot.\n        cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n    Returns:\n        bool: True if the plant exists, False otherwise.\n    \"\"\"\n    try:\n        exists = PlantViewModel.exists(\n            plant_number=plant_number,\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of plant: {e}\")\n        return False\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.get","title":"<code>get(plant_number, cultivar_accession=None, cultivar_population=None, experiment_name=None, season_name=None, site_name=None, plot_number=None, plot_row_number=None, plot_column_number=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a plant by its parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get(plant_number=1)\n&gt;&gt;&gt; plant\nPlant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plant_number</code> <code>int</code> <p>The number of the plant within the plot.</p> required <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plant]: The plant instance, or None if not found.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    plant_number: int,\n    cultivar_accession: str = None,\n    cultivar_population: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None\n) -&gt; Optional[\"Plant\"]:\n    \"\"\"\n    Retrieve a plant by its parameters.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get(plant_number=1)\n        &gt;&gt;&gt; plant\n        Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n    Args:\n        plant_number (int): The number of the plant within the plot.\n        cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n    Returns:\n        Optional[Plant]: The plant instance, or None if not found.\n    \"\"\"\n    try:\n        db_instance = PlantViewModel.get_by_parameters(\n            plant_number=plant_number,\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number\n        )\n        if not db_instance:\n            print(f\"Plant with number {plant_number} not found.\")\n            return None\n        plant = cls.model_validate(db_instance) if db_instance else None\n        return plant\n    except Exception as e:\n        print(f\"Error getting plant: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all plants.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plants = Plant.get_all()\n&gt;&gt;&gt; plants\n[Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...)), ...]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Plant]]</code> <p>Optional[List[Plant]]: A list of all plants, or None if not found.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Plant\"]]:\n    \"\"\"\n    Retrieve all plants.\n\n    Examples:\n        &gt;&gt;&gt; plants = Plant.get_all()\n        &gt;&gt;&gt; plants\n        [Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...)), ...]\n\n    Returns:\n        Optional[List[Plant]]: A list of all plants, or None if not found.\n    \"\"\"\n    try:\n        plants = PlantModel.all()\n        if not plants or len(plants) == 0:\n            print(\"No plants found.\")\n            return None\n        plants = [cls.model_validate(plant) for plant in plants]\n        return plants\n    except Exception as e:\n        print(f\"Error getting all plants: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.get_associated_cultivar","title":"<code>get_associated_cultivar()</code>","text":"<p>Get the cultivar associated with this plant.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; cultivar = plant.get_associated_cultivar()\n&gt;&gt;&gt; cultivar\nCultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[Cultivar]: The associated cultivar, or None if not found.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def get_associated_cultivar(self) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Get the cultivar associated with this plant.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; cultivar = plant.get_associated_cultivar()\n        &gt;&gt;&gt; cultivar\n        Cultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n\n    Returns:\n        Optional[Cultivar]: The associated cultivar, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        if not self.cultivar_id:\n            print(\"No cultivar assigned to this plant.\")\n            return None\n        cultivar = Cultivar.get_by_id(self.cultivar_id)\n        if not cultivar:\n            print(f\"Cultivar with ID {self.cultivar_id} does not exist.\")\n            return None\n        return cultivar\n    except Exception as e:\n        print(f\"Error getting cultivar: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.get_associated_plot","title":"<code>get_associated_plot()</code>","text":"<p>Get the plot associated with this plant.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; plot = plant.get_associated_plot()\n&gt;&gt;&gt; plot\nPlot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Plot]</code> <p>Optional[Plot]: The associated plot, or None if not found.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def get_associated_plot(self) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Get the plot associated with this plant.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; plot = plant.get_associated_plot()\n        &gt;&gt;&gt; plot\n        Plot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Returns:\n        Optional[Plot]: The associated plot, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        if not self.plot_id:\n            print(\"No plot assigned to this plant.\")\n            return None\n        plot = Plot.get_by_id(self.plot_id)\n        if not plot:\n            print(f\"Plot with ID {self.plot_id} does not exist.\")\n            return None\n        return plot\n    except Exception as e:\n        print(f\"Error getting plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a plant by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; plant\nPlant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the plant.</p> required <p>Returns:     Optional[Plant]: The plant instance, or None if not found.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Plant\"]:\n    \"\"\"\n    Retrieve a plant by its ID.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; plant\n        Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the plant.\n    Returns:\n        Optional[Plant]: The plant instance, or None if not found.\n    \"\"\"\n    try:\n        db_instance = PlantModel.get(id)\n        if not db_instance:\n            print(f\"Plant with ID {id} does not exist.\")\n            return None\n        plant = cls.model_validate(db_instance) if db_instance else None\n        return plant\n    except Exception as e:\n        print(f\"Error getting plant by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the plant.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; plant_info = plant.get_info()\n&gt;&gt;&gt; plant_info\n{'height': 100, 'width': 50}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The plant's info, or None if not found.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the plant.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; plant_info = plant.get_info()\n        &gt;&gt;&gt; plant_info\n        {'height': 100, 'width': 50}\n\n    Returns:\n        Optional[dict]: The plant's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        plant = PlantModel.get(current_id)\n        if not plant:\n            print(f\"Plant with ID {current_id} does not exist.\")\n            return None\n        plant_info = plant.plant_info\n        if not plant_info:\n            print(\"Plant info is empty.\")\n            return None\n        return plant_info\n    except Exception as e:\n        print(f\"Error getting plant info: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the plant's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_plant = plant.refresh()\n&gt;&gt;&gt; refreshed_plant\nPlant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Plant]</code> <p>Optional[Plant]: The refreshed plant instance, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Plant\"]:\n    \"\"\"\n    Refresh the plant's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_plant = plant.refresh()\n        &gt;&gt;&gt; refreshed_plant\n        Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...))\n\n    Returns:\n        Optional[Plant]: The refreshed plant instance, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = PlantModel.get(self.id)\n        if not db_instance:\n            print(f\"Plant with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing plant: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.search","title":"<code>search(plant_number=None, cultivar_accession=None, cultivar_population=None, experiment_name=None, season_name=None, site_name=None, plot_number=None, plot_row_number=None, plot_column_number=None)</code>  <code>classmethod</code>","text":"<p>Search for plants based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plants = Plant.search(plant_number=1)\n&gt;&gt;&gt; plants\n[Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...)), ...]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plant_number</code> <code>int</code> <p>The number of the plant within the plot. Defaults to None.</p> <code>None</code> <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Plant]]: A list of matching plants, or None if not found.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>@classmethod\ndef search(\n    cls, \n    plant_number: int = None,\n    cultivar_accession: str = None,\n    cultivar_population: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None\n) -&gt; Optional[List[\"Plant\"]]:\n    \"\"\"\n    Search for plants based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; plants = Plant.search(plant_number=1)\n        &gt;&gt;&gt; plants\n        [Plant(plot_id=UUID(...), plant_number=1, plant_info={'height': 100}, id=UUID(...)), ...]\n\n    Args:\n        plant_number (int, optional): The number of the plant within the plot. Defaults to None.\n        cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n    Returns:\n        Optional[List[Plant]]: A list of matching plants, or None if not found.\n    \"\"\"\n    try:\n        if not any([plant_number, cultivar_accession, cultivar_population, experiment_name, season_name, site_name, plot_number, plot_row_number, plot_column_number]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n        plants = PlantViewModel.search(\n            plant_number=plant_number,\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number\n        )\n        if not plants or len(plants) == 0:\n            print(\"No plants found with the provided search parameters.\")\n            return None\n        plants = [cls.model_validate(plant) for plant in plants]\n        return plants\n    except Exception as e:\n        print(f\"Error searching for plants: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.set_info","title":"<code>set_info(plant_info)</code>","text":"<p>Set the additional information of the plant.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_plant = plant.set_info({\"height\": 150, \"width\": 75})\n&gt;&gt;&gt; updated_plant.get_info()\n{'height': 150, 'width': 75}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plant_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Plant]: The updated plant instance, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def set_info(self, plant_info: dict) -&gt; Optional[\"Plant\"]:\n    \"\"\"\n    Set the additional information of the plant.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_plant = plant.set_info({\"height\": 150, \"width\": 75})\n        &gt;&gt;&gt; updated_plant.get_info()\n        {'height': 150, 'width': 75}\n\n    Args:\n        plant_info (dict): The new information to set.\n    Returns:\n        Optional[Plant]: The updated plant instance, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        plant = PlantModel.get(current_id)\n        if not plant:\n            print(f\"Plant with ID {current_id} does not exist.\")\n            return None\n        plant = PlantModel.update(\n            plant,\n            plant_info=plant_info\n        )\n        plant = self.model_validate(plant)\n        self.refresh()  # Update the current instance\n        return plant\n    except Exception as e:\n        print(f\"Error setting plant info: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.unassociate_cultivar","title":"<code>unassociate_cultivar()</code>","text":"<p>Unassociate this plant from its cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; cultivar = plant.unassociate_cultivar()\n&gt;&gt;&gt; cultivar\nCultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Cultivar]</code> <p>Optional[Cultivar]: The unassociated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def unassociate_cultivar(self) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Unassociate this plant from its cultivar.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; cultivar = plant.unassociate_cultivar()\n        &gt;&gt;&gt; cultivar\n        Cultivar(id=UUID(...), cultivar_accession='AC123', cultivar_population='Population1')\n\n    Returns:\n        Optional[Cultivar]: The unassociated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        if not self.cultivar_id:\n            print(\"No cultivar assigned to this plant.\")\n            return False\n        cultivar = Cultivar.get_by_id(self.cultivar_id)\n        db_plant = PlantModel.get(self.id)\n        db_plant = PlantModel.update_parameter(\n            db_plant,\n            \"cultivar_id\",\n            None\n        )\n        self.refresh()  # Update the current instance\n        return cultivar\n    except Exception as e:\n        print(f\"Error unassigning cultivar: {e}\")\n        return False\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.unassociate_plot","title":"<code>unassociate_plot()</code>","text":"<p>Unassociate this plant from its plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; plot = plant.unassociate_plot()\n&gt;&gt;&gt; plot\nPlot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Plot]</code> <p>Optional[Plot]: The unassociated plot, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def unassociate_plot(self) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Unassociate this plant from its plot.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; plot = plant.unassociate_plot()\n        &gt;&gt;&gt; plot\n        Plot(id=UUID(...), plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Returns:\n        Optional[Plot]: The unassociated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        if not self.plot_id:\n            print(\"No plot assigned to this plant.\")\n            return None\n        # Assuming we want to unassign the plot by setting plot_id to None\n        plot = Plot.get_by_id(self.plot_id)\n        db_plant = PlantModel.get(self.id)\n        db_plant = PlantModel.update_parameter(\n            db_plant,\n            \"plot_id\",\n            None\n        )\n        self.refresh()  # Update the current instance\n        return plot\n    except Exception as e:\n        print(f\"Error unassigning plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plants/#gemini.api.plant.Plant.update","title":"<code>update(plant_number=None, plant_info=None)</code>","text":"<p>Update the details of the plant.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_plant = plant.update(plant_number=2, plant_info={\"height\": 150})\n&gt;&gt;&gt; updated_plant\nPlant(plot_id=UUID(...), plant_number=2, plant_info={'height': 150}, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plant_number</code> <code>int</code> <p>The new plant number. Defaults to None.</p> <code>None</code> <code>plant_info</code> <code>dict</code> <p>The new plant information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plant]: The updated plant instance, or None if an error occurred.</p> Source code in <code>gemini/api/plant.py</code> <pre><code>def update(\n    self,\n    plant_number: int = None,\n    plant_info: dict = None\n) -&gt; Optional[\"Plant\"]:\n    \"\"\"\n    Update the details of the plant.\n\n    Examples:\n        &gt;&gt;&gt; plant = Plant.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_plant = plant.update(plant_number=2, plant_info={\"height\": 150})\n        &gt;&gt;&gt; updated_plant\n        Plant(plot_id=UUID(...), plant_number=2, plant_info={'height': 150}, id=UUID(...))\n\n    Args:\n        plant_number (int, optional): The new plant number. Defaults to None.\n        plant_info (dict, optional): The new plant information. Defaults to None.\n    Returns:\n        Optional[Plant]: The updated plant instance, or None if an error occurred.\n    \"\"\"\n    try:\n        if not plant_info and not plant_number:\n            print(\"At least one parameter must be provided for update.\")\n            return None\n        current_id = self.id\n        plant = PlantModel.get(current_id)\n        if not plant:\n            print(f\"Plant with ID {current_id} does not exist.\")\n            return None\n        plant = PlantModel.update(\n            plant,\n            plant_number=plant_number,\n            plant_info=plant_info\n        )\n        plant = self.model_validate(plant)\n        self.refresh()  # Update the current instance\n        return plant\n    except Exception as e:\n        print(f\"Error updating plant: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/","title":"Plots API","text":""},{"location":"api/plots/#description","title":"Description","text":"<p>A plot represents an arbitrary area within a field designated for planting one or more Plants. Each plot is uniquely identified by its associated Experiment, Season, and Site.</p> <p>It is defined by the following properties:</p> Property Type Description <code>id</code> <code>UUID</code> The unique identifier of the plot. <code>plot_number</code> <code>int</code> The number of the plot. <code>plot_row_number</code> <code>int</code> The row number of the plot. <code>plot_column_number</code> <code>int</code> The column number of the plot. <code>plot_geometry_info</code> <code>dict</code> Geometry information about the plot. <code>plot_info</code> <code>dict</code> Additional information about the plot. <code>experiment_id</code> <code>UUID</code> The ID of the associated experiment. <code>season_id</code> <code>UUID</code> The ID of the associated season. <code>site_id</code> <code>UUID</code> The ID of the associated site. <code>experiment_name</code> <code>str</code> The name of the associated experiment. <code>season_name</code> <code>str</code> The name of the associated season. <code>site_name</code> <code>str</code> The name of the associated site."},{"location":"api/plots/#module","title":"Module","text":"<p>This module defines the Plot class, which represents a plot entity, including its metadata, associations to experiments, seasons, sites, cultivars, and plants, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting plots, as well as methods for checking existence, searching, and managing associations with experiments, seasons, sites, cultivars, and plants.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a plot with the given parameters exists.</li> <li><code>create</code>: Create a new plot.</li> <li><code>get</code>: Retrieve a plot by its parameters.</li> <li><code>get_by_id</code>: Retrieve a plot by its ID.</li> <li><code>get_all</code>: Retrieve all plots.</li> <li><code>search</code>: Search for plots based on various criteria.</li> <li><code>update</code>: Update the details of a plot.</li> <li><code>delete</code>: Delete a plot.</li> <li><code>refresh</code>: Refresh the plot's data from the database.</li> <li><code>get_info</code>: Get the additional information of the plot.</li> <li><code>set_info</code>: Set the additional information of the plot.</li> <li>Association methods for experiments, seasons, sites, cultivars, and plants.</li> </ul>"},{"location":"api/plots/#gemini.api.plot.Plot","title":"<code>Plot</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a plot entity, including its metadata, associations to experiments, seasons, sites, cultivars, and plants, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the plot.</p> <code>plot_number</code> <code>int</code> <p>The number of the plot.</p> <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> <code>plot_geometry_info</code> <code>Optional[dict]</code> <p>Geometry information about the plot.</p> <code>plot_info</code> <code>Optional[dict]</code> <p>Additional information about the plot.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> <code>season_id</code> <code>Optional[ID]</code> <p>The ID of the associated season.</p> <code>site_id</code> <code>Optional[ID]</code> <p>The ID of the associated site.</p> <code>experiment_name</code> <code>Optional[str]</code> <p>The name of the associated experiment.</p> <code>season_name</code> <code>Optional[str]</code> <p>The name of the associated season.</p> <code>site_name</code> <code>Optional[str]</code> <p>The name of the associated site.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>class Plot(APIBase):\n    \"\"\"\n    Represents a plot entity, including its metadata, associations to experiments, seasons, sites, cultivars, and plants, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the plot.\n        plot_number (int): The number of the plot.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        plot_geometry_info (Optional[dict]): Geometry information about the plot.\n        plot_info (Optional[dict]): Additional information about the plot.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n        season_id (Optional[ID]): The ID of the associated season.\n        site_id (Optional[ID]): The ID of the associated site.\n        experiment_name (Optional[str]): The name of the associated experiment.\n        season_name (Optional[str]): The name of the associated season.\n        site_name (Optional[str]): The name of the associated site.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"plot_id\"))\n    plot_number: int\n    plot_row_number: int\n    plot_column_number: int\n    plot_geometry_info: Optional[dict] = None\n    plot_info: Optional[dict] = None\n    experiment_id: Optional[ID] = None\n    season_id: Optional[ID] = None\n    site_id: Optional[ID] = None\n\n    experiment_name: Optional[str] = Field(None, exclude=True)\n    season_name: Optional[str] = Field(None, exclude=True)\n    site_name: Optional[str] = Field(None, exclude=True)\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Plot object.\"\"\"\n        return f\"Plot(plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Plot object.\"\"\"\n        return f\"Plot(plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if a plot with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; Plot.exists(plot_number=1, plot_row_number=2, plot_column_number=3)\n            True\n            &gt;&gt;&gt; Plot.exists(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment 1\")\n            False\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            bool: True if the plot exists, False otherwise.\n        \"\"\"\n        try:\n            exists = PlotViewModel.exists(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of plot: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        plot_info: dict = {},\n        plot_geometry_info: dict = {},\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        cultivar_accession: str = None,\n        cultivar_population: str = None\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Create a new plot and associate it with experiment, season, site, and cultivar if provided.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.create(plot_number=1, plot_row_number=2, plot_column_number=3)\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))   \n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            plot_info (dict, optional): Additional information about the plot. Defaults to {{}}.\n            plot_geometry_info (dict, optional): Geometry information about the plot. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        Returns:\n            Optional[Plot]: The created plot instance, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = PlotModel.get_or_create(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                plot_info=plot_info,\n                plot_geometry_info=plot_geometry_info,\n            )\n            plot = cls.model_validate(db_instance)\n            if experiment_name:\n                plot.associate_experiment(experiment_name)\n            if season_name:\n                plot.associate_season(season_name, experiment_name)\n            if site_name:\n                plot.associate_site(site_name)\n            if cultivar_accession and cultivar_population:\n                plot.associate_cultivar(cultivar_accession, cultivar_population)\n            return plot\n        except Exception as e:\n            print(f\"Error creating plot: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Retrieve a plot by its parameters.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get(plot_number=1, plot_row_number=2, plot_column_number=3)\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            Optional[Plot]: The plot instance, or None if not found.\n        \"\"\"\n        try:\n            plot = PlotViewModel.get_by_parameters(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not plot:\n                print(f\"Plot with number {plot_number}, row {plot_row_number}, column {plot_column_number} not found.\")\n                return None\n            plot = cls.model_validate(plot)\n            return plot\n        except Exception as e:\n            print(f\"Error getting plot: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Retrieve a plot by its ID.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID('...'))\n\n        Args:\n            id (UUID | int | str): The ID of the plot.\n        Returns:\n            Optional[Plot]: The plot instance, or None if not found.\n        \"\"\"\n        try:\n            plot = PlotViewModel.get_by_parameters(plot_id=id)\n            if not plot:\n                print(f\"Plot with ID {id} does not exist.\")\n                return None\n            plot = cls.model_validate(plot)\n            return plot\n        except Exception as e:\n            print(f\"Error getting plot by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Plot\"]]:\n        \"\"\"\n        Retrieve all plots.\n\n        Examples:\n            &gt;&gt;&gt; plots = Plot.get_all()\n            &gt;&gt;&gt; for plot in plots:\n            ...     print(plot)\n            Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n            Plot(plot_number=2, plot_row_number=3, plot_column_number=4, id=UUID(...))\n\n\n        Returns:\n            Optional[List[Plot]]: A list of all plots, or None if not found.\n        \"\"\"\n        try:\n            plots = PlotModel.all()\n            if not plots or len(plots) == 0:\n                print(\"No plots found.\")\n                return None\n            plots = [cls.model_validate(plot) for plot in plots]\n            return plots\n        except Exception as e:\n            print(f\"Error getting all plots: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        cultivar_accession: str = None,\n        cultivar_population: str = None\n    ) -&gt; Optional[List[\"Plot\"]]:\n        \"\"\"\n        Search for plots based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; plots = Plot.search(plot_number=1, plot_row_number=2)\n            &gt;&gt;&gt; for plot in plots:\n            ...     print(plot)\n            Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n\n        Args:\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The row number of the plot. Defaults to None.\n            plot_column_number (int, optional): The column number of the plot. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n            cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n        Returns:\n            Optional[List[Plot]]: A list of matching plots, or None if not found.\n        \"\"\"\n        try:\n            if not any([plot_number, plot_row_number, plot_column_number, experiment_name, season_name, site_name]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n\n            plots = PlotViewModel.search(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population\n            )\n            if not plots or len(plots) == 0:\n                print(\"No plots found with the provided search parameters.\")\n                return None\n            plots = [cls.model_validate(plot) for plot in plots]\n            return plots if plots else None\n        except Exception as e:\n            print(f\"Error searching plots: {e}\")\n            return None\n\n    def update(\n        self,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        plot_info: dict = None,\n        plot_geometry_info: dict = None\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Update the details of the plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_plot = plot.update(plot_number=2, plot_row_number=3)\n            &gt;&gt;&gt; print(updated_plot)\n            Plot(plot_number=2, plot_row_number=3, plot_column_number=3, id=UUID('...'))\n\n        Args:\n            plot_number (int, optional): The new plot number. Defaults to None.\n            plot_row_number (int, optional): The new row number. Defaults to None.\n            plot_column_number (int, optional): The new column number. Defaults to None.\n            plot_info (dict, optional): The new plot information. Defaults to None.\n            plot_geometry_info (dict, optional): The new geometry information. Defaults to None.\n        Returns:\n            Optional[Plot]: The updated plot instance, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([plot_number, plot_row_number, plot_column_number, plot_info, plot_geometry_info]):\n                print(\"At least one parameter must be provided.\")\n                return None\n\n            current_id = self.id\n            plot = PlotModel.get(current_id)\n            if not plot:\n                print(f\"Plot with ID {current_id} does not exist.\")\n                return None\n            plot = PlotModel.update(\n                plot,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                plot_info=plot_info,\n                plot_geometry_info=plot_geometry_info\n            )\n            plot = self.model_validate(plot)\n            self.refresh()\n            return plot\n        except Exception as e:\n            print(f\"Error updating plot: {e}\")\n            return None\n\n    def refresh(self) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Refresh the plot's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_plot = plot.refresh()\n            &gt;&gt;&gt; print(refreshed_plot)\n            Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID('...'))\n\n        Returns:\n            Optional[Plot]: The refreshed plot instance, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = PlotViewModel.get_by_parameters(plot_id=self.id)\n            if not db_instance:\n                print(f\"Plot with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            instance_dict = dict(instance)\n            for key, value in instance_dict.items():\n                if hasattr(self, key) and key != \"id\":\n                    value = getattr(instance, key)\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing plot: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; deleted = plot.delete()\n            &gt;&gt;&gt; print(deleted)\n            True\n\n        Returns:\n            bool: True if the plot was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            plot = PlotModel.get(current_id)\n            if not plot:\n                print(f\"Plot with ID {current_id} does not exist.\")\n                return False\n            PlotModel.delete(plot)\n            return True\n        except Exception as e:\n            print(f\"Error deleting plot: {e}\")\n            return False\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; plot_info = plot.get_info()\n            &gt;&gt;&gt; print(plot_info)\n            {'key': 'value'}\n\n        Returns:\n            Optional[dict]: The plot's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            plot = PlotModel.get(current_id)\n            if not plot:\n                print(f\"Plot with ID {current_id} does not exist.\")\n                return None\n            plot_info = plot.plot_info\n            if not plot_info:\n                print(\"Plot info is empty.\")\n                return None\n            return plot_info\n        except Exception as e:\n            print(f\"Error getting plot info: {e}\")\n            return None\n\n    def set_info(self, plot_info: dict) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Set the additional information of the plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_plot = plot.set_info({'key': 'new_value'})\n            &gt;&gt;&gt; print(updated_plot.get_info())\n            {'key': 'new_value'}\n\n        Args:\n            plot_info (dict): The new information to set.\n        Returns:\n            Optional[Plot]: The updated plot instance, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            plot = PlotModel.get(current_id)\n            if not plot:\n                print(f\"Plot with ID {current_id} does not exist.\")\n                return None\n            plot = PlotModel.update(\n                plot,\n                plot_info=plot_info\n            )\n            plot = self.model_validate(plot)\n            self.refresh()\n            return self\n        except Exception as e:\n            print(f\"Error setting plot info: {e}\")  \n            return None\n\n    def get_associated_experiment(self) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Get the experiment associated with this plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; experiment = plot.get_associated_experiment()\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            if not self.experiment_id:\n                print(\"Plot does not belong to any experiment.\")\n                return None\n            experiment = Experiment.get_by_id(self.experiment_id)\n            if not experiment:\n                print(f\"Experiment with ID {self.experiment_id} does not exist.\")\n                return None\n            return experiment\n        except Exception as e:\n            print(f\"Error getting experiment: {e}\")\n            return None\n\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this plot is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = plot.belongs_to_experiment(\"Experiment 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment with name {experiment_name} does not exist.\")\n                return False\n            association_exists = PlotViewModel.exists(\n                plot_id=self.id,\n                experiment_id=experiment.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if plot belongs to experiment: {e}\")\n            return False\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this plot with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; experiment = plot.associate_experiment(\"Experiment 1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment with name {experiment_name} does not exist.\")\n                return None\n            existing_association = PlotViewModel.get_by_parameters(\n                plot_id=self.id,\n                experiment_id=experiment.id\n            )\n            if existing_association:\n                print(f\"Plot {self.id} is already associated with experiment {experiment_name}.\")\n                return self\n            db_plot = PlotModel.get(self.id)\n            db_plot = PlotModel.update_parameter(\n                db_plot,\n                \"experiment_id\",\n                experiment.id\n            )\n            print(f\"Plot {self.id} associated with experiment {experiment_name}.\")\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error assigning experiment to plot: {e}\")\n            return None\n\n    def unassociate_experiment(self) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this plot from its experiment.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; experiment = plot.unassociate_experiment()\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            if not self.experiment_id:\n                print(\"Plot does not belong to any experiment.\")\n                return None\n            experiment = Experiment.get_by_id(self.experiment_id)\n            db_plot = PlotModel.get(self.id)\n            db_plot = PlotModel.update_parameter(\n                db_plot,\n                \"experiment_id\",\n                None\n            )\n            self.refresh()\n            return experiment   \n        except Exception as e:\n            print(f\"Error unassigning experiment from plot: {e}\")\n            return None\n\n    def get_associated_season(self) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Get the season associated with this plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; season = plot.get_associated_season()\n            &gt;&gt;&gt; print(season)\n            Season(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n\n        Returns:\n            Optional[Season]: The associated season, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.season import Season\n            if not self.season_id:\n                print(\"Plot does not belong to any season.\")\n                return None\n            season = Season.get_by_id(self.season_id)\n            if not season:\n                print(f\"Season with ID {self.season_id} does not exist.\")\n                return None\n            return season\n        except Exception as e:\n            print(f\"Error getting season: {e}\")\n            return None\n\n\n    def belongs_to_season(self, season_name: str, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this plot is associated with a specific season.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = plot.belongs_to_season(\"Season 1\", \"Experiment 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            season_name (str): The name of the season to check.\n            experiment_name (str): The name of the experiment.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.season import Season\n            from gemini.api.experiment import Experiment\n            season = Season.get(season_name=season_name, experiment_name=experiment_name)\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment or not season:\n                print(f\"Experiment with name {experiment_name} or season with name {season_name} does not exist.\")\n                return False\n            association_exists = PlotViewModel.exists(\n                plot_id=self.id,\n                season_id=self.season_id,\n                experiment_id=experiment.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if plot belongs to season: {e}\")\n            return False\n\n    def associate_season(self, season_name: str, experiment_name: str) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Associate this plot with a season.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; season = plot.associate_season(\"Season 1\", \"Experiment 1\")\n            &gt;&gt;&gt; print(season)\n            Season(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n\n        Args:\n            season_name (str): The name of the season to associate.\n            experiment_name (str): The name of the experiment.\n        Returns:\n            Optional[Season]: The associated season, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.season import Season\n            season = Season.get(season_name=season_name, experiment_name=experiment_name)\n            if not season:\n                print(f\"Season with name {season_name} does not exist.\")\n                return None\n            existing_association = PlotViewModel.get_by_parameters(\n                plot_id=self.id,\n                season_id=season.id,\n                experiment_id=season.experiment_id\n            )\n            if existing_association:\n                print(f\"Plot {self.id} is already associated with season {season_name}.\")\n                return self\n            db_plot = PlotModel.get(self.id)\n            db_plot = PlotModel.update_parameter(\n                db_plot,\n                \"season_id\",\n                season.id\n            )\n            print(f\"Plot {self.id} associated with season {season_name}.\")\n            self.refresh()\n            return season\n        except Exception as e:\n            print(f\"Error assigning season to plot: {e}\")\n            return None\n\n    def unassociate_season(self) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Unassociate this plot from its season.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; season = plot.unassociate_season()\n            &gt;&gt;&gt; print(season)\n            Season(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n\n        Returns:\n            Optional[Season]: The unassociated season, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.season import Season\n            if not self.season_id:\n                print(\"Plot does not belong to any season.\")\n                return None\n            season = Season.get_by_id(self.season_id)\n            db_plot = PlotModel.get(self.id)\n            db_plot = PlotModel.update_parameter(\n                db_plot,\n                \"season_id\",\n                None\n            )\n            self.refresh()\n            return season\n        except Exception as e:\n            print(f\"Error unassigning season from plot: {e}\")\n            return None\n\n    def get_associated_site(self) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Get the site associated with this plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; site = plot.get_associated_site()\n            &gt;&gt;&gt; print(site)\n            Site(site_name='Site 1', id=UUID(...))\n\n        Returns:\n            Optional[Site]: The associated site, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            if not self.site_id:\n                print(\"Plot does not belong to any site.\")\n                return None\n            site = Site.get_by_id(self.site_id)\n            if not site:\n                print(f\"Site with ID {self.site_id} does not exist.\")\n                return None\n            return site\n        except Exception as e:\n            print(f\"Error getting site: {e}\")\n            return None\n\n    def belongs_to_site(self, site_name: str) -&gt; bool:\n        \"\"\"\n        Check if this plot is associated with a specific site.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = plot.belongs_to_site(\"Site 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            site_name (str): The name of the site to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            site = Site.get(site_name=site_name)\n            if not site:\n                print(f\"Site with name {site_name} does not exist.\")\n                return False\n            association_exists = PlotViewModel.exists(\n                plot_id=self.id,\n                site_id=site.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if plot belongs to site: {e}\")\n            return False\n\n    def associate_site(self, site_name: str) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Associate this plot with a site.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; site = plot.associate_site(\"Site 1\")\n            &gt;&gt;&gt; print(site)\n            Site(site_name='Site 1', id=UUID(...))\n\n        Args:\n            site_name (str): The name of the site to associate.\n        Returns:\n            Optional[Site]: The associated site, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            site = Site.get(site_name=site_name)\n            if not site:\n                print(f\"Site with name {site_name} does not exist.\")\n                return None\n            existing_association = PlotViewModel.get_by_parameters(\n                plot_id=self.id,\n                site_id=site.id\n            )\n            if existing_association:\n                print(f\"Plot {self.id} is already associated with site {site_name}.\")\n                return self\n            db_plot = PlotModel.get(self.id)\n            db_plot = PlotModel.update_parameter(\n                db_plot,\n                \"site_id\",\n                site.id\n            )\n            print(f\"Plot {self.id} associated with site {site_name}.\")\n            self.refresh()\n            return site\n        except Exception as e:\n            print(f\"Error assigning site to plot: {e}\")\n            return None\n\n    def unassociate_site(self) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Unassociate this plot from its site.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; site = plot.unassociate_site()\n            &gt;&gt;&gt; print(site)\n            Site(site_name='Site 1', id=UUID(...))\n\n        Returns:\n            Optional[Site]: The unassociated site, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.site import Site\n            if not self.site_id:\n                print(\"Plot does not belong to any site.\")\n                return None\n            site = Site.get_by_id(self.site_id)\n            db_plot = PlotModel.get(self.id)\n            db_plot = PlotModel.update_parameter(\n                db_plot,\n                \"site_id\",\n                None\n            )\n            self.refresh()\n            return site\n        except Exception as e:\n            print(f\"Error unassigning site from plot: {e}\")\n            return None\n\n    def get_associated_cultivars(self) -&gt; Optional[List[\"Cultivar\"]]:\n        \"\"\"\n        Get all cultivars associated with this plot.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; cultivars = plot.get_associated_cultivars()\n            &gt;&gt;&gt; for cultivar in cultivars:\n            ...     print(cultivar)\n            Cultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n\n        Returns:\n            Optional[List[Cultivar]]: A list of associated cultivars, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivars = PlotCultivarViewModel.search(plot_id=self.id)\n            if not cultivars or len(cultivars) == 0:\n                print(\"No associated cultivars found for this plot.\")\n                return None\n            cultivars = [Cultivar.model_validate(cultivar) for cultivar in cultivars]\n            return cultivars\n        except Exception as e:\n            print(f\"Error getting associated cultivars: {e}\")\n            return None\n\n    def associate_cultivar(\n        self,\n        cultivar_accession: str,\n        cultivar_population: str\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Associate this plot with a cultivar.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; cultivar = plot.associate_cultivar(\"Accession 1\", \"Population 1\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n\n        Args:\n            cultivar_accession (str): The accession of the cultivar.\n            cultivar_population (str): The population of the cultivar.\n        Returns:\n            Optional[Cultivar]: The associated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population\n            )\n            if not cultivar:\n                print(f\"Cultivar {cultivar_accession} {cultivar_population} does not exist.\")\n                return None\n            existing_association = PlotCultivarViewModel.get_by_parameters(\n                plot_id=self.id,\n                cultivar_id=cultivar.id\n            )\n            if existing_association:\n                print(f\"Cultivar {cultivar_accession} {cultivar_population} is already assigned to this plot.\")\n                return self\n            new_association = PlotCultivarModel.get_or_create(\n                plot_id=self.id,\n                cultivar_id=cultivar.id\n            )\n            if not new_association:\n                print(f\"Failed to assign cultivar {cultivar_accession} {cultivar_population} to plot {self.id}.\")\n                return None\n            self.refresh()\n            return cultivar\n        except Exception as e:\n            print(f\"Error assigning cultivar to plot: {e}\")\n            return None\n\n    def unassociate_cultivar(\n        self,\n        cultivar_accession: str,\n        cultivar_population: str\n    ) -&gt; Optional[\"Cultivar\"]:\n        \"\"\"\n        Unassociate this plot from a cultivar.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; cultivar = plot.unassociate_cultivar(\"Accession 1\", \"Population 1\")\n            &gt;&gt;&gt; print(cultivar)\n            Cultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n\n        Args:\n            cultivar_accession (str): The accession of the cultivar.\n            cultivar_population (str): The population of the cultivar.\n        Returns:\n            Optional[Cultivar]: The unassociated cultivar, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population\n            )\n            if not cultivar:\n                print(f\"Cultivar {cultivar_accession} {cultivar_population} does not exist.\")\n                return None\n            existing_association = PlotCultivarModel.get_by_parameters(\n                plot_id=self.id,\n                cultivar_id=cultivar.id\n            )\n            if not existing_association:\n                print(f\"Cultivar {cultivar_accession} {cultivar_population} is not assigned to this plot.\")\n                return None\n            is_deleted = PlotCultivarModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassign cultivar {cultivar_accession} {cultivar_population} from plot {self.id}.\")\n                return None\n            self.refresh()\n            return cultivar\n        except Exception as e:\n            print(f\"Error unassigning cultivar from plot: {e}\")\n            return None\n\n    def belongs_to_cultivar(\n        self,\n        cultivar_accession: str,\n        cultivar_population: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if this plot is associated with a specific cultivar.\n\n        Examples:\n            &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = plot.belongs_to_cultivar(\"Accession 1\", \"Population 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            cultivar_accession (str): The accession of the cultivar.\n            cultivar_population (str): The population of the cultivar.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.cultivar import Cultivar\n            cultivar = Cultivar.get(\n                cultivar_accession=cultivar_accession,\n                cultivar_population=cultivar_population\n            )\n            if not cultivar:\n                print(f\"Cultivar {cultivar_accession} {cultivar_population} does not exist.\")\n                return False\n            association_exists = PlotCultivarViewModel.exists(\n                plot_id=self.id,\n                cultivar_id=cultivar.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if plot has cultivar: {e}\")\n            return False\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Plot object.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Plot object.\"\"\"\n    return f\"Plot(plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number}, id={self.id})\"\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Plot object.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Plot object.\"\"\"\n    return f\"Plot(plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number}, id={self.id})\"\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.associate_cultivar","title":"<code>associate_cultivar(cultivar_accession, cultivar_population)</code>","text":"<p>Associate this plot with a cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; cultivar = plot.associate_cultivar(\"Accession 1\", \"Population 1\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar.</p> required <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <p>Returns:     Optional[Cultivar]: The associated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def associate_cultivar(\n    self,\n    cultivar_accession: str,\n    cultivar_population: str\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Associate this plot with a cultivar.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; cultivar = plot.associate_cultivar(\"Accession 1\", \"Population 1\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n\n    Args:\n        cultivar_accession (str): The accession of the cultivar.\n        cultivar_population (str): The population of the cultivar.\n    Returns:\n        Optional[Cultivar]: The associated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population\n        )\n        if not cultivar:\n            print(f\"Cultivar {cultivar_accession} {cultivar_population} does not exist.\")\n            return None\n        existing_association = PlotCultivarViewModel.get_by_parameters(\n            plot_id=self.id,\n            cultivar_id=cultivar.id\n        )\n        if existing_association:\n            print(f\"Cultivar {cultivar_accession} {cultivar_population} is already assigned to this plot.\")\n            return self\n        new_association = PlotCultivarModel.get_or_create(\n            plot_id=self.id,\n            cultivar_id=cultivar.id\n        )\n        if not new_association:\n            print(f\"Failed to assign cultivar {cultivar_accession} {cultivar_population} to plot {self.id}.\")\n            return None\n        self.refresh()\n        return cultivar\n    except Exception as e:\n        print(f\"Error assigning cultivar to plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this plot with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; experiment = plot.associate_experiment(\"Experiment 1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this plot with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; experiment = plot.associate_experiment(\"Experiment 1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment with name {experiment_name} does not exist.\")\n            return None\n        existing_association = PlotViewModel.get_by_parameters(\n            plot_id=self.id,\n            experiment_id=experiment.id\n        )\n        if existing_association:\n            print(f\"Plot {self.id} is already associated with experiment {experiment_name}.\")\n            return self\n        db_plot = PlotModel.get(self.id)\n        db_plot = PlotModel.update_parameter(\n            db_plot,\n            \"experiment_id\",\n            experiment.id\n        )\n        print(f\"Plot {self.id} associated with experiment {experiment_name}.\")\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error assigning experiment to plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.associate_season","title":"<code>associate_season(season_name, experiment_name)</code>","text":"<p>Associate this plot with a season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; season = plot.associate_season(\"Season 1\", \"Experiment 1\")\n&gt;&gt;&gt; print(season)\nSeason(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The name of the season to associate.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:     Optional[Season]: The associated season, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def associate_season(self, season_name: str, experiment_name: str) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Associate this plot with a season.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; season = plot.associate_season(\"Season 1\", \"Experiment 1\")\n        &gt;&gt;&gt; print(season)\n        Season(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n\n    Args:\n        season_name (str): The name of the season to associate.\n        experiment_name (str): The name of the experiment.\n    Returns:\n        Optional[Season]: The associated season, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.season import Season\n        season = Season.get(season_name=season_name, experiment_name=experiment_name)\n        if not season:\n            print(f\"Season with name {season_name} does not exist.\")\n            return None\n        existing_association = PlotViewModel.get_by_parameters(\n            plot_id=self.id,\n            season_id=season.id,\n            experiment_id=season.experiment_id\n        )\n        if existing_association:\n            print(f\"Plot {self.id} is already associated with season {season_name}.\")\n            return self\n        db_plot = PlotModel.get(self.id)\n        db_plot = PlotModel.update_parameter(\n            db_plot,\n            \"season_id\",\n            season.id\n        )\n        print(f\"Plot {self.id} associated with season {season_name}.\")\n        self.refresh()\n        return season\n    except Exception as e:\n        print(f\"Error assigning season to plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.associate_site","title":"<code>associate_site(site_name)</code>","text":"<p>Associate this plot with a site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; site = plot.associate_site(\"Site 1\")\n&gt;&gt;&gt; print(site)\nSite(site_name='Site 1', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site to associate.</p> required <p>Returns:     Optional[Site]: The associated site, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def associate_site(self, site_name: str) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Associate this plot with a site.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; site = plot.associate_site(\"Site 1\")\n        &gt;&gt;&gt; print(site)\n        Site(site_name='Site 1', id=UUID(...))\n\n    Args:\n        site_name (str): The name of the site to associate.\n    Returns:\n        Optional[Site]: The associated site, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        site = Site.get(site_name=site_name)\n        if not site:\n            print(f\"Site with name {site_name} does not exist.\")\n            return None\n        existing_association = PlotViewModel.get_by_parameters(\n            plot_id=self.id,\n            site_id=site.id\n        )\n        if existing_association:\n            print(f\"Plot {self.id} is already associated with site {site_name}.\")\n            return self\n        db_plot = PlotModel.get(self.id)\n        db_plot = PlotModel.update_parameter(\n            db_plot,\n            \"site_id\",\n            site.id\n        )\n        print(f\"Plot {self.id} associated with site {site_name}.\")\n        self.refresh()\n        return site\n    except Exception as e:\n        print(f\"Error assigning site to plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.belongs_to_cultivar","title":"<code>belongs_to_cultivar(cultivar_accession, cultivar_population)</code>","text":"<p>Check if this plot is associated with a specific cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = plot.belongs_to_cultivar(\"Accession 1\", \"Population 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar.</p> required <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def belongs_to_cultivar(\n    self,\n    cultivar_accession: str,\n    cultivar_population: str\n) -&gt; bool:\n    \"\"\"\n    Check if this plot is associated with a specific cultivar.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = plot.belongs_to_cultivar(\"Accession 1\", \"Population 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        cultivar_accession (str): The accession of the cultivar.\n        cultivar_population (str): The population of the cultivar.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population\n        )\n        if not cultivar:\n            print(f\"Cultivar {cultivar_accession} {cultivar_population} does not exist.\")\n            return False\n        association_exists = PlotCultivarViewModel.exists(\n            plot_id=self.id,\n            cultivar_id=cultivar.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if plot has cultivar: {e}\")\n        return False\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this plot is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = plot.belongs_to_experiment(\"Experiment 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this plot is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = plot.belongs_to_experiment(\"Experiment 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment with name {experiment_name} does not exist.\")\n            return False\n        association_exists = PlotViewModel.exists(\n            plot_id=self.id,\n            experiment_id=experiment.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if plot belongs to experiment: {e}\")\n        return False\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.belongs_to_season","title":"<code>belongs_to_season(season_name, experiment_name)</code>","text":"<p>Check if this plot is associated with a specific season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = plot.belongs_to_season(\"Season 1\", \"Experiment 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The name of the season to check.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def belongs_to_season(self, season_name: str, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this plot is associated with a specific season.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = plot.belongs_to_season(\"Season 1\", \"Experiment 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        season_name (str): The name of the season to check.\n        experiment_name (str): The name of the experiment.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.season import Season\n        from gemini.api.experiment import Experiment\n        season = Season.get(season_name=season_name, experiment_name=experiment_name)\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment or not season:\n            print(f\"Experiment with name {experiment_name} or season with name {season_name} does not exist.\")\n            return False\n        association_exists = PlotViewModel.exists(\n            plot_id=self.id,\n            season_id=self.season_id,\n            experiment_id=experiment.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if plot belongs to season: {e}\")\n        return False\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.belongs_to_site","title":"<code>belongs_to_site(site_name)</code>","text":"<p>Check if this plot is associated with a specific site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = plot.belongs_to_site(\"Site 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def belongs_to_site(self, site_name: str) -&gt; bool:\n    \"\"\"\n    Check if this plot is associated with a specific site.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = plot.belongs_to_site(\"Site 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        site_name (str): The name of the site to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        site = Site.get(site_name=site_name)\n        if not site:\n            print(f\"Site with name {site_name} does not exist.\")\n            return False\n        association_exists = PlotViewModel.exists(\n            plot_id=self.id,\n            site_id=site.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if plot belongs to site: {e}\")\n        return False\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.create","title":"<code>create(plot_number, plot_row_number, plot_column_number, plot_info={}, plot_geometry_info={}, experiment_name=None, season_name=None, site_name=None, cultivar_accession=None, cultivar_population=None)</code>  <code>classmethod</code>","text":"<p>Create a new plot and associate it with experiment, season, site, and cultivar if provided.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.create(plot_number=1, plot_row_number=2, plot_column_number=3)\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))   \n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>plot_info</code> <code>dict</code> <p>Additional information about the plot. Defaults to {{}}.</p> <code>{}</code> <code>plot_geometry_info</code> <code>dict</code> <p>Geometry information about the plot. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plot]: The created plot instance, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    plot_info: dict = {},\n    plot_geometry_info: dict = {},\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    cultivar_accession: str = None,\n    cultivar_population: str = None\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Create a new plot and associate it with experiment, season, site, and cultivar if provided.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.create(plot_number=1, plot_row_number=2, plot_column_number=3)\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))   \n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        plot_info (dict, optional): Additional information about the plot. Defaults to {{}}.\n        plot_geometry_info (dict, optional): Geometry information about the plot. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n    Returns:\n        Optional[Plot]: The created plot instance, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = PlotModel.get_or_create(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            plot_info=plot_info,\n            plot_geometry_info=plot_geometry_info,\n        )\n        plot = cls.model_validate(db_instance)\n        if experiment_name:\n            plot.associate_experiment(experiment_name)\n        if season_name:\n            plot.associate_season(season_name, experiment_name)\n        if site_name:\n            plot.associate_site(site_name)\n        if cultivar_accession and cultivar_population:\n            plot.associate_cultivar(cultivar_accession, cultivar_population)\n        return plot\n    except Exception as e:\n        print(f\"Error creating plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.delete","title":"<code>delete()</code>","text":"<p>Delete the plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; deleted = plot.delete()\n&gt;&gt;&gt; print(deleted)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the plot was deleted, False otherwise.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; deleted = plot.delete()\n        &gt;&gt;&gt; print(deleted)\n        True\n\n    Returns:\n        bool: True if the plot was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        plot = PlotModel.get(current_id)\n        if not plot:\n            print(f\"Plot with ID {current_id} does not exist.\")\n            return False\n        PlotModel.delete(plot)\n        return True\n    except Exception as e:\n        print(f\"Error deleting plot: {e}\")\n        return False\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.exists","title":"<code>exists(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, site_name=None)</code>  <code>classmethod</code>","text":"<p>Check if a plot with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Plot.exists(plot_number=1, plot_row_number=2, plot_column_number=3)\nTrue\n&gt;&gt;&gt; Plot.exists(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment 1\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if the plot exists, False otherwise.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if a plot with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; Plot.exists(plot_number=1, plot_row_number=2, plot_column_number=3)\n        True\n        &gt;&gt;&gt; Plot.exists(plot_number=1, plot_row_number=2, plot_column_number=3, experiment_name=\"Experiment 1\")\n        False\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        bool: True if the plot exists, False otherwise.\n    \"\"\"\n    try:\n        exists = PlotViewModel.exists(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of plot: {e}\")\n        return False\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get","title":"<code>get(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, site_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a plot by its parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get(plot_number=1, plot_row_number=2, plot_column_number=3)\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plot]: The plot instance, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Retrieve a plot by its parameters.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get(plot_number=1, plot_row_number=2, plot_column_number=3)\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        Optional[Plot]: The plot instance, or None if not found.\n    \"\"\"\n    try:\n        plot = PlotViewModel.get_by_parameters(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not plot:\n            print(f\"Plot with number {plot_number}, row {plot_row_number}, column {plot_column_number} not found.\")\n            return None\n        plot = cls.model_validate(plot)\n        return plot\n    except Exception as e:\n        print(f\"Error getting plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all plots.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plots = Plot.get_all()\n&gt;&gt;&gt; for plot in plots:\n...     print(plot)\nPlot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\nPlot(plot_number=2, plot_row_number=3, plot_column_number=4, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Plot]]</code> <p>Optional[List[Plot]]: A list of all plots, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Plot\"]]:\n    \"\"\"\n    Retrieve all plots.\n\n    Examples:\n        &gt;&gt;&gt; plots = Plot.get_all()\n        &gt;&gt;&gt; for plot in plots:\n        ...     print(plot)\n        Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n        Plot(plot_number=2, plot_row_number=3, plot_column_number=4, id=UUID(...))\n\n\n    Returns:\n        Optional[List[Plot]]: A list of all plots, or None if not found.\n    \"\"\"\n    try:\n        plots = PlotModel.all()\n        if not plots or len(plots) == 0:\n            print(\"No plots found.\")\n            return None\n        plots = [cls.model_validate(plot) for plot in plots]\n        return plots\n    except Exception as e:\n        print(f\"Error getting all plots: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get_associated_cultivars","title":"<code>get_associated_cultivars()</code>","text":"<p>Get all cultivars associated with this plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; cultivars = plot.get_associated_cultivars()\n&gt;&gt;&gt; for cultivar in cultivars:\n...     print(cultivar)\nCultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Cultivar]]</code> <p>Optional[List[Cultivar]]: A list of associated cultivars, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def get_associated_cultivars(self) -&gt; Optional[List[\"Cultivar\"]]:\n    \"\"\"\n    Get all cultivars associated with this plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; cultivars = plot.get_associated_cultivars()\n        &gt;&gt;&gt; for cultivar in cultivars:\n        ...     print(cultivar)\n        Cultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n\n    Returns:\n        Optional[List[Cultivar]]: A list of associated cultivars, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivars = PlotCultivarViewModel.search(plot_id=self.id)\n        if not cultivars or len(cultivars) == 0:\n            print(\"No associated cultivars found for this plot.\")\n            return None\n        cultivars = [Cultivar.model_validate(cultivar) for cultivar in cultivars]\n        return cultivars\n    except Exception as e:\n        print(f\"Error getting associated cultivars: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get_associated_experiment","title":"<code>get_associated_experiment()</code>","text":"<p>Get the experiment associated with this plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; experiment = plot.get_associated_experiment()\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Experiment]</code> <p>Optional[Experiment]: The associated experiment, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def get_associated_experiment(self) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Get the experiment associated with this plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; experiment = plot.get_associated_experiment()\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        if not self.experiment_id:\n            print(\"Plot does not belong to any experiment.\")\n            return None\n        experiment = Experiment.get_by_id(self.experiment_id)\n        if not experiment:\n            print(f\"Experiment with ID {self.experiment_id} does not exist.\")\n            return None\n        return experiment\n    except Exception as e:\n        print(f\"Error getting experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get_associated_season","title":"<code>get_associated_season()</code>","text":"<p>Get the season associated with this plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; season = plot.get_associated_season()\n&gt;&gt;&gt; print(season)\nSeason(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Season]</code> <p>Optional[Season]: The associated season, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def get_associated_season(self) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Get the season associated with this plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; season = plot.get_associated_season()\n        &gt;&gt;&gt; print(season)\n        Season(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n\n    Returns:\n        Optional[Season]: The associated season, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.season import Season\n        if not self.season_id:\n            print(\"Plot does not belong to any season.\")\n            return None\n        season = Season.get_by_id(self.season_id)\n        if not season:\n            print(f\"Season with ID {self.season_id} does not exist.\")\n            return None\n        return season\n    except Exception as e:\n        print(f\"Error getting season: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get_associated_site","title":"<code>get_associated_site()</code>","text":"<p>Get the site associated with this plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; site = plot.get_associated_site()\n&gt;&gt;&gt; print(site)\nSite(site_name='Site 1', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Site]</code> <p>Optional[Site]: The associated site, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def get_associated_site(self) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Get the site associated with this plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; site = plot.get_associated_site()\n        &gt;&gt;&gt; print(site)\n        Site(site_name='Site 1', id=UUID(...))\n\n    Returns:\n        Optional[Site]: The associated site, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        if not self.site_id:\n            print(\"Plot does not belong to any site.\")\n            return None\n        site = Site.get_by_id(self.site_id)\n        if not site:\n            print(f\"Site with ID {self.site_id} does not exist.\")\n            return None\n        return site\n    except Exception as e:\n        print(f\"Error getting site: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a plot by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the plot.</p> required <p>Returns:     Optional[Plot]: The plot instance, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Retrieve a plot by its ID.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID('...'))\n\n    Args:\n        id (UUID | int | str): The ID of the plot.\n    Returns:\n        Optional[Plot]: The plot instance, or None if not found.\n    \"\"\"\n    try:\n        plot = PlotViewModel.get_by_parameters(plot_id=id)\n        if not plot:\n            print(f\"Plot with ID {id} does not exist.\")\n            return None\n        plot = cls.model_validate(plot)\n        return plot\n    except Exception as e:\n        print(f\"Error getting plot by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; plot_info = plot.get_info()\n&gt;&gt;&gt; print(plot_info)\n{'key': 'value'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The plot's info, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; plot_info = plot.get_info()\n        &gt;&gt;&gt; print(plot_info)\n        {'key': 'value'}\n\n    Returns:\n        Optional[dict]: The plot's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        plot = PlotModel.get(current_id)\n        if not plot:\n            print(f\"Plot with ID {current_id} does not exist.\")\n            return None\n        plot_info = plot.plot_info\n        if not plot_info:\n            print(\"Plot info is empty.\")\n            return None\n        return plot_info\n    except Exception as e:\n        print(f\"Error getting plot info: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the plot's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_plot = plot.refresh()\n&gt;&gt;&gt; print(refreshed_plot)\nPlot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Plot]</code> <p>Optional[Plot]: The refreshed plot instance, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Refresh the plot's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_plot = plot.refresh()\n        &gt;&gt;&gt; print(refreshed_plot)\n        Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID('...'))\n\n    Returns:\n        Optional[Plot]: The refreshed plot instance, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = PlotViewModel.get_by_parameters(plot_id=self.id)\n        if not db_instance:\n            print(f\"Plot with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        instance_dict = dict(instance)\n        for key, value in instance_dict.items():\n            if hasattr(self, key) and key != \"id\":\n                value = getattr(instance, key)\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.search","title":"<code>search(plot_number=None, plot_row_number=None, plot_column_number=None, experiment_name=None, season_name=None, site_name=None, cultivar_accession=None, cultivar_population=None)</code>  <code>classmethod</code>","text":"<p>Search for plots based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plots = Plot.search(plot_number=1, plot_row_number=2)\n&gt;&gt;&gt; for plot in plots:\n...     print(plot)\nPlot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The row number of the plot. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The column number of the plot. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar. Defaults to None.</p> <code>None</code> <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Plot]]: A list of matching plots, or None if not found.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    cultivar_accession: str = None,\n    cultivar_population: str = None\n) -&gt; Optional[List[\"Plot\"]]:\n    \"\"\"\n    Search for plots based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; plots = Plot.search(plot_number=1, plot_row_number=2)\n        &gt;&gt;&gt; for plot in plots:\n        ...     print(plot)\n        Plot(plot_number=1, plot_row_number=2, plot_column_number=3, id=UUID(...))\n\n    Args:\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The row number of the plot. Defaults to None.\n        plot_column_number (int, optional): The column number of the plot. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        cultivar_accession (str, optional): The accession of the cultivar. Defaults to None.\n        cultivar_population (str, optional): The population of the cultivar. Defaults to None.\n    Returns:\n        Optional[List[Plot]]: A list of matching plots, or None if not found.\n    \"\"\"\n    try:\n        if not any([plot_number, plot_row_number, plot_column_number, experiment_name, season_name, site_name]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n\n        plots = PlotViewModel.search(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population\n        )\n        if not plots or len(plots) == 0:\n            print(\"No plots found with the provided search parameters.\")\n            return None\n        plots = [cls.model_validate(plot) for plot in plots]\n        return plots if plots else None\n    except Exception as e:\n        print(f\"Error searching plots: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.set_info","title":"<code>set_info(plot_info)</code>","text":"<p>Set the additional information of the plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_plot = plot.set_info({'key': 'new_value'})\n&gt;&gt;&gt; print(updated_plot.get_info())\n{'key': 'new_value'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Plot]: The updated plot instance, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def set_info(self, plot_info: dict) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Set the additional information of the plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_plot = plot.set_info({'key': 'new_value'})\n        &gt;&gt;&gt; print(updated_plot.get_info())\n        {'key': 'new_value'}\n\n    Args:\n        plot_info (dict): The new information to set.\n    Returns:\n        Optional[Plot]: The updated plot instance, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        plot = PlotModel.get(current_id)\n        if not plot:\n            print(f\"Plot with ID {current_id} does not exist.\")\n            return None\n        plot = PlotModel.update(\n            plot,\n            plot_info=plot_info\n        )\n        plot = self.model_validate(plot)\n        self.refresh()\n        return self\n    except Exception as e:\n        print(f\"Error setting plot info: {e}\")  \n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.unassociate_cultivar","title":"<code>unassociate_cultivar(cultivar_accession, cultivar_population)</code>","text":"<p>Unassociate this plot from a cultivar.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; cultivar = plot.unassociate_cultivar(\"Accession 1\", \"Population 1\")\n&gt;&gt;&gt; print(cultivar)\nCultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>cultivar_accession</code> <code>str</code> <p>The accession of the cultivar.</p> required <code>cultivar_population</code> <code>str</code> <p>The population of the cultivar.</p> required <p>Returns:     Optional[Cultivar]: The unassociated cultivar, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def unassociate_cultivar(\n    self,\n    cultivar_accession: str,\n    cultivar_population: str\n) -&gt; Optional[\"Cultivar\"]:\n    \"\"\"\n    Unassociate this plot from a cultivar.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; cultivar = plot.unassociate_cultivar(\"Accession 1\", \"Population 1\")\n        &gt;&gt;&gt; print(cultivar)\n        Cultivar(cultivar_accession='Accession 1', cultivar_population='Population 1', id=UUID(...))\n\n    Args:\n        cultivar_accession (str): The accession of the cultivar.\n        cultivar_population (str): The population of the cultivar.\n    Returns:\n        Optional[Cultivar]: The unassociated cultivar, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.cultivar import Cultivar\n        cultivar = Cultivar.get(\n            cultivar_accession=cultivar_accession,\n            cultivar_population=cultivar_population\n        )\n        if not cultivar:\n            print(f\"Cultivar {cultivar_accession} {cultivar_population} does not exist.\")\n            return None\n        existing_association = PlotCultivarModel.get_by_parameters(\n            plot_id=self.id,\n            cultivar_id=cultivar.id\n        )\n        if not existing_association:\n            print(f\"Cultivar {cultivar_accession} {cultivar_population} is not assigned to this plot.\")\n            return None\n        is_deleted = PlotCultivarModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassign cultivar {cultivar_accession} {cultivar_population} from plot {self.id}.\")\n            return None\n        self.refresh()\n        return cultivar\n    except Exception as e:\n        print(f\"Error unassigning cultivar from plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.unassociate_experiment","title":"<code>unassociate_experiment()</code>","text":"<p>Unassociate this plot from its experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; experiment = plot.unassociate_experiment()\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Experiment]</code> <p>Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def unassociate_experiment(self) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this plot from its experiment.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; experiment = plot.unassociate_experiment()\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name='Experiment 1', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID(...))\n\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        if not self.experiment_id:\n            print(\"Plot does not belong to any experiment.\")\n            return None\n        experiment = Experiment.get_by_id(self.experiment_id)\n        db_plot = PlotModel.get(self.id)\n        db_plot = PlotModel.update_parameter(\n            db_plot,\n            \"experiment_id\",\n            None\n        )\n        self.refresh()\n        return experiment   \n    except Exception as e:\n        print(f\"Error unassigning experiment from plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.unassociate_season","title":"<code>unassociate_season()</code>","text":"<p>Unassociate this plot from its season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; season = plot.unassociate_season()\n&gt;&gt;&gt; print(season)\nSeason(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Season]</code> <p>Optional[Season]: The unassociated season, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def unassociate_season(self) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Unassociate this plot from its season.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; season = plot.unassociate_season()\n        &gt;&gt;&gt; print(season)\n        Season(season_name='Season 1', season_start_date='2023-01-01', season_end_date='2023-12-31', id=UUID(...))\n\n    Returns:\n        Optional[Season]: The unassociated season, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.season import Season\n        if not self.season_id:\n            print(\"Plot does not belong to any season.\")\n            return None\n        season = Season.get_by_id(self.season_id)\n        db_plot = PlotModel.get(self.id)\n        db_plot = PlotModel.update_parameter(\n            db_plot,\n            \"season_id\",\n            None\n        )\n        self.refresh()\n        return season\n    except Exception as e:\n        print(f\"Error unassigning season from plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.unassociate_site","title":"<code>unassociate_site()</code>","text":"<p>Unassociate this plot from its site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; site = plot.unassociate_site()\n&gt;&gt;&gt; print(site)\nSite(site_name='Site 1', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Site]</code> <p>Optional[Site]: The unassociated site, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def unassociate_site(self) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Unassociate this plot from its site.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; site = plot.unassociate_site()\n        &gt;&gt;&gt; print(site)\n        Site(site_name='Site 1', id=UUID(...))\n\n    Returns:\n        Optional[Site]: The unassociated site, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.site import Site\n        if not self.site_id:\n            print(\"Plot does not belong to any site.\")\n            return None\n        site = Site.get_by_id(self.site_id)\n        db_plot = PlotModel.get(self.id)\n        db_plot = PlotModel.update_parameter(\n            db_plot,\n            \"site_id\",\n            None\n        )\n        self.refresh()\n        return site\n    except Exception as e:\n        print(f\"Error unassigning site from plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/plots/#gemini.api.plot.Plot.update","title":"<code>update(plot_number=None, plot_row_number=None, plot_column_number=None, plot_info=None, plot_geometry_info=None)</code>","text":"<p>Update the details of the plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_plot = plot.update(plot_number=2, plot_row_number=3)\n&gt;&gt;&gt; print(updated_plot)\nPlot(plot_number=2, plot_row_number=3, plot_column_number=3, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The new plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The new row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The new column number. Defaults to None.</p> <code>None</code> <code>plot_info</code> <code>dict</code> <p>The new plot information. Defaults to None.</p> <code>None</code> <code>plot_geometry_info</code> <code>dict</code> <p>The new geometry information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plot]: The updated plot instance, or None if an error occurred.</p> Source code in <code>gemini/api/plot.py</code> <pre><code>def update(\n    self,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    plot_info: dict = None,\n    plot_geometry_info: dict = None\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Update the details of the plot.\n\n    Examples:\n        &gt;&gt;&gt; plot = Plot.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_plot = plot.update(plot_number=2, plot_row_number=3)\n        &gt;&gt;&gt; print(updated_plot)\n        Plot(plot_number=2, plot_row_number=3, plot_column_number=3, id=UUID('...'))\n\n    Args:\n        plot_number (int, optional): The new plot number. Defaults to None.\n        plot_row_number (int, optional): The new row number. Defaults to None.\n        plot_column_number (int, optional): The new column number. Defaults to None.\n        plot_info (dict, optional): The new plot information. Defaults to None.\n        plot_geometry_info (dict, optional): The new geometry information. Defaults to None.\n    Returns:\n        Optional[Plot]: The updated plot instance, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([plot_number, plot_row_number, plot_column_number, plot_info, plot_geometry_info]):\n            print(\"At least one parameter must be provided.\")\n            return None\n\n        current_id = self.id\n        plot = PlotModel.get(current_id)\n        if not plot:\n            print(f\"Plot with ID {current_id} does not exist.\")\n            return None\n        plot = PlotModel.update(\n            plot,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            plot_info=plot_info,\n            plot_geometry_info=plot_geometry_info\n        )\n        plot = self.model_validate(plot)\n        self.refresh()\n        return plot\n    except Exception as e:\n        print(f\"Error updating plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/","title":"Procedure Records API","text":""},{"location":"api/procedure_records/#description","title":"Description","text":"<p>A procedure record is a record that belongs to a specific Procedure, a specific Experiment, Season and Site.</p> <p>It is defined by the following properties:</p> Property Type Description <code>id</code> <code>UUID</code> The unique identifier of the procedure record. <code>timestamp</code> <code>datetime</code> The timestamp of the record. <code>collection_date</code> <code>date</code> The collection date of the record. <code>procedure_name</code> <code>string</code> The name of the associated procedure. <code>procedure_id</code> <code>UUID</code> The ID of the associated procedure. <code>procedure_data</code> <code>dict</code> The data associated with the procedure record. <code>dataset_id</code> <code>UUID</code> The ID of the associated dataset. <code>dataset_name</code> <code>string</code> The name of the associated dataset. <code>experiment_name</code> <code>string</code> The name of the associated experiment. <code>experiment_id</code> <code>UUID</code> The ID of the associated experiment. <code>season_name</code> <code>string</code> The name of the associated season. <code>season_id</code> <code>UUID</code> The ID of the associated season. <code>site_name</code> <code>string</code> The name of the associated site. <code>site_id</code> <code>UUID</code> The ID of the associated site. <code>record_file</code> <code>string</code> The file path for the record data in the object storage. <code>record_info</code> <code>dict</code> Additional information about the record. <p>A procedure record is uniquely identified within a procedure by its <code>timestamp</code>, <code>procedure_name</code>, <code>dataset_name</code>, <code>experiment_name</code>, <code>season_name</code>, and <code>site_name</code>. There will be no two procedure records with the same timestamp and belonging to the same procedure, dataset, experiment, season and site.</p>"},{"location":"api/procedure_records/#module","title":"Module","text":"<p>This module defines the ProcedureRecord class, which represents a record of a procedure, including metadata, associations to datasets, experiments, sites, and seasons, and file handling capabilities.</p> <p>It includes methods for creating, retrieving, updating, and deleting procedure records, as well as methods for checking existence, searching, filtering, and managing file handling for records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a procedure record with the given parameters exists.</li> <li><code>create</code>: Create a new procedure record.</li> <li><code>get</code>: Retrieve a procedure record by its parameters.</li> <li><code>get_by_id</code>: Retrieve a procedure record by its ID.</li> <li><code>get_all</code>: Retrieve all procedure records.</li> <li><code>search</code>: Search for procedure records based on various criteria.</li> <li><code>filter</code>: Filter procedure records based on custom logic.</li> <li><code>update</code>: Update the details of a procedure record.</li> <li><code>delete</code>: Delete a procedure record.</li> <li><code>refresh</code>: Refresh the procedure record's data from the database.</li> <li><code>get_info</code>: Get the additional information of the procedure record.</li> <li><code>set_info</code>: Set the additional information of the procedure record.</li> <li>File handling methods from FileHandlerMixin for managing record files.</li> </ul>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord","title":"<code>ProcedureRecord</code>","text":"<p>               Bases: <code>APIBase</code>, <code>FileHandlerMixin</code></p> <p>Represents a record of a procedure, including metadata, associations to datasets, experiments, sites, and seasons, and file handling capabilities.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the procedure record.</p> <code>timestamp</code> <code>Optional[datetime]</code> <p>The timestamp of the record.</p> <code>collection_date</code> <code>Optional[date]</code> <p>The collection date of the record.</p> <code>dataset_id</code> <code>Optional[ID]</code> <p>The ID of the associated dataset.</p> <code>dataset_name</code> <code>Optional[str]</code> <p>The name of the associated dataset.</p> <code>procedure_id</code> <code>Optional[ID]</code> <p>The ID of the associated procedure.</p> <code>procedure_name</code> <code>Optional[str]</code> <p>The name of the associated procedure.</p> <code>procedure_data</code> <code>Optional[dict]</code> <p>The data content of the procedure record.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> <code>experiment_name</code> <code>Optional[str]</code> <p>The name of the associated experiment.</p> <code>season_id</code> <code>Optional[ID]</code> <p>The ID of the associated season.</p> <code>season_name</code> <code>Optional[str]</code> <p>The name of the associated season.</p> <code>site_id</code> <code>Optional[ID]</code> <p>The ID of the associated site.</p> <code>site_name</code> <code>Optional[str]</code> <p>The name of the associated site.</p> <code>record_file</code> <code>Optional[str]</code> <p>The file path or URI of the record file.</p> <code>record_info</code> <code>Optional[dict]</code> <p>Additional information about the record.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>class ProcedureRecord(APIBase, FileHandlerMixin):\n    \"\"\"\n    Represents a record of a procedure, including metadata, associations to datasets, experiments, sites, and seasons, and file handling capabilities.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the procedure record.\n        timestamp (Optional[datetime]): The timestamp of the record.\n        collection_date (Optional[date]): The collection date of the record.\n        dataset_id (Optional[ID]): The ID of the associated dataset.\n        dataset_name (Optional[str]): The name of the associated dataset.\n        procedure_id (Optional[ID]): The ID of the associated procedure.\n        procedure_name (Optional[str]): The name of the associated procedure.\n        procedure_data (Optional[dict]): The data content of the procedure record.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n        experiment_name (Optional[str]): The name of the associated experiment.\n        season_id (Optional[ID]): The ID of the associated season.\n        season_name (Optional[str]): The name of the associated season.\n        site_id (Optional[ID]): The ID of the associated site.\n        site_name (Optional[str]): The name of the associated site.\n        record_file (Optional[str]): The file path or URI of the record file.\n        record_info (Optional[dict]): Additional information about the record.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"procedure_record_id\"))\n    timestamp: Optional[datetime] = None\n    collection_date: Optional[date] = None\n    dataset_id: Optional[ID] = None\n    dataset_name: Optional[str] = None\n    procedure_id: Optional[ID] = None\n    procedure_name: Optional[str] = None\n    procedure_data: Optional[dict] = None\n    experiment_id: Optional[ID] = None\n    experiment_name : Optional[str] = None\n    season_id: Optional[ID] = None\n    season_name: Optional[str] = None\n    site_id: Optional[ID] = None\n    site_name: Optional[str] = None\n    record_file: Optional[str] = None\n    record_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the ProcedureRecord object.\"\"\"\n        return f\"ProcedureRecord(id={self.id}, timestamp={self.timestamp}, procedure_name={self.procedure_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the ProcedureRecord object.\"\"\"\n        return f\"ProcedureRecord(id={self.id}, timestamp={self.timestamp}, procedure_name={self.procedure_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n\n    @classmethod\n    def exists(\n        cls,\n        timestamp: datetime,\n        procedure_name: str,\n        dataset_name: str,\n        experiment_name: str,\n        season_name: str,\n        site_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a procedure record with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; ProcedureRecord.exists(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     procedure_name=\"SampleProcedure\",\n            ...     dataset_name=\"SampleDataset\",\n            ...     experiment_name=\"SampleExperiment\",\n            ...     season_name=\"SampleSeason\",\n            ...     site_name=\"SampleSite\"\n            ... )\n            True\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            procedure_name (str): The name of the procedure.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment.\n            season_name (str): The name of the season.\n            site_name (str): The name of the site.\n        Returns:\n            bool: True if the procedure record exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ProcedureRecordModel.exists(\n                timestamp=timestamp,\n                procedure_name=procedure_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of ProcedureRecord: {e}\")\n            raise e\n\n    @classmethod\n    def create(\n        cls,\n        timestamp: datetime = datetime.now(),\n        collection_date: date = None,\n        dataset_name: str = None,\n        procedure_name: str = None,\n        procedure_data: dict = {},\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n        insert_on_create: bool = True\n    ) -&gt; Optional[\"ProcedureRecord\"]:\n        \"\"\"\n        Create a new procedure record.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.create(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"SampleDataset\",\n            ...     procedure_name=\"SampleProcedure\",\n            ...     procedure_data={\"key\": \"value\"},\n            ...     experiment_name=\"SampleExperiment\",\n            ...     site_name=\"SampleSite\",\n            ...     season_name=\"SampleSeason\",\n            ...     record_file=\"/path/to/file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"},\n            ...     insert_on_create=True\n            ... )\n            &gt;&gt;&gt; print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            procedure_name (str, optional): The name of the procedure. Defaults to None.\n            procedure_data (dict, optional): The data content. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            record_file (str, optional): The file path or URI. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n            insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n        Returns:\n            Optional[ProcedureRecord]: The created procedure record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, site_name, season_name]):\n                raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n            if not procedure_name:\n                raise ValueError(\"Procedure name is required.\")\n            if not dataset_name:\n                raise ValueError(\"Dataset name is required.\")\n            if not timestamp:\n                raise ValueError(\"Timestamp is required.\")\n            if not collection_date:\n                collection_date = timestamp.date()\n            if not procedure_data and not record_file:\n                raise ValueError(\"At least one of procedure_data or record_file must be provided.\")\n            procedure_record = ProcedureRecord(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                procedure_name=procedure_name,\n                procedure_data=procedure_data,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                record_file=record_file,\n                record_info=record_info\n            )\n            if insert_on_create:\n                insert_success, inserted_record_ids = cls.insert([procedure_record])\n                if not insert_success:\n                    print(f\"Failed to insert ProcedureRecord: {procedure_record}\")\n                    return None\n                if not inserted_record_ids or len(inserted_record_ids) == 0:\n                    print(f\"No new ProcedureRecord was inserted.\")\n                    return None\n                inserted_record_id = inserted_record_ids[0]\n                procedure_record = cls.get_by_id(inserted_record_id)\n            return procedure_record\n        except Exception as e:\n            print(f\"Error creating ProcedureRecord: {e}\")\n            raise None\n\n    @classmethod\n    def insert(cls, records: List[\"ProcedureRecord\"]) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a list of procedure records into the database.\n\n        Args:\n            records (List[ProcedureRecord]): The records to insert.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not records or len(records) == 0:\n                print(f\"No records provided for insertion.\")\n                return False, []\n            records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing ProcedureRecords\")]\n            records_to_insert = []\n            for record in records:\n                record_dict = record.model_dump()\n                record_dict = {k: v for k, v in record_dict.items() if v is not None}\n                records_to_insert.append(record_dict)\n            print(f\"Inserting {len(records_to_insert)} records.\")\n            inserted_record_ids = ProcedureRecordModel.insert_bulk('procedure_records_unique', records_to_insert)\n            print(f\"Inserted {len(inserted_record_ids)} records.\")\n            return True, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting ProcedureRecords: {e}\")\n            return False, []\n\n    @classmethod\n    def get(\n        cls,\n        timestamp: datetime,\n        procedure_name: str,\n        dataset_name: str,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; Optional[\"ProcedureRecord\"]:\n        \"\"\"\n        Retrieve a procedure record by its parameters.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.get(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     procedure_name=\"SampleProcedure\",\n            ...     dataset_name=\"SampleDataset\",\n            ...     experiment_name=\"SampleExperiment\",\n            ...     season_name=\"SampleSeason\",\n            ...     site_name=\"SampleSite\"\n            ... )\n            &gt;&gt;&gt; print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            procedure_name (str): The name of the procedure.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            Optional[ProcedureRecord]: The procedure record, or None if not found.\n        \"\"\"\n        try:\n            if not timestamp:\n                print(f\"Timestamp is required to get ProcedureRecord.\")\n                return None\n            if not dataset_name:\n                print(f\"Dataset name is required to get ProcedureRecord.\")\n                return None\n            if not procedure_name:\n                print(f\"Procedure name is required to get ProcedureRecord.\")\n                return None\n            if not experiment_name and not season_name and not site_name:\n                print(f\"At least one of experiment_name, season_name, or site_name is required to get ProcedureRecord.\")\n                return None\n            procedure_record = ProcedureRecordsIMMVModel.get_by_parameters(\n                timestamp=timestamp,\n                procedure_name=procedure_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not procedure_record:\n                print(f\"No ProcedureRecord found for the given parameters.\")\n                return None\n            procedure_record = cls.model_validate(procedure_record)\n            return procedure_record\n        except Exception as e:\n            print(f\"Error getting ProcedureRecord: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ProcedureRecord\"]:\n        \"\"\"\n        Retrieve a procedure record by its ID.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n        Args:\n            id (UUID | int | str): The ID of the procedure record.\n        Returns:\n            Optional[ProcedureRecord]: The procedure record, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ProcedureRecordModel.get(id)\n            if not db_instance:\n                print(f\"No ProcedureRecord found with ID: {id}\")\n                return None\n            record = cls.model_validate(db_instance)\n            return record\n        except Exception as e:\n            print(f\"Error getting ProcedureRecord by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls, limit: int = 100) -&gt; Optional[List[\"ProcedureRecord\"]]:\n        \"\"\"\n        Retrieve all procedure records, up to a specified limit.\n\n        Examples:\n            &gt;&gt;&gt; records = ProcedureRecord.get_all(limit=10)\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n\n        Args:\n            limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n        Returns:\n            Optional[List[ProcedureRecord]]: List of procedure records, or None if not found.\n        \"\"\"\n        try:\n            records = ProcedureRecordModel.all(limit=limit)\n            if not records or len(records) == 0:\n                print(f\"No ProcedureRecords found.\")\n                return None\n            records = [cls.model_validate(record) for record in records]\n            return records\n        except Exception as e:\n            print(f\"Error getting all ProcedureRecords: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        procedure_name: str = None,\n        procedure_data: dict = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        collection_date: date = None,\n        record_info: dict = None\n    ) -&gt; Generator[\"ProcedureRecord\", None, None]:\n        \"\"\"\n        Search for procedure records based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; records = ProcedureRecord.search(\n            ...     procedure_name=\"SampleProcedure\",\n            ...     dataset_name=\"SampleDataset\",\n            ...     experiment_name=\"SampleExperiment\",\n            ...     site_name=\"SampleSite\",\n            ...     season_name=\"SampleSeason\",\n            ...     collection_date=date(2023, 10, 1),\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n\n        Args:\n            procedure_name (str, optional): The name of the procedure. Defaults to None.\n            procedure_data (dict, optional): The data content. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Yields:\n            ProcedureRecord: Matching procedure records.\n        \"\"\"\n        try:\n            if not any([procedure_name, dataset_name, experiment_name, site_name, season_name, collection_date, record_info]):\n                print(f\"At least one parameter must be provided for search.\")\n                return\n            records = ProcedureRecordsIMMVModel.stream(\n                procedure_name=procedure_name,\n                procedure_data=procedure_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                collection_date=collection_date,\n                record_info=record_info\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error searching ProcedureRecords: {e}\")\n            yield None\n\n\n    @classmethod\n    def filter(\n        cls,\n        procedure_names: List[str] = None,\n        dataset_names: List[str] = None,\n        start_timestamp: datetime = None,\n        end_timestamp: datetime = None,\n        experiment_names: List[str] = None,\n        site_names: List[str] = None,\n        season_names: List[str] = None\n    ) -&gt; Generator[\"ProcedureRecord\", None, None]:\n        \"\"\"\n        Filter procedure records based on custom logic.\n\n        Examples:\n            &gt;&gt;&gt; records = ProcedureRecord.filter(\n            ...     procedure_names=[\"SampleProcedure\", \"AnotherProcedure\"],\n            ...     dataset_names=[\"SampleDataset\", \"AnotherDataset\"],\n            ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n            ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n            ...     experiment_names=[\"SampleExperiment\", \"AnotherExperiment\"],\n            ...     site_names=[\"SampleSite\", \"AnotherSite\"],\n            ...     season_names=[\"SampleSeason\", \"AnotherSeason\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n\n        Args:\n            procedure_names (List[str], optional): List of procedure names. Defaults to None.\n            dataset_names (List[str], optional): List of dataset names. Defaults to None.\n            start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n            end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n            experiment_names (List[str], optional): List of experiment names. Defaults to None.\n            site_names (List[str], optional): List of site names. Defaults to None.\n            season_names (List[str], optional): List of season names. Defaults to None.\n        Yields:\n            ProcedureRecord: Filtered procedure records.\n        \"\"\"\n        try:\n            if not any([procedure_names, dataset_names, start_timestamp, end_timestamp, experiment_names, site_names, season_names]):\n                print(f\"At least one parameter must be provided for filtering.\")\n                return\n            records = ProcedureRecordModel.filter_records(\n                procedure_names=procedure_names,\n                dataset_names=dataset_names,\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                experiment_names=experiment_names,\n                site_names=site_names,\n                season_names=season_names\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error filtering ProcedureRecords: {e}\")\n            yield None\n\n    def update(\n        self,\n        procedure_data: dict = None,\n        record_info: dict = None\n    ) -&gt; Optional[\"ProcedureRecord\"]:\n        \"\"\"\n        Update the details of the procedure record.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = record.update(\n            ...     procedure_data={\"new_key\": \"new_value\"},\n            ...     record_info={\"new_info_key\": \"new_info_value\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n        Args:\n            procedure_data (dict, optional): The new procedure data. Defaults to None.\n            record_info (dict, optional): The new record information. Defaults to None.\n        Returns:\n            Optional[ProcedureRecord]: The updated procedure record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([procedure_data, record_info]):\n                print(f\"At least one parameter must be provided for update.\")\n                return None\n            current_id = self.id\n            procedure_record = ProcedureRecordModel.get(current_id)\n            if not procedure_record:\n                print(f\"No ProcedureRecord found with ID: {current_id}\")\n                return None\n            procedure_record = ProcedureRecordModel.update(\n                procedure_record,\n                procedure_data=procedure_data,\n                record_info=record_info\n            )\n            procedure_record = self.model_validate(procedure_record)\n            self.refresh()\n            return procedure_record\n        except Exception as e:\n            print(f\"Error updating ProcedureRecord: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the procedure record.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; success = record.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the procedure record was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure_record = ProcedureRecordModel.get(current_id)\n            if not procedure_record:\n                print(f\"No ProcedureRecord found with ID: {current_id}\")\n                return False\n            ProcedureRecordModel.delete(procedure_record)\n            return True\n        except Exception as e:\n            print(f\"Error deleting ProcedureRecord: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"ProcedureRecord\"]:\n        \"\"\"\n        Refresh the procedure record's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_record = record.refresh()\n            &gt;&gt;&gt; print(refreshed_record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n        Returns:\n            Optional[ProcedureRecord]: The refreshed procedure record, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ProcedureRecordModel.get(self.id)\n            if not db_instance:\n                print(f\"No ProcedureRecord found with ID: {self.id}\")\n                return None\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing ProcedureRecord: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the procedure record.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; info = record.get_info()\n            &gt;&gt;&gt; print(info)\n            {'info_key': 'info_value'}\n\n        Returns:\n            Optional[dict]: The record's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure_record = ProcedureRecordModel.get(current_id)\n            if not procedure_record:\n                print(f\"No ProcedureRecord found with ID: {current_id}\")\n                return None\n            record_info = procedure_record.record_info\n            if not record_info:\n                print(f\"No record info found for ProcedureRecord with ID: {current_id}\")\n                return None\n            return record_info\n        except Exception as e:\n            print(f\"Error getting record info: {e}\")\n            return None\n\n    def set_info(self, record_info: dict) -&gt; Optional[\"ProcedureRecord\"]:\n        \"\"\"\n        Set the additional information of the procedure record.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = record.set_info(\n            ...     record_info={\"new_info_key\": \"new_info_value\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n        Args:\n            record_info (dict): The new information to set.\n        Returns:\n            Optional[ProcedureRecord]: The updated procedure record, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure_record = ProcedureRecordModel.get(current_id)\n            if not procedure_record:\n                print(f\"No ProcedureRecord found with ID: {current_id}\")\n                return None\n            ProcedureRecordModel.update(\n                procedure_record,\n                record_info=record_info\n            )\n            procedure_record = self.model_validate(procedure_record)\n            self.refresh()\n            return procedure_record\n        except Exception as e:\n            print(f\"Error setting record info: {e}\")\n            return None\n\n    @classmethod\n    def create_file_uri(cls, record: \"ProcedureRecord\") -&gt; Optional[str]:\n        \"\"\"\n        Create a file URI for the given procedure record.\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"SampleDataset\",\n            ...     procedure_name=\"SampleProcedure\",\n            ...     experiment_name=\"SampleExperiment\",\n            ...     site_name=\"SampleSite\",\n            ...     season_name=\"SampleSeason\",\n            ...     record_file=\"/path/to/file.txt\"\n            ... )\n            &gt;&gt;&gt; file_uri = ProcedureRecord.create_file_uri(record)\n            &gt;&gt;&gt; print(file_uri)\n            procedure_data/SampleExperiment/SampleProcedure/SampleDataset/2023-10-01/SampleSite/SampleSeason/1706467200000.txt\n\n        Args:\n            record (ProcedureRecord): The procedure record for which to create the file URI.\n        Returns:\n            Optional[str]: The file URI, or None if creation failed.\n        \"\"\"\n        try:\n            original_file_path = record.record_file\n            if not original_file_path:\n                print(f\"record_file is required to create file URI.\")\n                return None\n            if not os.path.exists(original_file_path):\n                print(f\"File {original_file_path} does not exist.\")\n                return None\n            collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n            procedure_name = record.procedure_name\n            dataset_name = record.dataset_name\n            experiment_name = record.experiment_name\n            season_name = record.season_name\n            site_name = record.site_name\n            file_extension = os.path.splitext(original_file_path)[1]\n            file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n            file_key = f\"procedure_data/{experiment_name}/{procedure_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n            return file_key\n        except Exception as e:\n            print(f\"Error creating file URI: {e}\")\n            return None\n\n\n    @classmethod\n    def process_record(cls, record: \"ProcedureRecord\") -&gt; \"ProcedureRecord\":\n        \"\"\"\n        Process a procedure record (custom logic, e.g., file upload).\n\n        Examples:\n            &gt;&gt;&gt; record = ProcedureRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"SampleDataset\",\n            ...     procedure_name=\"SampleProcedure\",\n            ...     experiment_name=\"SampleExperiment\",\n            ...     site_name=\"SampleSite\",\n            ...     season_name=\"SampleSeason\",\n            ...     record_file=\"/path/to/file.txt\"\n            ... )\n            &gt;&gt;&gt; processed_record = ProcedureRecord.process_record(record)\n            &gt;&gt;&gt; print(processed_record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n        Args:\n            record (ProcedureRecord): The procedure record to process.\n        Returns:\n            ProcedureRecord: The processed procedure record.\n        \"\"\"\n        try:\n            file = record.record_file\n            if not file:\n                print(f\"record_file is required to process ProcedureRecord.\")\n                return record\n            file_key = cls.create_file_uri(record)\n            if not file_key:\n                print(f\"Failed to create file URI for ProcedureRecord: {record}\")\n                return record\n            content_type, _ = mimetypes.guess_type(file)\n            # Generate Metadata for upload\n            file_metadata = {\n                \"Procedure-Name\": record.procedure_name,\n                \"Dataset-Name\": record.dataset_name,\n                \"Experiment-Name\": record.experiment_name,\n                \"Site-Name\": record.site_name,\n                \"Season-Name\": record.season_name,\n                \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n                \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n            }\n            cls.minio_storage_provider.upload_file(\n                object_name=file_key,\n                input_file_path=file,\n                bucket_name=\"gemini\",\n                content_type=content_type,\n                metadata=file_metadata\n            )\n            record.record_file = file_key\n            return record\n        except Exception as e:\n            print(f\"Error processing ProcedureRecord: {e}\")\n            return record\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the ProcedureRecord object.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the ProcedureRecord object.\"\"\"\n    return f\"ProcedureRecord(id={self.id}, timestamp={self.timestamp}, procedure_name={self.procedure_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the ProcedureRecord object.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the ProcedureRecord object.\"\"\"\n    return f\"ProcedureRecord(id={self.id}, timestamp={self.timestamp}, procedure_name={self.procedure_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.create","title":"<code>create(timestamp=datetime.now(), collection_date=None, dataset_name=None, procedure_name=None, procedure_data={}, experiment_name=None, site_name=None, season_name=None, record_file=None, record_info={}, insert_on_create=True)</code>  <code>classmethod</code>","text":"<p>Create a new procedure record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.create(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"SampleDataset\",\n...     procedure_name=\"SampleProcedure\",\n...     procedure_data={\"key\": \"value\"},\n...     experiment_name=\"SampleExperiment\",\n...     site_name=\"SampleSite\",\n...     season_name=\"SampleSeason\",\n...     record_file=\"/path/to/file.txt\",\n...     record_info={\"info_key\": \"info_value\"},\n...     insert_on_create=True\n... )\n&gt;&gt;&gt; print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to now.</p> <code>now()</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>procedure_name</code> <code>str</code> <p>The name of the procedure. Defaults to None.</p> <code>None</code> <code>procedure_data</code> <code>dict</code> <p>The data content. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file path or URI. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <code>insert_on_create</code> <code>bool</code> <p>Whether to insert on create. Defaults to True.</p> <code>True</code> <p>Returns:     Optional[ProcedureRecord]: The created procedure record, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    timestamp: datetime = datetime.now(),\n    collection_date: date = None,\n    dataset_name: str = None,\n    procedure_name: str = None,\n    procedure_data: dict = {},\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n    insert_on_create: bool = True\n) -&gt; Optional[\"ProcedureRecord\"]:\n    \"\"\"\n    Create a new procedure record.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.create(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"SampleDataset\",\n        ...     procedure_name=\"SampleProcedure\",\n        ...     procedure_data={\"key\": \"value\"},\n        ...     experiment_name=\"SampleExperiment\",\n        ...     site_name=\"SampleSite\",\n        ...     season_name=\"SampleSeason\",\n        ...     record_file=\"/path/to/file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"},\n        ...     insert_on_create=True\n        ... )\n        &gt;&gt;&gt; print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        procedure_name (str, optional): The name of the procedure. Defaults to None.\n        procedure_data (dict, optional): The data content. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        record_file (str, optional): The file path or URI. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n        insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n    Returns:\n        Optional[ProcedureRecord]: The created procedure record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, site_name, season_name]):\n            raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n        if not procedure_name:\n            raise ValueError(\"Procedure name is required.\")\n        if not dataset_name:\n            raise ValueError(\"Dataset name is required.\")\n        if not timestamp:\n            raise ValueError(\"Timestamp is required.\")\n        if not collection_date:\n            collection_date = timestamp.date()\n        if not procedure_data and not record_file:\n            raise ValueError(\"At least one of procedure_data or record_file must be provided.\")\n        procedure_record = ProcedureRecord(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            procedure_name=procedure_name,\n            procedure_data=procedure_data,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            record_file=record_file,\n            record_info=record_info\n        )\n        if insert_on_create:\n            insert_success, inserted_record_ids = cls.insert([procedure_record])\n            if not insert_success:\n                print(f\"Failed to insert ProcedureRecord: {procedure_record}\")\n                return None\n            if not inserted_record_ids or len(inserted_record_ids) == 0:\n                print(f\"No new ProcedureRecord was inserted.\")\n                return None\n            inserted_record_id = inserted_record_ids[0]\n            procedure_record = cls.get_by_id(inserted_record_id)\n        return procedure_record\n    except Exception as e:\n        print(f\"Error creating ProcedureRecord: {e}\")\n        raise None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.create_file_uri","title":"<code>create_file_uri(record)</code>  <code>classmethod</code>","text":"<p>Create a file URI for the given procedure record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"SampleDataset\",\n...     procedure_name=\"SampleProcedure\",\n...     experiment_name=\"SampleExperiment\",\n...     site_name=\"SampleSite\",\n...     season_name=\"SampleSeason\",\n...     record_file=\"/path/to/file.txt\"\n... )\n&gt;&gt;&gt; file_uri = ProcedureRecord.create_file_uri(record)\n&gt;&gt;&gt; print(file_uri)\nprocedure_data/SampleExperiment/SampleProcedure/SampleDataset/2023-10-01/SampleSite/SampleSeason/1706467200000.txt\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>ProcedureRecord</code> <p>The procedure record for which to create the file URI.</p> required <p>Returns:     Optional[str]: The file URI, or None if creation failed.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef create_file_uri(cls, record: \"ProcedureRecord\") -&gt; Optional[str]:\n    \"\"\"\n    Create a file URI for the given procedure record.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"SampleDataset\",\n        ...     procedure_name=\"SampleProcedure\",\n        ...     experiment_name=\"SampleExperiment\",\n        ...     site_name=\"SampleSite\",\n        ...     season_name=\"SampleSeason\",\n        ...     record_file=\"/path/to/file.txt\"\n        ... )\n        &gt;&gt;&gt; file_uri = ProcedureRecord.create_file_uri(record)\n        &gt;&gt;&gt; print(file_uri)\n        procedure_data/SampleExperiment/SampleProcedure/SampleDataset/2023-10-01/SampleSite/SampleSeason/1706467200000.txt\n\n    Args:\n        record (ProcedureRecord): The procedure record for which to create the file URI.\n    Returns:\n        Optional[str]: The file URI, or None if creation failed.\n    \"\"\"\n    try:\n        original_file_path = record.record_file\n        if not original_file_path:\n            print(f\"record_file is required to create file URI.\")\n            return None\n        if not os.path.exists(original_file_path):\n            print(f\"File {original_file_path} does not exist.\")\n            return None\n        collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n        procedure_name = record.procedure_name\n        dataset_name = record.dataset_name\n        experiment_name = record.experiment_name\n        season_name = record.season_name\n        site_name = record.site_name\n        file_extension = os.path.splitext(original_file_path)[1]\n        file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n        file_key = f\"procedure_data/{experiment_name}/{procedure_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n        return file_key\n    except Exception as e:\n        print(f\"Error creating file URI: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.delete","title":"<code>delete()</code>","text":"<p>Delete the procedure record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; success = record.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the procedure record was deleted, False otherwise.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the procedure record.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; success = record.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the procedure record was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure_record = ProcedureRecordModel.get(current_id)\n        if not procedure_record:\n            print(f\"No ProcedureRecord found with ID: {current_id}\")\n            return False\n        ProcedureRecordModel.delete(procedure_record)\n        return True\n    except Exception as e:\n        print(f\"Error deleting ProcedureRecord: {e}\")\n        return False\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.exists","title":"<code>exists(timestamp, procedure_name, dataset_name, experiment_name, season_name, site_name)</code>  <code>classmethod</code>","text":"<p>Check if a procedure record with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ProcedureRecord.exists(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     procedure_name=\"SampleProcedure\",\n...     dataset_name=\"SampleDataset\",\n...     experiment_name=\"SampleExperiment\",\n...     season_name=\"SampleSeason\",\n...     site_name=\"SampleSite\"\n... )\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:     bool: True if the procedure record exists, False otherwise.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    timestamp: datetime,\n    procedure_name: str,\n    dataset_name: str,\n    experiment_name: str,\n    season_name: str,\n    site_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a procedure record with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; ProcedureRecord.exists(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     procedure_name=\"SampleProcedure\",\n        ...     dataset_name=\"SampleDataset\",\n        ...     experiment_name=\"SampleExperiment\",\n        ...     season_name=\"SampleSeason\",\n        ...     site_name=\"SampleSite\"\n        ... )\n        True\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        procedure_name (str): The name of the procedure.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment.\n        season_name (str): The name of the season.\n        site_name (str): The name of the site.\n    Returns:\n        bool: True if the procedure record exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ProcedureRecordModel.exists(\n            timestamp=timestamp,\n            procedure_name=procedure_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of ProcedureRecord: {e}\")\n        raise e\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.filter","title":"<code>filter(procedure_names=None, dataset_names=None, start_timestamp=None, end_timestamp=None, experiment_names=None, site_names=None, season_names=None)</code>  <code>classmethod</code>","text":"<p>Filter procedure records based on custom logic.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; records = ProcedureRecord.filter(\n...     procedure_names=[\"SampleProcedure\", \"AnotherProcedure\"],\n...     dataset_names=[\"SampleDataset\", \"AnotherDataset\"],\n...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n...     experiment_names=[\"SampleExperiment\", \"AnotherExperiment\"],\n...     site_names=[\"SampleSite\", \"AnotherSite\"],\n...     season_names=[\"SampleSeason\", \"AnotherSeason\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_names</code> <code>List[str]</code> <p>List of procedure names. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>List[str]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>start_timestamp</code> <code>datetime</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <p>Yields:     ProcedureRecord: Filtered procedure records.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef filter(\n    cls,\n    procedure_names: List[str] = None,\n    dataset_names: List[str] = None,\n    start_timestamp: datetime = None,\n    end_timestamp: datetime = None,\n    experiment_names: List[str] = None,\n    site_names: List[str] = None,\n    season_names: List[str] = None\n) -&gt; Generator[\"ProcedureRecord\", None, None]:\n    \"\"\"\n    Filter procedure records based on custom logic.\n\n    Examples:\n        &gt;&gt;&gt; records = ProcedureRecord.filter(\n        ...     procedure_names=[\"SampleProcedure\", \"AnotherProcedure\"],\n        ...     dataset_names=[\"SampleDataset\", \"AnotherDataset\"],\n        ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n        ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n        ...     experiment_names=[\"SampleExperiment\", \"AnotherExperiment\"],\n        ...     site_names=[\"SampleSite\", \"AnotherSite\"],\n        ...     season_names=[\"SampleSeason\", \"AnotherSeason\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n\n    Args:\n        procedure_names (List[str], optional): List of procedure names. Defaults to None.\n        dataset_names (List[str], optional): List of dataset names. Defaults to None.\n        start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n        end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n        experiment_names (List[str], optional): List of experiment names. Defaults to None.\n        site_names (List[str], optional): List of site names. Defaults to None.\n        season_names (List[str], optional): List of season names. Defaults to None.\n    Yields:\n        ProcedureRecord: Filtered procedure records.\n    \"\"\"\n    try:\n        if not any([procedure_names, dataset_names, start_timestamp, end_timestamp, experiment_names, site_names, season_names]):\n            print(f\"At least one parameter must be provided for filtering.\")\n            return\n        records = ProcedureRecordModel.filter_records(\n            procedure_names=procedure_names,\n            dataset_names=dataset_names,\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            experiment_names=experiment_names,\n            site_names=site_names,\n            season_names=season_names\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error filtering ProcedureRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.get","title":"<code>get(timestamp, procedure_name, dataset_name, experiment_name=None, season_name=None, site_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a procedure record by its parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.get(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     procedure_name=\"SampleProcedure\",\n...     dataset_name=\"SampleDataset\",\n...     experiment_name=\"SampleExperiment\",\n...     season_name=\"SampleSeason\",\n...     site_name=\"SampleSite\"\n... )\n&gt;&gt;&gt; print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ProcedureRecord]: The procedure record, or None if not found.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    timestamp: datetime,\n    procedure_name: str,\n    dataset_name: str,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; Optional[\"ProcedureRecord\"]:\n    \"\"\"\n    Retrieve a procedure record by its parameters.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.get(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     procedure_name=\"SampleProcedure\",\n        ...     dataset_name=\"SampleDataset\",\n        ...     experiment_name=\"SampleExperiment\",\n        ...     season_name=\"SampleSeason\",\n        ...     site_name=\"SampleSite\"\n        ... )\n        &gt;&gt;&gt; print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        procedure_name (str): The name of the procedure.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        Optional[ProcedureRecord]: The procedure record, or None if not found.\n    \"\"\"\n    try:\n        if not timestamp:\n            print(f\"Timestamp is required to get ProcedureRecord.\")\n            return None\n        if not dataset_name:\n            print(f\"Dataset name is required to get ProcedureRecord.\")\n            return None\n        if not procedure_name:\n            print(f\"Procedure name is required to get ProcedureRecord.\")\n            return None\n        if not experiment_name and not season_name and not site_name:\n            print(f\"At least one of experiment_name, season_name, or site_name is required to get ProcedureRecord.\")\n            return None\n        procedure_record = ProcedureRecordsIMMVModel.get_by_parameters(\n            timestamp=timestamp,\n            procedure_name=procedure_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not procedure_record:\n            print(f\"No ProcedureRecord found for the given parameters.\")\n            return None\n        procedure_record = cls.model_validate(procedure_record)\n        return procedure_record\n    except Exception as e:\n        print(f\"Error getting ProcedureRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.get_all","title":"<code>get_all(limit=100)</code>  <code>classmethod</code>","text":"<p>Retrieve all procedure records, up to a specified limit.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; records = ProcedureRecord.get_all(limit=10)\n&gt;&gt;&gt; for record in records:\n...     print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The maximum number of records to retrieve. Defaults to 100.</p> <code>100</code> <p>Returns:     Optional[List[ProcedureRecord]]: List of procedure records, or None if not found.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef get_all(cls, limit: int = 100) -&gt; Optional[List[\"ProcedureRecord\"]]:\n    \"\"\"\n    Retrieve all procedure records, up to a specified limit.\n\n    Examples:\n        &gt;&gt;&gt; records = ProcedureRecord.get_all(limit=10)\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n\n    Args:\n        limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n    Returns:\n        Optional[List[ProcedureRecord]]: List of procedure records, or None if not found.\n    \"\"\"\n    try:\n        records = ProcedureRecordModel.all(limit=limit)\n        if not records or len(records) == 0:\n            print(f\"No ProcedureRecords found.\")\n            return None\n        records = [cls.model_validate(record) for record in records]\n        return records\n    except Exception as e:\n        print(f\"Error getting all ProcedureRecords: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a procedure record by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the procedure record.</p> required <p>Returns:     Optional[ProcedureRecord]: The procedure record, or None if not found.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ProcedureRecord\"]:\n    \"\"\"\n    Retrieve a procedure record by its ID.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n    Args:\n        id (UUID | int | str): The ID of the procedure record.\n    Returns:\n        Optional[ProcedureRecord]: The procedure record, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ProcedureRecordModel.get(id)\n        if not db_instance:\n            print(f\"No ProcedureRecord found with ID: {id}\")\n            return None\n        record = cls.model_validate(db_instance)\n        return record\n    except Exception as e:\n        print(f\"Error getting ProcedureRecord by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the procedure record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; info = record.get_info()\n&gt;&gt;&gt; print(info)\n{'info_key': 'info_value'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The record's info, or None if not found.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the procedure record.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; info = record.get_info()\n        &gt;&gt;&gt; print(info)\n        {'info_key': 'info_value'}\n\n    Returns:\n        Optional[dict]: The record's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure_record = ProcedureRecordModel.get(current_id)\n        if not procedure_record:\n            print(f\"No ProcedureRecord found with ID: {current_id}\")\n            return None\n        record_info = procedure_record.record_info\n        if not record_info:\n            print(f\"No record info found for ProcedureRecord with ID: {current_id}\")\n            return None\n        return record_info\n    except Exception as e:\n        print(f\"Error getting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.insert","title":"<code>insert(records)</code>  <code>classmethod</code>","text":"<p>Insert a list of procedure records into the database.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[ProcedureRecord]</code> <p>The records to insert.</p> required <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef insert(cls, records: List[\"ProcedureRecord\"]) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a list of procedure records into the database.\n\n    Args:\n        records (List[ProcedureRecord]): The records to insert.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not records or len(records) == 0:\n            print(f\"No records provided for insertion.\")\n            return False, []\n        records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing ProcedureRecords\")]\n        records_to_insert = []\n        for record in records:\n            record_dict = record.model_dump()\n            record_dict = {k: v for k, v in record_dict.items() if v is not None}\n            records_to_insert.append(record_dict)\n        print(f\"Inserting {len(records_to_insert)} records.\")\n        inserted_record_ids = ProcedureRecordModel.insert_bulk('procedure_records_unique', records_to_insert)\n        print(f\"Inserted {len(inserted_record_ids)} records.\")\n        return True, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting ProcedureRecords: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.process_record","title":"<code>process_record(record)</code>  <code>classmethod</code>","text":"<p>Process a procedure record (custom logic, e.g., file upload).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"SampleDataset\",\n...     procedure_name=\"SampleProcedure\",\n...     experiment_name=\"SampleExperiment\",\n...     site_name=\"SampleSite\",\n...     season_name=\"SampleSeason\",\n...     record_file=\"/path/to/file.txt\"\n... )\n&gt;&gt;&gt; processed_record = ProcedureRecord.process_record(record)\n&gt;&gt;&gt; print(processed_record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>ProcedureRecord</code> <p>The procedure record to process.</p> required <p>Returns:     ProcedureRecord: The processed procedure record.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef process_record(cls, record: \"ProcedureRecord\") -&gt; \"ProcedureRecord\":\n    \"\"\"\n    Process a procedure record (custom logic, e.g., file upload).\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"SampleDataset\",\n        ...     procedure_name=\"SampleProcedure\",\n        ...     experiment_name=\"SampleExperiment\",\n        ...     site_name=\"SampleSite\",\n        ...     season_name=\"SampleSeason\",\n        ...     record_file=\"/path/to/file.txt\"\n        ... )\n        &gt;&gt;&gt; processed_record = ProcedureRecord.process_record(record)\n        &gt;&gt;&gt; print(processed_record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n    Args:\n        record (ProcedureRecord): The procedure record to process.\n    Returns:\n        ProcedureRecord: The processed procedure record.\n    \"\"\"\n    try:\n        file = record.record_file\n        if not file:\n            print(f\"record_file is required to process ProcedureRecord.\")\n            return record\n        file_key = cls.create_file_uri(record)\n        if not file_key:\n            print(f\"Failed to create file URI for ProcedureRecord: {record}\")\n            return record\n        content_type, _ = mimetypes.guess_type(file)\n        # Generate Metadata for upload\n        file_metadata = {\n            \"Procedure-Name\": record.procedure_name,\n            \"Dataset-Name\": record.dataset_name,\n            \"Experiment-Name\": record.experiment_name,\n            \"Site-Name\": record.site_name,\n            \"Season-Name\": record.season_name,\n            \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n            \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n        }\n        cls.minio_storage_provider.upload_file(\n            object_name=file_key,\n            input_file_path=file,\n            bucket_name=\"gemini\",\n            content_type=content_type,\n            metadata=file_metadata\n        )\n        record.record_file = file_key\n        return record\n    except Exception as e:\n        print(f\"Error processing ProcedureRecord: {e}\")\n        return record\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the procedure record's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_record = record.refresh()\n&gt;&gt;&gt; print(refreshed_record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ProcedureRecord]</code> <p>Optional[ProcedureRecord]: The refreshed procedure record, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>def refresh(self) -&gt; Optional[\"ProcedureRecord\"]:\n    \"\"\"\n    Refresh the procedure record's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_record = record.refresh()\n        &gt;&gt;&gt; print(refreshed_record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n    Returns:\n        Optional[ProcedureRecord]: The refreshed procedure record, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ProcedureRecordModel.get(self.id)\n        if not db_instance:\n            print(f\"No ProcedureRecord found with ID: {self.id}\")\n            return None\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing ProcedureRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.search","title":"<code>search(procedure_name=None, procedure_data=None, dataset_name=None, experiment_name=None, site_name=None, season_name=None, collection_date=None, record_info=None)</code>  <code>classmethod</code>","text":"<p>Search for procedure records based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; records = ProcedureRecord.search(\n...     procedure_name=\"SampleProcedure\",\n...     dataset_name=\"SampleDataset\",\n...     experiment_name=\"SampleExperiment\",\n...     site_name=\"SampleSite\",\n...     season_name=\"SampleSeason\",\n...     collection_date=date(2023, 10, 1),\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure. Defaults to None.</p> <code>None</code> <code>procedure_data</code> <code>dict</code> <p>The data content. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Yields:     ProcedureRecord: Matching procedure records.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    procedure_name: str = None,\n    procedure_data: dict = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    collection_date: date = None,\n    record_info: dict = None\n) -&gt; Generator[\"ProcedureRecord\", None, None]:\n    \"\"\"\n    Search for procedure records based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; records = ProcedureRecord.search(\n        ...     procedure_name=\"SampleProcedure\",\n        ...     dataset_name=\"SampleDataset\",\n        ...     experiment_name=\"SampleExperiment\",\n        ...     site_name=\"SampleSite\",\n        ...     season_name=\"SampleSeason\",\n        ...     collection_date=date(2023, 10, 1),\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), procedure_name='AnotherProcedure', dataset_name='AnotherDataset', experiment_name='AnotherExperiment', site_name='AnotherSite', season_name='AnotherSeason')\n\n    Args:\n        procedure_name (str, optional): The name of the procedure. Defaults to None.\n        procedure_data (dict, optional): The data content. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Yields:\n        ProcedureRecord: Matching procedure records.\n    \"\"\"\n    try:\n        if not any([procedure_name, dataset_name, experiment_name, site_name, season_name, collection_date, record_info]):\n            print(f\"At least one parameter must be provided for search.\")\n            return\n        records = ProcedureRecordsIMMVModel.stream(\n            procedure_name=procedure_name,\n            procedure_data=procedure_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            collection_date=collection_date,\n            record_info=record_info\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error searching ProcedureRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.set_info","title":"<code>set_info(record_info)</code>","text":"<p>Set the additional information of the procedure record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = record.set_info(\n...     record_info={\"new_info_key\": \"new_info_value\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[ProcedureRecord]: The updated procedure record, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>def set_info(self, record_info: dict) -&gt; Optional[\"ProcedureRecord\"]:\n    \"\"\"\n    Set the additional information of the procedure record.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = record.set_info(\n        ...     record_info={\"new_info_key\": \"new_info_value\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n    Args:\n        record_info (dict): The new information to set.\n    Returns:\n        Optional[ProcedureRecord]: The updated procedure record, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure_record = ProcedureRecordModel.get(current_id)\n        if not procedure_record:\n            print(f\"No ProcedureRecord found with ID: {current_id}\")\n            return None\n        ProcedureRecordModel.update(\n            procedure_record,\n            record_info=record_info\n        )\n        procedure_record = self.model_validate(procedure_record)\n        self.refresh()\n        return procedure_record\n    except Exception as e:\n        print(f\"Error setting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_records/#gemini.api.procedure_record.ProcedureRecord.update","title":"<code>update(procedure_data=None, record_info=None)</code>","text":"<p>Update the details of the procedure record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = record.update(\n...     procedure_data={\"new_key\": \"new_value\"},\n...     record_info={\"new_info_key\": \"new_info_value\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_data</code> <code>dict</code> <p>The new procedure data. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>The new record information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ProcedureRecord]: The updated procedure record, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_record.py</code> <pre><code>def update(\n    self,\n    procedure_data: dict = None,\n    record_info: dict = None\n) -&gt; Optional[\"ProcedureRecord\"]:\n    \"\"\"\n    Update the details of the procedure record.\n\n    Examples:\n        &gt;&gt;&gt; record = ProcedureRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = record.update(\n        ...     procedure_data={\"new_key\": \"new_value\"},\n        ...     record_info={\"new_info_key\": \"new_info_value\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), procedure_name='SampleProcedure', dataset_name='SampleDataset', experiment_name='SampleExperiment', site_name='SampleSite', season_name='SampleSeason')\n\n    Args:\n        procedure_data (dict, optional): The new procedure data. Defaults to None.\n        record_info (dict, optional): The new record information. Defaults to None.\n    Returns:\n        Optional[ProcedureRecord]: The updated procedure record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([procedure_data, record_info]):\n            print(f\"At least one parameter must be provided for update.\")\n            return None\n        current_id = self.id\n        procedure_record = ProcedureRecordModel.get(current_id)\n        if not procedure_record:\n            print(f\"No ProcedureRecord found with ID: {current_id}\")\n            return None\n        procedure_record = ProcedureRecordModel.update(\n            procedure_record,\n            procedure_data=procedure_data,\n            record_info=record_info\n        )\n        procedure_record = self.model_validate(procedure_record)\n        self.refresh()\n        return procedure_record\n    except Exception as e:\n        print(f\"Error updating ProcedureRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/","title":"Procedure Runs API","text":""},{"location":"api/procedure_runs/#description","title":"Description","text":"<p>A procedure run is a single execution instance or epoch of a specific Procedure.</p>"},{"location":"api/procedure_runs/#module","title":"Module","text":"<p>This module defines the ProcedureRun class, which represents a run of a procedure, including metadata, associations to procedures, and run information.</p> <p>It includes methods for creating, retrieving, updating, and deleting procedure runs, as well as methods for checking existence, searching, and managing associations with procedures.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a procedure run with the given parameters exists.</li> <li><code>create</code>: Create a new procedure run.</li> <li><code>get</code>: Retrieve a procedure run by its info and name.</li> <li><code>get_by_id</code>: Retrieve a procedure run by its ID.</li> <li><code>get_all</code>: Retrieve all procedure runs.</li> <li><code>search</code>: Search for procedure runs based on various criteria.</li> <li><code>update</code>: Update the details of a procedure run.</li> <li><code>delete</code>: Delete a procedure run.</li> <li><code>refresh</code>: Refresh the procedure run's data from the database.</li> <li><code>get_info</code>: Get the additional information of the procedure run.</li> <li><code>set_info</code>: Set the additional information of the procedure run.</li> <li>Association methods for procedures.</li> </ul>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun","title":"<code>ProcedureRun</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a run of a procedure, including metadata, associations to procedures, and run information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the procedure run.</p> <code>procedure_id</code> <code>Optional[ID]</code> <p>The ID of the associated procedure.</p> <code>procedure_run_info</code> <code>Optional[dict]</code> <p>Additional information about the procedure run.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>class ProcedureRun(APIBase):\n    \"\"\"\n    Represents a run of a procedure, including metadata, associations to procedures, and run information.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the procedure run.\n        procedure_id (Optional[ID]): The ID of the associated procedure.\n        procedure_run_info (Optional[dict]): Additional information about the procedure run.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"procedure_run_id\"))\n\n    procedure_id : Optional[ID]\n    procedure_run_info: Optional[dict] = None\n\n    def __str__(self) -&gt; str:\n        \"\"\"Return a string representation of the ProcedureRun object.\"\"\"\n        return f\"ProcedureRun(id={self.id}, procedure_id={self.procedure_id}, procedure_run_info={self.procedure_run_info})\"\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a detailed string representation of the ProcedureRun object.\"\"\"\n        return f\"ProcedureRun(id={self.id}, procedure_id={self.procedure_id}, procedure_run_info={self.procedure_run_info})\"\n\n    @classmethod\n    def exists(\n        cls,\n        procedure_run_info: dict,\n        procedure_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if a procedure run with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; ProcedureRun.exists({\"status\": \"completed\"}, \"DataProcessing\")\n            True\n            &gt;&gt;&gt; ProcedureRun.exists({\"status\": \"failed\"})\n            False\n\n        Args:\n            procedure_run_info (dict): The run information to check.\n            procedure_name (str, optional): The name of the procedure. Defaults to None.\n        Returns:\n            bool: True if the procedure run exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ProcedureRunsViewModel.exists(\n                procedure_run_info=procedure_run_info,\n                procedure_name=procedure_name\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of ProcedureRun: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        procedure_run_info: dict = {},\n        procedure_name: str = None,\n    ) -&gt; Optional[\"ProcedureRun\"]:\n        \"\"\"\n        Create a new procedure run.\n\n        Examples:\n            &gt;&gt;&gt; ProcedureRun.create({\"status\": \"in_progress\"}, \"DataProcessing\")\n            ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"in_progress\"})\n\n\n        Args:\n            procedure_run_info (dict, optional): The run information for the new procedure run. Defaults to {{}}.\n            procedure_name (str, optional): The name of the procedure. Defaults to None.\n        Returns:\n            Optional[ProcedureRun]: The created procedure run, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ProcedureRunModel.get_or_create(\n                procedure_run_info=procedure_run_info,\n            )\n            procedure_run = cls.model_validate(db_instance)\n            if procedure_name:\n                procedure_run.associate_procedure(procedure_name)\n            return procedure_run\n        except Exception as e:\n            print(f\"Error creating ProcedureRun: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, procedure_run_info: dict, procedure_name: str = None) -&gt; Optional[\"ProcedureRun\"]:\n        \"\"\"\n        Retrieve a procedure run by its info and name.\n\n        Examples:\n            &gt;&gt;&gt; ProcedureRun.get({\"status\": \"completed\"}, \"DataProcessing\")\n            ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n        Args:\n            procedure_run_info (dict): The run information to search for.\n            procedure_name (str, optional): The name of the procedure. Defaults to None.\n        Returns:\n            Optional[ProcedureRun]: The procedure run, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ProcedureRunsViewModel.get_by_parameters(\n                procedure_run_info=procedure_run_info,\n                procedure_name=procedure_name\n            )\n            if not db_instance:\n                print(f\"ProcedureRun with info {procedure_run_info} and name {procedure_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting ProcedureRun: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ProcedureRun\"]:\n        \"\"\"\n        Retrieve a procedure run by its ID.\n\n        Examples:\n            &gt;&gt;&gt; ProcedureRun.get_by_id(UUID(...))\n            ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n        Args:\n            id (UUID | int | str): The ID of the procedure run.\n        Returns:\n            Optional[ProcedureRun]: The procedure run, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ProcedureRunModel.get(id)\n            if not db_instance:\n                print(f\"ProcedureRun with ID {id} does not exist.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting ProcedureRun by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"ProcedureRun\"]]:\n        \"\"\"\n        Retrieve all procedure runs.\n\n        Examples:\n            &gt;&gt;&gt; ProcedureRun.get_all()\n            [ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"}), ...]\n\n        Returns:\n            Optional[List[ProcedureRun]]: List of all procedure runs, or None if not found.\n        \"\"\"\n        try:\n            procedure_runs = ProcedureRunModel.all()\n            if not procedure_runs or len(procedure_runs) == 0:\n                print(\"No ProcedureRuns found.\")\n                return None\n            procedure_runs = [cls.model_validate(procedure_run) for procedure_run in procedure_runs]\n            return procedure_runs\n        except Exception as e:\n            print(f\"Error getting all ProcedureRuns: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        procedure_run_info: dict = None,\n        procedure_name: str = None\n    ) -&gt; Optional[List[\"ProcedureRun\"]]:\n        \"\"\"\n        Search for procedure runs based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; ProcedureRun.search({\"status\": \"completed\"}, \"DataProcessing\")\n            [ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"}), ...]\n\n        Args:\n            procedure_run_info (dict, optional): The run information to search for. Defaults to None.\n            procedure_name (str, optional): The name of the procedure. Defaults to None.\n        Returns:\n            Optional[List[ProcedureRun]]: List of matching procedure runs, or None if not found.\n        \"\"\"\n        try:\n            if not any([procedure_name, procedure_run_info]):\n                print(\"Either procedure_name or procedure_run_info must be provided.\")\n                return None\n            procedure_runs = ProcedureRunsViewModel.search(\n                procedure_run_info=procedure_run_info,\n                procedure_name=procedure_name\n            )\n            if not procedure_runs or len(procedure_runs) == 0:\n                print(\"No ProcedureRuns found with the provided search parameters.\")\n                return None\n            procedure_runs = [cls.model_validate(procedure_run) for procedure_run in procedure_runs]\n            return procedure_runs\n        except Exception as e:\n            print(f\"Error searching ProcedureRuns: {e}\")\n            return None\n\n    def update(self, procedure_run_info: dict = None) -&gt; Optional[\"ProcedureRun\"]:\n        \"\"\"\n        Update the details of the procedure run.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; updated_run = procedure_run.update({\"status\": \"completed\"})\n            &gt;&gt;&gt; print(updated_run)\n            ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n        Args:\n            procedure_run_info (dict, optional): The new run information. Defaults to None.\n        Returns:\n            Optional[ProcedureRun]: The updated procedure run, or None if an error occurred.\n        \"\"\"\n        try:\n            if not procedure_run_info:\n                print(\"procedure_run_info must be provided.\")\n                return None\n            current_id = self.id\n            procedure_run = ProcedureRunModel.get(id=current_id)\n            if not procedure_run:\n                print(f\"ProcedureRun with ID {current_id} does not exist.\")\n                return None\n            procedure_run = ProcedureRunModel.update(\n                procedure_run,\n                procedure_run_info=procedure_run_info\n            )\n            instance = self.model_validate(procedure_run)\n            self.refresh()\n            return instance \n        except Exception as e:\n            print(f\"Error updating ProcedureRun: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the procedure run.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; success = procedure_run.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the procedure run was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure_run = ProcedureRunModel.get(current_id)\n            if not procedure_run:\n                print(f\"ProcedureRun with ID {current_id} does not exist.\")\n                return False\n            ProcedureRunModel.delete(procedure_run)\n            return True\n        except Exception as e:\n            print(f\"Error deleting ProcedureRun: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"ProcedureRun\"]:\n        \"\"\"\n        Refresh the procedure run's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; refreshed_run = procedure_run.refresh()\n            &gt;&gt;&gt; print(refreshed_run)\n            ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"in_progress\"})\n\n        Returns:\n            Optional[ProcedureRun]: The refreshed procedure run, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ProcedureRunModel.get(self.id)\n            if not db_instance:\n                print(f\"ProcedureRun with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing ProcedureRun: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the procedure run.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; info = procedure_run.get_info()\n            &gt;&gt;&gt; print(info)\n            {\"status\": \"in_progress\", \"start_time\": \"2023-10-01T12:00:00Z\"}\n\n        Returns:\n            Optional[dict]: The procedure run's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure_run = ProcedureRunModel.get(current_id)\n            if not procedure_run:\n                print(f\"ProcedureRun with ID {current_id} does not exist.\")\n                return None\n            procedure_run_info = procedure_run.procedure_run_info\n            if not procedure_run_info:\n                print(\"ProcedureRun info is empty.\")\n                return None  # Return None if info is empty/None\n            return procedure_run_info\n        except Exception as e:\n            print(f\"Error getting ProcedureRun info: {e}\")\n            return None\n\n    def set_info(self, procedure_run_info: dict) -&gt; Optional[\"ProcedureRun\"]:\n        \"\"\"\n        Set the additional information of the procedure run.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; updated_run = procedure_run.set_info({\"status\": \"completed\"})\n            &gt;&gt;&gt; print(updated_run)\n            ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n        Args:\n            procedure_run_info (dict): The new run information to set.\n        Returns:\n            Optional[ProcedureRun]: The updated procedure run, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure_run = ProcedureRunModel.get(current_id)\n            if not procedure_run:\n                print(f\"ProcedureRun with ID {current_id} does not exist.\")\n                return None\n            procedure_run = ProcedureRunModel.update(\n                procedure_run,\n                procedure_run_info=procedure_run_info,\n            )\n            instance = self.model_validate(procedure_run)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error setting ProcedureRun info: {e}\")\n            return None\n\n    def get_associated_procedure(self) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Get the procedure associated with this procedure run.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; procedure = procedure_run.get_associated_procedure()\n            &gt;&gt;&gt; print(procedure)\n            Procedure(id=UUID(...), procedure_name=\"DataProcessing\")\n\n\n        Returns:\n            Optional[Procedure]: The associated procedure, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            if not self.procedure_id:\n                print(\"Procedure ID is not set.\")\n                return None\n            procedure = Procedure.get_by_id(self.procedure_id)\n            if not procedure:\n                print(f\"Procedure with ID {self.procedure_id} does not exist.\")\n                return None\n            return procedure\n        except Exception as e:\n            print(f\"Error getting associated Procedure: {e}\")\n            return None\n\n    def associate_procedure(self, procedure_name: str) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Associate this procedure run with a procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; procedure = procedure_run.associate_procedure(\"DataProcessing\")\n            &gt;&gt;&gt; print(procedure)\n            Procedure(id=UUID(...), procedure_name=\"DataProcessing\")\n\n        Args:\n            procedure_name (str): The name of the procedure to associate.\n        Returns:\n            Optional[Procedure]: The associated procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            procedure = Procedure.get(procedure_name=procedure_name)\n            if not procedure:\n                print(f\"Procedure with name {procedure_name} does not exist.\")\n                return None\n            existing_association = ProcedureRunModel.get_by_parameters(\n                procedure_id=procedure.id,\n                id=self.id\n            )\n            if existing_association:\n                print(f\"ProcedureRun with ID {self.id} is already associated with Procedure {procedure_name}.\")\n                return self\n            db_procedure_run = ProcedureRunModel.get(self.id)\n            db_procedure_run = ProcedureRunModel.update_parameter(\n                db_procedure_run,\n                \"procedure_id\",\n                procedure.id\n            )\n            self.refresh()\n            return procedure\n        except Exception as e:\n            print(f\"Error associating Procedure with ProcedureRun: {e}\")\n            return None\n\n    def belongs_to_procedure(self, procedure_name: str) -&gt; bool:\n        \"\"\"\n        Check if this procedure run is associated with a specific procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; is_associated = procedure_run.belongs_to_procedure(\"DataProcessing\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            procedure_name (str): The name of the procedure to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            procedure = Procedure.get(procedure_name=procedure_name)\n            if not procedure:\n                print(f\"Procedure with name {procedure_name} does not exist.\")\n                return False\n            assignment_exists = ProcedureRunModel.exists(\n                id=self.id,\n                procedure_id=procedure.id\n            )\n            return assignment_exists\n        except Exception as e:\n            print(f\"Error checking if ProcedureRun belongs to Procedure: {e}\")\n            return False\n\n    def unassociate_procedure(self) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Unassociate this procedure run from its procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n            &gt;&gt;&gt; procedure = procedure_run.unassociate_procedure()\n            &gt;&gt;&gt; print(procedure)\n            Procedure(id=UUID(...), procedure_name=\"DataProcessing\")\n\n        Returns:\n            Optional[Procedure]: The unassociated procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.procedure import Procedure\n            procedure_run = ProcedureRunModel.get(self.id)\n            if not procedure_run:\n                print(f\"ProcedureRun with ID {self.id} does not exist.\")\n                return None\n            procedure = Procedure.get_by_id(procedure_run.procedure_id)\n            procedure_run = ProcedureRunModel.update_parameter(\n                procedure_run,\n                \"procedure_id\",\n                None\n            )\n            self.refresh()\n            return procedure\n        except Exception as e:\n            print(f\"Error unassociating Procedure from ProcedureRun: {e}\")\n            return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the ProcedureRun object.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a detailed string representation of the ProcedureRun object.\"\"\"\n    return f\"ProcedureRun(id={self.id}, procedure_id={self.procedure_id}, procedure_run_info={self.procedure_run_info})\"\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the ProcedureRun object.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"Return a string representation of the ProcedureRun object.\"\"\"\n    return f\"ProcedureRun(id={self.id}, procedure_id={self.procedure_id}, procedure_run_info={self.procedure_run_info})\"\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.associate_procedure","title":"<code>associate_procedure(procedure_name)</code>","text":"<p>Associate this procedure run with a procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; procedure = procedure_run.associate_procedure(\"DataProcessing\")\n&gt;&gt;&gt; print(procedure)\nProcedure(id=UUID(...), procedure_name=\"DataProcessing\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure to associate.</p> required <p>Returns:     Optional[Procedure]: The associated procedure, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def associate_procedure(self, procedure_name: str) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Associate this procedure run with a procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; procedure = procedure_run.associate_procedure(\"DataProcessing\")\n        &gt;&gt;&gt; print(procedure)\n        Procedure(id=UUID(...), procedure_name=\"DataProcessing\")\n\n    Args:\n        procedure_name (str): The name of the procedure to associate.\n    Returns:\n        Optional[Procedure]: The associated procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        procedure = Procedure.get(procedure_name=procedure_name)\n        if not procedure:\n            print(f\"Procedure with name {procedure_name} does not exist.\")\n            return None\n        existing_association = ProcedureRunModel.get_by_parameters(\n            procedure_id=procedure.id,\n            id=self.id\n        )\n        if existing_association:\n            print(f\"ProcedureRun with ID {self.id} is already associated with Procedure {procedure_name}.\")\n            return self\n        db_procedure_run = ProcedureRunModel.get(self.id)\n        db_procedure_run = ProcedureRunModel.update_parameter(\n            db_procedure_run,\n            \"procedure_id\",\n            procedure.id\n        )\n        self.refresh()\n        return procedure\n    except Exception as e:\n        print(f\"Error associating Procedure with ProcedureRun: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.belongs_to_procedure","title":"<code>belongs_to_procedure(procedure_name)</code>","text":"<p>Check if this procedure run is associated with a specific procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; is_associated = procedure_run.belongs_to_procedure(\"DataProcessing\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def belongs_to_procedure(self, procedure_name: str) -&gt; bool:\n    \"\"\"\n    Check if this procedure run is associated with a specific procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; is_associated = procedure_run.belongs_to_procedure(\"DataProcessing\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        procedure_name (str): The name of the procedure to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        procedure = Procedure.get(procedure_name=procedure_name)\n        if not procedure:\n            print(f\"Procedure with name {procedure_name} does not exist.\")\n            return False\n        assignment_exists = ProcedureRunModel.exists(\n            id=self.id,\n            procedure_id=procedure.id\n        )\n        return assignment_exists\n    except Exception as e:\n        print(f\"Error checking if ProcedureRun belongs to Procedure: {e}\")\n        return False\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.create","title":"<code>create(procedure_run_info={}, procedure_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new procedure run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ProcedureRun.create({\"status\": \"in_progress\"}, \"DataProcessing\")\nProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"in_progress\"})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_run_info</code> <code>dict</code> <p>The run information for the new procedure run. Defaults to {{}}.</p> <code>{}</code> <code>procedure_name</code> <code>str</code> <p>The name of the procedure. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ProcedureRun]: The created procedure run, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    procedure_run_info: dict = {},\n    procedure_name: str = None,\n) -&gt; Optional[\"ProcedureRun\"]:\n    \"\"\"\n    Create a new procedure run.\n\n    Examples:\n        &gt;&gt;&gt; ProcedureRun.create({\"status\": \"in_progress\"}, \"DataProcessing\")\n        ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"in_progress\"})\n\n\n    Args:\n        procedure_run_info (dict, optional): The run information for the new procedure run. Defaults to {{}}.\n        procedure_name (str, optional): The name of the procedure. Defaults to None.\n    Returns:\n        Optional[ProcedureRun]: The created procedure run, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ProcedureRunModel.get_or_create(\n            procedure_run_info=procedure_run_info,\n        )\n        procedure_run = cls.model_validate(db_instance)\n        if procedure_name:\n            procedure_run.associate_procedure(procedure_name)\n        return procedure_run\n    except Exception as e:\n        print(f\"Error creating ProcedureRun: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.delete","title":"<code>delete()</code>","text":"<p>Delete the procedure run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; success = procedure_run.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the procedure run was deleted, False otherwise.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the procedure run.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; success = procedure_run.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the procedure run was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure_run = ProcedureRunModel.get(current_id)\n        if not procedure_run:\n            print(f\"ProcedureRun with ID {current_id} does not exist.\")\n            return False\n        ProcedureRunModel.delete(procedure_run)\n        return True\n    except Exception as e:\n        print(f\"Error deleting ProcedureRun: {e}\")\n        return False\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.exists","title":"<code>exists(procedure_run_info, procedure_name=None)</code>  <code>classmethod</code>","text":"<p>Check if a procedure run with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ProcedureRun.exists({\"status\": \"completed\"}, \"DataProcessing\")\nTrue\n&gt;&gt;&gt; ProcedureRun.exists({\"status\": \"failed\"})\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_run_info</code> <code>dict</code> <p>The run information to check.</p> required <code>procedure_name</code> <code>str</code> <p>The name of the procedure. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if the procedure run exists, False otherwise.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    procedure_run_info: dict,\n    procedure_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if a procedure run with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; ProcedureRun.exists({\"status\": \"completed\"}, \"DataProcessing\")\n        True\n        &gt;&gt;&gt; ProcedureRun.exists({\"status\": \"failed\"})\n        False\n\n    Args:\n        procedure_run_info (dict): The run information to check.\n        procedure_name (str, optional): The name of the procedure. Defaults to None.\n    Returns:\n        bool: True if the procedure run exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ProcedureRunsViewModel.exists(\n            procedure_run_info=procedure_run_info,\n            procedure_name=procedure_name\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of ProcedureRun: {e}\")\n        return False\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.get","title":"<code>get(procedure_run_info, procedure_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a procedure run by its info and name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ProcedureRun.get({\"status\": \"completed\"}, \"DataProcessing\")\nProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_run_info</code> <code>dict</code> <p>The run information to search for.</p> required <code>procedure_name</code> <code>str</code> <p>The name of the procedure. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ProcedureRun]: The procedure run, or None if not found.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>@classmethod\ndef get(cls, procedure_run_info: dict, procedure_name: str = None) -&gt; Optional[\"ProcedureRun\"]:\n    \"\"\"\n    Retrieve a procedure run by its info and name.\n\n    Examples:\n        &gt;&gt;&gt; ProcedureRun.get({\"status\": \"completed\"}, \"DataProcessing\")\n        ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n    Args:\n        procedure_run_info (dict): The run information to search for.\n        procedure_name (str, optional): The name of the procedure. Defaults to None.\n    Returns:\n        Optional[ProcedureRun]: The procedure run, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ProcedureRunsViewModel.get_by_parameters(\n            procedure_run_info=procedure_run_info,\n            procedure_name=procedure_name\n        )\n        if not db_instance:\n            print(f\"ProcedureRun with info {procedure_run_info} and name {procedure_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting ProcedureRun: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all procedure runs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ProcedureRun.get_all()\n[ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"}), ...]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[ProcedureRun]]</code> <p>Optional[List[ProcedureRun]]: List of all procedure runs, or None if not found.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"ProcedureRun\"]]:\n    \"\"\"\n    Retrieve all procedure runs.\n\n    Examples:\n        &gt;&gt;&gt; ProcedureRun.get_all()\n        [ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"}), ...]\n\n    Returns:\n        Optional[List[ProcedureRun]]: List of all procedure runs, or None if not found.\n    \"\"\"\n    try:\n        procedure_runs = ProcedureRunModel.all()\n        if not procedure_runs or len(procedure_runs) == 0:\n            print(\"No ProcedureRuns found.\")\n            return None\n        procedure_runs = [cls.model_validate(procedure_run) for procedure_run in procedure_runs]\n        return procedure_runs\n    except Exception as e:\n        print(f\"Error getting all ProcedureRuns: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.get_associated_procedure","title":"<code>get_associated_procedure()</code>","text":"<p>Get the procedure associated with this procedure run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; procedure = procedure_run.get_associated_procedure()\n&gt;&gt;&gt; print(procedure)\nProcedure(id=UUID(...), procedure_name=\"DataProcessing\")\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Procedure]</code> <p>Optional[Procedure]: The associated procedure, or None if not found.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def get_associated_procedure(self) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Get the procedure associated with this procedure run.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; procedure = procedure_run.get_associated_procedure()\n        &gt;&gt;&gt; print(procedure)\n        Procedure(id=UUID(...), procedure_name=\"DataProcessing\")\n\n\n    Returns:\n        Optional[Procedure]: The associated procedure, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        if not self.procedure_id:\n            print(\"Procedure ID is not set.\")\n            return None\n        procedure = Procedure.get_by_id(self.procedure_id)\n        if not procedure:\n            print(f\"Procedure with ID {self.procedure_id} does not exist.\")\n            return None\n        return procedure\n    except Exception as e:\n        print(f\"Error getting associated Procedure: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a procedure run by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ProcedureRun.get_by_id(UUID(...))\nProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the procedure run.</p> required <p>Returns:     Optional[ProcedureRun]: The procedure run, or None if not found.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ProcedureRun\"]:\n    \"\"\"\n    Retrieve a procedure run by its ID.\n\n    Examples:\n        &gt;&gt;&gt; ProcedureRun.get_by_id(UUID(...))\n        ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n    Args:\n        id (UUID | int | str): The ID of the procedure run.\n    Returns:\n        Optional[ProcedureRun]: The procedure run, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ProcedureRunModel.get(id)\n        if not db_instance:\n            print(f\"ProcedureRun with ID {id} does not exist.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting ProcedureRun by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the procedure run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; info = procedure_run.get_info()\n&gt;&gt;&gt; print(info)\n{\"status\": \"in_progress\", \"start_time\": \"2023-10-01T12:00:00Z\"}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The procedure run's info, or None if not found.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the procedure run.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; info = procedure_run.get_info()\n        &gt;&gt;&gt; print(info)\n        {\"status\": \"in_progress\", \"start_time\": \"2023-10-01T12:00:00Z\"}\n\n    Returns:\n        Optional[dict]: The procedure run's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure_run = ProcedureRunModel.get(current_id)\n        if not procedure_run:\n            print(f\"ProcedureRun with ID {current_id} does not exist.\")\n            return None\n        procedure_run_info = procedure_run.procedure_run_info\n        if not procedure_run_info:\n            print(\"ProcedureRun info is empty.\")\n            return None  # Return None if info is empty/None\n        return procedure_run_info\n    except Exception as e:\n        print(f\"Error getting ProcedureRun info: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the procedure run's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; refreshed_run = procedure_run.refresh()\n&gt;&gt;&gt; print(refreshed_run)\nProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"in_progress\"})\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ProcedureRun]</code> <p>Optional[ProcedureRun]: The refreshed procedure run, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def refresh(self) -&gt; Optional[\"ProcedureRun\"]:\n    \"\"\"\n    Refresh the procedure run's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; refreshed_run = procedure_run.refresh()\n        &gt;&gt;&gt; print(refreshed_run)\n        ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"in_progress\"})\n\n    Returns:\n        Optional[ProcedureRun]: The refreshed procedure run, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ProcedureRunModel.get(self.id)\n        if not db_instance:\n            print(f\"ProcedureRun with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing ProcedureRun: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.search","title":"<code>search(procedure_run_info=None, procedure_name=None)</code>  <code>classmethod</code>","text":"<p>Search for procedure runs based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ProcedureRun.search({\"status\": \"completed\"}, \"DataProcessing\")\n[ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"}), ...]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_run_info</code> <code>dict</code> <p>The run information to search for. Defaults to None.</p> <code>None</code> <code>procedure_name</code> <code>str</code> <p>The name of the procedure. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[ProcedureRun]]: List of matching procedure runs, or None if not found.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    procedure_run_info: dict = None,\n    procedure_name: str = None\n) -&gt; Optional[List[\"ProcedureRun\"]]:\n    \"\"\"\n    Search for procedure runs based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; ProcedureRun.search({\"status\": \"completed\"}, \"DataProcessing\")\n        [ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"}), ...]\n\n    Args:\n        procedure_run_info (dict, optional): The run information to search for. Defaults to None.\n        procedure_name (str, optional): The name of the procedure. Defaults to None.\n    Returns:\n        Optional[List[ProcedureRun]]: List of matching procedure runs, or None if not found.\n    \"\"\"\n    try:\n        if not any([procedure_name, procedure_run_info]):\n            print(\"Either procedure_name or procedure_run_info must be provided.\")\n            return None\n        procedure_runs = ProcedureRunsViewModel.search(\n            procedure_run_info=procedure_run_info,\n            procedure_name=procedure_name\n        )\n        if not procedure_runs or len(procedure_runs) == 0:\n            print(\"No ProcedureRuns found with the provided search parameters.\")\n            return None\n        procedure_runs = [cls.model_validate(procedure_run) for procedure_run in procedure_runs]\n        return procedure_runs\n    except Exception as e:\n        print(f\"Error searching ProcedureRuns: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.set_info","title":"<code>set_info(procedure_run_info)</code>","text":"<p>Set the additional information of the procedure run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; updated_run = procedure_run.set_info({\"status\": \"completed\"})\n&gt;&gt;&gt; print(updated_run)\nProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_run_info</code> <code>dict</code> <p>The new run information to set.</p> required <p>Returns:     Optional[ProcedureRun]: The updated procedure run, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def set_info(self, procedure_run_info: dict) -&gt; Optional[\"ProcedureRun\"]:\n    \"\"\"\n    Set the additional information of the procedure run.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; updated_run = procedure_run.set_info({\"status\": \"completed\"})\n        &gt;&gt;&gt; print(updated_run)\n        ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n    Args:\n        procedure_run_info (dict): The new run information to set.\n    Returns:\n        Optional[ProcedureRun]: The updated procedure run, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure_run = ProcedureRunModel.get(current_id)\n        if not procedure_run:\n            print(f\"ProcedureRun with ID {current_id} does not exist.\")\n            return None\n        procedure_run = ProcedureRunModel.update(\n            procedure_run,\n            procedure_run_info=procedure_run_info,\n        )\n        instance = self.model_validate(procedure_run)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error setting ProcedureRun info: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.unassociate_procedure","title":"<code>unassociate_procedure()</code>","text":"<p>Unassociate this procedure run from its procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; procedure = procedure_run.unassociate_procedure()\n&gt;&gt;&gt; print(procedure)\nProcedure(id=UUID(...), procedure_name=\"DataProcessing\")\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Procedure]</code> <p>Optional[Procedure]: The unassociated procedure, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def unassociate_procedure(self) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Unassociate this procedure run from its procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; procedure = procedure_run.unassociate_procedure()\n        &gt;&gt;&gt; print(procedure)\n        Procedure(id=UUID(...), procedure_name=\"DataProcessing\")\n\n    Returns:\n        Optional[Procedure]: The unassociated procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.procedure import Procedure\n        procedure_run = ProcedureRunModel.get(self.id)\n        if not procedure_run:\n            print(f\"ProcedureRun with ID {self.id} does not exist.\")\n            return None\n        procedure = Procedure.get_by_id(procedure_run.procedure_id)\n        procedure_run = ProcedureRunModel.update_parameter(\n            procedure_run,\n            \"procedure_id\",\n            None\n        )\n        self.refresh()\n        return procedure\n    except Exception as e:\n        print(f\"Error unassociating Procedure from ProcedureRun: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedure_runs/#gemini.api.procedure_run.ProcedureRun.update","title":"<code>update(procedure_run_info=None)</code>","text":"<p>Update the details of the procedure run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n&gt;&gt;&gt; updated_run = procedure_run.update({\"status\": \"completed\"})\n&gt;&gt;&gt; print(updated_run)\nProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_run_info</code> <code>dict</code> <p>The new run information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ProcedureRun]: The updated procedure run, or None if an error occurred.</p> Source code in <code>gemini/api/procedure_run.py</code> <pre><code>def update(self, procedure_run_info: dict = None) -&gt; Optional[\"ProcedureRun\"]:\n    \"\"\"\n    Update the details of the procedure run.\n\n    Examples:\n        &gt;&gt;&gt; procedure_run = ProcedureRun.get_by_id(UUID(...))\n        &gt;&gt;&gt; updated_run = procedure_run.update({\"status\": \"completed\"})\n        &gt;&gt;&gt; print(updated_run)\n        ProcedureRun(id=UUID(...), procedure_id=UUID(...), procedure_run_info={\"status\": \"completed\"})\n\n    Args:\n        procedure_run_info (dict, optional): The new run information. Defaults to None.\n    Returns:\n        Optional[ProcedureRun]: The updated procedure run, or None if an error occurred.\n    \"\"\"\n    try:\n        if not procedure_run_info:\n            print(\"procedure_run_info must be provided.\")\n            return None\n        current_id = self.id\n        procedure_run = ProcedureRunModel.get(id=current_id)\n        if not procedure_run:\n            print(f\"ProcedureRun with ID {current_id} does not exist.\")\n            return None\n        procedure_run = ProcedureRunModel.update(\n            procedure_run,\n            procedure_run_info=procedure_run_info\n        )\n        instance = self.model_validate(procedure_run)\n        self.refresh()\n        return instance \n    except Exception as e:\n        print(f\"Error updating ProcedureRun: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/","title":"Procedure API","text":""},{"location":"api/procedures/#description","title":"Description","text":"<p>Procedures define scripts or programs. A procedure comprises a collection of Procedure Records, has one or more Procedure Runs, and can be associated with multiple Experiments.</p>"},{"location":"api/procedures/#module","title":"Module","text":"<p>This module defines the Procedure class, which represents a procedure entity, including its metadata, associations to experiments, datasets, runs, and records, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting procedures, as well as methods for checking existence, searching, and managing associations with experiments, datasets, runs, and records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a procedure with the given name exists.</li> <li><code>create</code>: Create a new procedure.</li> <li><code>get</code>: Retrieve a procedure by its name and experiment.</li> <li><code>get_by_id</code>: Retrieve a procedure by its ID.</li> <li><code>get_all</code>: Retrieve all procedures.</li> <li><code>search</code>: Search for procedures based on various criteria.</li> <li><code>update</code>: Update the details of a procedure.</li> <li><code>delete</code>: Delete a procedure.</li> <li><code>refresh</code>: Refresh the procedure's data from the database.</li> <li><code>get_info</code>: Get the additional information of the procedure.</li> <li><code>set_info</code>: Set the additional information of the procedure.</li> <li>Association methods for experiments, datasets, runs, and records.</li> </ul>"},{"location":"api/procedures/#gemini.api.procedure.Procedure","title":"<code>Procedure</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a procedure entity, including its metadata, associations to experiments, datasets, runs, and records, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the procedure.</p> <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> <code>procedure_info</code> <code>Optional[dict]</code> <p>Additional information about the procedure.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>class Procedure(APIBase):\n    \"\"\"\n    Represents a procedure entity, including its metadata, associations to experiments, datasets, runs, and records, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the procedure.\n        procedure_name (str): The name of the procedure.\n        procedure_info (Optional[dict]): Additional information about the procedure.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"procedure_id\"))\n\n    procedure_name: str\n    procedure_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Procedure object.\"\"\"\n        return f\"Procedure(procedure_name={self.procedure_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Procedure object.\"\"\"\n        return f\"Procedure(procedure_name={self.procedure_name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        procedure_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a procedure with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Procedure.exists(\"MyProcedure\")\n            True\n\n            &gt;&gt;&gt; Procedure.exists(\"NonExistentProcedure\")\n            False\n\n        Args:\n            procedure_name (str): The name of the procedure.\n        Returns:\n            bool: True if the procedure exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ProcedureModel.exists(procedure_name=procedure_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of procedure: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        procedure_name: str,\n        procedure_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Create a new procedure.\n\n        Examples:\n            &gt;&gt;&gt; Procedure.create(\"MyProcedure\", {\"description\": \"A sample procedure\"})\n            Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n        Args:\n            procedure_name (str): The name of the procedure.\n            procedure_info (dict, optional): Additional information about the procedure. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[Procedure]: The created procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ProcedureModel.get_or_create(\n                procedure_name=procedure_name,\n                procedure_info=procedure_info,\n            )\n            procedure = cls.model_validate(db_instance)\n            if experiment_name:\n                procedure.associate_experiment(experiment_name)\n            return procedure\n        except Exception as e:\n            print(f\"Error creating procedure: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        procedure_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Retrieve a procedure by its name and experiment.\n\n        Examples:\n            &gt;&gt;&gt; Procedure.get(\"MyProcedure\", \"MyExperiment\")\n            Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n        Args:\n            procedure_name (str): The name of the procedure.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Procedure]: The procedure, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentProceduresViewModel.get_by_parameters(\n                procedure_name=procedure_name,\n                experiment_name=experiment_name\n            )\n            if not db_instance:\n                print(f\"Procedure with name {procedure_name} not found.\")\n                return None\n            procedure = cls.model_validate(db_instance)\n            return procedure\n        except Exception as e:\n            print(f\"Error getting procedure: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Retrieve a procedure by its ID.\n\n        Examples:\n            &gt;&gt;&gt; Procedure.get_by_id(UUID('...'))\n            Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n\n        Args:\n            id (UUID | int | str): The ID of the procedure.\n        Returns:\n            Optional[Procedure]: The procedure, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ProcedureModel.get(id)\n            if not db_instance:\n                print(f\"Procedure with ID {id} does not exist.\")\n                return None\n            procedure = cls.model_validate(db_instance)\n            return procedure\n        except Exception as e:\n            print(f\"Error getting procedure by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Procedure\"]]:\n        \"\"\"\n        Retrieve all procedures.\n\n        Examples:\n            &gt;&gt;&gt; procedures = Procedure.get_all()\n            &gt;&gt;&gt; for proc in procedures:\n            ...     print(proc)\n            Procedure(procedure_name='Procedure1', id=UUID('...'))\n            Procedure(procedure_name='Procedure2', id=UUID('...'))\n\n        Returns:\n            Optional[List[Procedure]]: List of all procedures, or None if not found.\n        \"\"\"\n        try:\n            procedures = ProcedureModel.all()\n            if not procedures or len(procedures) == 0:\n                print(\"No procedures found.\")\n                return None\n            procedures = [cls.model_validate(procedure) for procedure in procedures]\n            return procedures\n        except Exception as e:\n            print(f\"Error getting all procedures: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        procedure_name: str = None,\n        procedure_info: dict = None,\n        experiment_name: str = None\n    ) -&gt; Optional[List[\"Procedure\"]]:\n        \"\"\"\n        Search for procedures based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; procedures = Procedure.search(procedure_name=\"MyProcedure\")\n            &gt;&gt;&gt; for proc in procedures:\n            ...     print(proc)\n            Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n\n        Args:\n            procedure_name (str, optional): The name of the procedure. Defaults to None.\n            procedure_info (dict, optional): Additional information. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[List[Procedure]]: List of matching procedures, or None if not found.\n        \"\"\"\n        try:\n            if not any([procedure_name, procedure_info, experiment_name]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n            procedures = ExperimentProceduresViewModel.search(\n                procedure_name=procedure_name,\n                procedure_info=procedure_info,\n                experiment_name=experiment_name\n            )\n            if not procedures or len(procedures) == 0:\n                print(\"No procedures found with the provided search parameters.\")\n                return None\n            procedures = [cls.model_validate(procedure) for procedure in procedures]\n            return procedures\n        except Exception as e:\n            print(f\"Error searching procedures: {e}\")\n            return None\n\n    def update(\n        self,\n        procedure_name: str = None,\n        procedure_info: dict = None\n    ) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Update the details of the procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; updated_procedure = procedure.update(procedure_name=\"UpdatedProcedure\")\n            &gt;&gt;&gt; print(updated_procedure)\n            Procedure(procedure_name='UpdatedProcedure', id=UUID('...'))\n\n        Args:\n            procedure_name (str, optional): The new name. Defaults to None.\n            procedure_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[Procedure]: The updated procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([procedure_name, procedure_info]):\n                print(\"At least one parameter must be provided.\")\n                return None\n            current_id = self.id\n            procedure = ProcedureModel.get(current_id)\n            if not procedure:\n                print(f\"Procedure with ID {current_id} does not exist.\")\n                return None\n            procedure = ProcedureModel.update(\n                procedure,\n                procedure_name=procedure_name,\n                procedure_info=procedure_info\n            )\n            procedure = self.model_validate(procedure)\n            self.refresh()\n            return procedure\n        except Exception as e:\n            print(f\"Error updating procedure: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; success = procedure.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the procedure was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure = ProcedureModel.get(current_id)\n            if not procedure:\n                print(f\"Procedure with ID {current_id} does not exist.\")\n                return False\n            ProcedureModel.delete(procedure)\n            return True\n        except Exception as e:\n            print(f\"Error deleting procedure: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Refresh the procedure's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; refreshed_procedure = procedure.refresh()\n            &gt;&gt;&gt; print(refreshed_procedure)\n            Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n        Returns:\n            Optional[Procedure]: The refreshed procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ProcedureModel.get(self.id)\n            if not db_instance:\n                print(f\"Procedure with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing procedure: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; info = procedure.get_info()\n            &gt;&gt;&gt; print(info)\n            {'description': 'A sample procedure', 'version': '1.0'}\n\n        Returns:\n            Optional[dict]: The procedure's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure = ProcedureModel.get(current_id)\n            if not procedure:\n                print(f\"Procedure with ID {current_id} does not exist.\")\n                return None\n            procedure_info = procedure.procedure_info\n            if not procedure_info:\n                print(\"Procedure info is empty.\")\n                return None\n            return procedure_info\n        except Exception as e:\n            print(f\"Error getting procedure info: {e}\")\n            return None\n\n    def set_info(self, procedure_info: dict) -&gt; Optional[\"Procedure\"]:\n        \"\"\"\n        Set the additional information of the procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; updated_procedure = procedure.set_info({\"description\": \"Updated description\"})\n            &gt;&gt;&gt; print(updated_procedure.get_info())\n            {'description': 'Updated description'}\n\n        Args:\n            procedure_info (dict): The new information to set.\n        Returns:\n            Optional[Procedure]: The updated procedure, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            procedure = ProcedureModel.get(current_id)\n            if not procedure:\n                print(f\"Procedure with ID {current_id} does not exist.\")\n                return None\n            procedure = ProcedureModel.update(\n                procedure,\n                procedure_info=procedure_info\n            )\n            procedure = self.model_validate(procedure)\n            self.refresh()\n            return procedure\n        except Exception as e:\n            print(f\"Error setting procedure info: {e}\")\n            return None        \n\n    def get_associated_runs(self) -&gt; Optional[List[\"ProcedureRun\"]]:\n        \"\"\"\n        Get all runs associated with this procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; runs = procedure.get_associated_runs()\n            &gt;&gt;&gt; for run in runs:\n            ...     print(run)\n            ProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'completed'})\n            ProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'in_progress'})\n\n\n        Returns:\n            Optional[List[ProcedureRun]]: A list of associated runs, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.procedure_run import ProcedureRun\n            current_id = self.id\n            procedure_runs = ProcedureRunsViewModel.search(procedure_id=current_id)\n            if not procedure_runs or len(procedure_runs) == 0:\n                print(\"No associated runs found.\")\n                return None\n            procedure_runs = [ProcedureRun.model_validate(run) for run in procedure_runs]\n            return procedure_runs\n        except Exception as e:\n            print(f\"Error getting associated runs: {e}\")\n            return None\n\n    def create_new_run(self, procedure_run_info: dict = None) -&gt; Optional[\"ProcedureRun\"]:\n        \"\"\"\n        Create and associate a new run with this procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; new_run = procedure.create_new_run({\"status\": \"in_progress\"})\n            &gt;&gt;&gt; print(new_run)\n            ProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'in_progress'})\n\n        Args:\n            procedure_run_info (dict, optional): The run information for the new run. Defaults to None.\n        Returns:\n            Optional[ProcedureRun]: The created and associated run, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.procedure_run import ProcedureRun\n            new_procedure_run = ProcedureRun.create(\n                procedure_run_info=procedure_run_info,\n                procedure_name=self.procedure_name\n            )\n            if not new_procedure_run:\n                print(\"Failed to create new procedure run.\")\n                return None\n            return new_procedure_run\n        except Exception as e:\n            print(f\"Error creating procedure run: {e}\")\n            return None\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with this procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; experiments = procedure.get_associated_experiments()\n            &gt;&gt;&gt; for exp in experiments:\n            ...     print(exp)\n            Experiment(experiment_name='Experiment1', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n            Experiment(experiment_name='Experiment2', experiment_start_date=datetime(2023, 2, 1), experiment_end_date=datetime(2023, 11, 30), id=UUID('...'))\n\n        Returns:\n            Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment_procedures = ExperimentProceduresViewModel.search(procedure_id=self.id)\n            if not experiment_procedures or len(experiment_procedures) == 0:\n                print(\"No associated experiments found.\")\n                return None\n            experiments = [Experiment.model_validate(exp) for exp in experiment_procedures]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this procedure with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; experiment = procedure.associate_experiment(\"MyExperiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name='MyExperiment', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentProcedureModel.get_by_parameters(\n                experiment_id=experiment.id,\n                procedure_id=self.id\n            )\n            if existing_association:\n                print(f\"Procedure {self.procedure_name} is already associated with experiment {experiment_name}.\")\n                return self\n            new_association = ExperimentProcedureModel.get_or_create(\n                experiment_id=experiment.id,\n                procedure_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate procedure {self.procedure_name} with experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating experiment: {e}\")\n            return None \n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this procedure from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; experiment = procedure.unassociate_experiment(\"MyExperiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name='MyExperiment', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentProcedureModel.get_by_parameters(\n                experiment_id=experiment.id,\n                procedure_id=self.id\n            )\n            if not existing_association:\n                print(f\"Procedure {self.procedure_name} is not associated with experiment {experiment_name}.\")\n                return None\n            is_deleted = ExperimentProcedureModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to disassociate procedure {self.procedure_name} from experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error disassociating experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this procedure is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; is_associated = procedure.belongs_to_experiment(\"MyExperiment\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentProcedureModel.exists(\n                experiment_id=experiment.id,\n                procedure_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking experiment membership: {e}\")\n            return False\n\n    def get_associated_datasets(self) -&gt; List[\"Dataset\"]:\n        \"\"\"\n        Get all datasets associated with this procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; datasets = procedure.get_associated_datasets()\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(dataset_name='Dataset1', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n            Dataset(dataset_name='Dataset2', dataset_type='Procedure', collection_date=date(2023, 2, 1), id=UUID('...'))\n\n\n        Returns:\n            List[Dataset]: A list of associated datasets, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            datasets = ProcedureDatasetsViewModel.search(procedure_id=self.id)\n            if not datasets or len(datasets) == 0:\n                print(\"No associated datasets found.\")\n                return None\n            datasets = [Dataset.model_validate(dataset) for dataset in datasets]\n            return datasets\n        except Exception as e:\n            print(f\"Error getting associated datasets: {e}\")\n            return None\n\n    def create_new_dataset(\n        self,\n        dataset_name: str,\n        dataset_info: dict = {},\n        collection_date: date = None,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Create and associate a new dataset with this procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; dataset = procedure.create_new_dataset(\"MyDataset\", {\"description\": \"A sample dataset\"}, date(2023, 1, 1), \"MyExperiment\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name='MyDataset', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the new dataset.\n            dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n            collection_date (date, optional): The collection date. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.create(\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                collection_date=collection_date,\n                experiment_name=experiment_name,\n                dataset_type=GEMINIDatasetType.Procedure\n            )\n            if not dataset:\n                print(\"Failed to create new dataset.\")\n                return None\n            dataset = self.associate_dataset(dataset_name)\n            return dataset\n        except Exception as e:\n            print(f\"Error creating new dataset: {e}\")\n            return None\n\n    def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Associate this procedure with a dataset.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; dataset = procedure.associate_dataset(\"MyDataset\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name='MyDataset', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the dataset to associate.\n        Returns:\n            Optional[Dataset]: The associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name=dataset_name)\n            if not dataset:\n                print(f\"Dataset {dataset_name} does not exist.\")\n                return None\n            existing_association = ProcedureDatasetModel.get_by_parameters(\n                procedure_id=self.id,\n                dataset_id=dataset.id\n            )\n            if existing_association:\n                print(f\"Dataset {dataset_name} is already associated with procedure {self.procedure_name}.\")\n                return self\n            new_association = ProcedureDatasetModel.get_or_create(\n                procedure_id=self.id,\n                dataset_id=dataset.id\n            )\n            if not new_association:\n                print(f\"Failed to associate dataset {dataset_name} with procedure {self.procedure_name}.\")\n                return None\n            self.refresh()\n            return dataset\n        except Exception as e:\n            print(f\"Error associating dataset: {e}\")\n            return None\n\n    def insert_record(\n        self,\n        timestamp: datetime = None,\n        collection_date: date = None,\n        procedure_data: dict = {},\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a single procedure record for this procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; success, record_ids = procedure.insert_record(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date(2023, 1, 1),\n            ...     procedure_data={\"key\": \"value\"},\n            ...     dataset_name=\"MyDataset\",\n            ...     experiment_name=\"MyExperiment\",\n            ...     season_name=\"MySeason\",\n            ...     site_name=\"MySite\",\n            ...     record_file=\"path/to/record/file\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n        True [UUID('...')]\n\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            procedure_data (dict, optional): The procedure data. Defaults to {{}}.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_file (str, optional): The file path or URI. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n            if not procedure_data and not record_file:\n                raise ValueError(\"Either procedure_data or record_file must be provided.\")\n\n            timestamp = timestamp if timestamp else datetime.now()\n            collection_date = collection_date if collection_date else timestamp.date()\n            if not dataset_name:\n                dataset_name = f\"{self.procedure_name} Dataset {collection_date}\"\n            procedure_name = self.procedure_name\n            procedure_record = ProcedureRecord.create(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                procedure_name=procedure_name,\n                procedure_data=procedure_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_file=record_file,\n                record_info=record_info,\n                insert_on_create=False\n            )\n            success, inserted_record_ids = ProcedureRecord.insert([procedure_record])\n            if not success:\n                raise Exception(\"Failed to insert procedure record.\")\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting procedure record: {e}\")\n            return False, []\n\n    def insert_records(\n        self,\n        timestamps: List[datetime] = None,\n        collection_date: date = None,\n        procedure_data: List[dict] = [],\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_files: List[str] = [],\n        record_info: List[dict] = []\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert multiple procedure records for this procedure.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; success, record_ids = procedure.insert_records(\n            ...     timestamps=[datetime.now(), datetime.now()],\n            ...     collection_date=date(2023, 1, 1),\n            ...     procedure_data=[{\"key1\": \"value1\"}, {\"key2\": \"value2\"}],\n            ...     dataset_name=\"MyDataset\",\n            ...     experiment_name=\"MyExperiment\",\n            ...     season_name=\"MySeason\",\n            ...     site_name=\"MySite\",\n            ...     record_files=[\"path/to/record1\", \"path/to/record2\"],\n            ...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n        True [UUID('...'), UUID('...')]\n\n        Args:\n            timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            procedure_data (List[dict], optional): List of procedure data. Defaults to [].\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_files (List[str], optional): List of file paths or URIs. Defaults to [].\n            record_info (List[dict], optional): List of additional info. Defaults to [].\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n            if len(timestamps) == 0:\n                raise ValueError(\"At least one timestamp must be provided.\")\n\n            if procedure_data and len(procedure_data) != len(timestamps):\n                raise ValueError(\"procedure_data must have the same length as timestamps.\")\n\n            if record_files and len(record_files) != len(timestamps):\n                raise ValueError(\"record_files must have the same length as timestamps.\")\n\n            collection_date = collection_date if collection_date else timestamps[0].date()\n\n            if not dataset_name:\n                dataset_name = f\"{self.procedure_name} Dataset {collection_date}\"\n\n            procedure_records = []\n            timestamps_length = len(timestamps)\n\n            for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Procedure \" + self.procedure_name):\n                procedure_record = ProcedureRecord.create(\n                    timestamp = timestamps[i],\n                    collection_date = collection_date,\n                    procedure_name= self.procedure_name,\n                    procedure_data = procedure_data[i]  if procedure_data else {},\n                    dataset_name = dataset_name,\n                    experiment_name = experiment_name,\n                    season_name = season_name,\n                    site_name = site_name,\n                    record_file= record_files[i] if record_files else None,\n                    record_info = record_info[i] if record_info else {},\n                    insert_on_create=False\n                )\n                procedure_records.append(procedure_record)\n\n            success, inserted_record_ids = ProcedureRecord.insert(procedure_records)\n            if not success:\n                print(\"Failed to insert procedure records.\")\n                return False, []\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting procedure records: {e}\")\n            return False, []\n\n    def search_records(\n        self,\n        collection_date: date = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_info: dict = None\n    ) -&gt; List[ProcedureRecord]:\n        \"\"\"\n        Search for procedure records associated with this procedure based on search parameters.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; records = procedure.search_records(\n            ...     collection_date=date(2023, 1, 1),\n            ...     dataset_name=\"MyDataset\",\n            ...     experiment_name=\"MyExperiment\",\n            ...     season_name=\"MySeason\",\n            ...     site_name=\"MySite\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 1, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 2, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n\n        Args:\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Returns:\n            List[ProcedureRecord]: List of matching procedure records, or empty list if not found.\n        \"\"\"\n        try:\n            record_info = record_info if record_info else {}\n            record_info = {k: v for k, v in record_info.items() if v is not None}\n\n            records = ProcedureRecord.search(\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                procedure_name=self.procedure_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_info=record_info\n            )\n            return records\n        except Exception as e:\n            print(f\"Error searching procedure records: {e}\")\n            return []\n\n    def filter_records(\n        self,\n        start_timestamp: Optional[datetime] = None,\n        end_timestamp: Optional[datetime] = None,\n        dataset_names: Optional[List[str]] = None,\n        experiment_names: Optional[List[str]] = None,\n        season_names: Optional[List[str]] = None,\n        site_names: Optional[List[str]] = None\n    ) -&gt; List[ProcedureRecord]:\n        \"\"\"\n        Filter procedure records associated with this procedure using a custom filter function.\n\n        Examples:\n            &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n            &gt;&gt;&gt; records = procedure.filter_records(\n            ...     start_timestamp=datetime(2023, 1, 1),\n            ...     end_timestamp=datetime(2023, 1, 31),\n            ...     dataset_names=[\"MyDataset\"],\n            ...     experiment_names=[\"MyExperiment\"],\n            ...     season_names=[\"MySeason\"],\n            ...     site_names=[\"MySite\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 1, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n            ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 2, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n\n        Args:\n            start_timestamp (Optional[datetime], optional): Start of timestamp range. Defaults to None.\n            end_timestamp (Optional[datetime], optional): End of timestamp range. Defaults to None.\n            dataset_names (Optional[List[str]], optional): List of dataset names. Defaults to None.\n            experiment_names (Optional[List[str]], optional): List of experiment names. Defaults to None.\n            season_names (Optional[List[str]], optional): List of season names. Defaults to None.\n            site_names (Optional[List[str]], optional): List of site names. Defaults to None.\n        Returns:\n            List[ProcedureRecord]: List of filtered procedure records, or empty list if not found.\n        \"\"\"\n        try:\n            records = ProcedureRecord.filter(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                procedure_names= [self.procedure_name],\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            return records\n        except Exception as e:\n            print(f\"Error filtering procedure records: {e}\")\n            return []\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Procedure object.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Procedure object.\"\"\"\n    return f\"Procedure(procedure_name={self.procedure_name}, id={self.id})\"\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Procedure object.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Procedure object.\"\"\"\n    return f\"Procedure(procedure_name={self.procedure_name}, id={self.id})\"\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.associate_dataset","title":"<code>associate_dataset(dataset_name)</code>","text":"<p>Associate this procedure with a dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; dataset = procedure.associate_dataset(\"MyDataset\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name='MyDataset', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to associate.</p> required <p>Returns:     Optional[Dataset]: The associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Associate this procedure with a dataset.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; dataset = procedure.associate_dataset(\"MyDataset\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name='MyDataset', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the dataset to associate.\n    Returns:\n        Optional[Dataset]: The associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name=dataset_name)\n        if not dataset:\n            print(f\"Dataset {dataset_name} does not exist.\")\n            return None\n        existing_association = ProcedureDatasetModel.get_by_parameters(\n            procedure_id=self.id,\n            dataset_id=dataset.id\n        )\n        if existing_association:\n            print(f\"Dataset {dataset_name} is already associated with procedure {self.procedure_name}.\")\n            return self\n        new_association = ProcedureDatasetModel.get_or_create(\n            procedure_id=self.id,\n            dataset_id=dataset.id\n        )\n        if not new_association:\n            print(f\"Failed to associate dataset {dataset_name} with procedure {self.procedure_name}.\")\n            return None\n        self.refresh()\n        return dataset\n    except Exception as e:\n        print(f\"Error associating dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this procedure with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; experiment = procedure.associate_experiment(\"MyExperiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name='MyExperiment', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this procedure with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; experiment = procedure.associate_experiment(\"MyExperiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name='MyExperiment', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentProcedureModel.get_by_parameters(\n            experiment_id=experiment.id,\n            procedure_id=self.id\n        )\n        if existing_association:\n            print(f\"Procedure {self.procedure_name} is already associated with experiment {experiment_name}.\")\n            return self\n        new_association = ExperimentProcedureModel.get_or_create(\n            experiment_id=experiment.id,\n            procedure_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate procedure {self.procedure_name} with experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating experiment: {e}\")\n        return None \n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this procedure is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; is_associated = procedure.belongs_to_experiment(\"MyExperiment\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this procedure is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; is_associated = procedure.belongs_to_experiment(\"MyExperiment\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentProcedureModel.exists(\n            experiment_id=experiment.id,\n            procedure_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking experiment membership: {e}\")\n        return False\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.create","title":"<code>create(procedure_name, procedure_info={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Procedure.create(\"MyProcedure\", {\"description\": \"A sample procedure\"})\nProcedure(procedure_name='MyProcedure', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <code>procedure_info</code> <code>dict</code> <p>Additional information about the procedure. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Procedure]: The created procedure, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    procedure_name: str,\n    procedure_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Create a new procedure.\n\n    Examples:\n        &gt;&gt;&gt; Procedure.create(\"MyProcedure\", {\"description\": \"A sample procedure\"})\n        Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n    Args:\n        procedure_name (str): The name of the procedure.\n        procedure_info (dict, optional): Additional information about the procedure. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[Procedure]: The created procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ProcedureModel.get_or_create(\n            procedure_name=procedure_name,\n            procedure_info=procedure_info,\n        )\n        procedure = cls.model_validate(db_instance)\n        if experiment_name:\n            procedure.associate_experiment(experiment_name)\n        return procedure\n    except Exception as e:\n        print(f\"Error creating procedure: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.create_new_dataset","title":"<code>create_new_dataset(dataset_name, dataset_info={}, collection_date=None, experiment_name=None)</code>","text":"<p>Create and associate a new dataset with this procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; dataset = procedure.create_new_dataset(\"MyDataset\", {\"description\": \"A sample dataset\"}, date(2023, 1, 1), \"MyExperiment\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name='MyDataset', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the new dataset.</p> required <code>dataset_info</code> <code>dict</code> <p>Additional information about the dataset. Defaults to {{}}.</p> <code>{}</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Dataset]: The created and associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def create_new_dataset(\n    self,\n    dataset_name: str,\n    dataset_info: dict = {},\n    collection_date: date = None,\n    experiment_name: str = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Create and associate a new dataset with this procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; dataset = procedure.create_new_dataset(\"MyDataset\", {\"description\": \"A sample dataset\"}, date(2023, 1, 1), \"MyExperiment\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name='MyDataset', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the new dataset.\n        dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n        collection_date (date, optional): The collection date. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.create(\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            collection_date=collection_date,\n            experiment_name=experiment_name,\n            dataset_type=GEMINIDatasetType.Procedure\n        )\n        if not dataset:\n            print(\"Failed to create new dataset.\")\n            return None\n        dataset = self.associate_dataset(dataset_name)\n        return dataset\n    except Exception as e:\n        print(f\"Error creating new dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.create_new_run","title":"<code>create_new_run(procedure_run_info=None)</code>","text":"<p>Create and associate a new run with this procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; new_run = procedure.create_new_run({\"status\": \"in_progress\"})\n&gt;&gt;&gt; print(new_run)\nProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'in_progress'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_run_info</code> <code>dict</code> <p>The run information for the new run. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ProcedureRun]: The created and associated run, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def create_new_run(self, procedure_run_info: dict = None) -&gt; Optional[\"ProcedureRun\"]:\n    \"\"\"\n    Create and associate a new run with this procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; new_run = procedure.create_new_run({\"status\": \"in_progress\"})\n        &gt;&gt;&gt; print(new_run)\n        ProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'in_progress'})\n\n    Args:\n        procedure_run_info (dict, optional): The run information for the new run. Defaults to None.\n    Returns:\n        Optional[ProcedureRun]: The created and associated run, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.procedure_run import ProcedureRun\n        new_procedure_run = ProcedureRun.create(\n            procedure_run_info=procedure_run_info,\n            procedure_name=self.procedure_name\n        )\n        if not new_procedure_run:\n            print(\"Failed to create new procedure run.\")\n            return None\n        return new_procedure_run\n    except Exception as e:\n        print(f\"Error creating procedure run: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.delete","title":"<code>delete()</code>","text":"<p>Delete the procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; success = procedure.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the procedure was deleted, False otherwise.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; success = procedure.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the procedure was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure = ProcedureModel.get(current_id)\n        if not procedure:\n            print(f\"Procedure with ID {current_id} does not exist.\")\n            return False\n        ProcedureModel.delete(procedure)\n        return True\n    except Exception as e:\n        print(f\"Error deleting procedure: {e}\")\n        return False\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.exists","title":"<code>exists(procedure_name)</code>  <code>classmethod</code>","text":"<p>Check if a procedure with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Procedure.exists(\"MyProcedure\")\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Procedure.exists(\"NonExistentProcedure\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <p>Returns:     bool: True if the procedure exists, False otherwise.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    procedure_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a procedure with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Procedure.exists(\"MyProcedure\")\n        True\n\n        &gt;&gt;&gt; Procedure.exists(\"NonExistentProcedure\")\n        False\n\n    Args:\n        procedure_name (str): The name of the procedure.\n    Returns:\n        bool: True if the procedure exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ProcedureModel.exists(procedure_name=procedure_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of procedure: {e}\")\n        return False\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.filter_records","title":"<code>filter_records(start_timestamp=None, end_timestamp=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>","text":"<p>Filter procedure records associated with this procedure using a custom filter function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; records = procedure.filter_records(\n...     start_timestamp=datetime(2023, 1, 1),\n...     end_timestamp=datetime(2023, 1, 31),\n...     dataset_names=[\"MyDataset\"],\n...     experiment_names=[\"MyExperiment\"],\n...     season_names=[\"MySeason\"],\n...     site_names=[\"MySite\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 1, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 2, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>Optional[datetime]</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>Optional[datetime]</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>Optional[List[str]]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>Optional[List[str]]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>Optional[List[str]]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>Optional[List[str]]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <p>Returns:     List[ProcedureRecord]: List of filtered procedure records, or empty list if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def filter_records(\n    self,\n    start_timestamp: Optional[datetime] = None,\n    end_timestamp: Optional[datetime] = None,\n    dataset_names: Optional[List[str]] = None,\n    experiment_names: Optional[List[str]] = None,\n    season_names: Optional[List[str]] = None,\n    site_names: Optional[List[str]] = None\n) -&gt; List[ProcedureRecord]:\n    \"\"\"\n    Filter procedure records associated with this procedure using a custom filter function.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; records = procedure.filter_records(\n        ...     start_timestamp=datetime(2023, 1, 1),\n        ...     end_timestamp=datetime(2023, 1, 31),\n        ...     dataset_names=[\"MyDataset\"],\n        ...     experiment_names=[\"MyExperiment\"],\n        ...     season_names=[\"MySeason\"],\n        ...     site_names=[\"MySite\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 1, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 2, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n\n    Args:\n        start_timestamp (Optional[datetime], optional): Start of timestamp range. Defaults to None.\n        end_timestamp (Optional[datetime], optional): End of timestamp range. Defaults to None.\n        dataset_names (Optional[List[str]], optional): List of dataset names. Defaults to None.\n        experiment_names (Optional[List[str]], optional): List of experiment names. Defaults to None.\n        season_names (Optional[List[str]], optional): List of season names. Defaults to None.\n        site_names (Optional[List[str]], optional): List of site names. Defaults to None.\n    Returns:\n        List[ProcedureRecord]: List of filtered procedure records, or empty list if not found.\n    \"\"\"\n    try:\n        records = ProcedureRecord.filter(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            procedure_names= [self.procedure_name],\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        return records\n    except Exception as e:\n        print(f\"Error filtering procedure records: {e}\")\n        return []\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.get","title":"<code>get(procedure_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a procedure by its name and experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Procedure.get(\"MyProcedure\", \"MyExperiment\")\nProcedure(procedure_name='MyProcedure', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Procedure]: The procedure, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    procedure_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Retrieve a procedure by its name and experiment.\n\n    Examples:\n        &gt;&gt;&gt; Procedure.get(\"MyProcedure\", \"MyExperiment\")\n        Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n    Args:\n        procedure_name (str): The name of the procedure.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Procedure]: The procedure, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentProceduresViewModel.get_by_parameters(\n            procedure_name=procedure_name,\n            experiment_name=experiment_name\n        )\n        if not db_instance:\n            print(f\"Procedure with name {procedure_name} not found.\")\n            return None\n        procedure = cls.model_validate(db_instance)\n        return procedure\n    except Exception as e:\n        print(f\"Error getting procedure: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all procedures.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedures = Procedure.get_all()\n&gt;&gt;&gt; for proc in procedures:\n...     print(proc)\nProcedure(procedure_name='Procedure1', id=UUID('...'))\nProcedure(procedure_name='Procedure2', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Procedure]]</code> <p>Optional[List[Procedure]]: List of all procedures, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Procedure\"]]:\n    \"\"\"\n    Retrieve all procedures.\n\n    Examples:\n        &gt;&gt;&gt; procedures = Procedure.get_all()\n        &gt;&gt;&gt; for proc in procedures:\n        ...     print(proc)\n        Procedure(procedure_name='Procedure1', id=UUID('...'))\n        Procedure(procedure_name='Procedure2', id=UUID('...'))\n\n    Returns:\n        Optional[List[Procedure]]: List of all procedures, or None if not found.\n    \"\"\"\n    try:\n        procedures = ProcedureModel.all()\n        if not procedures or len(procedures) == 0:\n            print(\"No procedures found.\")\n            return None\n        procedures = [cls.model_validate(procedure) for procedure in procedures]\n        return procedures\n    except Exception as e:\n        print(f\"Error getting all procedures: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.get_associated_datasets","title":"<code>get_associated_datasets()</code>","text":"<p>Get all datasets associated with this procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; datasets = procedure.get_associated_datasets()\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(dataset_name='Dataset1', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\nDataset(dataset_name='Dataset2', dataset_type='Procedure', collection_date=date(2023, 2, 1), id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>List[Dataset]</code> <p>List[Dataset]: A list of associated datasets, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def get_associated_datasets(self) -&gt; List[\"Dataset\"]:\n    \"\"\"\n    Get all datasets associated with this procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; datasets = procedure.get_associated_datasets()\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(dataset_name='Dataset1', dataset_type='Procedure', collection_date=date(2023, 1, 1), id=UUID('...'))\n        Dataset(dataset_name='Dataset2', dataset_type='Procedure', collection_date=date(2023, 2, 1), id=UUID('...'))\n\n\n    Returns:\n        List[Dataset]: A list of associated datasets, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        datasets = ProcedureDatasetsViewModel.search(procedure_id=self.id)\n        if not datasets or len(datasets) == 0:\n            print(\"No associated datasets found.\")\n            return None\n        datasets = [Dataset.model_validate(dataset) for dataset in datasets]\n        return datasets\n    except Exception as e:\n        print(f\"Error getting associated datasets: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with this procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; experiments = procedure.get_associated_experiments()\n&gt;&gt;&gt; for exp in experiments:\n...     print(exp)\nExperiment(experiment_name='Experiment1', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\nExperiment(experiment_name='Experiment2', experiment_start_date=datetime(2023, 2, 1), experiment_end_date=datetime(2023, 11, 30), id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[Experiment]]: A list of associated experiments, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with this procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; experiments = procedure.get_associated_experiments()\n        &gt;&gt;&gt; for exp in experiments:\n        ...     print(exp)\n        Experiment(experiment_name='Experiment1', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n        Experiment(experiment_name='Experiment2', experiment_start_date=datetime(2023, 2, 1), experiment_end_date=datetime(2023, 11, 30), id=UUID('...'))\n\n    Returns:\n        Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment_procedures = ExperimentProceduresViewModel.search(procedure_id=self.id)\n        if not experiment_procedures or len(experiment_procedures) == 0:\n            print(\"No associated experiments found.\")\n            return None\n        experiments = [Experiment.model_validate(exp) for exp in experiment_procedures]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.get_associated_runs","title":"<code>get_associated_runs()</code>","text":"<p>Get all runs associated with this procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; runs = procedure.get_associated_runs()\n&gt;&gt;&gt; for run in runs:\n...     print(run)\nProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'completed'})\nProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'in_progress'})\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[ProcedureRun]]</code> <p>Optional[List[ProcedureRun]]: A list of associated runs, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def get_associated_runs(self) -&gt; Optional[List[\"ProcedureRun\"]]:\n    \"\"\"\n    Get all runs associated with this procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; runs = procedure.get_associated_runs()\n        &gt;&gt;&gt; for run in runs:\n        ...     print(run)\n        ProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'completed'})\n        ProcedureRun(id=UUID('...'), procedure_id=UUID('...'), procedure_run_info={'status': 'in_progress'})\n\n\n    Returns:\n        Optional[List[ProcedureRun]]: A list of associated runs, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.procedure_run import ProcedureRun\n        current_id = self.id\n        procedure_runs = ProcedureRunsViewModel.search(procedure_id=current_id)\n        if not procedure_runs or len(procedure_runs) == 0:\n            print(\"No associated runs found.\")\n            return None\n        procedure_runs = [ProcedureRun.model_validate(run) for run in procedure_runs]\n        return procedure_runs\n    except Exception as e:\n        print(f\"Error getting associated runs: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a procedure by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Procedure.get_by_id(UUID('...'))\nProcedure(procedure_name='MyProcedure', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the procedure.</p> required <p>Returns:     Optional[Procedure]: The procedure, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Retrieve a procedure by its ID.\n\n    Examples:\n        &gt;&gt;&gt; Procedure.get_by_id(UUID('...'))\n        Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n\n    Args:\n        id (UUID | int | str): The ID of the procedure.\n    Returns:\n        Optional[Procedure]: The procedure, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ProcedureModel.get(id)\n        if not db_instance:\n            print(f\"Procedure with ID {id} does not exist.\")\n            return None\n        procedure = cls.model_validate(db_instance)\n        return procedure\n    except Exception as e:\n        print(f\"Error getting procedure by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; info = procedure.get_info()\n&gt;&gt;&gt; print(info)\n{'description': 'A sample procedure', 'version': '1.0'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The procedure's info, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; info = procedure.get_info()\n        &gt;&gt;&gt; print(info)\n        {'description': 'A sample procedure', 'version': '1.0'}\n\n    Returns:\n        Optional[dict]: The procedure's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure = ProcedureModel.get(current_id)\n        if not procedure:\n            print(f\"Procedure with ID {current_id} does not exist.\")\n            return None\n        procedure_info = procedure.procedure_info\n        if not procedure_info:\n            print(\"Procedure info is empty.\")\n            return None\n        return procedure_info\n    except Exception as e:\n        print(f\"Error getting procedure info: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.insert_record","title":"<code>insert_record(timestamp=None, collection_date=None, procedure_data={}, dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_file=None, record_info={})</code>","text":"<p>Insert a single procedure record for this procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; success, record_ids = procedure.insert_record(\n...     timestamp=datetime.now(),\n...     collection_date=date(2023, 1, 1),\n...     procedure_data={\"key\": \"value\"},\n...     dataset_name=\"MyDataset\",\n...     experiment_name=\"MyExperiment\",\n...     season_name=\"MySeason\",\n...     site_name=\"MySite\",\n...     record_file=\"path/to/record/file\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; print(success, record_ids)\n</code></pre> <p>True [UUID('...')]</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>procedure_data</code> <code>dict</code> <p>The procedure data. Defaults to {{}}.</p> <code>{}</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file path or URI. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def insert_record(\n    self,\n    timestamp: datetime = None,\n    collection_date: date = None,\n    procedure_data: dict = {},\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a single procedure record for this procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; success, record_ids = procedure.insert_record(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date(2023, 1, 1),\n        ...     procedure_data={\"key\": \"value\"},\n        ...     dataset_name=\"MyDataset\",\n        ...     experiment_name=\"MyExperiment\",\n        ...     season_name=\"MySeason\",\n        ...     site_name=\"MySite\",\n        ...     record_file=\"path/to/record/file\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n    True [UUID('...')]\n\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        procedure_data (dict, optional): The procedure data. Defaults to {{}}.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_file (str, optional): The file path or URI. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n        if not procedure_data and not record_file:\n            raise ValueError(\"Either procedure_data or record_file must be provided.\")\n\n        timestamp = timestamp if timestamp else datetime.now()\n        collection_date = collection_date if collection_date else timestamp.date()\n        if not dataset_name:\n            dataset_name = f\"{self.procedure_name} Dataset {collection_date}\"\n        procedure_name = self.procedure_name\n        procedure_record = ProcedureRecord.create(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            procedure_name=procedure_name,\n            procedure_data=procedure_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_file=record_file,\n            record_info=record_info,\n            insert_on_create=False\n        )\n        success, inserted_record_ids = ProcedureRecord.insert([procedure_record])\n        if not success:\n            raise Exception(\"Failed to insert procedure record.\")\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting procedure record: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.insert_records","title":"<code>insert_records(timestamps=None, collection_date=None, procedure_data=[], dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_files=[], record_info=[])</code>","text":"<p>Insert multiple procedure records for this procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; success, record_ids = procedure.insert_records(\n...     timestamps=[datetime.now(), datetime.now()],\n...     collection_date=date(2023, 1, 1),\n...     procedure_data=[{\"key1\": \"value1\"}, {\"key2\": \"value2\"}],\n...     dataset_name=\"MyDataset\",\n...     experiment_name=\"MyExperiment\",\n...     season_name=\"MySeason\",\n...     site_name=\"MySite\",\n...     record_files=[\"path/to/record1\", \"path/to/record2\"],\n...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n... )\n&gt;&gt;&gt; print(success, record_ids)\n</code></pre> <p>True [UUID('...'), UUID('...')]</p> <p>Parameters:</p> Name Type Description Default <code>timestamps</code> <code>List[datetime]</code> <p>List of timestamps. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>procedure_data</code> <code>List[dict]</code> <p>List of procedure data. Defaults to [].</p> <code>[]</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_files</code> <code>List[str]</code> <p>List of file paths or URIs. Defaults to [].</p> <code>[]</code> <code>record_info</code> <code>List[dict]</code> <p>List of additional info. Defaults to [].</p> <code>[]</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def insert_records(\n    self,\n    timestamps: List[datetime] = None,\n    collection_date: date = None,\n    procedure_data: List[dict] = [],\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_files: List[str] = [],\n    record_info: List[dict] = []\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert multiple procedure records for this procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; success, record_ids = procedure.insert_records(\n        ...     timestamps=[datetime.now(), datetime.now()],\n        ...     collection_date=date(2023, 1, 1),\n        ...     procedure_data=[{\"key1\": \"value1\"}, {\"key2\": \"value2\"}],\n        ...     dataset_name=\"MyDataset\",\n        ...     experiment_name=\"MyExperiment\",\n        ...     season_name=\"MySeason\",\n        ...     site_name=\"MySite\",\n        ...     record_files=[\"path/to/record1\", \"path/to/record2\"],\n        ...     record_info=[{\"info_key1\": \"info_value1\"}, {\"info_key2\": \"info_value2\"}]\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n    True [UUID('...'), UUID('...')]\n\n    Args:\n        timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        procedure_data (List[dict], optional): List of procedure data. Defaults to [].\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_files (List[str], optional): List of file paths or URIs. Defaults to [].\n        record_info (List[dict], optional): List of additional info. Defaults to [].\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n        if len(timestamps) == 0:\n            raise ValueError(\"At least one timestamp must be provided.\")\n\n        if procedure_data and len(procedure_data) != len(timestamps):\n            raise ValueError(\"procedure_data must have the same length as timestamps.\")\n\n        if record_files and len(record_files) != len(timestamps):\n            raise ValueError(\"record_files must have the same length as timestamps.\")\n\n        collection_date = collection_date if collection_date else timestamps[0].date()\n\n        if not dataset_name:\n            dataset_name = f\"{self.procedure_name} Dataset {collection_date}\"\n\n        procedure_records = []\n        timestamps_length = len(timestamps)\n\n        for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Procedure \" + self.procedure_name):\n            procedure_record = ProcedureRecord.create(\n                timestamp = timestamps[i],\n                collection_date = collection_date,\n                procedure_name= self.procedure_name,\n                procedure_data = procedure_data[i]  if procedure_data else {},\n                dataset_name = dataset_name,\n                experiment_name = experiment_name,\n                season_name = season_name,\n                site_name = site_name,\n                record_file= record_files[i] if record_files else None,\n                record_info = record_info[i] if record_info else {},\n                insert_on_create=False\n            )\n            procedure_records.append(procedure_record)\n\n        success, inserted_record_ids = ProcedureRecord.insert(procedure_records)\n        if not success:\n            print(\"Failed to insert procedure records.\")\n            return False, []\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting procedure records: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the procedure's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; refreshed_procedure = procedure.refresh()\n&gt;&gt;&gt; print(refreshed_procedure)\nProcedure(procedure_name='MyProcedure', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Procedure]</code> <p>Optional[Procedure]: The refreshed procedure, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Refresh the procedure's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; refreshed_procedure = procedure.refresh()\n        &gt;&gt;&gt; print(refreshed_procedure)\n        Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n    Returns:\n        Optional[Procedure]: The refreshed procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ProcedureModel.get(self.id)\n        if not db_instance:\n            print(f\"Procedure with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing procedure: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.search","title":"<code>search(procedure_name=None, procedure_info=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for procedures based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedures = Procedure.search(procedure_name=\"MyProcedure\")\n&gt;&gt;&gt; for proc in procedures:\n...     print(proc)\nProcedure(procedure_name='MyProcedure', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The name of the procedure. Defaults to None.</p> <code>None</code> <code>procedure_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Procedure]]: List of matching procedures, or None if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    procedure_name: str = None,\n    procedure_info: dict = None,\n    experiment_name: str = None\n) -&gt; Optional[List[\"Procedure\"]]:\n    \"\"\"\n    Search for procedures based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; procedures = Procedure.search(procedure_name=\"MyProcedure\")\n        &gt;&gt;&gt; for proc in procedures:\n        ...     print(proc)\n        Procedure(procedure_name='MyProcedure', id=UUID('...'))\n\n\n    Args:\n        procedure_name (str, optional): The name of the procedure. Defaults to None.\n        procedure_info (dict, optional): Additional information. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[List[Procedure]]: List of matching procedures, or None if not found.\n    \"\"\"\n    try:\n        if not any([procedure_name, procedure_info, experiment_name]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n        procedures = ExperimentProceduresViewModel.search(\n            procedure_name=procedure_name,\n            procedure_info=procedure_info,\n            experiment_name=experiment_name\n        )\n        if not procedures or len(procedures) == 0:\n            print(\"No procedures found with the provided search parameters.\")\n            return None\n        procedures = [cls.model_validate(procedure) for procedure in procedures]\n        return procedures\n    except Exception as e:\n        print(f\"Error searching procedures: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.search_records","title":"<code>search_records(collection_date=None, dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_info=None)</code>","text":"<p>Search for procedure records associated with this procedure based on search parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; records = procedure.search_records(\n...     collection_date=date(2023, 1, 1),\n...     dataset_name=\"MyDataset\",\n...     experiment_name=\"MyExperiment\",\n...     season_name=\"MySeason\",\n...     site_name=\"MySite\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 1, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\nProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 2, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Returns:     List[ProcedureRecord]: List of matching procedure records, or empty list if not found.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def search_records(\n    self,\n    collection_date: date = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_info: dict = None\n) -&gt; List[ProcedureRecord]:\n    \"\"\"\n    Search for procedure records associated with this procedure based on search parameters.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; records = procedure.search_records(\n        ...     collection_date=date(2023, 1, 1),\n        ...     dataset_name=\"MyDataset\",\n        ...     experiment_name=\"MyExperiment\",\n        ...     season_name=\"MySeason\",\n        ...     site_name=\"MySite\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 1, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n        ProcedureRecord(id=UUID('...'), timestamp=datetime(2023, 1, 2, 12, 0), procedure_name='MyProcedure', dataset_name='MyDataset', experiment_name='MyExperiment', season_name='MySeason', site_name='MySite')\n\n    Args:\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Returns:\n        List[ProcedureRecord]: List of matching procedure records, or empty list if not found.\n    \"\"\"\n    try:\n        record_info = record_info if record_info else {}\n        record_info = {k: v for k, v in record_info.items() if v is not None}\n\n        records = ProcedureRecord.search(\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            procedure_name=self.procedure_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_info=record_info\n        )\n        return records\n    except Exception as e:\n        print(f\"Error searching procedure records: {e}\")\n        return []\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.set_info","title":"<code>set_info(procedure_info)</code>","text":"<p>Set the additional information of the procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; updated_procedure = procedure.set_info({\"description\": \"Updated description\"})\n&gt;&gt;&gt; print(updated_procedure.get_info())\n{'description': 'Updated description'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Procedure]: The updated procedure, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def set_info(self, procedure_info: dict) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Set the additional information of the procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; updated_procedure = procedure.set_info({\"description\": \"Updated description\"})\n        &gt;&gt;&gt; print(updated_procedure.get_info())\n        {'description': 'Updated description'}\n\n    Args:\n        procedure_info (dict): The new information to set.\n    Returns:\n        Optional[Procedure]: The updated procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        procedure = ProcedureModel.get(current_id)\n        if not procedure:\n            print(f\"Procedure with ID {current_id} does not exist.\")\n            return None\n        procedure = ProcedureModel.update(\n            procedure,\n            procedure_info=procedure_info\n        )\n        procedure = self.model_validate(procedure)\n        self.refresh()\n        return procedure\n    except Exception as e:\n        print(f\"Error setting procedure info: {e}\")\n        return None        \n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate this procedure from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; experiment = procedure.unassociate_experiment(\"MyExperiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name='MyExperiment', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this procedure from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; experiment = procedure.unassociate_experiment(\"MyExperiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name='MyExperiment', experiment_start_date=datetime(2023, 1, 1), experiment_end_date=datetime(2023, 12, 31), id=UUID('...'))\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentProcedureModel.get_by_parameters(\n            experiment_id=experiment.id,\n            procedure_id=self.id\n        )\n        if not existing_association:\n            print(f\"Procedure {self.procedure_name} is not associated with experiment {experiment_name}.\")\n            return None\n        is_deleted = ExperimentProcedureModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to disassociate procedure {self.procedure_name} from experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error disassociating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/procedures/#gemini.api.procedure.Procedure.update","title":"<code>update(procedure_name=None, procedure_info=None)</code>","text":"<p>Update the details of the procedure.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n&gt;&gt;&gt; updated_procedure = procedure.update(procedure_name=\"UpdatedProcedure\")\n&gt;&gt;&gt; print(updated_procedure)\nProcedure(procedure_name='UpdatedProcedure', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>procedure_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>procedure_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Procedure]: The updated procedure, or None if an error occurred.</p> Source code in <code>gemini/api/procedure.py</code> <pre><code>def update(\n    self,\n    procedure_name: str = None,\n    procedure_info: dict = None\n) -&gt; Optional[\"Procedure\"]:\n    \"\"\"\n    Update the details of the procedure.\n\n    Examples:\n        &gt;&gt;&gt; procedure = Procedure.get(\"MyProcedure\")\n        &gt;&gt;&gt; updated_procedure = procedure.update(procedure_name=\"UpdatedProcedure\")\n        &gt;&gt;&gt; print(updated_procedure)\n        Procedure(procedure_name='UpdatedProcedure', id=UUID('...'))\n\n    Args:\n        procedure_name (str, optional): The new name. Defaults to None.\n        procedure_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[Procedure]: The updated procedure, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([procedure_name, procedure_info]):\n            print(\"At least one parameter must be provided.\")\n            return None\n        current_id = self.id\n        procedure = ProcedureModel.get(current_id)\n        if not procedure:\n            print(f\"Procedure with ID {current_id} does not exist.\")\n            return None\n        procedure = ProcedureModel.update(\n            procedure,\n            procedure_name=procedure_name,\n            procedure_info=procedure_info\n        )\n        procedure = self.model_validate(procedure)\n        self.refresh()\n        return procedure\n    except Exception as e:\n        print(f\"Error updating procedure: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/","title":"Script Records API","text":""},{"location":"api/script_records/#description","title":"Description","text":"<p>A script record is a record that belongs to a specific Script, a specific Experiment, Season and Site.</p> <p>It is defined by the following properties:</p> Property Type Description <code>id</code> <code>UUID</code> The unique identifier of the script record. <code>timestamp</code> <code>datetime</code> The timestamp of the record. <code>collection_date</code> <code>date</code> The collection date of the record. <code>script_name</code> <code>string</code> The name of the associated script. <code>script_id</code> <code>UUID</code> The ID of the associated script. <code>script_data</code> <code>dict</code> The data associated with the script record. <code>dataset_id</code> <code>UUID</code> The ID of the associated dataset. <code>dataset_name</code> <code>string</code> The name of the associated dataset. <code>experiment_name</code> <code>string</code> The name of the associated experiment. <code>experiment_id</code> <code>UUID</code> The ID of the associated experiment. <code>season_name</code> <code>string</code> The name of the associated season. <code>season_id</code> <code>UUID</code> The ID of the associated season. <code>site_name</code> <code>string</code> The name of the associated site. <code>site_id</code> <code>UUID</code> The ID of the associated site. <code>record_file</code> <code>string</code> The file path for the record data in the object storage. <code>record_info</code> <code>dict</code> Additional information about the record. <p>A script record is uniquely identified within a script by its <code>timestamp</code>, <code>script_name</code>, <code>dataset_name</code>, <code>experiment_name</code>, <code>season_name</code>, and <code>site_name</code>. There will be no two script records with the same timestamp and belonging to the same script, dataset, experiment, season and site.</p>"},{"location":"api/script_records/#module","title":"Module","text":"<p>This module defines the ScriptRecord class, which represents a record of a script, including metadata, associations to datasets, experiments, sites, and seasons, and file handling capabilities.</p> <p>It includes methods for creating, retrieving, updating, and deleting script records, as well as methods for checking existence, searching, filtering, and managing file handling for records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a script record with the given parameters exists.</li> <li><code>create</code>: Create a new script record.</li> <li><code>get</code>: Retrieve a script record by its parameters.</li> <li><code>get_by_id</code>: Retrieve a script record by its ID.</li> <li><code>get_all</code>: Retrieve all script records.</li> <li><code>search</code>: Search for script records based on various criteria.</li> <li><code>filter</code>: Filter script records based on custom logic.</li> <li><code>update</code>: Update the details of a script record.</li> <li><code>delete</code>: Delete a script record.</li> <li><code>refresh</code>: Refresh the script record's data from the database.</li> <li><code>get_info</code>: Get the additional information of the script record.</li> <li><code>set_info</code>: Set the additional information of the script record.</li> <li>File handling methods from FileHandlerMixin for managing record files.</li> </ul>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord","title":"<code>ScriptRecord</code>","text":"<p>               Bases: <code>APIBase</code>, <code>FileHandlerMixin</code></p> <p>Represents a record of a script, including metadata, associations to datasets, experiments, sites, and seasons, and file handling capabilities.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the script record.</p> <code>timestamp</code> <code>Optional[datetime]</code> <p>The timestamp of the record.</p> <code>collection_date</code> <code>Optional[date]</code> <p>The collection date of the record.</p> <code>dataset_id</code> <code>Optional[ID]</code> <p>The ID of the associated dataset.</p> <code>dataset_name</code> <code>Optional[str]</code> <p>The name of the associated dataset.</p> <code>script_id</code> <code>Optional[ID]</code> <p>The ID of the associated script.</p> <code>script_name</code> <code>Optional[str]</code> <p>The name of the associated script.</p> <code>script_data</code> <code>Optional[dict]</code> <p>The data content of the script record.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> <code>experiment_name</code> <code>Optional[str]</code> <p>The name of the associated experiment.</p> <code>season_id</code> <code>Optional[ID]</code> <p>The ID of the associated season.</p> <code>season_name</code> <code>Optional[str]</code> <p>The name of the associated season.</p> <code>site_id</code> <code>Optional[ID]</code> <p>The ID of the associated site.</p> <code>site_name</code> <code>Optional[str]</code> <p>The name of the associated site.</p> <code>record_file</code> <code>Optional[str]</code> <p>The file path or URI of the record file.</p> <code>record_info</code> <code>Optional[dict]</code> <p>Additional information about the record.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>class ScriptRecord(APIBase, FileHandlerMixin):\n    \"\"\"\n    Represents a record of a script, including metadata, associations to datasets, experiments, sites, and seasons, and file handling capabilities.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the script record.\n        timestamp (Optional[datetime]): The timestamp of the record.\n        collection_date (Optional[date]): The collection date of the record.\n        dataset_id (Optional[ID]): The ID of the associated dataset.\n        dataset_name (Optional[str]): The name of the associated dataset.\n        script_id (Optional[ID]): The ID of the associated script.\n        script_name (Optional[str]): The name of the associated script.\n        script_data (Optional[dict]): The data content of the script record.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n        experiment_name (Optional[str]): The name of the associated experiment.\n        season_id (Optional[ID]): The ID of the associated season.\n        season_name (Optional[str]): The name of the associated season.\n        site_id (Optional[ID]): The ID of the associated site.\n        site_name (Optional[str]): The name of the associated site.\n        record_file (Optional[str]): The file path or URI of the record file.\n        record_info (Optional[dict]): Additional information about the record.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"script_record_id\"))\n\n    timestamp: Optional[datetime] = None\n    collection_date: Optional[date] = None\n    dataset_id: Optional[ID] = None\n    dataset_name: Optional[str] = None\n    script_id: Optional[ID] = None\n    script_name: Optional[str] = None\n    script_data: Optional[dict] = None\n    experiment_id: Optional[ID] = None\n    experiment_name : Optional[str] = None\n    season_id: Optional[ID] = None\n    season_name: Optional[str] = None\n    site_id: Optional[ID] = None\n    site_name: Optional[str] = None\n    record_file: Optional[str] = None\n    record_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the ScriptRecord object.\"\"\"\n        return f\"ScriptRecord(id={self.id}, timestamp={self.timestamp}, script_name={self.script_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the ScriptRecord object.\"\"\"\n        return f\"ScriptRecord(id={self.id}, timestamp={self.timestamp}, script_name={self.script_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n\n    @classmethod\n    def exists(\n        cls,\n        timestamp: datetime,\n        script_name: str,\n        dataset_name: str,\n        experiment_name: str,\n        season_name: str,\n        site_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a script record with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; ScriptRecord.exists(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     script_name=\"example_script\",\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\"\n            ... )\n            True\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            script_name (str): The name of the script.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment.\n            season_name (str): The name of the season.\n            site_name (str): The name of the site.\n        Returns:\n            bool: True if the script record exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ScriptRecordModel.exists(\n                timestamp=timestamp,\n                script_name=script_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of ScriptRecord: {e}\")\n            raise e\n\n    @classmethod\n    def create(\n        cls,\n        timestamp: datetime = datetime.now(),\n        collection_date: date = None,\n        dataset_name: str = None,\n        script_name: str = None,\n        script_data: dict = {},\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n        insert_on_create: bool = True\n    ) -&gt; Optional[\"ScriptRecord\"]:\n        \"\"\"\n        Create a new script record.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.create(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"example_dataset\",\n            ...     script_name=\"example_script\",\n            ...     script_data={\"key\": \"value\"},\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     record_file=\"/path/to/file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; print(script_record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            script_name (str, optional): The name of the script. Defaults to None.\n            script_data (dict, optional): The data content. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            record_file (str, optional): The file path or URI. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n            insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n        Returns:\n            Optional[ScriptRecord]: The created script record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, site_name, season_name]):\n                raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n            if not script_name:\n                raise ValueError(\"Script name is required.\")\n            if not dataset_name:\n                raise ValueError(\"Dataset name is required.\")\n            if not timestamp:\n                raise ValueError(\"Timestamp is required.\")\n            if not collection_date:\n                collection_date = timestamp.date()\n            if not script_data and not record_file:\n                raise ValueError(\"At least one of script_data or record_file must be provided.\")\n            script_record = ScriptRecord(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                script_name=script_name,\n                script_data=script_data,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                record_file=record_file,\n                record_info=record_info\n            )\n            if insert_on_create:\n                insert_success, inserted_record_ids = cls.insert([script_record])\n                if not insert_success:\n                    print(f\"Failed to insert ScriptRecord: {script_record}\")\n                    return None\n                if not inserted_record_ids or len(inserted_record_ids) == 0:\n                    print(f\"No new ScriptRecord was inserted.\")\n                    return None\n                inserted_record_id = inserted_record_ids[0]\n                script_record = cls.get_by_id(inserted_record_id)\n            return script_record\n        except Exception as e:\n            print(f\"Error creating ScriptRecord: {e}\")\n            raise None\n\n    @classmethod\n    def insert(cls, records: List[\"ScriptRecord\"]) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a list of script records into the database.\n\n        Args:\n            records (List[ScriptRecord]): The records to insert.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not records or len(records) == 0:\n                print(f\"No records provided for insertion.\")\n                return False, []\n            records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing ScriptRecords\")]\n            records_to_insert = []\n            for record in records:\n                record_dict = record.model_dump()\n                record_dict = {k: v for k, v in record_dict.items() if v is not None}\n                records_to_insert.append(record_dict)\n            print(f\"Inserting {len(records_to_insert)} records.\")\n            inserted_record_ids = ScriptRecordModel.insert_bulk('script_records_unique', records_to_insert)\n            print(f\"Inserted {len(inserted_record_ids)} records.\")\n            return True, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting ScriptRecords: {e}\")\n            return False, []\n\n    @classmethod\n    def get(\n        cls,\n        timestamp: datetime,\n        script_name: str,\n        dataset_name: str,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None\n    ) -&gt; Optional[\"ScriptRecord\"]:\n        \"\"\"\n        Retrieve a script record by its parameters.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.get(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     script_name=\"example_script\",\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\"\n            ... )\n            &gt;&gt;&gt; print(script_record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            script_name (str): The name of the script.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n        Returns:\n            Optional[ScriptRecord]: The script record, or None if not found.\n        \"\"\"\n        try:\n            if not timestamp:\n                print(f\"Timestamp is required to get ScriptRecord.\")\n                return None\n            if not dataset_name:\n                print(f\"Dataset name is required to get ScriptRecord.\")\n                return None\n            if not script_name:\n                print(f\"Script name is required to get ScriptRecord.\")\n                return None\n            if not experiment_name and not season_name and not site_name:\n                print(f\"At least one of experiment_name, season_name, or site_name is required to get ScriptRecord.\")\n                return None\n            script_record = ScriptRecordsIMMVModel.get_by_parameters(\n                timestamp=timestamp,\n                script_name=script_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name\n            )\n            if not script_record:\n                print(f\"No ScriptRecord found for the given parameters.\")\n                return None\n            script_record = cls.model_validate(script_record)\n            return script_record\n        except Exception as e:\n            print(f\"Error getting ScriptRecord: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ScriptRecord\"]:\n        \"\"\"\n        Retrieve a script record by its ID.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(script_record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Args:\n            id (UUID | int | str): The ID of the script record.\n        Returns:\n            Optional[ScriptRecord]: The script record, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ScriptRecordModel.get(id)\n            if not db_instance:\n                print(f\"No ScriptRecord found with ID: {id}\")\n                return None\n            record = cls.model_validate(db_instance)\n            return record\n        except Exception as e:\n            print(f\"Error getting ScriptRecord by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls, limit: int = 100) -&gt; Optional[List[\"ScriptRecord\"]]:\n        \"\"\"\n        Retrieve all script records, up to a specified limit.\n\n        Examples:\n            &gt;&gt;&gt; script_records = ScriptRecord.get_all(limit=10)\n            &gt;&gt;&gt; for record in script_records:\n            ...     print(record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), script_name='another_script', dataset_name='another_dataset', experiment_name='another_experiment', site_name='another_site', season_name='another_season)\n\n        Args:\n            limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n        Returns:\n            Optional[List[ScriptRecord]]: List of script records, or None if not found.\n        \"\"\"\n        try:\n            records = ScriptRecordModel.all(limit=limit)\n            if not records or len(records) == 0:\n                print(f\"No ScriptRecords found.\")\n                return None\n            records = [cls.model_validate(record) for record in records]\n            return records\n        except Exception as e:\n            print(f\"Error getting all ScriptRecords: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        script_name: str = None,\n        script_data: dict = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        collection_date: date = None,\n        record_info: dict = None\n    ) -&gt; Generator[\"ScriptRecord\", None, None]:\n        \"\"\"\n        Search for script records based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; script_records = ScriptRecord.search(\n            ...     script_name=\"example_script\",\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     collection_date=date(2023, 10, 1),\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; for record in script_records:\n            ...     print(record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Args:\n            script_name (str, optional): The name of the script. Defaults to None.\n            script_data (dict, optional): The data content. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Yields:\n            ScriptRecord: Matching script records.\n        \"\"\"\n        try:\n            if not any([script_name, dataset_name, experiment_name, site_name, season_name, collection_date, record_info]):\n                print(f\"At least one parameter must be provided for search.\")\n                return\n            records = ScriptRecordsIMMVModel.stream(\n                script_name=script_name,\n                script_data=script_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                collection_date=collection_date,\n                record_info=record_info\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error searching ScriptRecords: {e}\")\n            yield None\n\n    @classmethod\n    def filter(\n        cls,\n        start_timestamp: datetime = None,\n        end_timestamp: datetime = None,\n        script_names: List[str] = None,\n        dataset_names: List[str] = None,\n        experiment_names: List[str] = None,\n        season_names: List[str] = None,\n        site_names: List[str] = None\n    ) -&gt; Generator[\"ScriptRecord\", None, None]:\n        \"\"\"\n        Filter script records based on custom logic.\n\n        Examples:\n            &gt;&gt;&gt; script_records = ScriptRecord.filter(\n            ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n            ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n            ...     script_names=[\"example_script\"],\n            ...     dataset_names=[\"example_dataset\"],\n            ...     experiment_names=[\"example_experiment\"],\n            ...     season_names=[\"example_season\"],\n            ...     site_names=[\"example_site\"]\n            ... )\n            &gt;&gt;&gt; for record in script_records:\n            ...     print(record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), script_name='another_script', dataset_name='another_dataset', experiment_name='another_experiment', site_name='another_site', season_name='another_season)\n\n        Args:\n            start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n            end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n            script_names (List[str], optional): List of script names. Defaults to None.\n            dataset_names (List[str], optional): List of dataset names. Defaults to None.\n            experiment_names (List[str], optional): List of experiment names. Defaults to None.\n            season_names (List[str], optional): List of season names. Defaults to None.\n            site_names (List[str], optional): List of site names. Defaults to None.\n        Yields:\n            ScriptRecord: Filtered script records.\n        \"\"\"\n        try:\n            if not any([start_timestamp, end_timestamp, script_names, dataset_names, experiment_names, season_names, site_names]):\n                print(f\"At least one parameter must be provided for filter.\")\n                return\n            records = ScriptRecordModel.filter_records(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                script_names=script_names,\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error filtering ScriptRecords: {e}\")\n            yield None\n\n\n    def update(\n        self,\n        script_data: dict = None,\n        record_info: dict = None\n    ) -&gt; Optional[\"ScriptRecord\"]:\n        \"\"\"\n        Update the details of the script record.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = script_record.update(\n            ...     script_data={\"new_key\": \"new_value\"},\n            ...     record_info={\"new_info_key\": \"new_info_value\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Args:\n            script_data (dict, optional): The new script data. Defaults to None.\n            record_info (dict, optional): The new record information. Defaults to None.\n        Returns:\n            Optional[ScriptRecord]: The updated script record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([script_data, record_info]):\n                print(f\"At least one parameter must be provided for update.\")\n                return None\n            current_id = self.id\n            script_record = ScriptRecordModel.get(current_id)\n            if not script_record:\n                print(f\"No ScriptRecord found with ID: {current_id}\")\n                return None\n            script_record = ScriptRecordModel.update(\n                script_record,\n                script_data=script_data,\n                record_info=record_info\n            )\n            script_record = self.model_validate(script_record)\n            self.refresh()\n            return script_record\n        except Exception as e:\n            print(f\"Error updating ScriptRecord: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the script record.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; success = script_record.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the script record was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            script_record = ScriptRecordModel.get(current_id)\n            if not script_record:\n                print(f\"No ScriptRecord found with ID: {current_id}\")\n                return False\n            ScriptRecordModel.delete(script_record)\n            return True\n        except Exception as e:\n            print(f\"Error deleting ScriptRecord: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"ScriptRecord\"]:\n        \"\"\"\n        Refresh the script record's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_record = script_record.refresh()\n            &gt;&gt;&gt; print(refreshed_record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Returns:\n            Optional[ScriptRecord]: The refreshed script record, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ScriptRecordModel.get(self.id)\n            if not db_instance:\n                print(f\"No ScriptRecord found with ID: {self.id}\")\n                return None\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing ScriptRecord: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the script record.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; record_info = script_record.get_info()\n            &gt;&gt;&gt; print(record_info)\n            {'info_key': 'info_value'}\n\n        Returns:\n            Optional[dict]: The record's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            script_record = ScriptRecordModel.get(current_id)\n            if not script_record:\n                print(f\"No ScriptRecord found with ID: {current_id}\")\n                return None\n            record_info = script_record.record_info\n            if not record_info:\n                print(f\"No record info found for ScriptRecord with ID: {current_id}\")\n                return None\n            return record_info\n        except Exception as e:\n            print(f\"Error getting record info: {e}\")\n            return None\n\n    def set_info(self, record_info: dict) -&gt; Optional[\"ScriptRecord\"]:\n        \"\"\"\n        Set the additional information of the script record.\n\n        Examples:\n            &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = script_record.set_info(\n            ...     record_info={\"new_info_key\": \"new_info_value\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Args:\n            record_info (dict): The new information to set.\n        Returns:\n            Optional[ScriptRecord]: The updated script record, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            script_record = ScriptRecordModel.get(current_id)\n            if not script_record:\n                print(f\"No ScriptRecord found with ID: {current_id}\")\n                return None\n            ScriptRecordModel.update(\n                script_record,\n                record_info=record_info\n            )\n            script_record = self.model_validate(script_record)\n            self.refresh()\n            return script_record\n        except Exception as e:\n            print(f\"Error setting record info: {e}\")\n            return None\n\n    @classmethod\n    def create_file_uri(cls, record: \"ScriptRecord\") -&gt; Optional[str]:\n        \"\"\"\n        Create a file URI for the given script record.\n\n        Examples:\n            &gt;&gt;&gt; record = ScriptRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"example_dataset\",\n            ...     script_name=\"example_script\",\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     record_file=\"/path/to/file.txt\"\n            ... )\n            &gt;&gt;&gt; file_uri = ScriptRecord.create_file_uri(record)\n            &gt;&gt;&gt; print(file_uri)\n            script_data/example_experiment/example_script/example_dataset/2023-10-01/example_site/example_season/1706467200000.txt\n\n        Args:\n            record (ScriptRecord): The script record for which to create the file URI.\n        Returns:\n            Optional[str]: The file URI, or None if creation failed.\n        \"\"\"\n        try:\n            original_file_path = record.record_file\n            if not original_file_path:\n                print(f\"record_file is required to create file URI.\")\n                return None\n            if not os.path.exists(original_file_path):\n                print(f\"File {original_file_path} does not exist.\")\n                return None\n            collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n            script_name = record.script_name\n            dataset_name = record.dataset_name\n            experiment_name = record.experiment_name\n            season_name = record.season_name\n            site_name = record.site_name\n            file_extension = os.path.splitext(original_file_path)[1]\n            file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n            file_key = f\"script_data/{experiment_name}/{script_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n            return file_key\n        except Exception as e:\n            print(f\"Error creating file URI: {e}\")\n            return None\n\n\n    @classmethod\n    def process_record(cls, record: \"ScriptRecord\") -&gt; \"ScriptRecord\":\n        \"\"\"\n        Process a script record (custom logic, e.g., file upload).\n\n        Examples:\n            &gt;&gt;&gt; record = ScriptRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"example_dataset\",\n            ...     script_name=\"example_script\",\n            ...     experiment_name=\"example_experiment\",\n            ...     site_name=\"example_site\",\n            ...     season_name=\"example_season\",\n            ...     record_file=\"/path/to/file.txt\"\n            ... )\n            &gt;&gt;&gt; processed_record = ScriptRecord.process_record(record)\n            &gt;&gt;&gt; print(processed_record)\n            ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n        Args:\n            record (ScriptRecord): The script record to process.\n        Returns:\n            ScriptRecord: The processed script record.\n        \"\"\"\n        try:\n            file = record.record_file\n            if not file:\n                print(f\"record_file is required to process ScriptRecord.\")\n                return record\n            file_key = cls.create_file_uri(record)\n            if not file_key:\n                print(f\"Failed to create file URI for ScriptRecord: {record}\")\n                return record\n            content_type, _ = mimetypes.guess_type(file)\n            # Generate Metadata for upload\n            file_metadata = {\n                \"Script-Name\": record.script_name,\n                \"Dataset-Name\": record.dataset_name,\n                \"Experiment-Name\": record.experiment_name,\n                \"Site-Name\": record.site_name,\n                \"Season-Name\": record.season_name,\n                \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n                \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n            }\n            cls.minio_storage_provider.upload_file(\n                object_name=file_key,\n                input_file_path=file,\n                bucket_name=\"gemini\",\n                content_type=content_type,\n                metadata=file_metadata\n            )\n            record.record_file = file_key\n            return record\n        except Exception as e:\n            print(f\"Error processing ScriptRecord: {e}\")\n            return record\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the ScriptRecord object.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the ScriptRecord object.\"\"\"\n    return f\"ScriptRecord(id={self.id}, timestamp={self.timestamp}, script_name={self.script_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the ScriptRecord object.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the ScriptRecord object.\"\"\"\n    return f\"ScriptRecord(id={self.id}, timestamp={self.timestamp}, script_name={self.script_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name})\"\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.create","title":"<code>create(timestamp=datetime.now(), collection_date=None, dataset_name=None, script_name=None, script_data={}, experiment_name=None, site_name=None, season_name=None, record_file=None, record_info={}, insert_on_create=True)</code>  <code>classmethod</code>","text":"<p>Create a new script record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.create(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"example_dataset\",\n...     script_name=\"example_script\",\n...     script_data={\"key\": \"value\"},\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     record_file=\"/path/to/file.txt\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; print(script_record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to now.</p> <code>now()</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>script_name</code> <code>str</code> <p>The name of the script. Defaults to None.</p> <code>None</code> <code>script_data</code> <code>dict</code> <p>The data content. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file path or URI. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <code>insert_on_create</code> <code>bool</code> <p>Whether to insert on create. Defaults to True.</p> <code>True</code> <p>Returns:     Optional[ScriptRecord]: The created script record, or None if an error occurred.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    timestamp: datetime = datetime.now(),\n    collection_date: date = None,\n    dataset_name: str = None,\n    script_name: str = None,\n    script_data: dict = {},\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n    insert_on_create: bool = True\n) -&gt; Optional[\"ScriptRecord\"]:\n    \"\"\"\n    Create a new script record.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.create(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"example_dataset\",\n        ...     script_name=\"example_script\",\n        ...     script_data={\"key\": \"value\"},\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     record_file=\"/path/to/file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; print(script_record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        script_name (str, optional): The name of the script. Defaults to None.\n        script_data (dict, optional): The data content. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        record_file (str, optional): The file path or URI. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n        insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n    Returns:\n        Optional[ScriptRecord]: The created script record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, site_name, season_name]):\n            raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n        if not script_name:\n            raise ValueError(\"Script name is required.\")\n        if not dataset_name:\n            raise ValueError(\"Dataset name is required.\")\n        if not timestamp:\n            raise ValueError(\"Timestamp is required.\")\n        if not collection_date:\n            collection_date = timestamp.date()\n        if not script_data and not record_file:\n            raise ValueError(\"At least one of script_data or record_file must be provided.\")\n        script_record = ScriptRecord(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            script_name=script_name,\n            script_data=script_data,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            record_file=record_file,\n            record_info=record_info\n        )\n        if insert_on_create:\n            insert_success, inserted_record_ids = cls.insert([script_record])\n            if not insert_success:\n                print(f\"Failed to insert ScriptRecord: {script_record}\")\n                return None\n            if not inserted_record_ids or len(inserted_record_ids) == 0:\n                print(f\"No new ScriptRecord was inserted.\")\n                return None\n            inserted_record_id = inserted_record_ids[0]\n            script_record = cls.get_by_id(inserted_record_id)\n        return script_record\n    except Exception as e:\n        print(f\"Error creating ScriptRecord: {e}\")\n        raise None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.create_file_uri","title":"<code>create_file_uri(record)</code>  <code>classmethod</code>","text":"<p>Create a file URI for the given script record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ScriptRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"example_dataset\",\n...     script_name=\"example_script\",\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     record_file=\"/path/to/file.txt\"\n... )\n&gt;&gt;&gt; file_uri = ScriptRecord.create_file_uri(record)\n&gt;&gt;&gt; print(file_uri)\nscript_data/example_experiment/example_script/example_dataset/2023-10-01/example_site/example_season/1706467200000.txt\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>ScriptRecord</code> <p>The script record for which to create the file URI.</p> required <p>Returns:     Optional[str]: The file URI, or None if creation failed.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef create_file_uri(cls, record: \"ScriptRecord\") -&gt; Optional[str]:\n    \"\"\"\n    Create a file URI for the given script record.\n\n    Examples:\n        &gt;&gt;&gt; record = ScriptRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"example_dataset\",\n        ...     script_name=\"example_script\",\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     record_file=\"/path/to/file.txt\"\n        ... )\n        &gt;&gt;&gt; file_uri = ScriptRecord.create_file_uri(record)\n        &gt;&gt;&gt; print(file_uri)\n        script_data/example_experiment/example_script/example_dataset/2023-10-01/example_site/example_season/1706467200000.txt\n\n    Args:\n        record (ScriptRecord): The script record for which to create the file URI.\n    Returns:\n        Optional[str]: The file URI, or None if creation failed.\n    \"\"\"\n    try:\n        original_file_path = record.record_file\n        if not original_file_path:\n            print(f\"record_file is required to create file URI.\")\n            return None\n        if not os.path.exists(original_file_path):\n            print(f\"File {original_file_path} does not exist.\")\n            return None\n        collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n        script_name = record.script_name\n        dataset_name = record.dataset_name\n        experiment_name = record.experiment_name\n        season_name = record.season_name\n        site_name = record.site_name\n        file_extension = os.path.splitext(original_file_path)[1]\n        file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n        file_key = f\"script_data/{experiment_name}/{script_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n        return file_key\n    except Exception as e:\n        print(f\"Error creating file URI: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.delete","title":"<code>delete()</code>","text":"<p>Delete the script record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; success = script_record.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the script record was deleted, False otherwise.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the script record.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; success = script_record.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the script record was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        script_record = ScriptRecordModel.get(current_id)\n        if not script_record:\n            print(f\"No ScriptRecord found with ID: {current_id}\")\n            return False\n        ScriptRecordModel.delete(script_record)\n        return True\n    except Exception as e:\n        print(f\"Error deleting ScriptRecord: {e}\")\n        return False\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.exists","title":"<code>exists(timestamp, script_name, dataset_name, experiment_name, season_name, site_name)</code>  <code>classmethod</code>","text":"<p>Check if a script record with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ScriptRecord.exists(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     script_name=\"example_script\",\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\"\n... )\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:     bool: True if the script record exists, False otherwise.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    timestamp: datetime,\n    script_name: str,\n    dataset_name: str,\n    experiment_name: str,\n    season_name: str,\n    site_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a script record with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; ScriptRecord.exists(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     script_name=\"example_script\",\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\"\n        ... )\n        True\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        script_name (str): The name of the script.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment.\n        season_name (str): The name of the season.\n        site_name (str): The name of the site.\n    Returns:\n        bool: True if the script record exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ScriptRecordModel.exists(\n            timestamp=timestamp,\n            script_name=script_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of ScriptRecord: {e}\")\n        raise e\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.filter","title":"<code>filter(start_timestamp=None, end_timestamp=None, script_names=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>  <code>classmethod</code>","text":"<p>Filter script records based on custom logic.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_records = ScriptRecord.filter(\n...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n...     script_names=[\"example_script\"],\n...     dataset_names=[\"example_dataset\"],\n...     experiment_names=[\"example_experiment\"],\n...     season_names=[\"example_season\"],\n...     site_names=[\"example_site\"]\n... )\n&gt;&gt;&gt; for record in script_records:\n...     print(record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), script_name='another_script', dataset_name='another_dataset', experiment_name='another_experiment', site_name='another_site', season_name='another_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>datetime</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>script_names</code> <code>List[str]</code> <p>List of script names. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>List[str]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <p>Yields:     ScriptRecord: Filtered script records.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef filter(\n    cls,\n    start_timestamp: datetime = None,\n    end_timestamp: datetime = None,\n    script_names: List[str] = None,\n    dataset_names: List[str] = None,\n    experiment_names: List[str] = None,\n    season_names: List[str] = None,\n    site_names: List[str] = None\n) -&gt; Generator[\"ScriptRecord\", None, None]:\n    \"\"\"\n    Filter script records based on custom logic.\n\n    Examples:\n        &gt;&gt;&gt; script_records = ScriptRecord.filter(\n        ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n        ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n        ...     script_names=[\"example_script\"],\n        ...     dataset_names=[\"example_dataset\"],\n        ...     experiment_names=[\"example_experiment\"],\n        ...     season_names=[\"example_season\"],\n        ...     site_names=[\"example_site\"]\n        ... )\n        &gt;&gt;&gt; for record in script_records:\n        ...     print(record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), script_name='another_script', dataset_name='another_dataset', experiment_name='another_experiment', site_name='another_site', season_name='another_season)\n\n    Args:\n        start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n        end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n        script_names (List[str], optional): List of script names. Defaults to None.\n        dataset_names (List[str], optional): List of dataset names. Defaults to None.\n        experiment_names (List[str], optional): List of experiment names. Defaults to None.\n        season_names (List[str], optional): List of season names. Defaults to None.\n        site_names (List[str], optional): List of site names. Defaults to None.\n    Yields:\n        ScriptRecord: Filtered script records.\n    \"\"\"\n    try:\n        if not any([start_timestamp, end_timestamp, script_names, dataset_names, experiment_names, season_names, site_names]):\n            print(f\"At least one parameter must be provided for filter.\")\n            return\n        records = ScriptRecordModel.filter_records(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            script_names=script_names,\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error filtering ScriptRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.get","title":"<code>get(timestamp, script_name, dataset_name, experiment_name=None, season_name=None, site_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a script record by its parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.get(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     script_name=\"example_script\",\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\"\n... )\n&gt;&gt;&gt; print(script_record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ScriptRecord]: The script record, or None if not found.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    timestamp: datetime,\n    script_name: str,\n    dataset_name: str,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None\n) -&gt; Optional[\"ScriptRecord\"]:\n    \"\"\"\n    Retrieve a script record by its parameters.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.get(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     script_name=\"example_script\",\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\"\n        ... )\n        &gt;&gt;&gt; print(script_record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        script_name (str): The name of the script.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n    Returns:\n        Optional[ScriptRecord]: The script record, or None if not found.\n    \"\"\"\n    try:\n        if not timestamp:\n            print(f\"Timestamp is required to get ScriptRecord.\")\n            return None\n        if not dataset_name:\n            print(f\"Dataset name is required to get ScriptRecord.\")\n            return None\n        if not script_name:\n            print(f\"Script name is required to get ScriptRecord.\")\n            return None\n        if not experiment_name and not season_name and not site_name:\n            print(f\"At least one of experiment_name, season_name, or site_name is required to get ScriptRecord.\")\n            return None\n        script_record = ScriptRecordsIMMVModel.get_by_parameters(\n            timestamp=timestamp,\n            script_name=script_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name\n        )\n        if not script_record:\n            print(f\"No ScriptRecord found for the given parameters.\")\n            return None\n        script_record = cls.model_validate(script_record)\n        return script_record\n    except Exception as e:\n        print(f\"Error getting ScriptRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.get_all","title":"<code>get_all(limit=100)</code>  <code>classmethod</code>","text":"<p>Retrieve all script records, up to a specified limit.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_records = ScriptRecord.get_all(limit=10)\n&gt;&gt;&gt; for record in script_records:\n...     print(record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), script_name='another_script', dataset_name='another_dataset', experiment_name='another_experiment', site_name='another_site', season_name='another_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The maximum number of records to retrieve. Defaults to 100.</p> <code>100</code> <p>Returns:     Optional[List[ScriptRecord]]: List of script records, or None if not found.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef get_all(cls, limit: int = 100) -&gt; Optional[List[\"ScriptRecord\"]]:\n    \"\"\"\n    Retrieve all script records, up to a specified limit.\n\n    Examples:\n        &gt;&gt;&gt; script_records = ScriptRecord.get_all(limit=10)\n        &gt;&gt;&gt; for record in script_records:\n        ...     print(record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), script_name='another_script', dataset_name='another_dataset', experiment_name='another_experiment', site_name='another_site', season_name='another_season)\n\n    Args:\n        limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n    Returns:\n        Optional[List[ScriptRecord]]: List of script records, or None if not found.\n    \"\"\"\n    try:\n        records = ScriptRecordModel.all(limit=limit)\n        if not records or len(records) == 0:\n            print(f\"No ScriptRecords found.\")\n            return None\n        records = [cls.model_validate(record) for record in records]\n        return records\n    except Exception as e:\n        print(f\"Error getting all ScriptRecords: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a script record by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(script_record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the script record.</p> required <p>Returns:     Optional[ScriptRecord]: The script record, or None if not found.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ScriptRecord\"]:\n    \"\"\"\n    Retrieve a script record by its ID.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(script_record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Args:\n        id (UUID | int | str): The ID of the script record.\n    Returns:\n        Optional[ScriptRecord]: The script record, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ScriptRecordModel.get(id)\n        if not db_instance:\n            print(f\"No ScriptRecord found with ID: {id}\")\n            return None\n        record = cls.model_validate(db_instance)\n        return record\n    except Exception as e:\n        print(f\"Error getting ScriptRecord by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the script record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; record_info = script_record.get_info()\n&gt;&gt;&gt; print(record_info)\n{'info_key': 'info_value'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The record's info, or None if not found.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the script record.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; record_info = script_record.get_info()\n        &gt;&gt;&gt; print(record_info)\n        {'info_key': 'info_value'}\n\n    Returns:\n        Optional[dict]: The record's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        script_record = ScriptRecordModel.get(current_id)\n        if not script_record:\n            print(f\"No ScriptRecord found with ID: {current_id}\")\n            return None\n        record_info = script_record.record_info\n        if not record_info:\n            print(f\"No record info found for ScriptRecord with ID: {current_id}\")\n            return None\n        return record_info\n    except Exception as e:\n        print(f\"Error getting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.insert","title":"<code>insert(records)</code>  <code>classmethod</code>","text":"<p>Insert a list of script records into the database.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[ScriptRecord]</code> <p>The records to insert.</p> required <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef insert(cls, records: List[\"ScriptRecord\"]) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a list of script records into the database.\n\n    Args:\n        records (List[ScriptRecord]): The records to insert.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not records or len(records) == 0:\n            print(f\"No records provided for insertion.\")\n            return False, []\n        records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing ScriptRecords\")]\n        records_to_insert = []\n        for record in records:\n            record_dict = record.model_dump()\n            record_dict = {k: v for k, v in record_dict.items() if v is not None}\n            records_to_insert.append(record_dict)\n        print(f\"Inserting {len(records_to_insert)} records.\")\n        inserted_record_ids = ScriptRecordModel.insert_bulk('script_records_unique', records_to_insert)\n        print(f\"Inserted {len(inserted_record_ids)} records.\")\n        return True, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting ScriptRecords: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.process_record","title":"<code>process_record(record)</code>  <code>classmethod</code>","text":"<p>Process a script record (custom logic, e.g., file upload).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = ScriptRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"example_dataset\",\n...     script_name=\"example_script\",\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     record_file=\"/path/to/file.txt\"\n... )\n&gt;&gt;&gt; processed_record = ScriptRecord.process_record(record)\n&gt;&gt;&gt; print(processed_record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>ScriptRecord</code> <p>The script record to process.</p> required <p>Returns:     ScriptRecord: The processed script record.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef process_record(cls, record: \"ScriptRecord\") -&gt; \"ScriptRecord\":\n    \"\"\"\n    Process a script record (custom logic, e.g., file upload).\n\n    Examples:\n        &gt;&gt;&gt; record = ScriptRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"example_dataset\",\n        ...     script_name=\"example_script\",\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     record_file=\"/path/to/file.txt\"\n        ... )\n        &gt;&gt;&gt; processed_record = ScriptRecord.process_record(record)\n        &gt;&gt;&gt; print(processed_record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Args:\n        record (ScriptRecord): The script record to process.\n    Returns:\n        ScriptRecord: The processed script record.\n    \"\"\"\n    try:\n        file = record.record_file\n        if not file:\n            print(f\"record_file is required to process ScriptRecord.\")\n            return record\n        file_key = cls.create_file_uri(record)\n        if not file_key:\n            print(f\"Failed to create file URI for ScriptRecord: {record}\")\n            return record\n        content_type, _ = mimetypes.guess_type(file)\n        # Generate Metadata for upload\n        file_metadata = {\n            \"Script-Name\": record.script_name,\n            \"Dataset-Name\": record.dataset_name,\n            \"Experiment-Name\": record.experiment_name,\n            \"Site-Name\": record.site_name,\n            \"Season-Name\": record.season_name,\n            \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n            \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n        }\n        cls.minio_storage_provider.upload_file(\n            object_name=file_key,\n            input_file_path=file,\n            bucket_name=\"gemini\",\n            content_type=content_type,\n            metadata=file_metadata\n        )\n        record.record_file = file_key\n        return record\n    except Exception as e:\n        print(f\"Error processing ScriptRecord: {e}\")\n        return record\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the script record's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_record = script_record.refresh()\n&gt;&gt;&gt; print(refreshed_record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ScriptRecord]</code> <p>Optional[ScriptRecord]: The refreshed script record, or None if an error occurred.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>def refresh(self) -&gt; Optional[\"ScriptRecord\"]:\n    \"\"\"\n    Refresh the script record's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_record = script_record.refresh()\n        &gt;&gt;&gt; print(refreshed_record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Returns:\n        Optional[ScriptRecord]: The refreshed script record, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ScriptRecordModel.get(self.id)\n        if not db_instance:\n            print(f\"No ScriptRecord found with ID: {self.id}\")\n            return None\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing ScriptRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.search","title":"<code>search(script_name=None, script_data=None, dataset_name=None, experiment_name=None, site_name=None, season_name=None, collection_date=None, record_info=None)</code>  <code>classmethod</code>","text":"<p>Search for script records based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_records = ScriptRecord.search(\n...     script_name=\"example_script\",\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     site_name=\"example_site\",\n...     season_name=\"example_season\",\n...     collection_date=date(2023, 10, 1),\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; for record in script_records:\n...     print(record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script. Defaults to None.</p> <code>None</code> <code>script_data</code> <code>dict</code> <p>The data content. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Yields:     ScriptRecord: Matching script records.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    script_name: str = None,\n    script_data: dict = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    collection_date: date = None,\n    record_info: dict = None\n) -&gt; Generator[\"ScriptRecord\", None, None]:\n    \"\"\"\n    Search for script records based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; script_records = ScriptRecord.search(\n        ...     script_name=\"example_script\",\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     site_name=\"example_site\",\n        ...     season_name=\"example_season\",\n        ...     collection_date=date(2023, 10, 1),\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; for record in script_records:\n        ...     print(record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Args:\n        script_name (str, optional): The name of the script. Defaults to None.\n        script_data (dict, optional): The data content. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Yields:\n        ScriptRecord: Matching script records.\n    \"\"\"\n    try:\n        if not any([script_name, dataset_name, experiment_name, site_name, season_name, collection_date, record_info]):\n            print(f\"At least one parameter must be provided for search.\")\n            return\n        records = ScriptRecordsIMMVModel.stream(\n            script_name=script_name,\n            script_data=script_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            collection_date=collection_date,\n            record_info=record_info\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error searching ScriptRecords: {e}\")\n        yield None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.set_info","title":"<code>set_info(record_info)</code>","text":"<p>Set the additional information of the script record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = script_record.set_info(\n...     record_info={\"new_info_key\": \"new_info_value\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[ScriptRecord]: The updated script record, or None if an error occurred.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>def set_info(self, record_info: dict) -&gt; Optional[\"ScriptRecord\"]:\n    \"\"\"\n    Set the additional information of the script record.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = script_record.set_info(\n        ...     record_info={\"new_info_key\": \"new_info_value\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Args:\n        record_info (dict): The new information to set.\n    Returns:\n        Optional[ScriptRecord]: The updated script record, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        script_record = ScriptRecordModel.get(current_id)\n        if not script_record:\n            print(f\"No ScriptRecord found with ID: {current_id}\")\n            return None\n        ScriptRecordModel.update(\n            script_record,\n            record_info=record_info\n        )\n        script_record = self.model_validate(script_record)\n        self.refresh()\n        return script_record\n    except Exception as e:\n        print(f\"Error setting record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_records/#gemini.api.script_record.ScriptRecord.update","title":"<code>update(script_data=None, record_info=None)</code>","text":"<p>Update the details of the script record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = script_record.update(\n...     script_data={\"new_key\": \"new_value\"},\n...     record_info={\"new_info_key\": \"new_info_value\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_data</code> <code>dict</code> <p>The new script data. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>The new record information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ScriptRecord]: The updated script record, or None if an error occurred.</p> Source code in <code>gemini/api/script_record.py</code> <pre><code>def update(\n    self,\n    script_data: dict = None,\n    record_info: dict = None\n) -&gt; Optional[\"ScriptRecord\"]:\n    \"\"\"\n    Update the details of the script record.\n\n    Examples:\n        &gt;&gt;&gt; script_record = ScriptRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = script_record.update(\n        ...     script_data={\"new_key\": \"new_value\"},\n        ...     record_info={\"new_info_key\": \"new_info_value\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        ScriptRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), script_name='example_script', dataset_name='example_dataset', experiment_name='example_experiment', site_name='example_site', season_name='example_season)\n\n    Args:\n        script_data (dict, optional): The new script data. Defaults to None.\n        record_info (dict, optional): The new record information. Defaults to None.\n    Returns:\n        Optional[ScriptRecord]: The updated script record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([script_data, record_info]):\n            print(f\"At least one parameter must be provided for update.\")\n            return None\n        current_id = self.id\n        script_record = ScriptRecordModel.get(current_id)\n        if not script_record:\n            print(f\"No ScriptRecord found with ID: {current_id}\")\n            return None\n        script_record = ScriptRecordModel.update(\n            script_record,\n            script_data=script_data,\n            record_info=record_info\n        )\n        script_record = self.model_validate(script_record)\n        self.refresh()\n        return script_record\n    except Exception as e:\n        print(f\"Error updating ScriptRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/","title":"Script Runs Runs API","text":""},{"location":"api/script_runs/#description","title":"Description","text":"<p>A script run is a single execution instance or epoch of a specific Script.</p>"},{"location":"api/script_runs/#module","title":"Module","text":"<p>This module defines the ScriptRun class, which represents a run of a script, including metadata, associations to scripts, and run information.</p> <p>It includes methods for creating, retrieving, updating, and deleting script runs, as well as methods for checking existence, searching, and managing associations with scripts.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a script run with the given parameters exists.</li> <li><code>create</code>: Create a new script run.</li> <li><code>get</code>: Retrieve a script run by its info and name.</li> <li><code>get_by_id</code>: Retrieve a script run by its ID.</li> <li><code>get_all</code>: Retrieve all script runs.</li> <li><code>search</code>: Search for script runs based on various criteria.</li> <li><code>update</code>: Update the details of a script run.</li> <li><code>delete</code>: Delete a script run.</li> <li><code>refresh</code>: Refresh the script run's data from the database.</li> <li><code>get_info</code>: Get the additional information of the script run.</li> <li><code>set_info</code>: Set the additional information of the script run.</li> <li>Association methods for scripts.</li> </ul>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun","title":"<code>ScriptRun</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a run of a script, including metadata, associations to scripts, and run information.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the script run.</p> <code>script_id</code> <code>Optional[ID]</code> <p>The ID of the associated script.</p> <code>script_run_info</code> <code>Optional[dict]</code> <p>Additional information about the script run.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>class ScriptRun(APIBase):\n    \"\"\"\n    Represents a run of a script, including metadata, associations to scripts, and run information.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the script run.\n        script_id (Optional[ID]): The ID of the associated script.\n        script_run_info (Optional[dict]): Additional information about the script run.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"script_run_id\"))\n\n    script_id : Optional[ID] \n    script_run_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the ScriptRun object.\"\"\"\n        return f\"ScriptRun(id={self.id}, script_id={self.script_id}, script_run_info={self.script_run_info})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the ScriptRun object.\"\"\"\n        return f\"ScriptRun(id={self.id}, script_id={self.script_id}, script_run_info={self.script_run_info})\"\n\n    @classmethod\n    def exists(\n        cls,\n        script_run_info: dict,\n        script_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if a script run with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; ScriptRun.exists(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n            True\n            &gt;&gt;&gt; ScriptRun.exists(script_run_info={\"status\": \"running\"})\n            False\n\n        Args:\n            script_run_info (dict): The run information to check.\n            script_name (str, optional): The name of the script. Defaults to None.\n        Returns:\n            bool: True if the script run exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ScriptRunsViewModel.exists(\n                script_name=script_name,\n                script_run_info=script_run_info\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of script run: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        script_run_info: dict = {},\n        script_name: str = None\n    ) -&gt; Optional[\"ScriptRun\"]:\n        \"\"\"\n        Create a new script run.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.create(script_run_info={\"status\": \"running\"}, script_name=\"example_script\")\n            &gt;&gt;&gt; print(script_run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n        Args:\n            script_run_info (dict, optional): The run information for the new script run. Defaults to {{}}.\n            script_name (str, optional): The name of the script. Defaults to None.\n        Returns:\n            Optional[ScriptRun]: The created script run, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ScriptRunModel.get_or_create(\n                script_run_info=script_run_info,\n            )\n            script_run = cls.model_validate(db_instance)\n            if script_name:\n                script_run.associate_script(script_name)\n            return script_run\n        except Exception as e:\n            print(f\"Error creating script run: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, script_run_info: dict, script_name: str = None) -&gt; Optional[\"ScriptRun\"]:\n        \"\"\"\n        Retrieve a script run by its info and name.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n            &gt;&gt;&gt; print(script_run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n        Args:\n            script_run_info (dict): The run information to search for.\n            script_name (str, optional): The name of the script. Defaults to None.\n        Returns:\n            Optional[ScriptRun]: The script run, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ScriptRunsViewModel.get_by_parameters(\n                script_run_info=script_run_info,\n                script_name=script_name\n            )\n            if not db_instance:\n                print(f\"Script run with info {script_run_info} and script name {script_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting script run: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ScriptRun\"]:\n        \"\"\"\n        Retrieve a script run by its ID.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(script_run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n        Args:\n            id (UUID | int | str): The ID of the script run.\n        Returns:\n            Optional[ScriptRun]: The script run, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ScriptRunModel.get(id)\n            if not db_instance:\n                print(f\"Script run with id {id} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting script run by id: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"ScriptRun\"]]:\n        \"\"\"\n        Retrieve all script runs.\n\n        Examples:\n            &gt;&gt;&gt; script_runs = ScriptRun.get_all()\n            &gt;&gt;&gt; for run in script_runs:\n            ...     print(run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n        Returns:\n            Optional[List[ScriptRun]]: List of all script runs, or None if not found.\n        \"\"\"\n        try:\n            script_runs = ScriptRunModel.all()\n            if not script_runs or len(script_runs) == 0:\n                print(\"No script runs found.\")\n                return None\n            script_runs = [cls.model_validate(script_run) for script_run in script_runs]\n            return script_runs\n        except Exception as e:\n            print(f\"Error getting all script runs: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        script_run_info: dict = None,\n        script_name: str = None\n    ) -&gt; Optional[List[\"ScriptRun\"]]:\n        \"\"\"\n        Search for script runs based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; script_runs = ScriptRun.search(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n            &gt;&gt;&gt; for run in script_runs:\n            ...     print(run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n        Args:\n            script_run_info (dict, optional): The run information to search for. Defaults to None.\n            script_name (str, optional): The name of the script. Defaults to None.\n        Returns:\n            Optional[List[ScriptRun]]: List of matching script runs, or None if not found.\n        \"\"\"\n        try:\n            if not any([script_name, script_run_info]):\n                print(\"At least one of script_name or script_run_info must be provided.\")\n                return None\n            script_runs = ScriptRunsViewModel.search(\n                script_run_info=script_run_info,\n                script_name=script_name\n            )\n            if not script_runs or len(script_runs) == 0:\n                print(\"No script runs found for the given search criteria.\")\n                return None\n            script_runs = [cls.model_validate(script_run) for script_run in script_runs]\n            return script_runs\n        except Exception as e:\n            print(f\"Error searching script runs: {e}\")\n            return None\n\n    def update(self, script_run_info: dict = None) -&gt; Optional[\"ScriptRun\"]:\n        \"\"\"\n        Update the details of the script run.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_run = script_run.update(script_run_info={\"status\": \"completed\"})\n            &gt;&gt;&gt; print(updated_run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n        Args:\n            script_run_info (dict, optional): The new run information. Defaults to None.\n        Returns:\n            Optional[ScriptRun]: The updated script run, or None if an error occurred.\n        \"\"\"\n        try:\n            if not script_run_info:\n                print(\"Model run info cannot be empty.\")\n                return None\n            current_id = self.id\n            script_run = ScriptRunModel.get(current_id)\n            if not script_run:\n                print(f\"Script run with id {current_id} does not exist.\")\n                return None\n            script_run = ScriptRunModel.update(\n                script_run,\n                script_run_info=script_run_info\n            )\n            instance = self.model_validate(script_run)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error updating script run: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the script run.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; success = script_run.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the script run was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            script_run = ScriptRunModel.get(current_id)\n            if not script_run:\n                print(f\"Script run with id {current_id} does not exist.\")\n                return False\n            ScriptRunModel.delete(script_run)\n            return True\n        except Exception as e:\n            print(f\"Error deleting script run: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"ScriptRun\"]:\n        \"\"\"\n        Refresh the script run's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_run = script_run.refresh()\n            &gt;&gt;&gt; print(refreshed_run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n        Returns:\n            Optional[ScriptRun]: The refreshed script run, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ScriptRunModel.get(self.id)\n            if not db_instance:\n                print(f\"Script run with id {self.id} not found.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and getattr(self, key) != value:\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing script run: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the script run.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; info = script_run.get_info()\n            &gt;&gt;&gt; print(info)\n            {'status': 'running', 'start_time': '2023-10-01T12:00:00Z'}\n\n        Returns:\n            Optional[dict]: The script run's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            script_run = ScriptRunModel.get(current_id)\n            if not script_run:\n                print(f\"Script run with id {current_id} does not exist.\")\n                return None\n            script_run_info = script_run.script_run_info\n            if not script_run_info:\n                print(\"ScriptRun info is empty.\")\n                return {}\n            return script_run_info\n        except Exception as e:\n            print(f\"Error getting script run info: {e}\")\n            return None\n\n    def set_info(self, script_run_info: dict) -&gt; Optional[\"ScriptRun\"]:\n        \"\"\"\n        Set the additional information of the script run.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_run = script_run.set_info(script_run_info={\"status\": \"completed\"})\n            &gt;&gt;&gt; print(updated_run)\n            ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n        Args:\n            script_run_info (dict): The new run information to set.\n        Returns:\n            Optional[ScriptRun]: The updated script run, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            script_run = ScriptRunModel.get(current_id)\n            if not script_run:\n                print(f\"Script run with id {current_id} does not exist.\")\n                return None\n            script_run = ScriptRunModel.update(\n                script_run,\n                script_run_info=script_run_info,\n            )\n            self.script_run_info = script_run.script_run_info\n            return self\n        except Exception as e:\n            print(f\"Error setting script run info: {e}\")\n            return None\n\n    def get_associated_script(self) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Get the script associated with this script run.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; script = script_run.get_associated_script()\n            &gt;&gt;&gt; print(script)\n            Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n            Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n\n        Returns:\n            Optional[Script]: The associated script, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            current_id = self.script_id\n            script_run_model = ScriptRunsViewModel.get_by_parameters(\n                script_id=current_id\n            )\n            script_id = script_run_model.script_id\n            if not script_id:\n                print(f\"No script found for script run with id {self.id}.\")\n                return None\n            script = Script.get_by_id(script_id)\n            if not script:\n                print(f\"Script with id {script_id} does not exist.\")\n                return None\n            return script\n        except Exception as e:\n            print(f\"Error getting script for script run: {e}\")\n            return None\n\n    def associate_script(self, script_name: str) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Associate this script run with a script.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; script = script_run.associate_script(script_name=\"example_script\")\n            &gt;&gt;&gt; print(script)\n            Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n\n        Args:\n            script_name (str): The name of the script to associate.\n        Returns:\n            Optional[Script]: The associated script, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            script = Script.get(script_name=script_name)\n            if not script:\n                print(f\"Script with name {script_name} does not exist.\")\n                return None\n            existing_association = ScriptRunModel.get_by_parameters(\n                id=script.id,\n                script_run_id=self.id\n            )\n            if existing_association:\n                print(f\"Script run with id {self.id} is already associated with script {script_name}.\")\n                return self\n            db_script_run = ScriptRunModel.get(self.id)\n            db_script_run = ScriptRunModel.update_parameter(\n                db_script_run,\n                \"script_id\",\n                script.id\n            )\n            self.refresh()\n            return script\n        except Exception as e:\n            print(f\"Error assigning script to script run: {e}\")\n            return None\n\n    def unassociate_script(self) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Unassociate this script run from its script.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; script = script_run.unassociate_script()\n            &gt;&gt;&gt; print(script)\n            Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n\n        Returns:\n            Optional[Script]: The unassociated script, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            script_run = ScriptRunModel.get(self.id)\n            if not script_run:\n                print(f\"Script run with id {self.id} does not exist.\")\n                return None\n            script = Script.get_by_id(script_run.script_id)\n            script_run = ScriptRunModel.update_parameter(\n                script_run,\n                \"script_id\",\n                None\n            )\n            self.refresh()\n            return script\n        except Exception as e:\n            print(f\"Error unassigning script from script run: {e}\")\n            return None\n\n    def belongs_to_script(self, script_name: str) -&gt; bool:\n        \"\"\"\n        Check if this script run is associated with a specific script.\n\n        Examples:\n            &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = script_run.belongs_to_script(\"example_script\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            script_name (str): The name of the script to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.script import Script\n            script = Script.get(script_name=script_name)\n            if not script:\n                print(f\"Script with name {script_name} does not exist.\")\n                return False\n            assignment_exists = ScriptRunModel.exists(\n                script_run_id=self.id,\n                script_id=script.id\n            )\n            return assignment_exists\n        except Exception as e:\n            print(f\"Error checking if script run belongs to script: {e}\")\n            return False\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the ScriptRun object.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the ScriptRun object.\"\"\"\n    return f\"ScriptRun(id={self.id}, script_id={self.script_id}, script_run_info={self.script_run_info})\"\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the ScriptRun object.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the ScriptRun object.\"\"\"\n    return f\"ScriptRun(id={self.id}, script_id={self.script_id}, script_run_info={self.script_run_info})\"\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.associate_script","title":"<code>associate_script(script_name)</code>","text":"<p>Associate this script run with a script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; script = script_run.associate_script(script_name=\"example_script\")\n&gt;&gt;&gt; print(script)\nScript(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script to associate.</p> required <p>Returns:     Optional[Script]: The associated script, or None if an error occurred.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def associate_script(self, script_name: str) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Associate this script run with a script.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; script = script_run.associate_script(script_name=\"example_script\")\n        &gt;&gt;&gt; print(script)\n        Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n\n    Args:\n        script_name (str): The name of the script to associate.\n    Returns:\n        Optional[Script]: The associated script, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        script = Script.get(script_name=script_name)\n        if not script:\n            print(f\"Script with name {script_name} does not exist.\")\n            return None\n        existing_association = ScriptRunModel.get_by_parameters(\n            id=script.id,\n            script_run_id=self.id\n        )\n        if existing_association:\n            print(f\"Script run with id {self.id} is already associated with script {script_name}.\")\n            return self\n        db_script_run = ScriptRunModel.get(self.id)\n        db_script_run = ScriptRunModel.update_parameter(\n            db_script_run,\n            \"script_id\",\n            script.id\n        )\n        self.refresh()\n        return script\n    except Exception as e:\n        print(f\"Error assigning script to script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.belongs_to_script","title":"<code>belongs_to_script(script_name)</code>","text":"<p>Check if this script run is associated with a specific script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = script_run.belongs_to_script(\"example_script\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def belongs_to_script(self, script_name: str) -&gt; bool:\n    \"\"\"\n    Check if this script run is associated with a specific script.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = script_run.belongs_to_script(\"example_script\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        script_name (str): The name of the script to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        script = Script.get(script_name=script_name)\n        if not script:\n            print(f\"Script with name {script_name} does not exist.\")\n            return False\n        assignment_exists = ScriptRunModel.exists(\n            script_run_id=self.id,\n            script_id=script.id\n        )\n        return assignment_exists\n    except Exception as e:\n        print(f\"Error checking if script run belongs to script: {e}\")\n        return False\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.create","title":"<code>create(script_run_info={}, script_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new script run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.create(script_run_info={\"status\": \"running\"}, script_name=\"example_script\")\n&gt;&gt;&gt; print(script_run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_run_info</code> <code>dict</code> <p>The run information for the new script run. Defaults to {{}}.</p> <code>{}</code> <code>script_name</code> <code>str</code> <p>The name of the script. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ScriptRun]: The created script run, or None if an error occurred.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    script_run_info: dict = {},\n    script_name: str = None\n) -&gt; Optional[\"ScriptRun\"]:\n    \"\"\"\n    Create a new script run.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.create(script_run_info={\"status\": \"running\"}, script_name=\"example_script\")\n        &gt;&gt;&gt; print(script_run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n    Args:\n        script_run_info (dict, optional): The run information for the new script run. Defaults to {{}}.\n        script_name (str, optional): The name of the script. Defaults to None.\n    Returns:\n        Optional[ScriptRun]: The created script run, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ScriptRunModel.get_or_create(\n            script_run_info=script_run_info,\n        )\n        script_run = cls.model_validate(db_instance)\n        if script_name:\n            script_run.associate_script(script_name)\n        return script_run\n    except Exception as e:\n        print(f\"Error creating script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.delete","title":"<code>delete()</code>","text":"<p>Delete the script run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; success = script_run.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the script run was deleted, False otherwise.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the script run.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; success = script_run.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the script run was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        script_run = ScriptRunModel.get(current_id)\n        if not script_run:\n            print(f\"Script run with id {current_id} does not exist.\")\n            return False\n        ScriptRunModel.delete(script_run)\n        return True\n    except Exception as e:\n        print(f\"Error deleting script run: {e}\")\n        return False\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.exists","title":"<code>exists(script_run_info, script_name=None)</code>  <code>classmethod</code>","text":"<p>Check if a script run with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; ScriptRun.exists(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\nTrue\n&gt;&gt;&gt; ScriptRun.exists(script_run_info={\"status\": \"running\"})\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_run_info</code> <code>dict</code> <p>The run information to check.</p> required <code>script_name</code> <code>str</code> <p>The name of the script. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if the script run exists, False otherwise.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    script_run_info: dict,\n    script_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if a script run with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; ScriptRun.exists(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n        True\n        &gt;&gt;&gt; ScriptRun.exists(script_run_info={\"status\": \"running\"})\n        False\n\n    Args:\n        script_run_info (dict): The run information to check.\n        script_name (str, optional): The name of the script. Defaults to None.\n    Returns:\n        bool: True if the script run exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ScriptRunsViewModel.exists(\n            script_name=script_name,\n            script_run_info=script_run_info\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of script run: {e}\")\n        return False\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.get","title":"<code>get(script_run_info, script_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a script run by its info and name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n&gt;&gt;&gt; print(script_run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_run_info</code> <code>dict</code> <p>The run information to search for.</p> required <code>script_name</code> <code>str</code> <p>The name of the script. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ScriptRun]: The script run, or None if not found.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>@classmethod\ndef get(cls, script_run_info: dict, script_name: str = None) -&gt; Optional[\"ScriptRun\"]:\n    \"\"\"\n    Retrieve a script run by its info and name.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n        &gt;&gt;&gt; print(script_run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n    Args:\n        script_run_info (dict): The run information to search for.\n        script_name (str, optional): The name of the script. Defaults to None.\n    Returns:\n        Optional[ScriptRun]: The script run, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ScriptRunsViewModel.get_by_parameters(\n            script_run_info=script_run_info,\n            script_name=script_name\n        )\n        if not db_instance:\n            print(f\"Script run with info {script_run_info} and script name {script_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all script runs.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_runs = ScriptRun.get_all()\n&gt;&gt;&gt; for run in script_runs:\n...     print(run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[ScriptRun]]</code> <p>Optional[List[ScriptRun]]: List of all script runs, or None if not found.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"ScriptRun\"]]:\n    \"\"\"\n    Retrieve all script runs.\n\n    Examples:\n        &gt;&gt;&gt; script_runs = ScriptRun.get_all()\n        &gt;&gt;&gt; for run in script_runs:\n        ...     print(run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n    Returns:\n        Optional[List[ScriptRun]]: List of all script runs, or None if not found.\n    \"\"\"\n    try:\n        script_runs = ScriptRunModel.all()\n        if not script_runs or len(script_runs) == 0:\n            print(\"No script runs found.\")\n            return None\n        script_runs = [cls.model_validate(script_run) for script_run in script_runs]\n        return script_runs\n    except Exception as e:\n        print(f\"Error getting all script runs: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.get_associated_script","title":"<code>get_associated_script()</code>","text":"<p>Get the script associated with this script run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; script = script_run.get_associated_script()\n&gt;&gt;&gt; print(script)\nScript(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\nScript(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Script]</code> <p>Optional[Script]: The associated script, or None if not found.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def get_associated_script(self) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Get the script associated with this script run.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; script = script_run.get_associated_script()\n        &gt;&gt;&gt; print(script)\n        Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n        Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n\n    Returns:\n        Optional[Script]: The associated script, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        current_id = self.script_id\n        script_run_model = ScriptRunsViewModel.get_by_parameters(\n            script_id=current_id\n        )\n        script_id = script_run_model.script_id\n        if not script_id:\n            print(f\"No script found for script run with id {self.id}.\")\n            return None\n        script = Script.get_by_id(script_id)\n        if not script:\n            print(f\"Script with id {script_id} does not exist.\")\n            return None\n        return script\n    except Exception as e:\n        print(f\"Error getting script for script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a script run by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(script_run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the script run.</p> required <p>Returns:     Optional[ScriptRun]: The script run, or None if not found.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"ScriptRun\"]:\n    \"\"\"\n    Retrieve a script run by its ID.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(script_run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n    Args:\n        id (UUID | int | str): The ID of the script run.\n    Returns:\n        Optional[ScriptRun]: The script run, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ScriptRunModel.get(id)\n        if not db_instance:\n            print(f\"Script run with id {id} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting script run by id: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the script run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; info = script_run.get_info()\n&gt;&gt;&gt; print(info)\n{'status': 'running', 'start_time': '2023-10-01T12:00:00Z'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The script run's info, or None if not found.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the script run.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; info = script_run.get_info()\n        &gt;&gt;&gt; print(info)\n        {'status': 'running', 'start_time': '2023-10-01T12:00:00Z'}\n\n    Returns:\n        Optional[dict]: The script run's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        script_run = ScriptRunModel.get(current_id)\n        if not script_run:\n            print(f\"Script run with id {current_id} does not exist.\")\n            return None\n        script_run_info = script_run.script_run_info\n        if not script_run_info:\n            print(\"ScriptRun info is empty.\")\n            return {}\n        return script_run_info\n    except Exception as e:\n        print(f\"Error getting script run info: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the script run's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_run = script_run.refresh()\n&gt;&gt;&gt; print(refreshed_run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n</code></pre> <p>Returns:</p> Type Description <code>Optional[ScriptRun]</code> <p>Optional[ScriptRun]: The refreshed script run, or None if an error occurred.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def refresh(self) -&gt; Optional[\"ScriptRun\"]:\n    \"\"\"\n    Refresh the script run's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_run = script_run.refresh()\n        &gt;&gt;&gt; print(refreshed_run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n    Returns:\n        Optional[ScriptRun]: The refreshed script run, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ScriptRunModel.get(self.id)\n        if not db_instance:\n            print(f\"Script run with id {self.id} not found.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and getattr(self, key) != value:\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.search","title":"<code>search(script_run_info=None, script_name=None)</code>  <code>classmethod</code>","text":"<p>Search for script runs based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_runs = ScriptRun.search(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n&gt;&gt;&gt; for run in script_runs:\n...     print(run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_run_info</code> <code>dict</code> <p>The run information to search for. Defaults to None.</p> <code>None</code> <code>script_name</code> <code>str</code> <p>The name of the script. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[ScriptRun]]: List of matching script runs, or None if not found.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    script_run_info: dict = None,\n    script_name: str = None\n) -&gt; Optional[List[\"ScriptRun\"]]:\n    \"\"\"\n    Search for script runs based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; script_runs = ScriptRun.search(script_run_info={\"status\": \"completed\"}, script_name=\"example_script\")\n        &gt;&gt;&gt; for run in script_runs:\n        ...     print(run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'running'})\n\n    Args:\n        script_run_info (dict, optional): The run information to search for. Defaults to None.\n        script_name (str, optional): The name of the script. Defaults to None.\n    Returns:\n        Optional[List[ScriptRun]]: List of matching script runs, or None if not found.\n    \"\"\"\n    try:\n        if not any([script_name, script_run_info]):\n            print(\"At least one of script_name or script_run_info must be provided.\")\n            return None\n        script_runs = ScriptRunsViewModel.search(\n            script_run_info=script_run_info,\n            script_name=script_name\n        )\n        if not script_runs or len(script_runs) == 0:\n            print(\"No script runs found for the given search criteria.\")\n            return None\n        script_runs = [cls.model_validate(script_run) for script_run in script_runs]\n        return script_runs\n    except Exception as e:\n        print(f\"Error searching script runs: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.set_info","title":"<code>set_info(script_run_info)</code>","text":"<p>Set the additional information of the script run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_run = script_run.set_info(script_run_info={\"status\": \"completed\"})\n&gt;&gt;&gt; print(updated_run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_run_info</code> <code>dict</code> <p>The new run information to set.</p> required <p>Returns:     Optional[ScriptRun]: The updated script run, or None if an error occurred.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def set_info(self, script_run_info: dict) -&gt; Optional[\"ScriptRun\"]:\n    \"\"\"\n    Set the additional information of the script run.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_run = script_run.set_info(script_run_info={\"status\": \"completed\"})\n        &gt;&gt;&gt; print(updated_run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n    Args:\n        script_run_info (dict): The new run information to set.\n    Returns:\n        Optional[ScriptRun]: The updated script run, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        script_run = ScriptRunModel.get(current_id)\n        if not script_run:\n            print(f\"Script run with id {current_id} does not exist.\")\n            return None\n        script_run = ScriptRunModel.update(\n            script_run,\n            script_run_info=script_run_info,\n        )\n        self.script_run_info = script_run.script_run_info\n        return self\n    except Exception as e:\n        print(f\"Error setting script run info: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.unassociate_script","title":"<code>unassociate_script()</code>","text":"<p>Unassociate this script run from its script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; script = script_run.unassociate_script()\n&gt;&gt;&gt; print(script)\nScript(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Script]</code> <p>Optional[Script]: The unassociated script, or None if an error occurred.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def unassociate_script(self) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Unassociate this script run from its script.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; script = script_run.unassociate_script()\n        &gt;&gt;&gt; print(script)\n        Script(script_name='example_script', script_url='https://example.com/script.py', script_extension='py', id=UUID('...'))\n\n    Returns:\n        Optional[Script]: The unassociated script, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.script import Script\n        script_run = ScriptRunModel.get(self.id)\n        if not script_run:\n            print(f\"Script run with id {self.id} does not exist.\")\n            return None\n        script = Script.get_by_id(script_run.script_id)\n        script_run = ScriptRunModel.update_parameter(\n            script_run,\n            \"script_id\",\n            None\n        )\n        self.refresh()\n        return script\n    except Exception as e:\n        print(f\"Error unassigning script from script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/script_runs/#gemini.api.script_run.ScriptRun.update","title":"<code>update(script_run_info=None)</code>","text":"<p>Update the details of the script run.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_run = script_run.update(script_run_info={\"status\": \"completed\"})\n&gt;&gt;&gt; print(updated_run)\nScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_run_info</code> <code>dict</code> <p>The new run information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ScriptRun]: The updated script run, or None if an error occurred.</p> Source code in <code>gemini/api/script_run.py</code> <pre><code>def update(self, script_run_info: dict = None) -&gt; Optional[\"ScriptRun\"]:\n    \"\"\"\n    Update the details of the script run.\n\n    Examples:\n        &gt;&gt;&gt; script_run = ScriptRun.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_run = script_run.update(script_run_info={\"status\": \"completed\"})\n        &gt;&gt;&gt; print(updated_run)\n        ScriptRun(id=UUID('...'), script_id=UUID('...') script_run_info={'status': 'completed'})\n\n    Args:\n        script_run_info (dict, optional): The new run information. Defaults to None.\n    Returns:\n        Optional[ScriptRun]: The updated script run, or None if an error occurred.\n    \"\"\"\n    try:\n        if not script_run_info:\n            print(\"Model run info cannot be empty.\")\n            return None\n        current_id = self.id\n        script_run = ScriptRunModel.get(current_id)\n        if not script_run:\n            print(f\"Script run with id {current_id} does not exist.\")\n            return None\n        script_run = ScriptRunModel.update(\n            script_run,\n            script_run_info=script_run_info\n        )\n        instance = self.model_validate(script_run)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error updating script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/","title":"Scripts API","text":""},{"location":"api/scripts/#description","title":"Description","text":"<p>A script defines a program in a programming language sch as C, Bash or Python. A script comprises a collection of Script Records, has one or more Script Runs, and can be associated with multiple Experiments.</p>"},{"location":"api/scripts/#module","title":"Module","text":"<p>This module defines the Script class, which represents a script entity, including its metadata, associations to experiments, datasets, runs, and records, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting scripts, as well as methods for checking existence, searching, and managing associations with related entities and records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a script with the given name exists.</li> <li><code>create</code>: Create a new script.</li> <li><code>get</code>: Retrieve a script by its name and experiment.</li> <li><code>get_by_id</code>: Retrieve a script by its ID.</li> <li><code>get_all</code>: Retrieve all scripts.</li> <li><code>search</code>: Search for scripts based on various criteria.</li> <li><code>update</code>: Update the details of a script.</li> <li><code>delete</code>: Delete a script.</li> <li><code>refresh</code>: Refresh the script's data from the database.</li> <li><code>get_info</code>: Get the additional information of the script.</li> <li><code>set_info</code>: Set the additional information of the script.</li> <li>Association methods for experiments, datasets, runs, and records.</li> </ul>"},{"location":"api/scripts/#gemini.api.script.Script","title":"<code>Script</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a script entity, including its metadata, associations to experiments, datasets, runs, and records, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the script.</p> <code>script_name</code> <code>str</code> <p>The name of the script.</p> <code>script_url</code> <code>Optional[str]</code> <p>The URL of the script.</p> <code>script_extension</code> <code>Optional[str]</code> <p>The file extension of the script.</p> <code>script_info</code> <code>Optional[dict]</code> <p>Additional information about the script.</p> Source code in <code>gemini/api/script.py</code> <pre><code>class Script(APIBase):\n    \"\"\"\n    Represents a script entity, including its metadata, associations to experiments, datasets, runs, and records, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the script.\n        script_name (str): The name of the script.\n        script_url (Optional[str]): The URL of the script.\n        script_extension (Optional[str]): The file extension of the script.\n        script_info (Optional[dict]): Additional information about the script.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"script_id\"))\n\n    script_name: str\n    script_url: Optional[str] = None\n    script_extension: Optional[str] = None\n    script_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Script object.\"\"\"\n        return f\"Script(script_name={self.script_name}, script_url={self.script_url}, script_extension={self.script_extension}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Script object.\"\"\"\n        return f\"Script(script_name={self.script_name}, script_url={self.script_url}, script_extension={self.script_extension}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        script_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a script with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Script.exists(script_name=\"example_script\")\n            True\n            &gt;&gt;&gt; Script.exists(script_name=\"non_existent_script\")\n            False\n\n        Args:\n            script_name (str): The name of the script.\n        Returns:\n            bool: True if the script exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ScriptModel.exists(script_name=script_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of script: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        script_name: str,\n        script_url: str = None,\n        script_extension: str = None,\n        script_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Create a new script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.create(script_name=\"example_script\", script_url=\"http://example.com/script.py\")\n            &gt;&gt;&gt; print(script)\n            Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n        Args:\n            script_name (str): The name of the script.\n            script_url (str, optional): The URL of the script. Defaults to None.\n            script_extension (str, optional): The file extension. Defaults to None.\n            script_info (dict, optional): Additional information. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[Script]: The created script, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ScriptModel.get_or_create(\n                script_name=script_name,\n                script_url=script_url,\n                script_extension=script_extension,\n                script_info=script_info,\n            )\n            script = cls.model_validate(db_instance)\n            if experiment_name:\n                script.associate_experiment(experiment_name=experiment_name)\n            return script\n        except Exception as e:\n            print(f\"Error creating script: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        script_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Retrieve a script by its name and experiment.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\", experiment_name=\"example_experiment\")\n            &gt;&gt;&gt; print(script)\n            Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n        Args:\n            script_name (str): The name of the script.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Script]: The script, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentScriptsViewModel.get_by_parameters(\n                script_name=script_name,\n                experiment_name=experiment_name\n            )\n            if not db_instance:\n                print(f\"Script with name {script_name} not found.\")\n                return None\n            script = cls.model_validate(db_instance)\n            return script\n        except Exception as e:\n            print(f\"Error getting script: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Retrieve a script by its ID.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(script)\n            Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the script.\n        Returns:\n            Optional[Script]: The script, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ScriptModel.get(id)\n            if not db_instance:\n                print(f\"Script with ID {id} does not exist.\")\n                return None\n            script = cls.model_validate(db_instance)\n            return script\n        except Exception as e:\n            print(f\"Error getting script by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Script\"]]:\n        \"\"\"\n        Retrieve all scripts.\n\n        Examples:\n            &gt;&gt;&gt; scripts = Script.get_all()\n            &gt;&gt;&gt; for script in scripts:\n            ...     print(script)\n            Script(script_name=example_script1, script_url=http://example.com/script1.py, script_extension=.py, id=UUID(...))\n            Script(script_name=example_script2, script_url=http://example.com/script2.py, script_extension=.py, id=UUID(...))\n\n        Returns:\n            Optional[List[Script]]: List of all scripts, or None if not found.\n        \"\"\"\n        try:\n            scripts = ScriptModel.all()\n            if not scripts or len(scripts) == 0:\n                print(\"No scripts found.\")\n                return None\n            scripts = [cls.model_validate(script) for script in scripts]\n            return scripts\n        except Exception as e:\n            print(f\"Error getting all scripts: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        script_name: str = None,\n        script_url: str = None,\n        script_extension: str = None,\n        script_info: dict = None,\n        experiment_name: str = None\n    ) -&gt; Optional[List[\"Script\"]]:\n        \"\"\"\n        Search for scripts based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; scripts = Script.search(script_name=\"example_script\")\n            &gt;&gt;&gt; for script in scripts:\n            ...     print(script)\n            Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n\n        Args:\n            script_name (str, optional): The name of the script. Defaults to None.\n            script_url (str, optional): The URL of the script. Defaults to None.\n            script_extension (str, optional): The file extension. Defaults to None.\n            script_info (dict, optional): Additional information. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[List[Script]]: List of matching scripts, or None if not found.\n        \"\"\"\n        try:\n            if not any([script_name, script_info, script_url, script_extension, experiment_name]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n            scripts = ExperimentScriptsViewModel.search(\n                script_name=script_name,\n                script_info=script_info,\n                script_url=script_url,\n                script_extension=script_extension,\n                experiment_name=experiment_name\n            )\n            if not scripts or len(scripts) == 0:\n                print(\"No scripts found with the provided search parameters.\")\n                return None\n            scripts = [cls.model_validate(script) for script in scripts]\n            return scripts\n        except Exception as e:\n            print(f\"Error searching scripts: {e}\")\n            return None\n\n    def update(\n        self,\n        script_name: str = None,\n        script_url: str = None,\n        script_extension: str = None,\n        script_info: dict = None\n    ) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Update the details of the script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; updated_script = script.update(script_name=\"new_example_script\")\n            &gt;&gt;&gt; print(updated_script)\n            Script(script_name=new_example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n        Args:\n            script_name (str, optional): The new name. Defaults to None.\n            script_url (str, optional): The new URL. Defaults to None.\n            script_extension (str, optional): The new file extension. Defaults to None.\n            script_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[Script]: The updated script, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([script_name, script_url, script_extension, script_info]):\n                print(\"At least one update parameter must be provided.\")\n                return None\n            current_id = self.id\n            script = ScriptModel.get(current_id)\n            if not script:\n                print(f\"Script with ID {current_id} does not exist.\")\n                return None\n            script = ScriptModel.update(\n                script,\n                script_name=script_name,\n                script_url=script_url,\n                script_extension=script_extension,\n                script_info=script_info\n            )\n            script = self.model_validate(script)\n            self.refresh()\n            return script\n        except Exception as e:\n            print(f\"Error updating script: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; success = script.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the script was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            script = ScriptModel.get(current_id)\n            if not script:\n                print(f\"Script with ID {current_id} does not exist.\")\n                return False\n            ScriptModel.delete(script)\n            return True\n        except Exception as e:\n            print(f\"Error deleting script: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Refresh the script's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; refreshed_script = script.refresh()\n            &gt;&gt;&gt; print(refreshed_script)\n            Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n        Returns:\n            Optional[Script]: The refreshed script, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = ScriptModel.get(self.id)\n            if not db_instance:\n                print(f\"Script with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing script: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; script_info = script.get_info()\n            &gt;&gt;&gt; print(script_info)\n            {'key1': 'value1', 'key2': 'value2'}\n\n        Returns:\n            Optional[dict]: The script's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            script = ScriptModel.get(current_id)\n            if not script:\n                print(f\"Script with ID {current_id} does not exist.\")\n                return None\n            script_info = script.script_info\n            if not script_info:\n                print(\"Script info is empty.\")\n                return None\n            return script_info\n        except Exception as e:\n            print(f\"Error getting script info: {e}\")\n            return None\n\n    def set_info(self, script_info: dict) -&gt; Optional[\"Script\"]:\n        \"\"\"\n        Set the additional information of the script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; updated_script = script.set_info(script_info={\"key1\": \"new_value1\", \"key2\": \"new_value2\"})\n            &gt;&gt;&gt; print(updated_script.get_info())\n            {'key1': 'new_value1', 'key2': 'new_value2'}\n\n        Args:\n            script_info (dict): The new information to set.\n        Returns:\n            Optional[Script]: The updated script, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            script = ScriptModel.get(current_id)\n            if not script:\n                print(f\"Script with ID {current_id} does not exist.\")\n                return None\n            script = ScriptModel.update(\n                script,\n                script_info=script_info\n            )\n            script = self.model_validate(script)\n            self.refresh()\n            return script\n        except Exception as e:\n            print(f\"Error setting script info: {e}\")\n            return None\n\n    def get_associated_runs(self) -&gt; Optional[List[\"ScriptRun\"]]:\n        \"\"\"\n        Get all runs associated with this script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; runs = script.get_associated_runs()\n            &gt;&gt;&gt; for run in runs:\n            ...     print(run)\n            ScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n            ScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n\n        Returns:\n            Optional[List[ScriptRun]]: A list of associated runs, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.script_run import ScriptRun\n            current_id = self.id\n            script_runs = ScriptRunsViewModel.search(script_id=current_id)\n            if not script_runs or len(script_runs) == 0:\n                print(\"No associated runs found.\")\n                return None\n            runs = [ScriptRun.model_validate(script_run) for script_run in script_runs]\n            return runs\n        except Exception as e:\n            print(f\"Error getting associated runs: {e}\")\n            return None\n\n    def create_new_run(self, script_run_info: dict = None) -&gt; Optional[\"ScriptRun\"]:\n        \"\"\"\n        Create and associate a new run with this script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; new_run = script.create_new_run(script_run_info={\"key\": \"value\"})\n            &gt;&gt;&gt; print(new_run)\n            ScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n\n        Args:\n            script_run_info (dict, optional): The run information for the new run. Defaults to None.\n        Returns:\n            Optional[ScriptRun]: The created and associated run, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.script_run import ScriptRun\n            new_script_run = ScriptRun.create(\n                script_run_info=script_run_info,\n                script_name=self.script_name\n            )\n            if not new_script_run:\n                print(\"Failed to create new script run.\")\n                return None\n            return new_script_run\n        except Exception as e:\n            print(f\"Error creating script run: {e}\")\n            return None\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with this script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; experiments = script.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n\n        Returns:\n            Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            current_id = self.id\n            experiment_scripts = ExperimentScriptsViewModel.search(script_id=current_id)\n            if not experiment_scripts or len(experiment_scripts) == 0:\n                print(\"No associated experiments found.\")\n                return None\n            experiments = [Experiment.model_validate(experiment) for experiment in experiment_scripts]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this script with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; experiment = script.associate_experiment(experiment_name=\"example_experiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentScriptModel.get_by_parameters(\n                experiment_id=experiment.id,\n                script_id=self.id\n            )\n            if existing_association:\n                print(f\"Script {self.script_name} is already associated with experiment {experiment_name}.\")\n                return self\n            new_association = ExperimentScriptModel.get_or_create(\n                experiment_id=experiment.id,\n                script_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate script {self.script_name} with experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating script with experiment: {e}\")\n            return None\n\n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this script from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; experiment = script.unassociate_experiment(experiment_name=\"example_experiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentScriptModel.get_by_parameters(\n                experiment_id=experiment.id,\n                script_id=self.id\n            )\n            if not existing_association:\n                print(f\"Script {self.script_name} is not associated with experiment {experiment_name}.\")\n                return self\n            is_deleted = ExperimentScriptModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate script {self.script_name} from experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassociating script from experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this script is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; is_associated = script.belongs_to_experiment(experiment_name=\"example_experiment\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentScriptModel.exists(\n                experiment_id=experiment.id,\n                script_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if script belongs to experiment: {e}\")\n            return\n\n    def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n        \"\"\"\n        Get all datasets associated with this script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; datasets = script.get_associated_datasets()\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n            Dataset(id=UUID(...), dataset_name='another_dataset', dataset_type='Script', collection_date='2023-01-02')\n\n        Returns:\n            Optional[List[Dataset]]: A list of associated datasets, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            current_id = self.id\n            script_datasets = ScriptDatasetsViewModel.search(script_id=current_id)\n            if not script_datasets or len(script_datasets) == 0:\n                print(\"No associated datasets found.\")\n                return None\n            datasets = [Dataset.model_validate(script_dataset) for script_dataset in script_datasets]\n            return datasets\n        except Exception as e:\n            print(f\"Error getting associated datasets: {e}\")\n            return None\n\n    def create_new_dataset(\n        self,\n        dataset_name: str,\n        dataset_info: dict = {},\n        collection_date: date = None,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Create and associate a new dataset with this script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; dataset = script.create_new_dataset(dataset_name=\"example_dataset\", dataset_info={\"key\": \"value\"}, collection_date=date(2023, 1, 1), experiment_name=\"example_experiment\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n\n        Args:\n            dataset_name (str): The name of the new dataset.\n            dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n            collection_date (date, optional): The collection date. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.create(\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                collection_date=collection_date,\n                experiment_name=experiment_name,\n                dataset_type=GEMINIDatasetType.Script\n            )\n            if not dataset:\n                print(\"Failed to create new dataset.\")\n                return None\n            dataset = self.associate_dataset(dataset_name=dataset_name)\n            return dataset\n        except Exception as e:\n            print(f\"Error creating new dataset: {e}\")\n            return None\n\n    def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Associate this script with a dataset.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; dataset = script.associate_dataset(dataset_name=\"example_dataset\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n\n        Args:\n            dataset_name (str): The name of the dataset to associate.\n        Returns:\n            Optional[Dataset]: The associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name=dataset_name)\n            if not dataset:\n                print(f\"Dataset {dataset_name} does not exist.\")\n                return None\n            existing_association = ScriptDatasetModel.get_by_parameters(\n                script_id=self.id,\n                dataset_id=dataset.id\n            )\n            if existing_association:\n                print(f\"Script {self.script_name} is already associated with dataset {dataset_name}.\")\n                return self\n            new_association = ScriptDatasetModel.get_or_create(\n                script_id=self.id,\n                dataset_id=dataset.id\n            )\n            if not new_association:\n                print(f\"Failed to associate script {self.script_name} with dataset {dataset_name}.\")\n                return None\n            self.refresh()\n            return dataset\n        except Exception as e:\n            print(f\"Error associating script with dataset: {e}\")\n            return None\n\n    def insert_record(\n        self,\n        timestamp: datetime = None,\n        collection_date: date = None,\n        script_data: dict = {},\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_file: str = None,\n        record_info: dict = {},\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a single script record for this script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; success, record_ids = script.insert_record(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date(2023, 1, 1),\n            ...     script_data={\"key\": \"value\"},\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_file=\"/path/to/record/file.txt\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID(...)]\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            script_data (dict, optional): The script data. Defaults to {{}}.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_file (str, optional): The file path or URI. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n            if not script_data and not record_file:\n                raise ValueError(\"Either script_data or record_file must be provided.\")\n\n            timestamp = timestamp if timestamp else datetime.now()\n            collection_date = collection_date if collection_date else timestamp.date()\n            if not dataset_name:\n                dataset_name = f\"{self.script_name} Dataset {collection_date}\"\n            script_name = self.script_name\n            script_record = ScriptRecord.create(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                script_name=script_name,\n                script_data=script_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_file=record_file,\n                record_info=record_info,\n                insert_on_create=False\n            )\n            success, inserted_record_ids = ScriptRecord.insert([script_record])\n            if not success:\n                raise Exception(\"Failed to insert script record.\")\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting script record: {e}\")\n            return False, []\n\n    def insert_records(\n        self,\n        timestamps: List[datetime] = None,\n        collection_date: date = None,\n        script_data: List[dict] = [],\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_files: List[str] = [],\n        record_info: List[dict] = []\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert multiple script records for this script.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; success, record_ids = script.insert_records(\n            ...     timestamps=[datetime.now(), datetime.now()],\n            ...     collection_date=date(2023, 1, 1),\n            ...     script_data=[{\"key\": \"value1\"}, {\"key\": \"value2\"}],\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_files=[\"/path/to/record1.txt\", \"/path/to/record2.txt\"],\n            ...     record_info=[{\"info_key\": \"info_value1\"}, {\"info_key\": \"info_value2\"}]\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID(...), UUID(...)]\n\n        Args:\n            timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            script_data (List[dict], optional): List of script data. Defaults to [].\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_files (List[str], optional): List of file paths or URIs. Defaults to [].\n            record_info (List[dict], optional): List of additional info. Defaults to [].\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name and not season_name and not site_name:\n                raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n            if len(timestamps) == 0:\n                raise ValueError(\"At least one timestamp must be provided.\")\n\n            if len(script_data) != len(timestamps):\n                raise ValueError(\"script_data must have the same length as timestamps.\")\n\n            if record_files and len(record_files) != len(timestamps):\n                raise ValueError(\"record_files must have the same length as timestamps.\")\n\n            collection_date = collection_date if collection_date else timestamps[0].date()\n\n            if not dataset_name:\n                dataset_name = f\"{self.script_name} Dataset {collection_date}\"\n\n            script_records = []\n            timestamps_length = len(timestamps)\n\n            for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Script \" + self.script_name):\n                script_record = ScriptRecord.create(\n                    timestamp = timestamps[i],\n                    collection_date = collection_date,\n                    script_name= self.script_name,\n                    script_data = script_data[i]  if script_data else {},\n                    dataset_name = dataset_name,\n                    experiment_name = experiment_name,\n                    season_name = season_name,\n                    site_name = site_name,\n                    record_file= record_files[i] if record_files else None,\n                    record_info = record_info[i] if record_info else {},\n                    insert_on_create=False\n                )\n                script_records.append(script_record)\n\n            success, inserted_record_ids = ScriptRecord.insert(script_records)\n            if not success:\n                print(\"Failed to insert script records.\")\n                return False, []\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting script records: {e}\")\n            return False, []\n\n    def search_records(\n        self,\n        collection_date: date = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        record_info: dict = None\n    ) -&gt; Optional[List[ScriptRecord]]:\n        \"\"\"\n        Search for script records associated with this script based on search parameters.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; records = script.search_records(\n            ...     collection_date=date(2023, 1, 1),\n            ...     dataset_name=\"example_dataset\",\n            ...     experiment_name=\"example_experiment\",\n            ...     season_name=\"example_season\",\n            ...     site_name=\"example_site\",\n            ...     record_info={\"info_key\": \"info_value\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-01T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n            ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-02T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Returns:\n            Optional[List[ScriptRecord]]: List of matching script records, or None if not found.\n        \"\"\"\n        try:\n            record_info = record_info if record_info else {}\n            record_info = {k: v for k, v in record_info.items() if v is not None}\n\n            records = ScriptRecord.search(\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                script_name=self.script_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                record_info=record_info\n            )\n            return records\n        except Exception as e:\n            print(f\"Error searching script records: {e}\")\n            return []\n\n    def filter_records(\n        self,\n        start_timestamp: Optional[datetime] = None,\n        end_timestamp: Optional[datetime] = None,\n        dataset_names: Optional[List[str]] = None,\n        experiment_names: Optional[List[str]] = None,\n        season_names: Optional[List[str]] = None,\n        site_names: Optional[List[str]] = None\n    ) -&gt; Optional[List[ScriptRecord]]:\n        \"\"\"\n        Filter script records associated with this script using a custom filter function.\n\n        Examples:\n            &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n            &gt;&gt;&gt; records = script.filter_records(\n            ...     start_timestamp=datetime(2023, 1, 1),\n            ...     end_timestamp=datetime(2023, 12, 31),\n            ...     dataset_names=[\"example_dataset\"],\n            ...     experiment_names=[\"example_experiment\"],\n            ...     season_names=[\"example_season\"],\n            ...     site_names=[\"example_site\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-01T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n            ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-02T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n        Args:\n            start_timestamp (Optional[datetime], optional): Start of timestamp range. Defaults to None.\n            end_timestamp (Optional[datetime], optional): End of timestamp range. Defaults to None.\n            dataset_names (Optional[List[str]], optional): List of dataset names. Defaults to None.\n            experiment_names (Optional[List[str]], optional): List of experiment names. Defaults to None.\n            season_names (Optional[List[str]], optional): List of season names. Defaults to None.\n            site_names (Optional[List[str]], optional): List of site names. Defaults to None.\n        Returns:\n            Optional[List[ScriptRecord]]: List of filtered script records, or None if not found.\n        \"\"\"\n        try:\n            records = ScriptRecord.filter(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                script_names=[self.script_name],\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            return records\n        except Exception as e:\n            print(f\"Error filtering script records: {e}\")\n            return []\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Script object.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Script object.\"\"\"\n    return f\"Script(script_name={self.script_name}, script_url={self.script_url}, script_extension={self.script_extension}, id={self.id})\"\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Script object.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Script object.\"\"\"\n    return f\"Script(script_name={self.script_name}, script_url={self.script_url}, script_extension={self.script_extension}, id={self.id})\"\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.associate_dataset","title":"<code>associate_dataset(dataset_name)</code>","text":"<p>Associate this script with a dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; dataset = script.associate_dataset(dataset_name=\"example_dataset\")\n&gt;&gt;&gt; print(dataset)\nDataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to associate.</p> required <p>Returns:     Optional[Dataset]: The associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Associate this script with a dataset.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; dataset = script.associate_dataset(dataset_name=\"example_dataset\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n\n    Args:\n        dataset_name (str): The name of the dataset to associate.\n    Returns:\n        Optional[Dataset]: The associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name=dataset_name)\n        if not dataset:\n            print(f\"Dataset {dataset_name} does not exist.\")\n            return None\n        existing_association = ScriptDatasetModel.get_by_parameters(\n            script_id=self.id,\n            dataset_id=dataset.id\n        )\n        if existing_association:\n            print(f\"Script {self.script_name} is already associated with dataset {dataset_name}.\")\n            return self\n        new_association = ScriptDatasetModel.get_or_create(\n            script_id=self.id,\n            dataset_id=dataset.id\n        )\n        if not new_association:\n            print(f\"Failed to associate script {self.script_name} with dataset {dataset_name}.\")\n            return None\n        self.refresh()\n        return dataset\n    except Exception as e:\n        print(f\"Error associating script with dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this script with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; experiment = script.associate_experiment(experiment_name=\"example_experiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this script with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; experiment = script.associate_experiment(experiment_name=\"example_experiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentScriptModel.get_by_parameters(\n            experiment_id=experiment.id,\n            script_id=self.id\n        )\n        if existing_association:\n            print(f\"Script {self.script_name} is already associated with experiment {experiment_name}.\")\n            return self\n        new_association = ExperimentScriptModel.get_or_create(\n            experiment_id=experiment.id,\n            script_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate script {self.script_name} with experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating script with experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this script is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; is_associated = script.belongs_to_experiment(experiment_name=\"example_experiment\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this script is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; is_associated = script.belongs_to_experiment(experiment_name=\"example_experiment\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentScriptModel.exists(\n            experiment_id=experiment.id,\n            script_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if script belongs to experiment: {e}\")\n        return\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.create","title":"<code>create(script_name, script_url=None, script_extension=None, script_info={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.create(script_name=\"example_script\", script_url=\"http://example.com/script.py\")\n&gt;&gt;&gt; print(script)\nScript(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <code>script_url</code> <code>str</code> <p>The URL of the script. Defaults to None.</p> <code>None</code> <code>script_extension</code> <code>str</code> <p>The file extension. Defaults to None.</p> <code>None</code> <code>script_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Script]: The created script, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    script_name: str,\n    script_url: str = None,\n    script_extension: str = None,\n    script_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Create a new script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.create(script_name=\"example_script\", script_url=\"http://example.com/script.py\")\n        &gt;&gt;&gt; print(script)\n        Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n    Args:\n        script_name (str): The name of the script.\n        script_url (str, optional): The URL of the script. Defaults to None.\n        script_extension (str, optional): The file extension. Defaults to None.\n        script_info (dict, optional): Additional information. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[Script]: The created script, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ScriptModel.get_or_create(\n            script_name=script_name,\n            script_url=script_url,\n            script_extension=script_extension,\n            script_info=script_info,\n        )\n        script = cls.model_validate(db_instance)\n        if experiment_name:\n            script.associate_experiment(experiment_name=experiment_name)\n        return script\n    except Exception as e:\n        print(f\"Error creating script: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.create_new_dataset","title":"<code>create_new_dataset(dataset_name, dataset_info={}, collection_date=None, experiment_name=None)</code>","text":"<p>Create and associate a new dataset with this script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; dataset = script.create_new_dataset(dataset_name=\"example_dataset\", dataset_info={\"key\": \"value\"}, collection_date=date(2023, 1, 1), experiment_name=\"example_experiment\")\n&gt;&gt;&gt; print(dataset)\nDataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the new dataset.</p> required <code>dataset_info</code> <code>dict</code> <p>Additional information about the dataset. Defaults to {{}}.</p> <code>{}</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Dataset]: The created and associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def create_new_dataset(\n    self,\n    dataset_name: str,\n    dataset_info: dict = {},\n    collection_date: date = None,\n    experiment_name: str = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Create and associate a new dataset with this script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; dataset = script.create_new_dataset(dataset_name=\"example_dataset\", dataset_info={\"key\": \"value\"}, collection_date=date(2023, 1, 1), experiment_name=\"example_experiment\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n\n    Args:\n        dataset_name (str): The name of the new dataset.\n        dataset_info (dict, optional): Additional information about the dataset. Defaults to {{}}.\n        collection_date (date, optional): The collection date. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.create(\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            collection_date=collection_date,\n            experiment_name=experiment_name,\n            dataset_type=GEMINIDatasetType.Script\n        )\n        if not dataset:\n            print(\"Failed to create new dataset.\")\n            return None\n        dataset = self.associate_dataset(dataset_name=dataset_name)\n        return dataset\n    except Exception as e:\n        print(f\"Error creating new dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.create_new_run","title":"<code>create_new_run(script_run_info=None)</code>","text":"<p>Create and associate a new run with this script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; new_run = script.create_new_run(script_run_info={\"key\": \"value\"})\n&gt;&gt;&gt; print(new_run)\nScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_run_info</code> <code>dict</code> <p>The run information for the new run. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[ScriptRun]: The created and associated run, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def create_new_run(self, script_run_info: dict = None) -&gt; Optional[\"ScriptRun\"]:\n    \"\"\"\n    Create and associate a new run with this script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; new_run = script.create_new_run(script_run_info={\"key\": \"value\"})\n        &gt;&gt;&gt; print(new_run)\n        ScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n\n    Args:\n        script_run_info (dict, optional): The run information for the new run. Defaults to None.\n    Returns:\n        Optional[ScriptRun]: The created and associated run, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.script_run import ScriptRun\n        new_script_run = ScriptRun.create(\n            script_run_info=script_run_info,\n            script_name=self.script_name\n        )\n        if not new_script_run:\n            print(\"Failed to create new script run.\")\n            return None\n        return new_script_run\n    except Exception as e:\n        print(f\"Error creating script run: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.delete","title":"<code>delete()</code>","text":"<p>Delete the script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; success = script.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the script was deleted, False otherwise.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; success = script.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the script was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        script = ScriptModel.get(current_id)\n        if not script:\n            print(f\"Script with ID {current_id} does not exist.\")\n            return False\n        ScriptModel.delete(script)\n        return True\n    except Exception as e:\n        print(f\"Error deleting script: {e}\")\n        return False\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.exists","title":"<code>exists(script_name)</code>  <code>classmethod</code>","text":"<p>Check if a script with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Script.exists(script_name=\"example_script\")\nTrue\n&gt;&gt;&gt; Script.exists(script_name=\"non_existent_script\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <p>Returns:     bool: True if the script exists, False otherwise.</p> Source code in <code>gemini/api/script.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    script_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a script with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Script.exists(script_name=\"example_script\")\n        True\n        &gt;&gt;&gt; Script.exists(script_name=\"non_existent_script\")\n        False\n\n    Args:\n        script_name (str): The name of the script.\n    Returns:\n        bool: True if the script exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ScriptModel.exists(script_name=script_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of script: {e}\")\n        return False\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.filter_records","title":"<code>filter_records(start_timestamp=None, end_timestamp=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>","text":"<p>Filter script records associated with this script using a custom filter function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; records = script.filter_records(\n...     start_timestamp=datetime(2023, 1, 1),\n...     end_timestamp=datetime(2023, 12, 31),\n...     dataset_names=[\"example_dataset\"],\n...     experiment_names=[\"example_experiment\"],\n...     season_names=[\"example_season\"],\n...     site_names=[\"example_site\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-01T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\nScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-02T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>Optional[datetime]</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>Optional[datetime]</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>Optional[List[str]]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>Optional[List[str]]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>Optional[List[str]]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>Optional[List[str]]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[ScriptRecord]]: List of filtered script records, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def filter_records(\n    self,\n    start_timestamp: Optional[datetime] = None,\n    end_timestamp: Optional[datetime] = None,\n    dataset_names: Optional[List[str]] = None,\n    experiment_names: Optional[List[str]] = None,\n    season_names: Optional[List[str]] = None,\n    site_names: Optional[List[str]] = None\n) -&gt; Optional[List[ScriptRecord]]:\n    \"\"\"\n    Filter script records associated with this script using a custom filter function.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; records = script.filter_records(\n        ...     start_timestamp=datetime(2023, 1, 1),\n        ...     end_timestamp=datetime(2023, 12, 31),\n        ...     dataset_names=[\"example_dataset\"],\n        ...     experiment_names=[\"example_experiment\"],\n        ...     season_names=[\"example_season\"],\n        ...     site_names=[\"example_site\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-01T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n        ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-02T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        start_timestamp (Optional[datetime], optional): Start of timestamp range. Defaults to None.\n        end_timestamp (Optional[datetime], optional): End of timestamp range. Defaults to None.\n        dataset_names (Optional[List[str]], optional): List of dataset names. Defaults to None.\n        experiment_names (Optional[List[str]], optional): List of experiment names. Defaults to None.\n        season_names (Optional[List[str]], optional): List of season names. Defaults to None.\n        site_names (Optional[List[str]], optional): List of site names. Defaults to None.\n    Returns:\n        Optional[List[ScriptRecord]]: List of filtered script records, or None if not found.\n    \"\"\"\n    try:\n        records = ScriptRecord.filter(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            script_names=[self.script_name],\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        return records\n    except Exception as e:\n        print(f\"Error filtering script records: {e}\")\n        return []\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.get","title":"<code>get(script_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a script by its name and experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\", experiment_name=\"example_experiment\")\n&gt;&gt;&gt; print(script)\nScript(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Script]: The script, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    script_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Retrieve a script by its name and experiment.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\", experiment_name=\"example_experiment\")\n        &gt;&gt;&gt; print(script)\n        Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n    Args:\n        script_name (str): The name of the script.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Script]: The script, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentScriptsViewModel.get_by_parameters(\n            script_name=script_name,\n            experiment_name=experiment_name\n        )\n        if not db_instance:\n            print(f\"Script with name {script_name} not found.\")\n            return None\n        script = cls.model_validate(db_instance)\n        return script\n    except Exception as e:\n        print(f\"Error getting script: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all scripts.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; scripts = Script.get_all()\n&gt;&gt;&gt; for script in scripts:\n...     print(script)\nScript(script_name=example_script1, script_url=http://example.com/script1.py, script_extension=.py, id=UUID(...))\nScript(script_name=example_script2, script_url=http://example.com/script2.py, script_extension=.py, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Script]]</code> <p>Optional[List[Script]]: List of all scripts, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Script\"]]:\n    \"\"\"\n    Retrieve all scripts.\n\n    Examples:\n        &gt;&gt;&gt; scripts = Script.get_all()\n        &gt;&gt;&gt; for script in scripts:\n        ...     print(script)\n        Script(script_name=example_script1, script_url=http://example.com/script1.py, script_extension=.py, id=UUID(...))\n        Script(script_name=example_script2, script_url=http://example.com/script2.py, script_extension=.py, id=UUID(...))\n\n    Returns:\n        Optional[List[Script]]: List of all scripts, or None if not found.\n    \"\"\"\n    try:\n        scripts = ScriptModel.all()\n        if not scripts or len(scripts) == 0:\n            print(\"No scripts found.\")\n            return None\n        scripts = [cls.model_validate(script) for script in scripts]\n        return scripts\n    except Exception as e:\n        print(f\"Error getting all scripts: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.get_associated_datasets","title":"<code>get_associated_datasets()</code>","text":"<p>Get all datasets associated with this script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; datasets = script.get_associated_datasets()\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\nDataset(id=UUID(...), dataset_name='another_dataset', dataset_type='Script', collection_date='2023-01-02')\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Dataset]]</code> <p>Optional[List[Dataset]]: A list of associated datasets, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n    \"\"\"\n    Get all datasets associated with this script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; datasets = script.get_associated_datasets()\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(id=UUID(...), dataset_name='example_dataset', dataset_type='Script', collection_date='2023-01-01')\n        Dataset(id=UUID(...), dataset_name='another_dataset', dataset_type='Script', collection_date='2023-01-02')\n\n    Returns:\n        Optional[List[Dataset]]: A list of associated datasets, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        current_id = self.id\n        script_datasets = ScriptDatasetsViewModel.search(script_id=current_id)\n        if not script_datasets or len(script_datasets) == 0:\n            print(\"No associated datasets found.\")\n            return None\n        datasets = [Dataset.model_validate(script_dataset) for script_dataset in script_datasets]\n        return datasets\n    except Exception as e:\n        print(f\"Error getting associated datasets: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with this script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; experiments = script.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[Experiment]]: A list of associated experiments, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with this script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; experiments = script.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n\n    Returns:\n        Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        current_id = self.id\n        experiment_scripts = ExperimentScriptsViewModel.search(script_id=current_id)\n        if not experiment_scripts or len(experiment_scripts) == 0:\n            print(\"No associated experiments found.\")\n            return None\n        experiments = [Experiment.model_validate(experiment) for experiment in experiment_scripts]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.get_associated_runs","title":"<code>get_associated_runs()</code>","text":"<p>Get all runs associated with this script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; runs = script.get_associated_runs()\n&gt;&gt;&gt; for run in runs:\n...     print(run)\nScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\nScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[ScriptRun]]</code> <p>Optional[List[ScriptRun]]: A list of associated runs, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def get_associated_runs(self) -&gt; Optional[List[\"ScriptRun\"]]:\n    \"\"\"\n    Get all runs associated with this script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; runs = script.get_associated_runs()\n        &gt;&gt;&gt; for run in runs:\n        ...     print(run)\n        ScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n        ScriptRun(id=UUID(...), script_id=UUID(...), script_run_info={'key': 'value'})\n\n    Returns:\n        Optional[List[ScriptRun]]: A list of associated runs, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.script_run import ScriptRun\n        current_id = self.id\n        script_runs = ScriptRunsViewModel.search(script_id=current_id)\n        if not script_runs or len(script_runs) == 0:\n            print(\"No associated runs found.\")\n            return None\n        runs = [ScriptRun.model_validate(script_run) for script_run in script_runs]\n        return runs\n    except Exception as e:\n        print(f\"Error getting associated runs: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a script by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(script)\nScript(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the script.</p> required <p>Returns:     Optional[Script]: The script, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Retrieve a script by its ID.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(script)\n        Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the script.\n    Returns:\n        Optional[Script]: The script, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ScriptModel.get(id)\n        if not db_instance:\n            print(f\"Script with ID {id} does not exist.\")\n            return None\n        script = cls.model_validate(db_instance)\n        return script\n    except Exception as e:\n        print(f\"Error getting script by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; script_info = script.get_info()\n&gt;&gt;&gt; print(script_info)\n{'key1': 'value1', 'key2': 'value2'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The script's info, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; script_info = script.get_info()\n        &gt;&gt;&gt; print(script_info)\n        {'key1': 'value1', 'key2': 'value2'}\n\n    Returns:\n        Optional[dict]: The script's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        script = ScriptModel.get(current_id)\n        if not script:\n            print(f\"Script with ID {current_id} does not exist.\")\n            return None\n        script_info = script.script_info\n        if not script_info:\n            print(\"Script info is empty.\")\n            return None\n        return script_info\n    except Exception as e:\n        print(f\"Error getting script info: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.insert_record","title":"<code>insert_record(timestamp=None, collection_date=None, script_data={}, dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_file=None, record_info={})</code>","text":"<p>Insert a single script record for this script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; success, record_ids = script.insert_record(\n...     timestamp=datetime.now(),\n...     collection_date=date(2023, 1, 1),\n...     script_data={\"key\": \"value\"},\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_file=\"/path/to/record/file.txt\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID(...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>script_data</code> <code>dict</code> <p>The script data. Defaults to {{}}.</p> <code>{}</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file path or URI. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def insert_record(\n    self,\n    timestamp: datetime = None,\n    collection_date: date = None,\n    script_data: dict = {},\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_file: str = None,\n    record_info: dict = {},\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a single script record for this script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; success, record_ids = script.insert_record(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date(2023, 1, 1),\n        ...     script_data={\"key\": \"value\"},\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_file=\"/path/to/record/file.txt\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID(...)]\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        script_data (dict, optional): The script data. Defaults to {{}}.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_file (str, optional): The file path or URI. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n        if not script_data and not record_file:\n            raise ValueError(\"Either script_data or record_file must be provided.\")\n\n        timestamp = timestamp if timestamp else datetime.now()\n        collection_date = collection_date if collection_date else timestamp.date()\n        if not dataset_name:\n            dataset_name = f\"{self.script_name} Dataset {collection_date}\"\n        script_name = self.script_name\n        script_record = ScriptRecord.create(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            script_name=script_name,\n            script_data=script_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_file=record_file,\n            record_info=record_info,\n            insert_on_create=False\n        )\n        success, inserted_record_ids = ScriptRecord.insert([script_record])\n        if not success:\n            raise Exception(\"Failed to insert script record.\")\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting script record: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.insert_records","title":"<code>insert_records(timestamps=None, collection_date=None, script_data=[], dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_files=[], record_info=[])</code>","text":"<p>Insert multiple script records for this script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; success, record_ids = script.insert_records(\n...     timestamps=[datetime.now(), datetime.now()],\n...     collection_date=date(2023, 1, 1),\n...     script_data=[{\"key\": \"value1\"}, {\"key\": \"value2\"}],\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_files=[\"/path/to/record1.txt\", \"/path/to/record2.txt\"],\n...     record_info=[{\"info_key\": \"info_value1\"}, {\"info_key\": \"info_value2\"}]\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID(...), UUID(...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamps</code> <code>List[datetime]</code> <p>List of timestamps. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>script_data</code> <code>List[dict]</code> <p>List of script data. Defaults to [].</p> <code>[]</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_files</code> <code>List[str]</code> <p>List of file paths or URIs. Defaults to [].</p> <code>[]</code> <code>record_info</code> <code>List[dict]</code> <p>List of additional info. Defaults to [].</p> <code>[]</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def insert_records(\n    self,\n    timestamps: List[datetime] = None,\n    collection_date: date = None,\n    script_data: List[dict] = [],\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_files: List[str] = [],\n    record_info: List[dict] = []\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert multiple script records for this script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; success, record_ids = script.insert_records(\n        ...     timestamps=[datetime.now(), datetime.now()],\n        ...     collection_date=date(2023, 1, 1),\n        ...     script_data=[{\"key\": \"value1\"}, {\"key\": \"value2\"}],\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_files=[\"/path/to/record1.txt\", \"/path/to/record2.txt\"],\n        ...     record_info=[{\"info_key\": \"info_value1\"}, {\"info_key\": \"info_value2\"}]\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID(...), UUID(...)]\n\n    Args:\n        timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        script_data (List[dict], optional): List of script data. Defaults to [].\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_files (List[str], optional): List of file paths or URIs. Defaults to [].\n        record_info (List[dict], optional): List of additional info. Defaults to [].\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name and not season_name and not site_name:\n            raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n\n        if len(timestamps) == 0:\n            raise ValueError(\"At least one timestamp must be provided.\")\n\n        if len(script_data) != len(timestamps):\n            raise ValueError(\"script_data must have the same length as timestamps.\")\n\n        if record_files and len(record_files) != len(timestamps):\n            raise ValueError(\"record_files must have the same length as timestamps.\")\n\n        collection_date = collection_date if collection_date else timestamps[0].date()\n\n        if not dataset_name:\n            dataset_name = f\"{self.script_name} Dataset {collection_date}\"\n\n        script_records = []\n        timestamps_length = len(timestamps)\n\n        for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Script \" + self.script_name):\n            script_record = ScriptRecord.create(\n                timestamp = timestamps[i],\n                collection_date = collection_date,\n                script_name= self.script_name,\n                script_data = script_data[i]  if script_data else {},\n                dataset_name = dataset_name,\n                experiment_name = experiment_name,\n                season_name = season_name,\n                site_name = site_name,\n                record_file= record_files[i] if record_files else None,\n                record_info = record_info[i] if record_info else {},\n                insert_on_create=False\n            )\n            script_records.append(script_record)\n\n        success, inserted_record_ids = ScriptRecord.insert(script_records)\n        if not success:\n            print(\"Failed to insert script records.\")\n            return False, []\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting script records: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the script's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; refreshed_script = script.refresh()\n&gt;&gt;&gt; print(refreshed_script)\nScript(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Script]</code> <p>Optional[Script]: The refreshed script, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Refresh the script's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; refreshed_script = script.refresh()\n        &gt;&gt;&gt; print(refreshed_script)\n        Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n    Returns:\n        Optional[Script]: The refreshed script, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = ScriptModel.get(self.id)\n        if not db_instance:\n            print(f\"Script with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing script: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.search","title":"<code>search(script_name=None, script_url=None, script_extension=None, script_info=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for scripts based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; scripts = Script.search(script_name=\"example_script\")\n&gt;&gt;&gt; for script in scripts:\n...     print(script)\nScript(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The name of the script. Defaults to None.</p> <code>None</code> <code>script_url</code> <code>str</code> <p>The URL of the script. Defaults to None.</p> <code>None</code> <code>script_extension</code> <code>str</code> <p>The file extension. Defaults to None.</p> <code>None</code> <code>script_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Script]]: List of matching scripts, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    script_name: str = None,\n    script_url: str = None,\n    script_extension: str = None,\n    script_info: dict = None,\n    experiment_name: str = None\n) -&gt; Optional[List[\"Script\"]]:\n    \"\"\"\n    Search for scripts based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; scripts = Script.search(script_name=\"example_script\")\n        &gt;&gt;&gt; for script in scripts:\n        ...     print(script)\n        Script(script_name=example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n\n    Args:\n        script_name (str, optional): The name of the script. Defaults to None.\n        script_url (str, optional): The URL of the script. Defaults to None.\n        script_extension (str, optional): The file extension. Defaults to None.\n        script_info (dict, optional): Additional information. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[List[Script]]: List of matching scripts, or None if not found.\n    \"\"\"\n    try:\n        if not any([script_name, script_info, script_url, script_extension, experiment_name]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n        scripts = ExperimentScriptsViewModel.search(\n            script_name=script_name,\n            script_info=script_info,\n            script_url=script_url,\n            script_extension=script_extension,\n            experiment_name=experiment_name\n        )\n        if not scripts or len(scripts) == 0:\n            print(\"No scripts found with the provided search parameters.\")\n            return None\n        scripts = [cls.model_validate(script) for script in scripts]\n        return scripts\n    except Exception as e:\n        print(f\"Error searching scripts: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.search_records","title":"<code>search_records(collection_date=None, dataset_name=None, experiment_name=None, season_name=None, site_name=None, record_info=None)</code>","text":"<p>Search for script records associated with this script based on search parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; records = script.search_records(\n...     collection_date=date(2023, 1, 1),\n...     dataset_name=\"example_dataset\",\n...     experiment_name=\"example_experiment\",\n...     season_name=\"example_season\",\n...     site_name=\"example_site\",\n...     record_info={\"info_key\": \"info_value\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-01T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\nScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-02T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[ScriptRecord]]: List of matching script records, or None if not found.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def search_records(\n    self,\n    collection_date: date = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    record_info: dict = None\n) -&gt; Optional[List[ScriptRecord]]:\n    \"\"\"\n    Search for script records associated with this script based on search parameters.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; records = script.search_records(\n        ...     collection_date=date(2023, 1, 1),\n        ...     dataset_name=\"example_dataset\",\n        ...     experiment_name=\"example_experiment\",\n        ...     season_name=\"example_season\",\n        ...     site_name=\"example_site\",\n        ...     record_info={\"info_key\": \"info_value\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-01T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n        ScriptRecord(id=UUID(...), script_name='example_script', timestamp='2023-01-02T00:00:00', dataset_name='example_dataset', experiment_name='example_experiment', season_name='example_season', site_name='example_site')\n\n    Args:\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Returns:\n        Optional[List[ScriptRecord]]: List of matching script records, or None if not found.\n    \"\"\"\n    try:\n        record_info = record_info if record_info else {}\n        record_info = {k: v for k, v in record_info.items() if v is not None}\n\n        records = ScriptRecord.search(\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            script_name=self.script_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            record_info=record_info\n        )\n        return records\n    except Exception as e:\n        print(f\"Error searching script records: {e}\")\n        return []\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.set_info","title":"<code>set_info(script_info)</code>","text":"<p>Set the additional information of the script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; updated_script = script.set_info(script_info={\"key1\": \"new_value1\", \"key2\": \"new_value2\"})\n&gt;&gt;&gt; print(updated_script.get_info())\n{'key1': 'new_value1', 'key2': 'new_value2'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Script]: The updated script, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def set_info(self, script_info: dict) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Set the additional information of the script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; updated_script = script.set_info(script_info={\"key1\": \"new_value1\", \"key2\": \"new_value2\"})\n        &gt;&gt;&gt; print(updated_script.get_info())\n        {'key1': 'new_value1', 'key2': 'new_value2'}\n\n    Args:\n        script_info (dict): The new information to set.\n    Returns:\n        Optional[Script]: The updated script, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        script = ScriptModel.get(current_id)\n        if not script:\n            print(f\"Script with ID {current_id} does not exist.\")\n            return None\n        script = ScriptModel.update(\n            script,\n            script_info=script_info\n        )\n        script = self.model_validate(script)\n        self.refresh()\n        return script\n    except Exception as e:\n        print(f\"Error setting script info: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate this script from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; experiment = script.unassociate_experiment(experiment_name=\"example_experiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this script from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; experiment = script.unassociate_experiment(experiment_name=\"example_experiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(id=UUID(...), experiment_name='example_experiment', experiment_start_date='2023-01-01', experiment_end_date='2023-12-31')\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentScriptModel.get_by_parameters(\n            experiment_id=experiment.id,\n            script_id=self.id\n        )\n        if not existing_association:\n            print(f\"Script {self.script_name} is not associated with experiment {experiment_name}.\")\n            return self\n        is_deleted = ExperimentScriptModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate script {self.script_name} from experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassociating script from experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/scripts/#gemini.api.script.Script.update","title":"<code>update(script_name=None, script_url=None, script_extension=None, script_info=None)</code>","text":"<p>Update the details of the script.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n&gt;&gt;&gt; updated_script = script.update(script_name=\"new_example_script\")\n&gt;&gt;&gt; print(updated_script)\nScript(script_name=new_example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>script_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>script_url</code> <code>str</code> <p>The new URL. Defaults to None.</p> <code>None</code> <code>script_extension</code> <code>str</code> <p>The new file extension. Defaults to None.</p> <code>None</code> <code>script_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Script]: The updated script, or None if an error occurred.</p> Source code in <code>gemini/api/script.py</code> <pre><code>def update(\n    self,\n    script_name: str = None,\n    script_url: str = None,\n    script_extension: str = None,\n    script_info: dict = None\n) -&gt; Optional[\"Script\"]:\n    \"\"\"\n    Update the details of the script.\n\n    Examples:\n        &gt;&gt;&gt; script = Script.get(script_name=\"example_script\")\n        &gt;&gt;&gt; updated_script = script.update(script_name=\"new_example_script\")\n        &gt;&gt;&gt; print(updated_script)\n        Script(script_name=new_example_script, script_url=http://example.com/script.py, script_extension=.py, id=UUID(...))\n\n    Args:\n        script_name (str, optional): The new name. Defaults to None.\n        script_url (str, optional): The new URL. Defaults to None.\n        script_extension (str, optional): The new file extension. Defaults to None.\n        script_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[Script]: The updated script, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([script_name, script_url, script_extension, script_info]):\n            print(\"At least one update parameter must be provided.\")\n            return None\n        current_id = self.id\n        script = ScriptModel.get(current_id)\n        if not script:\n            print(f\"Script with ID {current_id} does not exist.\")\n            return None\n        script = ScriptModel.update(\n            script,\n            script_name=script_name,\n            script_url=script_url,\n            script_extension=script_extension,\n            script_info=script_info\n        )\n        script = self.model_validate(script)\n        self.refresh()\n        return script\n    except Exception as e:\n        print(f\"Error updating script: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/","title":"Seasons API","text":""},{"location":"api/seasons/#description","title":"Description","text":"<p>A season is a time-based subset of an Experiment. </p>"},{"location":"api/seasons/#module","title":"Module","text":"<p>This module defines the Season class, which represents a season entity, including its metadata, associations to experiments, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting seasons, as well as methods for checking existence, searching, and managing associations with experiments.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a season with the given name and experiment exists.</li> <li><code>create</code>: Create a new season.</li> <li><code>get</code>: Retrieve a season by its name and experiment.</li> <li><code>get_by_id</code>: Retrieve a season by its ID.</li> <li><code>get_all</code>: Retrieve all seasons.</li> <li><code>search</code>: Search for seasons based on various criteria.</li> <li><code>update</code>: Update the details of a season.</li> <li><code>delete</code>: Delete a season.</li> <li><code>refresh</code>: Refresh the season's data from the database.</li> <li><code>get_info</code>: Get the additional information of the season.</li> <li><code>set_info</code>: Set the additional information of the season.</li> <li>Association methods for experiments.</li> </ul>"},{"location":"api/seasons/#gemini.api.season.Season","title":"<code>Season</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a season entity, including its metadata, associations to experiments, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the season.</p> <code>season_name</code> <code>str</code> <p>The name of the season.</p> <code>season_start_date</code> <code>date</code> <p>The start date of the season.</p> <code>season_end_date</code> <code>date</code> <p>The end date of the season.</p> <code>season_info</code> <code>Optional[dict]</code> <p>Additional information about the season.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> Source code in <code>gemini/api/season.py</code> <pre><code>class Season(APIBase):\n    \"\"\"\n    Represents a season entity, including its metadata, associations to experiments, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the season.\n        season_name (str): The name of the season.\n        season_start_date (date): The start date of the season.\n        season_end_date (date): The end date of the season.\n        season_info (Optional[dict]): Additional information about the season.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"season_id\"))\n\n    season_name: str\n    season_start_date: date\n    season_end_date: date\n    season_info: Optional[dict] = None\n    experiment_id: Optional[ID] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Season object.\"\"\"\n        return f\"Season(season_name={self.season_name}, season_start_date={self.season_start_date}, season_end_date={self.season_end_date}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Season object.\"\"\"\n        return f\"Season(id={self.id}, season_name={self.season_name}, season_start_date={self.season_start_date}, season_end_date={self.season_end_date})\"\n\n    @classmethod\n    def exists(\n        cls,\n        season_name: str,\n        experiment_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if a season with the given name and experiment exists.\n\n        Examples:\n            &gt;&gt;&gt; Season.exists(season_name=\"Summer 2023\", experiment_name=\"Experiment A\")\n            True\n            &gt;&gt;&gt; Season.exists(season_name=\"Winter 2023\", experiment_name=\"Experiment B\")\n            False\n\n        Args:\n            season_name (str): The name of the season.\n            experiment_name (str): The name of the experiment.\n        Returns:\n            bool: True if the season exists, False otherwise.\n        \"\"\"\n        try:\n            exists = ExperimentSeasonsViewModel.exists(\n                season_name=season_name,\n                experiment_name=experiment_name,\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of season: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        season_name: str,\n        season_start_date: date = date.today(),\n        season_end_date: date = date.today() + timedelta(days=30),\n        season_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Create a new season.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.create(season_name=\"Summer 2023\", season_start_date=date(2023, 6, 1), season_end_date=date(2023, 8, 31), season_info={\"description\": \"Summer season\"})\n            &gt;&gt;&gt; print(season)\n            Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n        Args:\n            season_name (str): The name of the season.\n            season_start_date (date, optional): The start date. Defaults to today.\n            season_end_date (date, optional): The end date. Defaults to today + 30 days.\n            season_info (dict, optional): Additional information. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[Season]: The created season, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SeasonModel.get_or_create(\n                season_name=season_name,\n                season_start_date=season_start_date,\n                season_end_date=season_end_date,\n                season_info=season_info,\n            )\n            season = cls.model_validate(db_instance)\n            if experiment_name:\n                season.associate_experiment(experiment_name=experiment_name)\n            return season\n        except Exception as e:\n            print(f\"Error creating season: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        season_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Retrieve a season by its name and experiment.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get(season_name=\"Summer 2023\", experiment_name=\"Experiment A\")\n            &gt;&gt;&gt; print(season)\n            Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n        Args:\n            season_name (str): The name of the season.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Season]: The season, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentSeasonsViewModel.get_by_parameters(\n                season_name=season_name,\n                experiment_name=experiment_name,\n            )\n            if not db_instance:\n                print(f\"Season with name {season_name} does not exist.\")\n                return None\n            season = cls.model_validate(db_instance)\n            return season\n        except Exception as e:\n            print(f\"Error retrieving season: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Retrieve a season by its ID.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(season)\n            Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the season.\n        Returns:\n            Optional[Season]: The season, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SeasonModel.get(id)\n            if not db_instance:\n                print(f\"Season with ID {id} does not exist.\")\n                return None\n            season = cls.model_validate(db_instance)\n            return season\n        except Exception as e:\n            print(f\"Error retrieving season by ID: {e}\")\n            return None\n\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Season\"]]:\n        \"\"\"\n        Retrieve all seasons.\n\n        Examples:\n            &gt;&gt;&gt; seasons = Season.get_all()\n            &gt;&gt;&gt; for season in seasons:\n            ...     print(season)\n            Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n        Returns:\n            Optional[List[Season]]: List of all seasons, or None if not found.\n        \"\"\"\n        try:\n            seasons = SeasonModel.all()\n            if not seasons or len(seasons) == 0:\n                print(\"No seasons found.\")\n                return None\n            seasons = [cls.model_validate(season) for season in seasons]\n            return seasons\n        except Exception as e:\n            print(f\"Error retrieving all seasons: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        season_name: str = None,\n        experiment_name: str = None,\n        season_start_date: date = None,\n        season_end_date: date = None,\n        season_info: dict = None\n    ) -&gt; Optional[List[\"Season\"]]:\n        \"\"\"\n        Search for seasons based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; seasons = Season.search(season_name=\"Summer 2023\")\n            &gt;&gt;&gt; for season in seasons:\n            ...     print(season)\n            Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n            Season(season_name=Summer 2023, season_start_date=2023-07-01, season_end_date=2023-09-30, id=UUID(...))\n\n        Args:\n            season_name (str, optional): The name of the season. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_start_date (date, optional): The start date. Defaults to None.\n            season_end_date (date, optional): The end date. Defaults to None.\n            season_info (dict, optional): Additional information. Defaults to None.\n        Returns:\n            Optional[List[Season]]: List of matching seasons, or None if not found.\n        \"\"\"\n        try:\n            if not any([season_name, experiment_name, season_start_date, season_end_date, season_info]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n            seasons = ExperimentSeasonsViewModel.search(\n                season_name=season_name,\n                experiment_name=experiment_name,\n                season_start_date=season_start_date,\n                season_end_date=season_end_date,\n                season_info=season_info\n            )\n            if not seasons or len(seasons) == 0:\n                print(\"No seasons found matching the search criteria.\")\n                return None\n            seasons = [cls.model_validate(season) for season in seasons]\n            return seasons\n        except Exception as e:\n            print(f\"Error searching for seasons: {e}\")\n            return None\n\n    def update(\n        self,\n        season_name: str = None,\n        season_start_date: date = None,\n        season_end_date: date = None,\n        season_info: dict = None\n    ) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Update the details of the season.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_season = season.update(season_name=\"Updated Summer 2023\", season_start_date=date(2023, 6, 15))\n            &gt;&gt;&gt; print(updated_season)\n            Season(season_name=Updated Summer 2023, season_start_date=2023-06-15, season_end_date=2023-08-31, id=UUID(...))\n\n        Args:\n            season_name (str, optional): The new name. Defaults to None.\n            season_start_date (date, optional): The new start date. Defaults to None.\n            season_end_date (date, optional): The new end date. Defaults to None.\n            season_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[Season]: The updated season, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([season_start_date, season_end_date, season_info, season_name]):\n                print(\"At least one update parameter must be provided.\")\n                return None\n            current_id = self.id\n            season = SeasonModel.get(current_id)\n            if not season:\n                print(f\"Season with ID {current_id} does not exist.\")\n                return None\n            season = SeasonModel.update(\n                season,\n                season_name=season_name,\n                season_start_date=season_start_date,\n                season_end_date=season_end_date,\n                season_info=season_info\n            )\n            updated_season = self.model_validate(season)\n            self.refresh()  # Update the current instance\n            return updated_season\n        except Exception as e:\n            print(f\"Error updating season: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the season.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; success = season.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the season was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            season = SeasonModel.get(current_id)\n            if not season:\n                print(f\"Season with ID {current_id} does not exist.\")\n                return False\n            SeasonModel.delete(season)\n            return True\n        except Exception as e:\n            print(f\"Error deleting season: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Refresh the season's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_season = season.refresh()\n            &gt;&gt;&gt; print(refreshed_season)\n            Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n        Returns:\n            Optional[Season]: The refreshed season, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SeasonModel.get(self.id)\n            if not db_instance:\n                print(f\"Season with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing season: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the season.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; season_info = season.get_info()\n            &gt;&gt;&gt; print(season_info)\n            {'description': 'Summer season', 'temperature': 'warm'}\n\n        Returns:\n            Optional[dict]: The season's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            season = SeasonModel.get(current_id)\n            if not season:\n                print(f\"Season with ID {current_id} does not exist.\")\n                return None\n            season_info = season.season_info\n            if not season_info:\n                print(\"Season info is empty.\")\n                return None\n            return season_info\n        except Exception as e:\n            print(f\"Error retrieving season info: {e}\")\n            return None\n\n    def set_info(self, season_info: dict) -&gt; Optional[\"Season\"]:\n        \"\"\"\n        Set the additional information of the season.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_season = season.set_info({\"description\": \"Updated summer season\", \"temperature\": \"hot\"})\n            &gt;&gt;&gt; print(updated_season.get_info())\n            {'description': 'Updated summer season', 'temperature': 'hot'}\n\n        Args:\n            season_info (dict): The new information to set.\n        Returns:\n            Optional[Season]: The updated season, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            season = SeasonModel.get(current_id)\n            if not season:\n                print(f\"Season with ID {current_id} does not exist.\")\n                return None\n            season = SeasonModel.update(\n                season,\n                season_info=season_info\n            )\n            updated_season = self.model_validate(season)\n            self.refresh()  # Update the current instance\n            return updated_season\n        except Exception as e:\n            print(f\"Error setting season info: {e}\")\n            return None\n\n    def get_associated_experiment(self) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Get the experiment associated with this season.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; experiment = season.get_associated_experiment()\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            if not self.experiment_id:\n                print(\"This season is not assigned to any experiment.\")\n                return None\n            experiment = Experiment.get_by_id(self.experiment_id)\n            if not experiment:\n                print(f\"Experiment with ID {self.experiment_id} does not exist.\")\n                return None\n            return experiment\n        except Exception as e:\n            print(f\"Error retrieving experiment for season: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this season with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; experiment = season.associate_experiment(experiment_name=\"Experiment A\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment with name {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentSeasonsViewModel.exists(\n                season_id=self.id,\n                experiment_id=experiment.id\n            )\n            if existing_association:\n                print(f\"Season {self.season_name} is already assigned to experiment {experiment_name}.\")\n                return self\n            db_season = SeasonModel.get(self.id)\n            db_season = SeasonModel.update(\n                db_season,\n                experiment_id=experiment.id\n            )\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error assigning experiment to season: {e}\")\n            return None\n\n    def unassociate_experiment(self) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this season from its experiment.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; experiment = season.unassociate_experiment()\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            if not self.experiment_id:\n                print(\"This season is not assigned to any experiment.\")\n                return None\n            db_season = SeasonModel.get(self.id)\n            if not db_season:\n                print(f\"Season with ID {self.id} does not exist.\")\n                return None\n            experiment = Experiment.get_by_id(self.experiment_id)\n            db_season = SeasonModel.update(\n                db_season,\n                experiment_id=None\n            )\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassigning experiment from season: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this season is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n            &gt;&gt;&gt; is_associated = season.belongs_to_experiment(experiment_name=\"Experiment A\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment with name {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentSeasonsViewModel.exists(\n                season_id=self.id,\n                experiment_id=experiment.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if season belongs to experiment: {e}\")\n            return False\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Season object.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Season object.\"\"\"\n    return f\"Season(id={self.id}, season_name={self.season_name}, season_start_date={self.season_start_date}, season_end_date={self.season_end_date})\"\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Season object.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Season object.\"\"\"\n    return f\"Season(season_name={self.season_name}, season_start_date={self.season_start_date}, season_end_date={self.season_end_date}, id={self.id})\"\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this season with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; experiment = season.associate_experiment(experiment_name=\"Experiment A\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this season with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; experiment = season.associate_experiment(experiment_name=\"Experiment A\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment with name {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentSeasonsViewModel.exists(\n            season_id=self.id,\n            experiment_id=experiment.id\n        )\n        if existing_association:\n            print(f\"Season {self.season_name} is already assigned to experiment {experiment_name}.\")\n            return self\n        db_season = SeasonModel.get(self.id)\n        db_season = SeasonModel.update(\n            db_season,\n            experiment_id=experiment.id\n        )\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error assigning experiment to season: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this season is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; is_associated = season.belongs_to_experiment(experiment_name=\"Experiment A\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this season is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; is_associated = season.belongs_to_experiment(experiment_name=\"Experiment A\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment with name {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentSeasonsViewModel.exists(\n            season_id=self.id,\n            experiment_id=experiment.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if season belongs to experiment: {e}\")\n        return False\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.create","title":"<code>create(season_name, season_start_date=date.today(), season_end_date=date.today() + timedelta(days=30), season_info={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.create(season_name=\"Summer 2023\", season_start_date=date(2023, 6, 1), season_end_date=date(2023, 8, 31), season_info={\"description\": \"Summer season\"})\n&gt;&gt;&gt; print(season)\nSeason(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>season_start_date</code> <code>date</code> <p>The start date. Defaults to today.</p> <code>today()</code> <code>season_end_date</code> <code>date</code> <p>The end date. Defaults to today + 30 days.</p> <code>today() + timedelta(days=30)</code> <code>season_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Season]: The created season, or None if an error occurred.</p> Source code in <code>gemini/api/season.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    season_name: str,\n    season_start_date: date = date.today(),\n    season_end_date: date = date.today() + timedelta(days=30),\n    season_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Create a new season.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.create(season_name=\"Summer 2023\", season_start_date=date(2023, 6, 1), season_end_date=date(2023, 8, 31), season_info={\"description\": \"Summer season\"})\n        &gt;&gt;&gt; print(season)\n        Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n    Args:\n        season_name (str): The name of the season.\n        season_start_date (date, optional): The start date. Defaults to today.\n        season_end_date (date, optional): The end date. Defaults to today + 30 days.\n        season_info (dict, optional): Additional information. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[Season]: The created season, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SeasonModel.get_or_create(\n            season_name=season_name,\n            season_start_date=season_start_date,\n            season_end_date=season_end_date,\n            season_info=season_info,\n        )\n        season = cls.model_validate(db_instance)\n        if experiment_name:\n            season.associate_experiment(experiment_name=experiment_name)\n        return season\n    except Exception as e:\n        print(f\"Error creating season: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.delete","title":"<code>delete()</code>","text":"<p>Delete the season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; success = season.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the season was deleted, False otherwise.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the season.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; success = season.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the season was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        season = SeasonModel.get(current_id)\n        if not season:\n            print(f\"Season with ID {current_id} does not exist.\")\n            return False\n        SeasonModel.delete(season)\n        return True\n    except Exception as e:\n        print(f\"Error deleting season: {e}\")\n        return False\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.exists","title":"<code>exists(season_name, experiment_name)</code>  <code>classmethod</code>","text":"<p>Check if a season with the given name and experiment exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Season.exists(season_name=\"Summer 2023\", experiment_name=\"Experiment A\")\nTrue\n&gt;&gt;&gt; Season.exists(season_name=\"Winter 2023\", experiment_name=\"Experiment B\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <p>Returns:     bool: True if the season exists, False otherwise.</p> Source code in <code>gemini/api/season.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    season_name: str,\n    experiment_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if a season with the given name and experiment exists.\n\n    Examples:\n        &gt;&gt;&gt; Season.exists(season_name=\"Summer 2023\", experiment_name=\"Experiment A\")\n        True\n        &gt;&gt;&gt; Season.exists(season_name=\"Winter 2023\", experiment_name=\"Experiment B\")\n        False\n\n    Args:\n        season_name (str): The name of the season.\n        experiment_name (str): The name of the experiment.\n    Returns:\n        bool: True if the season exists, False otherwise.\n    \"\"\"\n    try:\n        exists = ExperimentSeasonsViewModel.exists(\n            season_name=season_name,\n            experiment_name=experiment_name,\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of season: {e}\")\n        return False\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.get","title":"<code>get(season_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a season by its name and experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get(season_name=\"Summer 2023\", experiment_name=\"Experiment A\")\n&gt;&gt;&gt; print(season)\nSeason(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Season]: The season, or None if not found.</p> Source code in <code>gemini/api/season.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    season_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Retrieve a season by its name and experiment.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get(season_name=\"Summer 2023\", experiment_name=\"Experiment A\")\n        &gt;&gt;&gt; print(season)\n        Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n    Args:\n        season_name (str): The name of the season.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Season]: The season, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentSeasonsViewModel.get_by_parameters(\n            season_name=season_name,\n            experiment_name=experiment_name,\n        )\n        if not db_instance:\n            print(f\"Season with name {season_name} does not exist.\")\n            return None\n        season = cls.model_validate(db_instance)\n        return season\n    except Exception as e:\n        print(f\"Error retrieving season: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all seasons.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; seasons = Season.get_all()\n&gt;&gt;&gt; for season in seasons:\n...     print(season)\nSeason(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Season]]</code> <p>Optional[List[Season]]: List of all seasons, or None if not found.</p> Source code in <code>gemini/api/season.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Season\"]]:\n    \"\"\"\n    Retrieve all seasons.\n\n    Examples:\n        &gt;&gt;&gt; seasons = Season.get_all()\n        &gt;&gt;&gt; for season in seasons:\n        ...     print(season)\n        Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n    Returns:\n        Optional[List[Season]]: List of all seasons, or None if not found.\n    \"\"\"\n    try:\n        seasons = SeasonModel.all()\n        if not seasons or len(seasons) == 0:\n            print(\"No seasons found.\")\n            return None\n        seasons = [cls.model_validate(season) for season in seasons]\n        return seasons\n    except Exception as e:\n        print(f\"Error retrieving all seasons: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.get_associated_experiment","title":"<code>get_associated_experiment()</code>","text":"<p>Get the experiment associated with this season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; experiment = season.get_associated_experiment()\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Experiment]</code> <p>Optional[Experiment]: The associated experiment, or None if not found.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def get_associated_experiment(self) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Get the experiment associated with this season.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; experiment = season.get_associated_experiment()\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        if not self.experiment_id:\n            print(\"This season is not assigned to any experiment.\")\n            return None\n        experiment = Experiment.get_by_id(self.experiment_id)\n        if not experiment:\n            print(f\"Experiment with ID {self.experiment_id} does not exist.\")\n            return None\n        return experiment\n    except Exception as e:\n        print(f\"Error retrieving experiment for season: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a season by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(season)\nSeason(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the season.</p> required <p>Returns:     Optional[Season]: The season, or None if not found.</p> Source code in <code>gemini/api/season.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Retrieve a season by its ID.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(season)\n        Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the season.\n    Returns:\n        Optional[Season]: The season, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SeasonModel.get(id)\n        if not db_instance:\n            print(f\"Season with ID {id} does not exist.\")\n            return None\n        season = cls.model_validate(db_instance)\n        return season\n    except Exception as e:\n        print(f\"Error retrieving season by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; season_info = season.get_info()\n&gt;&gt;&gt; print(season_info)\n{'description': 'Summer season', 'temperature': 'warm'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The season's info, or None if not found.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the season.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; season_info = season.get_info()\n        &gt;&gt;&gt; print(season_info)\n        {'description': 'Summer season', 'temperature': 'warm'}\n\n    Returns:\n        Optional[dict]: The season's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        season = SeasonModel.get(current_id)\n        if not season:\n            print(f\"Season with ID {current_id} does not exist.\")\n            return None\n        season_info = season.season_info\n        if not season_info:\n            print(\"Season info is empty.\")\n            return None\n        return season_info\n    except Exception as e:\n        print(f\"Error retrieving season info: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the season's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_season = season.refresh()\n&gt;&gt;&gt; print(refreshed_season)\nSeason(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Season]</code> <p>Optional[Season]: The refreshed season, or None if an error occurred.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Refresh the season's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_season = season.refresh()\n        &gt;&gt;&gt; print(refreshed_season)\n        Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n\n    Returns:\n        Optional[Season]: The refreshed season, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SeasonModel.get(self.id)\n        if not db_instance:\n            print(f\"Season with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing season: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.search","title":"<code>search(season_name=None, experiment_name=None, season_start_date=None, season_end_date=None, season_info=None)</code>  <code>classmethod</code>","text":"<p>Search for seasons based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; seasons = Season.search(season_name=\"Summer 2023\")\n&gt;&gt;&gt; for season in seasons:\n...     print(season)\nSeason(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\nSeason(season_name=Summer 2023, season_start_date=2023-07-01, season_end_date=2023-09-30, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_start_date</code> <code>date</code> <p>The start date. Defaults to None.</p> <code>None</code> <code>season_end_date</code> <code>date</code> <p>The end date. Defaults to None.</p> <code>None</code> <code>season_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Season]]: List of matching seasons, or None if not found.</p> Source code in <code>gemini/api/season.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    season_name: str = None,\n    experiment_name: str = None,\n    season_start_date: date = None,\n    season_end_date: date = None,\n    season_info: dict = None\n) -&gt; Optional[List[\"Season\"]]:\n    \"\"\"\n    Search for seasons based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; seasons = Season.search(season_name=\"Summer 2023\")\n        &gt;&gt;&gt; for season in seasons:\n        ...     print(season)\n        Season(season_name=Summer 2023, season_start_date=2023-06-01, season_end_date=2023-08-31, id=UUID(...))\n        Season(season_name=Summer 2023, season_start_date=2023-07-01, season_end_date=2023-09-30, id=UUID(...))\n\n    Args:\n        season_name (str, optional): The name of the season. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_start_date (date, optional): The start date. Defaults to None.\n        season_end_date (date, optional): The end date. Defaults to None.\n        season_info (dict, optional): Additional information. Defaults to None.\n    Returns:\n        Optional[List[Season]]: List of matching seasons, or None if not found.\n    \"\"\"\n    try:\n        if not any([season_name, experiment_name, season_start_date, season_end_date, season_info]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n        seasons = ExperimentSeasonsViewModel.search(\n            season_name=season_name,\n            experiment_name=experiment_name,\n            season_start_date=season_start_date,\n            season_end_date=season_end_date,\n            season_info=season_info\n        )\n        if not seasons or len(seasons) == 0:\n            print(\"No seasons found matching the search criteria.\")\n            return None\n        seasons = [cls.model_validate(season) for season in seasons]\n        return seasons\n    except Exception as e:\n        print(f\"Error searching for seasons: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.set_info","title":"<code>set_info(season_info)</code>","text":"<p>Set the additional information of the season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_season = season.set_info({\"description\": \"Updated summer season\", \"temperature\": \"hot\"})\n&gt;&gt;&gt; print(updated_season.get_info())\n{'description': 'Updated summer season', 'temperature': 'hot'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Season]: The updated season, or None if an error occurred.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def set_info(self, season_info: dict) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Set the additional information of the season.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_season = season.set_info({\"description\": \"Updated summer season\", \"temperature\": \"hot\"})\n        &gt;&gt;&gt; print(updated_season.get_info())\n        {'description': 'Updated summer season', 'temperature': 'hot'}\n\n    Args:\n        season_info (dict): The new information to set.\n    Returns:\n        Optional[Season]: The updated season, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        season = SeasonModel.get(current_id)\n        if not season:\n            print(f\"Season with ID {current_id} does not exist.\")\n            return None\n        season = SeasonModel.update(\n            season,\n            season_info=season_info\n        )\n        updated_season = self.model_validate(season)\n        self.refresh()  # Update the current instance\n        return updated_season\n    except Exception as e:\n        print(f\"Error setting season info: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.unassociate_experiment","title":"<code>unassociate_experiment()</code>","text":"<p>Unassociate this season from its experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; experiment = season.unassociate_experiment()\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Experiment]</code> <p>Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def unassociate_experiment(self) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this season from its experiment.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; experiment = season.unassociate_experiment()\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment A, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        if not self.experiment_id:\n            print(\"This season is not assigned to any experiment.\")\n            return None\n        db_season = SeasonModel.get(self.id)\n        if not db_season:\n            print(f\"Season with ID {self.id} does not exist.\")\n            return None\n        experiment = Experiment.get_by_id(self.experiment_id)\n        db_season = SeasonModel.update(\n            db_season,\n            experiment_id=None\n        )\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassigning experiment from season: {e}\")\n        return None\n</code></pre>"},{"location":"api/seasons/#gemini.api.season.Season.update","title":"<code>update(season_name=None, season_start_date=None, season_end_date=None, season_info=None)</code>","text":"<p>Update the details of the season.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_season = season.update(season_name=\"Updated Summer 2023\", season_start_date=date(2023, 6, 15))\n&gt;&gt;&gt; print(updated_season)\nSeason(season_name=Updated Summer 2023, season_start_date=2023-06-15, season_end_date=2023-08-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>season_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>season_start_date</code> <code>date</code> <p>The new start date. Defaults to None.</p> <code>None</code> <code>season_end_date</code> <code>date</code> <p>The new end date. Defaults to None.</p> <code>None</code> <code>season_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Season]: The updated season, or None if an error occurred.</p> Source code in <code>gemini/api/season.py</code> <pre><code>def update(\n    self,\n    season_name: str = None,\n    season_start_date: date = None,\n    season_end_date: date = None,\n    season_info: dict = None\n) -&gt; Optional[\"Season\"]:\n    \"\"\"\n    Update the details of the season.\n\n    Examples:\n        &gt;&gt;&gt; season = Season.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_season = season.update(season_name=\"Updated Summer 2023\", season_start_date=date(2023, 6, 15))\n        &gt;&gt;&gt; print(updated_season)\n        Season(season_name=Updated Summer 2023, season_start_date=2023-06-15, season_end_date=2023-08-31, id=UUID(...))\n\n    Args:\n        season_name (str, optional): The new name. Defaults to None.\n        season_start_date (date, optional): The new start date. Defaults to None.\n        season_end_date (date, optional): The new end date. Defaults to None.\n        season_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[Season]: The updated season, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([season_start_date, season_end_date, season_info, season_name]):\n            print(\"At least one update parameter must be provided.\")\n            return None\n        current_id = self.id\n        season = SeasonModel.get(current_id)\n        if not season:\n            print(f\"Season with ID {current_id} does not exist.\")\n            return None\n        season = SeasonModel.update(\n            season,\n            season_name=season_name,\n            season_start_date=season_start_date,\n            season_end_date=season_end_date,\n            season_info=season_info\n        )\n        updated_season = self.model_validate(season)\n        self.refresh()  # Update the current instance\n        return updated_season\n    except Exception as e:\n        print(f\"Error updating season: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/","title":"Sensor Platforms API","text":""},{"location":"api/sensor_platforms/#description","title":"Description","text":"<p>A sensor platform is defined as a collection of related Sensors. It can be associated with multiple Experiments.</p>"},{"location":"api/sensor_platforms/#module","title":"Module","text":"<p>This module defines the SensorPlatform class, which represents a sensor platform entity, including its metadata, associations to sensors and experiments, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting sensor platforms, as well as methods for checking existence, searching, and managing associations with sensors and experiments.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a sensor platform with the given name exists.</li> <li><code>create</code>: Create a new sensor platform.</li> <li><code>get</code>: Retrieve a sensor platform by its name and experiment.</li> <li><code>get_by_id</code>: Retrieve a sensor platform by its ID.</li> <li><code>get_all</code>: Retrieve all sensor platforms.</li> <li><code>search</code>: Search for sensor platforms based on various criteria.</li> <li><code>update</code>: Update the details of a sensor platform.</li> <li><code>delete</code>: Delete a sensor platform.</li> <li><code>refresh</code>: Refresh the sensor platform's data from the database.</li> <li><code>get_info</code>: Get the additional information of the sensor platform.</li> <li><code>set_info</code>: Set the additional information of the sensor platform.</li> <li>Association methods for sensors and experiments.</li> </ul>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform","title":"<code>SensorPlatform</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a sensor platform entity, including its metadata, associations to sensors and experiments, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the sensor platform.</p> <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform.</p> <code>sensor_platform_info</code> <code>Optional[dict]</code> <p>Additional information about the sensor platform.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>class SensorPlatform(APIBase):\n    \"\"\"\n    Represents a sensor platform entity, including its metadata, associations to sensors and experiments, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the sensor platform.\n        sensor_platform_name (str): The name of the sensor platform.\n        sensor_platform_info (Optional[dict]): Additional information about the sensor platform.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"sensor_platform_id\"))\n\n    sensor_platform_name: str\n    sensor_platform_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the SensorPlatform object.\"\"\"\n        return f\"SensorPlatform(id={self.id}, sensor_platform_name={self.sensor_platform_name})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the SensorPlatform object.\"\"\"\n        return f\"SensorPlatform(id={self.id}, sensor_platform_name={self.sensor_platform_name})\"\n\n    @classmethod\n    def exists(\n        cls,\n        sensor_platform_name: str,\n    ) -&gt; bool:\n        \"\"\"\n        Check if a sensor platform with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; SensorPlatform.exists(sensor_platform_name=\"MySensorPlatform\")\n            True\n            &gt;&gt;&gt; SensorPlatform.exists(sensor_platform_name=\"NonExistentPlatform\")\n            False\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform.\n        Returns:\n            bool: True if the sensor platform exists, False otherwise.\n        \"\"\"\n        try:\n            exists = SensorPlatformModel.exists(sensor_platform_name=sensor_platform_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of SensorPlatform: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        sensor_platform_name: str,\n        sensor_platform_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Create a new sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; SensorPlatform.create(sensor_platform_name=\"MySensorPlatform\")\n            SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform.\n            sensor_platform_info (dict, optional): Additional information. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[SensorPlatform]: The created sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SensorPlatformModel.get_or_create(\n                sensor_platform_name=sensor_platform_name,\n                sensor_platform_info=sensor_platform_info,\n            )\n            sensor_platform = cls.model_validate(db_instance)\n            if experiment_name:\n                sensor_platform.associate_experiment(experiment_name=experiment_name)\n            return sensor_platform\n        except Exception as e:\n            print(f\"Error creating SensorPlatform: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        sensor_platform_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Retrieve a sensor platform by its name and experiment.\n\n        Examples:\n            &gt;&gt;&gt; SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[SensorPlatform]: The sensor platform, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentSensorPlatformsViewModel.get_by_parameters(\n                sensor_platform_name=sensor_platform_name,\n                experiment_name=experiment_name\n            )\n            if not db_instance:\n                print(f\"SensorPlatform with name {sensor_platform_name} not found.\")\n                return None\n            sensor_platform = cls.model_validate(db_instance)\n            return sensor_platform\n        except Exception as e:\n            print(f\"Error retrieving SensorPlatform: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Retrieve a sensor platform by its ID.\n\n        Examples:\n            &gt;&gt;&gt; SensorPlatform.get_by_id(UUID('...'))\n            SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n        Args:\n            id (UUID | int | str): The ID of the sensor platform.\n        Returns:\n            Optional[SensorPlatform]: The sensor platform, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SensorPlatformModel.get(id)\n            if not db_instance:\n                print(f\"SensorPlatform with ID {id} not found.\")\n                return None\n            sensor_platform = cls.model_validate(db_instance)\n            return sensor_platform\n        except Exception as e:\n            print(f\"Error retrieving SensorPlatform by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"SensorPlatform\"]]:\n        \"\"\"\n        Retrieve all sensor platforms.\n\n        Examples:\n            &gt;&gt;&gt; SensorPlatform.get_all()\n            [SensorPlatform(id=UUID(...), sensor_platform_name=\"Platform1\"), SensorPlatform(id=UUID(...), sensor_platform_name=\"Platform2\")]\n\n        Returns:\n            Optional[List[SensorPlatform]]: List of all sensor platforms, or None if not found.\n        \"\"\"\n        try:\n            sensor_platforms = SensorPlatformModel.all()\n            if not sensor_platforms or len(sensor_platforms) == 0:\n                print(\"No SensorPlatforms found.\")\n                return None\n            sensor_platforms = [cls.model_validate(sp) for sp in sensor_platforms]\n            return sensor_platforms\n        except Exception as e:\n            print(f\"Error retrieving all SensorPlatforms: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        sensor_platform_name: str = None,\n        sensor_platform_info: dict = None,\n        experiment_name: str = None\n    ) -&gt; Optional[List[\"SensorPlatform\"]]:\n        \"\"\"\n        Search for sensor platforms based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; SensorPlatform.search(sensor_platform_name=\"MySensorPlatform\")\n            [SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")]\n\n\n        Args:\n            sensor_platform_name (str, optional): The name of the sensor platform. Defaults to None.\n            sensor_platform_info (dict, optional): Additional information. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[List[SensorPlatform]]: List of matching sensor platforms, or None if not found.\n        \"\"\"\n        try:\n            if not any([sensor_platform_name, sensor_platform_info, experiment_name]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n            instances = ExperimentSensorPlatformsViewModel.search(\n                sensor_platform_name=sensor_platform_name,\n                sensor_platform_info=sensor_platform_info,\n                experiment_name=experiment_name\n            )\n            if not instances or len(instances) == 0:\n                print(\"No SensorPlatforms found matching the search criteria.\")\n                return None\n            sensor_platforms = [cls.model_validate(instance) for instance in instances]\n            return sensor_platforms\n        except Exception as e:\n            print(f\"Error searching SensorPlatforms: {e}\")\n            return None\n\n    def update(\n        self,\n        sensor_platform_name: str = None,\n        sensor_platform_info: dict = None\n    ) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Update the details of the sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; updated_platform = sensor_platform.update(sensor_platform_name=\"UpdatedPlatformName\")\n            SensorPlatform(id=UUID(...), sensor_platform_name=\"UpdatedPlatformName\")\n\n        Args:\n            sensor_platform_name (str, optional): The new name. Defaults to None.\n            sensor_platform_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[SensorPlatform]: The updated sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([sensor_platform_name, sensor_platform_info]):\n                print(\"At least one update parameter must be provided.\")\n                return None\n            current_id = self.id\n            platform = SensorPlatformModel.get(current_id)\n            if not platform:\n                print(f\"SensorPlatform with ID {current_id} not found.\")\n                return None\n            platform = SensorPlatformModel.update(\n                platform, \n                sensor_platform_info=sensor_platform_info,\n                sensor_platform_name=sensor_platform_name\n            )\n            platform = self.model_validate(platform)\n            self.refresh()\n            return platform\n        except Exception as e:\n            print(f\"Error updating SensorPlatform: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; sensor_platform.delete()\n            True\n\n        Returns:\n            bool: True if the sensor platform was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            platform = SensorPlatformModel.get(current_id)\n            if not platform:\n                print(f\"SensorPlatform with ID {current_id} not found.\")\n                return False\n            SensorPlatformModel.delete(platform)\n            return True\n        except Exception as e:\n            print(f\"Error deleting SensorPlatform: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Refresh the sensor platform's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; sensor_platform.refresh()\n            SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n        Returns:\n            Optional[SensorPlatform]: The refreshed sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SensorPlatformModel.get(self.id)\n            if not db_instance:\n                print(f\"SensorPlatform with ID {self.id} not found.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing SensorPlatform: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; info = sensor_platform.get_info()\n            {'key1': 'value1', 'key2': 'value2'}\n\n        Returns:\n            Optional[dict]: The sensor platform's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_platform = SensorPlatformModel.get(current_id)\n            if not sensor_platform:\n                print(f\"SensorPlatform with ID {current_id} not found.\")\n                return None\n            sensor_platform_info = sensor_platform.sensor_platform_info\n            if not sensor_platform_info:\n                print(\"SensorPlatform info is empty.\")\n                return None\n            return sensor_platform_info\n        except Exception as e:\n            print(f\"Error retrieving SensorPlatform info: {e}\")\n            return None\n\n    def set_info(self, sensor_platform_info: dict) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Set the additional information of the sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; updated_platform = sensor_platform.set_info({'key1': 'value1', 'key2': 'value2'})\n            &gt;&gt;&gt; updated_platform.get_info()\n            {'key1': 'value1', 'key2': 'value2'}\n\n        Args:\n            sensor_platform_info (dict): The new information to set.\n        Returns:\n            Optional[SensorPlatform]: The updated sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_platform = SensorPlatformModel.get(current_id)\n            if not sensor_platform:\n                print(f\"SensorPlatform with ID {current_id} not found.\")\n                return None\n            sensor_platform = SensorPlatformModel.update(\n                sensor_platform,\n                sensor_platform_info=sensor_platform_info\n            )\n            sensor_platform = self.model_validate(sensor_platform)\n            self.refresh()\n            return self\n        except Exception as e:\n            print(f\"Error setting SensorPlatform info: {e}\")\n            return None\n\n    def get_associated_sensors(self) -&gt; Optional[List[\"Sensor\"]]:\n        \"\"\"\n        Get all sensors associated with this sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; sensors = sensor_platform.get_associated_sensors()\n            &gt;&gt;&gt; for sensor in sensors:\n            ...     print(sensor)\n            Sensor(id=UUID(...), sensor_name=\"Sensor1\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n            Sensor(id=UUID(...), sensor_name=\"Sensor2\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n        Returns:\n            Optional[List[Sensor]]: A list of associated sensors, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            sensor_platform_sensors = SensorPlatformSensorsViewModel.search(\n                sensor_platform_id=self.id\n            )\n            if not sensor_platform_sensors or len(sensor_platform_sensors) == 0:\n                print(f\"No sensors found for SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            sensors = [Sensor.model_validate(sensor) for sensor in sensor_platform_sensors]\n            return sensors\n        except Exception as e:\n            print(f\"Error retrieving sensors for SensorPlatform: {e}\")\n            return None\n\n    def create_new_sensor(\n        self,\n        sensor_name: str,\n        sensor_type: GEMINISensorType = GEMINISensorType.Default,\n        sensor_data_type: GEMINIDataType = GEMINIDataType.Default,\n        sensor_data_format: GEMINIDataFormat = GEMINIDataFormat.Default,\n        sensor_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Create and associate a new sensor with this sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; new_sensor = sensor_platform.create_new_sensor(sensor_name=\"NewSensor\", sensor_type=GEMINISensorType.Default)\n            &gt;&gt;&gt; print(new_sensor)\n            Sensor(id=UUID(...), sensor_name=\"NewSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n        Args:\n            sensor_name (str): The name of the new sensor.\n            sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to Default.\n            sensor_data_type (GEMINIDataType, optional): The data type. Defaults to Default.\n            sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to Default.\n            sensor_info (dict, optional): Additional information. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Sensor]: The created and associated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            new_sensor = Sensor.create(\n                sensor_name=sensor_name,\n                sensor_type=sensor_type,\n                sensor_data_type=sensor_data_type,\n                sensor_data_format=sensor_data_format,\n                sensor_info=sensor_info,\n                experiment_name=experiment_name,\n                sensor_platform_name=self.sensor_platform_name\n            )\n            if not new_sensor:\n                print(f\"Failed to create sensor {sensor_name}.\")\n                return None\n            return new_sensor\n        except Exception as e:\n            print(f\"Error creating new sensor for SensorPlatform: {e}\")\n            return None\n\n    def associate_sensor(self, sensor_name: str) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Associate an existing sensor with this sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; sensor = sensor_platform.associate_sensor(sensor_name=\"ExistingSensor\")\n            &gt;&gt;&gt; print(sensor)\n            Sensor(id=UUID(...), sensor_name=\"ExistingSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n        Args:\n            sensor_name (str): The name of the sensor.\n        Returns:\n            Optional[Sensor]: The associated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            sensor = Sensor.get(sensor_name=sensor_name)\n            if not sensor:\n                print(f\"Sensor {sensor_name} not found.\")\n                return None\n            existing_association = SensorPlatformSensorModel.exists(\n                sensor_platform_id=self.id,\n                sensor_id=sensor.id\n            )\n            if existing_association:\n                print(f\"Sensor {sensor_name} is already associated with SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            new_association = SensorPlatformSensorModel.create(\n                sensor_platform_id=self.id,\n                sensor_id=sensor.id\n            )\n            self.refresh()\n            return sensor\n        except Exception as e:\n            print(f\"Error associating sensor {sensor_name} with SensorPlatform: {e}\")\n            return None\n\n    def unassociate_sensor(self, sensor_name: str) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Unassociate a sensor from this sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; sensor = sensor_platform.unassociate_sensor(sensor_name=\"ExistingSensor\")\n            &gt;&gt;&gt; print(sensor)\n            Sensor(id=UUID(...), sensor_name=\"ExistingSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n        Args:\n            sensor_name (str): The name of the sensor.\n        Returns:\n            Optional[Sensor]: The unassociated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            sensor = Sensor.get(sensor_name=sensor_name)\n            if not sensor:\n                print(f\"Sensor {self.sensor_platform_name} not found.\")\n                return None\n            existing_association = SensorPlatformSensorModel.get_by_parameters(\n                sensor_platform_id=self.id,\n                sensor_id=sensor.id\n            )\n            if not existing_association:\n                print(f\"Sensor {self.sensor_platform_name} is not associated with SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            is_deleted = SensorPlatformSensorModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate sensor {self.sensor_platform_name} from SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            self.refresh()\n            return sensor\n        except Exception as e:\n            print(f\"Error unassociating sensor {self.sensor_platform_name} from SensorPlatform: {e}\")\n            return None\n\n    def belongs_to_sensor(self, sensor_name: str) -&gt; bool:\n        \"\"\"\n        Check if this sensor platform is associated with a specific sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; is_associated = sensor_platform.belongs_to_sensor(sensor_name=\"ExistingSensor\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            sensor_name (str): The name of the sensor.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.sensor import Sensor\n            sensor = Sensor.get(sensor_name=sensor_name)\n            if not sensor:\n                print(f\"Sensor {sensor_name} not found.\")\n                return False\n            association_exists = SensorPlatformSensorModel.exists(\n                sensor_platform_id=self.id,\n                sensor_id=sensor.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if SensorPlatform belongs to sensor {sensor_name}: {e}\")\n            return False\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with this sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; experiments = sensor_platform.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(id=UUID(...), experiment_name=\"Experiment1\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n            Experiment(id=UUID(...), experiment_name=\"Experiment2\", experiment_start_date=\"2023-02-01\", experiment_end_date=\"2023-11-30\")\n\n        Returns:\n            Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment_sensor_platforms = ExperimentSensorPlatformsViewModel.search(\n                sensor_platform_id=self.id\n            )\n            if not experiment_sensor_platforms or len(experiment_sensor_platforms) == 0:\n                print(f\"No experiments found for SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            experiments = [Experiment.model_validate(exp) for exp in experiment_sensor_platforms]\n            return experiments\n        except Exception as e:\n            print(f\"Error retrieving associated experiments for SensorPlatform: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this sensor platform with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; experiment = sensor_platform.associate_experiment(experiment_name=\"MyExperiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(id=UUID(...), experiment_name=\"MyExperiment\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} not found.\")\n                return None\n            existing_association = ExperimentSensorPlatformModel.exists(\n                sensor_platform_id=self.id,\n                experiment_id=experiment.id\n            )\n            if existing_association:\n                print(f\"Experiment {experiment_name} is already associated with SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            new_association = ExperimentSensorPlatformModel.create(\n                sensor_platform_id=self.id,\n                experiment_id=experiment.id\n            )\n            if not new_association:\n                print(f\"Failed to associate Experiment {experiment_name} with SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating Experiment {experiment_name} with SensorPlatform: {e}\")\n            return None\n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this sensor platform from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; experiment = sensor_platform.unassociate_experiment(experiment_name=\"MyExperiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(id=UUID(...), experiment_name=\"MyExperiment\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} not found.\")\n                return None\n            existing_association = ExperimentSensorPlatformModel.get_by_parameters(\n                sensor_platform_id=self.id,\n                experiment_id=experiment.id\n            )\n            if not existing_association:\n                print(f\"Experiment {experiment_name} is not associated with SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            is_deleted = ExperimentSensorPlatformModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate Experiment {experiment_name} from SensorPlatform {self.sensor_platform_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassociating Experiment {experiment_name} from SensorPlatform: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this sensor platform is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n            &gt;&gt;&gt; is_associated = sensor_platform.belongs_to_experiment(experiment_name=\"MyExperiment\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {self.sensor_platform_name} not found.\")\n                return False\n            association_exists = ExperimentSensorPlatformModel.exists(\n                sensor_platform_id=self.id,\n                experiment_id=experiment.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if SensorPlatform belongs to experiment {self.sensor_platform_name}: {e}\")\n            return False\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the SensorPlatform object.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the SensorPlatform object.\"\"\"\n    return f\"SensorPlatform(id={self.id}, sensor_platform_name={self.sensor_platform_name})\"\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the SensorPlatform object.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the SensorPlatform object.\"\"\"\n    return f\"SensorPlatform(id={self.id}, sensor_platform_name={self.sensor_platform_name})\"\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this sensor platform with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; experiment = sensor_platform.associate_experiment(experiment_name=\"MyExperiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(id=UUID(...), experiment_name=\"MyExperiment\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this sensor platform with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; experiment = sensor_platform.associate_experiment(experiment_name=\"MyExperiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(id=UUID(...), experiment_name=\"MyExperiment\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} not found.\")\n            return None\n        existing_association = ExperimentSensorPlatformModel.exists(\n            sensor_platform_id=self.id,\n            experiment_id=experiment.id\n        )\n        if existing_association:\n            print(f\"Experiment {experiment_name} is already associated with SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        new_association = ExperimentSensorPlatformModel.create(\n            sensor_platform_id=self.id,\n            experiment_id=experiment.id\n        )\n        if not new_association:\n            print(f\"Failed to associate Experiment {experiment_name} with SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating Experiment {experiment_name} with SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.associate_sensor","title":"<code>associate_sensor(sensor_name)</code>","text":"<p>Associate an existing sensor with this sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; sensor = sensor_platform.associate_sensor(sensor_name=\"ExistingSensor\")\n&gt;&gt;&gt; print(sensor)\nSensor(id=UUID(...), sensor_name=\"ExistingSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <p>Returns:     Optional[Sensor]: The associated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def associate_sensor(self, sensor_name: str) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Associate an existing sensor with this sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; sensor = sensor_platform.associate_sensor(sensor_name=\"ExistingSensor\")\n        &gt;&gt;&gt; print(sensor)\n        Sensor(id=UUID(...), sensor_name=\"ExistingSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n    Args:\n        sensor_name (str): The name of the sensor.\n    Returns:\n        Optional[Sensor]: The associated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        sensor = Sensor.get(sensor_name=sensor_name)\n        if not sensor:\n            print(f\"Sensor {sensor_name} not found.\")\n            return None\n        existing_association = SensorPlatformSensorModel.exists(\n            sensor_platform_id=self.id,\n            sensor_id=sensor.id\n        )\n        if existing_association:\n            print(f\"Sensor {sensor_name} is already associated with SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        new_association = SensorPlatformSensorModel.create(\n            sensor_platform_id=self.id,\n            sensor_id=sensor.id\n        )\n        self.refresh()\n        return sensor\n    except Exception as e:\n        print(f\"Error associating sensor {sensor_name} with SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this sensor platform is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; is_associated = sensor_platform.belongs_to_experiment(experiment_name=\"MyExperiment\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this sensor platform is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; is_associated = sensor_platform.belongs_to_experiment(experiment_name=\"MyExperiment\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {self.sensor_platform_name} not found.\")\n            return False\n        association_exists = ExperimentSensorPlatformModel.exists(\n            sensor_platform_id=self.id,\n            experiment_id=experiment.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if SensorPlatform belongs to experiment {self.sensor_platform_name}: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.belongs_to_sensor","title":"<code>belongs_to_sensor(sensor_name)</code>","text":"<p>Check if this sensor platform is associated with a specific sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; is_associated = sensor_platform.belongs_to_sensor(sensor_name=\"ExistingSensor\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def belongs_to_sensor(self, sensor_name: str) -&gt; bool:\n    \"\"\"\n    Check if this sensor platform is associated with a specific sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; is_associated = sensor_platform.belongs_to_sensor(sensor_name=\"ExistingSensor\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        sensor_name (str): The name of the sensor.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        sensor = Sensor.get(sensor_name=sensor_name)\n        if not sensor:\n            print(f\"Sensor {sensor_name} not found.\")\n            return False\n        association_exists = SensorPlatformSensorModel.exists(\n            sensor_platform_id=self.id,\n            sensor_id=sensor.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if SensorPlatform belongs to sensor {sensor_name}: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.create","title":"<code>create(sensor_platform_name, sensor_platform_info={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorPlatform.create(sensor_platform_name=\"MySensorPlatform\")\nSensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform.</p> required <code>sensor_platform_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[SensorPlatform]: The created sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    sensor_platform_name: str,\n    sensor_platform_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Create a new sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; SensorPlatform.create(sensor_platform_name=\"MySensorPlatform\")\n        SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform.\n        sensor_platform_info (dict, optional): Additional information. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[SensorPlatform]: The created sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SensorPlatformModel.get_or_create(\n            sensor_platform_name=sensor_platform_name,\n            sensor_platform_info=sensor_platform_info,\n        )\n        sensor_platform = cls.model_validate(db_instance)\n        if experiment_name:\n            sensor_platform.associate_experiment(experiment_name=experiment_name)\n        return sensor_platform\n    except Exception as e:\n        print(f\"Error creating SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.create_new_sensor","title":"<code>create_new_sensor(sensor_name, sensor_type=GEMINISensorType.Default, sensor_data_type=GEMINIDataType.Default, sensor_data_format=GEMINIDataFormat.Default, sensor_info={}, experiment_name=None)</code>","text":"<p>Create and associate a new sensor with this sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; new_sensor = sensor_platform.create_new_sensor(sensor_name=\"NewSensor\", sensor_type=GEMINISensorType.Default)\n&gt;&gt;&gt; print(new_sensor)\nSensor(id=UUID(...), sensor_name=\"NewSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the new sensor.</p> required <code>sensor_type</code> <code>GEMINISensorType</code> <p>The type of the sensor. Defaults to Default.</p> <code>Default</code> <code>sensor_data_type</code> <code>GEMINIDataType</code> <p>The data type. Defaults to Default.</p> <code>Default</code> <code>sensor_data_format</code> <code>GEMINIDataFormat</code> <p>The data format. Defaults to Default.</p> <code>Default</code> <code>sensor_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Sensor]: The created and associated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def create_new_sensor(\n    self,\n    sensor_name: str,\n    sensor_type: GEMINISensorType = GEMINISensorType.Default,\n    sensor_data_type: GEMINIDataType = GEMINIDataType.Default,\n    sensor_data_format: GEMINIDataFormat = GEMINIDataFormat.Default,\n    sensor_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Create and associate a new sensor with this sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; new_sensor = sensor_platform.create_new_sensor(sensor_name=\"NewSensor\", sensor_type=GEMINISensorType.Default)\n        &gt;&gt;&gt; print(new_sensor)\n        Sensor(id=UUID(...), sensor_name=\"NewSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n    Args:\n        sensor_name (str): The name of the new sensor.\n        sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to Default.\n        sensor_data_type (GEMINIDataType, optional): The data type. Defaults to Default.\n        sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to Default.\n        sensor_info (dict, optional): Additional information. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Sensor]: The created and associated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        new_sensor = Sensor.create(\n            sensor_name=sensor_name,\n            sensor_type=sensor_type,\n            sensor_data_type=sensor_data_type,\n            sensor_data_format=sensor_data_format,\n            sensor_info=sensor_info,\n            experiment_name=experiment_name,\n            sensor_platform_name=self.sensor_platform_name\n        )\n        if not new_sensor:\n            print(f\"Failed to create sensor {sensor_name}.\")\n            return None\n        return new_sensor\n    except Exception as e:\n        print(f\"Error creating new sensor for SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.delete","title":"<code>delete()</code>","text":"<p>Delete the sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; sensor_platform.delete()\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the sensor platform was deleted, False otherwise.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; sensor_platform.delete()\n        True\n\n    Returns:\n        bool: True if the sensor platform was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        platform = SensorPlatformModel.get(current_id)\n        if not platform:\n            print(f\"SensorPlatform with ID {current_id} not found.\")\n            return False\n        SensorPlatformModel.delete(platform)\n        return True\n    except Exception as e:\n        print(f\"Error deleting SensorPlatform: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.exists","title":"<code>exists(sensor_platform_name)</code>  <code>classmethod</code>","text":"<p>Check if a sensor platform with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorPlatform.exists(sensor_platform_name=\"MySensorPlatform\")\nTrue\n&gt;&gt;&gt; SensorPlatform.exists(sensor_platform_name=\"NonExistentPlatform\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform.</p> required <p>Returns:     bool: True if the sensor platform exists, False otherwise.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    sensor_platform_name: str,\n) -&gt; bool:\n    \"\"\"\n    Check if a sensor platform with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; SensorPlatform.exists(sensor_platform_name=\"MySensorPlatform\")\n        True\n        &gt;&gt;&gt; SensorPlatform.exists(sensor_platform_name=\"NonExistentPlatform\")\n        False\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform.\n    Returns:\n        bool: True if the sensor platform exists, False otherwise.\n    \"\"\"\n    try:\n        exists = SensorPlatformModel.exists(sensor_platform_name=sensor_platform_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of SensorPlatform: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.get","title":"<code>get(sensor_platform_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor platform by its name and experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\nSensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[SensorPlatform]: The sensor platform, or None if not found.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    sensor_platform_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Retrieve a sensor platform by its name and experiment.\n\n    Examples:\n        &gt;&gt;&gt; SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[SensorPlatform]: The sensor platform, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentSensorPlatformsViewModel.get_by_parameters(\n            sensor_platform_name=sensor_platform_name,\n            experiment_name=experiment_name\n        )\n        if not db_instance:\n            print(f\"SensorPlatform with name {sensor_platform_name} not found.\")\n            return None\n        sensor_platform = cls.model_validate(db_instance)\n        return sensor_platform\n    except Exception as e:\n        print(f\"Error retrieving SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all sensor platforms.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorPlatform.get_all()\n[SensorPlatform(id=UUID(...), sensor_platform_name=\"Platform1\"), SensorPlatform(id=UUID(...), sensor_platform_name=\"Platform2\")]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[SensorPlatform]]</code> <p>Optional[List[SensorPlatform]]: List of all sensor platforms, or None if not found.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"SensorPlatform\"]]:\n    \"\"\"\n    Retrieve all sensor platforms.\n\n    Examples:\n        &gt;&gt;&gt; SensorPlatform.get_all()\n        [SensorPlatform(id=UUID(...), sensor_platform_name=\"Platform1\"), SensorPlatform(id=UUID(...), sensor_platform_name=\"Platform2\")]\n\n    Returns:\n        Optional[List[SensorPlatform]]: List of all sensor platforms, or None if not found.\n    \"\"\"\n    try:\n        sensor_platforms = SensorPlatformModel.all()\n        if not sensor_platforms or len(sensor_platforms) == 0:\n            print(\"No SensorPlatforms found.\")\n            return None\n        sensor_platforms = [cls.model_validate(sp) for sp in sensor_platforms]\n        return sensor_platforms\n    except Exception as e:\n        print(f\"Error retrieving all SensorPlatforms: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with this sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; experiments = sensor_platform.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(id=UUID(...), experiment_name=\"Experiment1\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\nExperiment(id=UUID(...), experiment_name=\"Experiment2\", experiment_start_date=\"2023-02-01\", experiment_end_date=\"2023-11-30\")\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[Experiment]]: A list of associated experiments, or None if not found.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with this sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; experiments = sensor_platform.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(id=UUID(...), experiment_name=\"Experiment1\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n        Experiment(id=UUID(...), experiment_name=\"Experiment2\", experiment_start_date=\"2023-02-01\", experiment_end_date=\"2023-11-30\")\n\n    Returns:\n        Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment_sensor_platforms = ExperimentSensorPlatformsViewModel.search(\n            sensor_platform_id=self.id\n        )\n        if not experiment_sensor_platforms or len(experiment_sensor_platforms) == 0:\n            print(f\"No experiments found for SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        experiments = [Experiment.model_validate(exp) for exp in experiment_sensor_platforms]\n        return experiments\n    except Exception as e:\n        print(f\"Error retrieving associated experiments for SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.get_associated_sensors","title":"<code>get_associated_sensors()</code>","text":"<p>Get all sensors associated with this sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; sensors = sensor_platform.get_associated_sensors()\n&gt;&gt;&gt; for sensor in sensors:\n...     print(sensor)\nSensor(id=UUID(...), sensor_name=\"Sensor1\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\nSensor(id=UUID(...), sensor_name=\"Sensor2\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Sensor]]</code> <p>Optional[List[Sensor]]: A list of associated sensors, or None if not found.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def get_associated_sensors(self) -&gt; Optional[List[\"Sensor\"]]:\n    \"\"\"\n    Get all sensors associated with this sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; sensors = sensor_platform.get_associated_sensors()\n        &gt;&gt;&gt; for sensor in sensors:\n        ...     print(sensor)\n        Sensor(id=UUID(...), sensor_name=\"Sensor1\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n        Sensor(id=UUID(...), sensor_name=\"Sensor2\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n    Returns:\n        Optional[List[Sensor]]: A list of associated sensors, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        sensor_platform_sensors = SensorPlatformSensorsViewModel.search(\n            sensor_platform_id=self.id\n        )\n        if not sensor_platform_sensors or len(sensor_platform_sensors) == 0:\n            print(f\"No sensors found for SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        sensors = [Sensor.model_validate(sensor) for sensor in sensor_platform_sensors]\n        return sensors\n    except Exception as e:\n        print(f\"Error retrieving sensors for SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor platform by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorPlatform.get_by_id(UUID('...'))\nSensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the sensor platform.</p> required <p>Returns:     Optional[SensorPlatform]: The sensor platform, or None if not found.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Retrieve a sensor platform by its ID.\n\n    Examples:\n        &gt;&gt;&gt; SensorPlatform.get_by_id(UUID('...'))\n        SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n    Args:\n        id (UUID | int | str): The ID of the sensor platform.\n    Returns:\n        Optional[SensorPlatform]: The sensor platform, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SensorPlatformModel.get(id)\n        if not db_instance:\n            print(f\"SensorPlatform with ID {id} not found.\")\n            return None\n        sensor_platform = cls.model_validate(db_instance)\n        return sensor_platform\n    except Exception as e:\n        print(f\"Error retrieving SensorPlatform by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; info = sensor_platform.get_info()\n{'key1': 'value1', 'key2': 'value2'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The sensor platform's info, or None if not found.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; info = sensor_platform.get_info()\n        {'key1': 'value1', 'key2': 'value2'}\n\n    Returns:\n        Optional[dict]: The sensor platform's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_platform = SensorPlatformModel.get(current_id)\n        if not sensor_platform:\n            print(f\"SensorPlatform with ID {current_id} not found.\")\n            return None\n        sensor_platform_info = sensor_platform.sensor_platform_info\n        if not sensor_platform_info:\n            print(\"SensorPlatform info is empty.\")\n            return None\n        return sensor_platform_info\n    except Exception as e:\n        print(f\"Error retrieving SensorPlatform info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the sensor platform's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; sensor_platform.refresh()\nSensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n</code></pre> <p>Returns:</p> Type Description <code>Optional[SensorPlatform]</code> <p>Optional[SensorPlatform]: The refreshed sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def refresh(self) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Refresh the sensor platform's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; sensor_platform.refresh()\n        SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")\n\n    Returns:\n        Optional[SensorPlatform]: The refreshed sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SensorPlatformModel.get(self.id)\n        if not db_instance:\n            print(f\"SensorPlatform with ID {self.id} not found.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.search","title":"<code>search(sensor_platform_name=None, sensor_platform_info=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for sensor platforms based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorPlatform.search(sensor_platform_name=\"MySensorPlatform\")\n[SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform. Defaults to None.</p> <code>None</code> <code>sensor_platform_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[SensorPlatform]]: List of matching sensor platforms, or None if not found.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    sensor_platform_name: str = None,\n    sensor_platform_info: dict = None,\n    experiment_name: str = None\n) -&gt; Optional[List[\"SensorPlatform\"]]:\n    \"\"\"\n    Search for sensor platforms based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; SensorPlatform.search(sensor_platform_name=\"MySensorPlatform\")\n        [SensorPlatform(id=UUID(...), sensor_platform_name=\"MySensorPlatform\")]\n\n\n    Args:\n        sensor_platform_name (str, optional): The name of the sensor platform. Defaults to None.\n        sensor_platform_info (dict, optional): Additional information. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[List[SensorPlatform]]: List of matching sensor platforms, or None if not found.\n    \"\"\"\n    try:\n        if not any([sensor_platform_name, sensor_platform_info, experiment_name]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n        instances = ExperimentSensorPlatformsViewModel.search(\n            sensor_platform_name=sensor_platform_name,\n            sensor_platform_info=sensor_platform_info,\n            experiment_name=experiment_name\n        )\n        if not instances or len(instances) == 0:\n            print(\"No SensorPlatforms found matching the search criteria.\")\n            return None\n        sensor_platforms = [cls.model_validate(instance) for instance in instances]\n        return sensor_platforms\n    except Exception as e:\n        print(f\"Error searching SensorPlatforms: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.set_info","title":"<code>set_info(sensor_platform_info)</code>","text":"<p>Set the additional information of the sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; updated_platform = sensor_platform.set_info({'key1': 'value1', 'key2': 'value2'})\n&gt;&gt;&gt; updated_platform.get_info()\n{'key1': 'value1', 'key2': 'value2'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[SensorPlatform]: The updated sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def set_info(self, sensor_platform_info: dict) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Set the additional information of the sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; updated_platform = sensor_platform.set_info({'key1': 'value1', 'key2': 'value2'})\n        &gt;&gt;&gt; updated_platform.get_info()\n        {'key1': 'value1', 'key2': 'value2'}\n\n    Args:\n        sensor_platform_info (dict): The new information to set.\n    Returns:\n        Optional[SensorPlatform]: The updated sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_platform = SensorPlatformModel.get(current_id)\n        if not sensor_platform:\n            print(f\"SensorPlatform with ID {current_id} not found.\")\n            return None\n        sensor_platform = SensorPlatformModel.update(\n            sensor_platform,\n            sensor_platform_info=sensor_platform_info\n        )\n        sensor_platform = self.model_validate(sensor_platform)\n        self.refresh()\n        return self\n    except Exception as e:\n        print(f\"Error setting SensorPlatform info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate this sensor platform from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; experiment = sensor_platform.unassociate_experiment(experiment_name=\"MyExperiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(id=UUID(...), experiment_name=\"MyExperiment\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this sensor platform from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; experiment = sensor_platform.unassociate_experiment(experiment_name=\"MyExperiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(id=UUID(...), experiment_name=\"MyExperiment\", experiment_start_date=\"2023-01-01\", experiment_end_date=\"2023-12-31\")\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} not found.\")\n            return None\n        existing_association = ExperimentSensorPlatformModel.get_by_parameters(\n            sensor_platform_id=self.id,\n            experiment_id=experiment.id\n        )\n        if not existing_association:\n            print(f\"Experiment {experiment_name} is not associated with SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        is_deleted = ExperimentSensorPlatformModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate Experiment {experiment_name} from SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassociating Experiment {experiment_name} from SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.unassociate_sensor","title":"<code>unassociate_sensor(sensor_name)</code>","text":"<p>Unassociate a sensor from this sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; sensor = sensor_platform.unassociate_sensor(sensor_name=\"ExistingSensor\")\n&gt;&gt;&gt; print(sensor)\nSensor(id=UUID(...), sensor_name=\"ExistingSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <p>Returns:     Optional[Sensor]: The unassociated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def unassociate_sensor(self, sensor_name: str) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Unassociate a sensor from this sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; sensor = sensor_platform.unassociate_sensor(sensor_name=\"ExistingSensor\")\n        &gt;&gt;&gt; print(sensor)\n        Sensor(id=UUID(...), sensor_name=\"ExistingSensor\", sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1)\n\n    Args:\n        sensor_name (str): The name of the sensor.\n    Returns:\n        Optional[Sensor]: The unassociated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor import Sensor\n        sensor = Sensor.get(sensor_name=sensor_name)\n        if not sensor:\n            print(f\"Sensor {self.sensor_platform_name} not found.\")\n            return None\n        existing_association = SensorPlatformSensorModel.get_by_parameters(\n            sensor_platform_id=self.id,\n            sensor_id=sensor.id\n        )\n        if not existing_association:\n            print(f\"Sensor {self.sensor_platform_name} is not associated with SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        is_deleted = SensorPlatformSensorModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate sensor {self.sensor_platform_name} from SensorPlatform {self.sensor_platform_name}.\")\n            return None\n        self.refresh()\n        return sensor\n    except Exception as e:\n        print(f\"Error unassociating sensor {self.sensor_platform_name} from SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_platforms/#gemini.api.sensor_platform.SensorPlatform.update","title":"<code>update(sensor_platform_name=None, sensor_platform_info=None)</code>","text":"<p>Update the details of the sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n&gt;&gt;&gt; updated_platform = sensor_platform.update(sensor_platform_name=\"UpdatedPlatformName\")\nSensorPlatform(id=UUID(...), sensor_platform_name=\"UpdatedPlatformName\")\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>sensor_platform_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[SensorPlatform]: The updated sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_platform.py</code> <pre><code>def update(\n    self,\n    sensor_platform_name: str = None,\n    sensor_platform_info: dict = None\n) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Update the details of the sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor_platform = SensorPlatform.get(sensor_platform_name=\"MySensorPlatform\")\n        &gt;&gt;&gt; updated_platform = sensor_platform.update(sensor_platform_name=\"UpdatedPlatformName\")\n        SensorPlatform(id=UUID(...), sensor_platform_name=\"UpdatedPlatformName\")\n\n    Args:\n        sensor_platform_name (str, optional): The new name. Defaults to None.\n        sensor_platform_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[SensorPlatform]: The updated sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([sensor_platform_name, sensor_platform_info]):\n            print(\"At least one update parameter must be provided.\")\n            return None\n        current_id = self.id\n        platform = SensorPlatformModel.get(current_id)\n        if not platform:\n            print(f\"SensorPlatform with ID {current_id} not found.\")\n            return None\n        platform = SensorPlatformModel.update(\n            platform, \n            sensor_platform_info=sensor_platform_info,\n            sensor_platform_name=sensor_platform_name\n        )\n        platform = self.model_validate(platform)\n        self.refresh()\n        return platform\n    except Exception as e:\n        print(f\"Error updating SensorPlatform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/","title":"Sensor Records API","text":""},{"location":"api/sensor_records/#description","title":"Description","text":"<p>A sensor record is a record that belongs to a specific Sensor, a specific Experiment, Season, Site, and Plot.</p> <p>It is defined by the following properties:</p> Property Type Description <code>id</code> <code>UUID</code> The unique identifier of the sensor record. <code>timestamp</code> <code>datetime</code> The timestamp of the record. <code>collection_date</code> <code>date</code> The collection date of the record. <code>sensor_name</code> <code>string</code> The name of the associated sensor. <code>sensor_id</code> <code>UUID</code> The ID of the associated sensor. <code>sensor_data</code> <code>dict</code> The data associated with the sensor record. <code>dataset_id</code> <code>UUID</code> The ID of the associated dataset. <code>dataset_name</code> <code>string</code> The name of the associated dataset. <code>experiment_name</code> <code>string</code> The name of the associated experiment. <code>experiment_id</code> <code>UUID</code> The ID of the associated experiment. <code>season_name</code> <code>string</code> The name of the associated season. <code>season_id</code> <code>UUID</code> The ID of the associated season. <code>site_name</code> <code>string</code> The name of the associated site. <code>site_id</code> <code>UUID</code> The ID of the associated site. <code>plot_id</code> <code>UUID</code> The ID of the associated plot. <code>plot_number</code> <code>integer</code> The number of the associated plot. <code>plot_row_number</code> <code>integer</code> The row number of the associated plot. <code>plot_column_number</code> <code>integer</code> The column number of the associated plot. <code>record_file</code> <code>string</code> The file path for the record data in the object storage. <code>record_info</code> <code>dict</code> Additional information about the record. <p>A sensor record is uniquely identified within a sensor by its <code>timestamp</code>, <code>sensor_name</code>, <code>dataset_name</code>, <code>experiment_name</code>, <code>season_name</code>, <code>site_name</code>, <code>plot_number</code>, <code>plot_row_number</code> and <code>plot_column_number</code>. There will be no two sensor records with the same timestamp and belonging to the same sensor, dataset, experiment, season and site.</p>"},{"location":"api/sensor_records/#module","title":"Module","text":"<p>This module defines the SensorRecord class, which represents a record of sensor data, including metadata, associations to datasets, experiments, sites, seasons, and plots, and file handling capabilities.</p> <p>It includes methods for creating, retrieving, updating, and deleting sensor records, as well as methods for checking existence, searching, filtering, and managing file handling for records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a sensor record with the given parameters exists.</li> <li><code>create</code>: Create a new sensor record.</li> <li><code>insert</code>: Insert a list of sensor records into the database.</li> <li><code>get</code>: Retrieve a sensor record by its parameters.</li> <li><code>get_by_id</code>: Retrieve a sensor record by its ID.</li> <li><code>get_all</code>: Retrieve all sensor records.</li> <li><code>search</code>: Search for sensor records based on various criteria.</li> <li><code>filter</code>: Filter sensor records based on custom logic.</li> <li><code>update</code>: Update the details of a sensor record.</li> <li><code>delete</code>: Delete a sensor record.</li> <li><code>refresh</code>: Refresh the sensor record's data from the database.</li> <li><code>get_info</code>: Get the additional information of the sensor record.</li> <li><code>set_info</code>: Set the additional information of the sensor record.</li> <li>File handling methods from FileHandlerMixin for managing record files.</li> </ul>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord","title":"<code>SensorRecord</code>","text":"<p>               Bases: <code>APIBase</code>, <code>FileHandlerMixin</code></p> <p>Represents a record of sensor data, including metadata, associations to datasets, experiments, sites, seasons, and plots, and file handling capabilities.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the sensor record.</p> <code>timestamp</code> <code>Optional[datetime]</code> <p>The timestamp of the record.</p> <code>collection_date</code> <code>Optional[date]</code> <p>The collection date of the record.</p> <code>dataset_id</code> <code>Optional[ID]</code> <p>The ID of the associated dataset.</p> <code>dataset_name</code> <code>Optional[str]</code> <p>The name of the associated dataset.</p> <code>sensor_id</code> <code>Optional[ID]</code> <p>The ID of the associated sensor.</p> <code>sensor_name</code> <code>Optional[str]</code> <p>The name of the associated sensor.</p> <code>sensor_data</code> <code>Optional[dict]</code> <p>The data content of the sensor record.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> <code>experiment_name</code> <code>Optional[str]</code> <p>The name of the associated experiment.</p> <code>season_id</code> <code>Optional[ID]</code> <p>The ID of the associated season.</p> <code>season_name</code> <code>Optional[str]</code> <p>The name of the associated season.</p> <code>site_id</code> <code>Optional[ID]</code> <p>The ID of the associated site.</p> <code>site_name</code> <code>Optional[str]</code> <p>The name of the associated site.</p> <code>plot_id</code> <code>Optional[ID]</code> <p>The ID of the associated plot.</p> <code>plot_number</code> <code>Optional[int]</code> <p>The number of the associated plot.</p> <code>plot_row_number</code> <code>Optional[int]</code> <p>The row number of the associated plot.</p> <code>plot_column_number</code> <code>Optional[int]</code> <p>The column number of the associated plot.</p> <code>record_file</code> <code>Optional[str]</code> <p>The file path or URI of the record file.</p> <code>record_info</code> <code>Optional[dict]</code> <p>Additional information about the record.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>class SensorRecord(APIBase, FileHandlerMixin):\n    \"\"\"\n    Represents a record of sensor data, including metadata, associations to datasets, experiments, sites, seasons, and plots, and file handling capabilities.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the sensor record.\n        timestamp (Optional[datetime]): The timestamp of the record.\n        collection_date (Optional[date]): The collection date of the record.\n        dataset_id (Optional[ID]): The ID of the associated dataset.\n        dataset_name (Optional[str]): The name of the associated dataset.\n        sensor_id (Optional[ID]): The ID of the associated sensor.\n        sensor_name (Optional[str]): The name of the associated sensor.\n        sensor_data (Optional[dict]): The data content of the sensor record.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n        experiment_name (Optional[str]): The name of the associated experiment.\n        season_id (Optional[ID]): The ID of the associated season.\n        season_name (Optional[str]): The name of the associated season.\n        site_id (Optional[ID]): The ID of the associated site.\n        site_name (Optional[str]): The name of the associated site.\n        plot_id (Optional[ID]): The ID of the associated plot.\n        plot_number (Optional[int]): The number of the associated plot.\n        plot_row_number (Optional[int]): The row number of the associated plot.\n        plot_column_number (Optional[int]): The column number of the associated plot.\n        record_file (Optional[str]): The file path or URI of the record file.\n        record_info (Optional[dict]): Additional information about the record.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"sensor_record_id\"))\n\n    timestamp: Optional[datetime] = None\n    collection_date: Optional[date] = None\n    dataset_id: Optional[ID] = None\n    dataset_name: Optional[str] = None\n    sensor_id: Optional[ID] = None\n    sensor_name: Optional[str] = None\n    sensor_data: Optional[dict] = None\n    experiment_id: Optional[ID] = None\n    experiment_name : Optional[str] = None\n    season_id: Optional[ID] = None\n    season_name: Optional[str] = None\n    site_id: Optional[ID] = None\n    site_name: Optional[str] = None\n    plot_id: Optional[ID] = None\n    plot_number: Optional[int] = None\n    plot_row_number: Optional[int] = None\n    plot_column_number: Optional[int] = None\n    record_file: Optional[str] = None\n    record_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the SensorRecord object.\"\"\"\n        return f\"SensorRecord(id={self.id}, timestamp={self.timestamp}, sensor_name={self.sensor_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the SensorRecord object.\"\"\"\n        return f\"SensorRecord(id={self.id}, timestamp={self.timestamp}, sensor_name={self.sensor_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number})\"\n\n    @classmethod\n    def exists(\n        cls,\n        timestamp: datetime,\n        sensor_name: str,\n        dataset_name: str,\n        experiment_name: str,\n        season_name: str,\n        site_name: str,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if a sensor record with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; SensorRecord.exists(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     sensor_name=\"TemperatureSensor\",\n            ...     dataset_name=\"WeatherData\",\n            ...     experiment_name=\"ClimateExperiment\",\n            ...     season_name=\"Autumn\",\n            ...     site_name=\"SiteA\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1\n            ... )\n            True\n\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            sensor_name (str): The name of the sensor.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment.\n            season_name (str): The name of the season.\n            site_name (str): The name of the site.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n        Returns:\n            bool: True if the sensor record exists, False otherwise.\n        \"\"\"\n        try:\n            exists = SensorRecordModel.exists(\n                timestamp=timestamp,\n                sensor_name=sensor_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of sensor record: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        timestamp: datetime = datetime.now(),\n        collection_date: date = None,\n        dataset_name: str = None,\n        sensor_name: str = None,\n        sensor_data: dict = {},\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        record_file: str = None,\n        record_info: dict = {},\n        insert_on_create: bool = True\n    ) -&gt; Optional[\"SensorRecord\"]:\n        \"\"\"\n        Create a new sensor record.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.create(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"WeatherData\",\n            ...     sensor_name=\"TemperatureSensor\",\n            ...     sensor_data={\"temperature\": 22.5},\n            ...     experiment_name=\"ClimateExperiment\",\n            ...     site_name=\"SiteA\",\n            ...     season_name=\"Autumn\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     record_file=\"/path/to/record/file.txt\",\n            ...     record_info={\"notes\": \"Initial record\"},\n            ...     insert_on_create=True\n            ... )\n            &gt;&gt;&gt; print(sensor_record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            sensor_name (str, optional): The name of the sensor. Defaults to None.\n            sensor_data (dict, optional): The data content. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n            record_file (str, optional): The file path or URI. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n            insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n        Returns:\n            Optional[SensorRecord]: The created sensor record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, season_name, site_name]):\n                raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n            if not sensor_name:\n                raise ValueError(\"Sensor name is required.\")\n            if not dataset_name:\n                raise ValueError(\"Dataset name is required.\")\n            if not all([plot_number, plot_row_number, plot_column_number]):\n                raise ValueError(\"Plot number, plot row number, and plot column number are required if a plot is specified.\")\n            if not timestamp:\n                timestamp = datetime.now()\n            if not collection_date:\n                collection_date = timestamp.date()\n            if not sensor_data and not record_file:\n                raise ValueError(\"Either sensor_data or record_file must be provided.\")\n            sensor_record = SensorRecord(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                sensor_name=sensor_name,\n                sensor_data=sensor_data,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                record_file=record_file,\n                record_info=record_info\n            )\n            if insert_on_create:\n                insert_success, inserted_record_ids = cls.insert([sensor_record])\n                if not insert_success:\n                    print(\"Failed to insert SensorRecord.\")\n                    return None\n                if not inserted_record_ids or len(inserted_record_ids) == 0:\n                    print(\"No new SensorRecord was inserted.\")\n                    return None\n                inserted_record_id = inserted_record_ids[0]\n                sensor_record = cls.get_by_id(inserted_record_id)\n            return sensor_record    \n        except Exception as e:\n            print(f\"Error creating sensor record: {e}\")\n            return None\n\n    @classmethod\n    def insert(cls, records: List[\"SensorRecord\"]) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a list of sensor records into the database.\n\n        Args:\n            records (List[SensorRecord]): The records to insert.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not records or len(records) == 0:\n                raise ValueError(\"No records provided for insertion.\")\n                return False, []\n            records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing Records for Sensor: \" + records[0].sensor_name)]\n            records_to_insert = []\n            for record in records:\n                record_to_insert = record.model_dump()\n                record_to_insert = {k: v for k, v in record_to_insert.items() if v is not None}\n                records_to_insert.append(record_to_insert)\n            print(f\"Inserting {len(records_to_insert)} records.\")\n            inserted_record_ids = SensorRecordModel.insert_bulk('sensor_records_unique', records_to_insert)\n            print(f\"Inserted {len(inserted_record_ids)} records.\")\n            return True, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting records: {e}\")\n            return False, []\n\n    @classmethod\n    def get(\n        cls,\n        timestamp: datetime,\n        sensor_name: str,\n        dataset_name: str,\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None\n    ) -&gt; Optional[\"SensorRecord\"]:\n        \"\"\"\n        Retrieve a sensor record by its parameters.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.get(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     sensor_name=\"TemperatureSensor\",\n            ...     dataset_name=\"WeatherData\",\n            ...     experiment_name=\"ClimateExperiment\",\n            ...     site_name=\"SiteA\",\n            ...     season_name=\"Autumn\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1\n            ... )\n            &gt;&gt;&gt; print(sensor_record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            sensor_name (str): The name of the sensor.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n        Returns:\n            Optional[SensorRecord]: The sensor record, or None if not found.\n        \"\"\"\n        try:\n            if not timestamp:\n                print(\"Timestamp is required to get a sensor record.\")\n                return None\n            if not dataset_name:\n                print(\"Dataset name is required to get a sensor record.\")\n                return None\n            if not sensor_name:\n                print(\"Sensor name is required to get a sensor record.\")\n                return None\n            if not experiment_name and not site_name and not season_name:\n                print(\"At least one of experiment_name, site_name, or season_name is required to get a sensor record.\")\n                return None\n            if not all([plot_number, plot_row_number, plot_column_number]):\n                print(\"Plot number, plot row number, and plot column number are required if a plot is specified.\")\n                return None\n            sensor_record = SensorRecordsIMMVModel.get_by_parameters(\n                timestamp=timestamp,\n                sensor_name=sensor_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number\n            )\n            if not sensor_record:\n                print(\"No sensor record found with the provided parameters.\")\n                return None\n            sensor_record = cls.model_validate(sensor_record)\n            return sensor_record\n        except Exception as e:\n            print(f\"Error getting sensor record: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"SensorRecord\"]:\n        \"\"\"\n        Retrieve a sensor record by its ID.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(sensor_record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n        Args:\n            id (UUID | int | str): The ID of the sensor record.\n        Returns:\n            Optional[SensorRecord]: The sensor record, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SensorRecordModel.get(id)\n            if not db_instance:\n                print(f\"No sensor record found with ID: {id}\")\n                return None\n            record = cls.model_validate(db_instance)\n            return record\n        except Exception as e:\n            print(f\"Error getting sensor record by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls, limit: int = 100) -&gt; Optional[List[\"SensorRecord\"]]:\n        \"\"\"\n        Retrieve all sensor records, up to a specified limit.\n\n        Examples:\n            &gt;&gt;&gt; sensor_records = SensorRecord.get_all(limit=10)\n            &gt;&gt;&gt; for record in sensor_records:\n            ...     print(record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='HumiditySensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteB', season_name='Winter', plot_number=2)\n\n        Args:\n            limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n        Returns:\n            Optional[List[SensorRecord]]: List of sensor records, or None if not found.\n        \"\"\"\n        try:\n            records = SensorRecordModel.all(limit=limit)\n            if not records or len(records) == 0:\n                print(\"No sensor records found.\")\n                return None\n            records = [cls.model_validate(record) for record in records]\n            return records\n        except Exception as e:\n            print(f\"Error getting all sensor records: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        sensor_name: str = None,\n        sensor_data: dict = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        collection_date: date = None,\n        record_info: dict = None\n    ) -&gt; Generator[\"SensorRecord\", None, None]:\n        \"\"\"\n        Search for sensor records based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; sensor_records = SensorRecord.search(\n            ...     sensor_name=\"TemperatureSensor\",\n            ...     dataset_name=\"WeatherData\",\n            ...     experiment_name=\"ClimateExperiment\",\n            ...     site_name=\"SiteA\",\n            ...     season_name=\"Autumn\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     collection_date=date(2023, 10, 1),\n            ...     record_info={\"notes\": \"Initial record\"}\n            ... )\n            &gt;&gt;&gt; for record in sensor_records:\n            ...     print(record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n        Args:\n            sensor_name (str, optional): The name of the sensor. Defaults to None.\n            sensor_data (dict, optional): The data content. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Yields:\n            SensorRecord: Matching sensor records.\n        \"\"\"\n        try:\n            if not any([sensor_name, dataset_name, experiment_name, site_name, season_name, plot_number, plot_row_number, plot_column_number]):\n                print(\"At least one search parameter must be provided.\")\n                return\n            records = SensorRecordsIMMVModel.stream(\n                sensor_name=sensor_name,\n                sensor_data=sensor_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                collection_date=collection_date,\n                record_info=record_info\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error searching sensor records: {e}\")\n            yield from []\n\n    @classmethod\n    def filter(\n        cls,\n        start_timestamp: datetime = None,\n        end_timestamp: datetime = None,\n        sensor_names: List[str] = None,\n        dataset_names: List[str] = None,\n        experiment_names: List[str] = None,\n        season_names: List[str] = None,\n        site_names: List[str] = None\n    ) -&gt; Generator[\"SensorRecord\", None, None]:\n        \"\"\"\n        Filter sensor records based on custom logic.\n\n        Examples:\n            &gt;&gt;&gt; sensor_records = SensorRecord.filter(\n            ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n            ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n            ...     sensor_names=[\"TemperatureSensor\", \"HumiditySensor\"],\n            ...     dataset_names=[\"WeatherData\"],\n            ...     experiment_names=[\"ClimateExperiment\"],\n            ...     site_names=[\"SiteA\", \"SiteB\"],\n            ...     season_names=[\"Autumn\"]\n            ... )\n            &gt;&gt;&gt; for record in sensor_records:\n            ...     print(record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), sensor_name='HumiditySensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteB', season_name='Autumn', plot_number=2)\n\n        Args:\n            start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n            end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n            sensor_names (List[str], optional): List of sensor names. Defaults to None.\n            dataset_names (List[str], optional): List of dataset names. Defaults to None.\n            experiment_names (List[str], optional): List of experiment names. Defaults to None.\n            season_names (List[str], optional): List of season names. Defaults to None.\n            site_names (List[str], optional): List of site names. Defaults to None.\n        Yields:\n            SensorRecord: Filtered sensor records.\n        \"\"\"\n        try:\n            records = SensorRecordModel.filter_records(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                sensor_names=sensor_names,\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                site_names=site_names,\n                season_names=season_names\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error filtering sensor records: {e}\")\n            yield from []\n\n\n    def update(\n        self,\n        sensor_data: dict = None,\n        record_info: dict = None\n    ) -&gt; Optional[\"SensorRecord\"]:\n        \"\"\"\n        Update the details of the sensor record.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = sensor_record.update(\n            ...     sensor_data={\"temperature\": 23.0},\n            ...     record_info={\"notes\": \"Updated record\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n        Args:\n            sensor_data (dict, optional): The new sensor data. Defaults to None.\n            record_info (dict, optional): The new record information. Defaults to None.\n        Returns:\n            Optional[SensorRecord]: The updated sensor record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([sensor_data, record_info]):\n                print(\"At least one update parameter must be provided.\")\n                return None\n            current_id = self.id\n            sensor_record = SensorRecordModel.get(current_id)\n            if not sensor_record:\n                print(f\"No sensor record found with ID: {current_id}\")\n                return None\n            sensor_record = SensorRecordModel.update(\n                sensor_record,\n                sensor_data=sensor_data,\n                record_info=record_info\n            )\n            sensor_record = self.model_validate(sensor_record)\n            self.refresh()\n            return sensor_record\n        except Exception as e:\n            print(f\"Error updating sensor record: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the sensor record.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; success = sensor_record.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the sensor record was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_record = SensorRecordModel.get(current_id)\n            if not sensor_record:\n                print(f\"No sensor record found with ID: {current_id}\")\n                return False\n            SensorRecordModel.delete(sensor_record)\n            return True\n        except Exception as e:\n            print(f\"Error deleting sensor record: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"SensorRecord\"]:\n        \"\"\"\n        Refresh the sensor record's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_record = sensor_record.refresh()\n            &gt;&gt;&gt; print(refreshed_record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n        Returns:\n            Optional[SensorRecord]: The refreshed sensor record, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SensorRecordModel.get(self.id)\n            if not db_instance:\n                print(f\"SensorRecord with id {self.id} not found.\")\n                return None\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing SensorRecord: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the sensor record.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; record_info = sensor_record.get_info()\n            &gt;&gt;&gt; print(record_info)\n            {'notes': 'Initial record', 'created_by': 'user123'}\n\n        Returns:\n            Optional[dict]: The record's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_record = SensorRecordModel.get(current_id)\n            if not sensor_record:\n                print(f\"No sensor record found with ID: {current_id}\")\n                return None\n            record_info = sensor_record.record_info\n            if not record_info:\n                print(\"No record info available for this sensor record.\")\n                return None\n            return record_info\n        except Exception as e:\n            print(f\"Error getting sensor record info: {e}\")\n            return None\n\n\n    def set_info(self, record_info: dict) -&gt; Optional[\"SensorRecord\"]:\n        \"\"\"\n        Set the additional information of the sensor record.\n\n        Examples:\n            &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = sensor_record.set_info(\n            ...     record_info={\"notes\": \"Updated record\", \"created_by\": \"user123\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record.get_info())\n            {'notes': 'Updated record', 'created_by': 'user123'}\n\n        Args:\n            record_info (dict): The new information to set.\n        Returns:\n            Optional[SensorRecord]: The updated sensor record, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_record = SensorRecordModel.get(current_id)\n            if not sensor_record:\n                print(f\"No sensor record found with ID: {current_id}\")\n                return None\n            SensorRecordModel.update(\n                sensor_record,\n                record_info=record_info\n            )\n            sensor_record = self.model_validate(sensor_record)\n            self.refresh()\n            return sensor_record\n        except Exception as e:\n            print(f\"Error setting sensor record info: {e}\")\n            return None\n\n    @classmethod\n    def create_file_uri(cls, record: \"SensorRecord\") -&gt; Optional[str]:\n        \"\"\"\n        Create a file URI for the given sensor record.\n\n        Examples:\n            &gt;&gt;&gt; record = SensorRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"WeatherData\",\n            ...     sensor_name=\"TemperatureSensor\",\n            ...     experiment_name=\"ClimateExperiment\",\n            ...     site_name=\"SiteA\",\n            ...     season_name=\"Autumn\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     record_file=\"/path/to/record/file.txt\"\n            ... )\n            &gt;&gt;&gt; file_uri = SensorRecord.create_file_uri(record)\n            &gt;&gt;&gt; print(file_uri)\n            sensor_data/ClimateExperiment/TemperatureSensor/WeatherData/2023-10-01/SiteA/Autumn/1706467200000.txt\n\n        Args:\n            record (SensorRecord): The sensor record for which to create the file URI.\n        Returns:\n            Optional[str]: The file URI, or None if creation failed.\n        \"\"\"\n        try:\n            original_file_path = record.record_file\n            if not original_file_path:\n                print(f\"record_file is required to create file URI.\")\n                return None\n            if not os.path.exists(original_file_path):\n                print(f\"File {original_file_path} does not exist.\")\n                return None\n            collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n            sensor_name = record.sensor_name\n            dataset_name = record.dataset_name\n            experiment_name = record.experiment_name\n            season_name = record.season_name\n            site_name = record.site_name\n            file_extension = os.path.splitext(original_file_path)[1]\n            file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n            file_key = f\"sensor_data/{experiment_name}/{sensor_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n            return file_key\n        except Exception as e:\n            print(f\"Error creating file URI: {e}\")\n            return None\n\n\n    @classmethod\n    def process_record(cls, record: \"SensorRecord\") -&gt; \"SensorRecord\":\n        \"\"\"\n        Process a sensor record (custom logic, e.g., file upload).\n\n        Examples:\n            &gt;&gt;&gt; record = SensorRecord(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"WeatherData\",\n            ...     sensor_name=\"TemperatureSensor\",\n            ...     experiment_name=\"ClimateExperiment\",\n            ...     site_name=\"SiteA\",\n            ...     season_name=\"Autumn\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     record_file=\"/path/to/record/file.txt\"\n            ... )\n            &gt;&gt;&gt; processed_record = SensorRecord.process_record(record)\n            &gt;&gt;&gt; print(processed_record)\n            SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n        Args:\n            record (SensorRecord): The sensor record to process.\n        Returns:\n            SensorRecord: The processed sensor record.\n        \"\"\"\n        try:\n            file = record.record_file\n            if not file:\n                print(f\"record_file is required to process SensorRecord.\")\n                return record\n            file_key = cls.create_file_uri(record)\n            if not file_key:\n                print(f\"Failed to create file URI for SensorRecord: {record}\")\n                return record\n            content_type, _ = mimetypes.guess_type(file)\n            # Generate Metadata for upload\n            file_metadata = {\n                \"Sensor-Name\": record.sensor_name,\n                \"Dataset-Name\": record.dataset_name,\n                \"Experiment-Name\": record.experiment_name,\n                \"Site-Name\": record.site_name,\n                \"Season-Name\": record.season_name,\n                \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n                \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n            }\n            cls.minio_storage_provider.upload_file(\n                object_name=file_key,\n                input_file_path=file,\n                bucket_name=\"gemini\",\n                content_type=content_type,\n                metadata=file_metadata\n            )\n            record.record_file = file_key\n            return record\n        except Exception as e:\n            print(f\"Error processing SensorRecord: {e}\")\n            return record\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the SensorRecord object.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the SensorRecord object.\"\"\"\n    return f\"SensorRecord(id={self.id}, timestamp={self.timestamp}, sensor_name={self.sensor_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number})\"\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the SensorRecord object.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the SensorRecord object.\"\"\"\n    return f\"SensorRecord(id={self.id}, timestamp={self.timestamp}, sensor_name={self.sensor_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number})\"\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.create","title":"<code>create(timestamp=datetime.now(), collection_date=None, dataset_name=None, sensor_name=None, sensor_data={}, experiment_name=None, site_name=None, season_name=None, plot_number=None, plot_row_number=None, plot_column_number=None, record_file=None, record_info={}, insert_on_create=True)</code>  <code>classmethod</code>","text":"<p>Create a new sensor record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.create(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"WeatherData\",\n...     sensor_name=\"TemperatureSensor\",\n...     sensor_data={\"temperature\": 22.5},\n...     experiment_name=\"ClimateExperiment\",\n...     site_name=\"SiteA\",\n...     season_name=\"Autumn\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     record_file=\"/path/to/record/file.txt\",\n...     record_info={\"notes\": \"Initial record\"},\n...     insert_on_create=True\n... )\n&gt;&gt;&gt; print(sensor_record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to now.</p> <code>now()</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>sensor_name</code> <code>str</code> <p>The name of the sensor. Defaults to None.</p> <code>None</code> <code>sensor_data</code> <code>dict</code> <p>The data content. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <code>record_file</code> <code>str</code> <p>The file path or URI. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <code>insert_on_create</code> <code>bool</code> <p>Whether to insert on create. Defaults to True.</p> <code>True</code> <p>Returns:     Optional[SensorRecord]: The created sensor record, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    timestamp: datetime = datetime.now(),\n    collection_date: date = None,\n    dataset_name: str = None,\n    sensor_name: str = None,\n    sensor_data: dict = {},\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    record_file: str = None,\n    record_info: dict = {},\n    insert_on_create: bool = True\n) -&gt; Optional[\"SensorRecord\"]:\n    \"\"\"\n    Create a new sensor record.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.create(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"WeatherData\",\n        ...     sensor_name=\"TemperatureSensor\",\n        ...     sensor_data={\"temperature\": 22.5},\n        ...     experiment_name=\"ClimateExperiment\",\n        ...     site_name=\"SiteA\",\n        ...     season_name=\"Autumn\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     record_file=\"/path/to/record/file.txt\",\n        ...     record_info={\"notes\": \"Initial record\"},\n        ...     insert_on_create=True\n        ... )\n        &gt;&gt;&gt; print(sensor_record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        sensor_name (str, optional): The name of the sensor. Defaults to None.\n        sensor_data (dict, optional): The data content. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n        record_file (str, optional): The file path or URI. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n        insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n    Returns:\n        Optional[SensorRecord]: The created sensor record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, season_name, site_name]):\n            raise ValueError(\"At least one of experiment_name, season_name, or site_name must be provided.\")\n        if not sensor_name:\n            raise ValueError(\"Sensor name is required.\")\n        if not dataset_name:\n            raise ValueError(\"Dataset name is required.\")\n        if not all([plot_number, plot_row_number, plot_column_number]):\n            raise ValueError(\"Plot number, plot row number, and plot column number are required if a plot is specified.\")\n        if not timestamp:\n            timestamp = datetime.now()\n        if not collection_date:\n            collection_date = timestamp.date()\n        if not sensor_data and not record_file:\n            raise ValueError(\"Either sensor_data or record_file must be provided.\")\n        sensor_record = SensorRecord(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            sensor_name=sensor_name,\n            sensor_data=sensor_data,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            record_file=record_file,\n            record_info=record_info\n        )\n        if insert_on_create:\n            insert_success, inserted_record_ids = cls.insert([sensor_record])\n            if not insert_success:\n                print(\"Failed to insert SensorRecord.\")\n                return None\n            if not inserted_record_ids or len(inserted_record_ids) == 0:\n                print(\"No new SensorRecord was inserted.\")\n                return None\n            inserted_record_id = inserted_record_ids[0]\n            sensor_record = cls.get_by_id(inserted_record_id)\n        return sensor_record    \n    except Exception as e:\n        print(f\"Error creating sensor record: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.create_file_uri","title":"<code>create_file_uri(record)</code>  <code>classmethod</code>","text":"<p>Create a file URI for the given sensor record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = SensorRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"WeatherData\",\n...     sensor_name=\"TemperatureSensor\",\n...     experiment_name=\"ClimateExperiment\",\n...     site_name=\"SiteA\",\n...     season_name=\"Autumn\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     record_file=\"/path/to/record/file.txt\"\n... )\n&gt;&gt;&gt; file_uri = SensorRecord.create_file_uri(record)\n&gt;&gt;&gt; print(file_uri)\nsensor_data/ClimateExperiment/TemperatureSensor/WeatherData/2023-10-01/SiteA/Autumn/1706467200000.txt\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>SensorRecord</code> <p>The sensor record for which to create the file URI.</p> required <p>Returns:     Optional[str]: The file URI, or None if creation failed.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef create_file_uri(cls, record: \"SensorRecord\") -&gt; Optional[str]:\n    \"\"\"\n    Create a file URI for the given sensor record.\n\n    Examples:\n        &gt;&gt;&gt; record = SensorRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"WeatherData\",\n        ...     sensor_name=\"TemperatureSensor\",\n        ...     experiment_name=\"ClimateExperiment\",\n        ...     site_name=\"SiteA\",\n        ...     season_name=\"Autumn\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     record_file=\"/path/to/record/file.txt\"\n        ... )\n        &gt;&gt;&gt; file_uri = SensorRecord.create_file_uri(record)\n        &gt;&gt;&gt; print(file_uri)\n        sensor_data/ClimateExperiment/TemperatureSensor/WeatherData/2023-10-01/SiteA/Autumn/1706467200000.txt\n\n    Args:\n        record (SensorRecord): The sensor record for which to create the file URI.\n    Returns:\n        Optional[str]: The file URI, or None if creation failed.\n    \"\"\"\n    try:\n        original_file_path = record.record_file\n        if not original_file_path:\n            print(f\"record_file is required to create file URI.\")\n            return None\n        if not os.path.exists(original_file_path):\n            print(f\"File {original_file_path} does not exist.\")\n            return None\n        collection_date = record.collection_date.strftime(\"%Y-%m-%d\")\n        sensor_name = record.sensor_name\n        dataset_name = record.dataset_name\n        experiment_name = record.experiment_name\n        season_name = record.season_name\n        site_name = record.site_name\n        file_extension = os.path.splitext(original_file_path)[1]\n        file_timestamp = str(int(record.timestamp.timestamp() * 1000))\n        file_key = f\"sensor_data/{experiment_name}/{sensor_name}/{dataset_name}/{collection_date}/{site_name}/{season_name}/{file_timestamp}{file_extension}\"\n        return file_key\n    except Exception as e:\n        print(f\"Error creating file URI: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.delete","title":"<code>delete()</code>","text":"<p>Delete the sensor record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; success = sensor_record.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the sensor record was deleted, False otherwise.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the sensor record.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; success = sensor_record.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the sensor record was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_record = SensorRecordModel.get(current_id)\n        if not sensor_record:\n            print(f\"No sensor record found with ID: {current_id}\")\n            return False\n        SensorRecordModel.delete(sensor_record)\n        return True\n    except Exception as e:\n        print(f\"Error deleting sensor record: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.exists","title":"<code>exists(timestamp, sensor_name, dataset_name, experiment_name, season_name, site_name, plot_number=None, plot_row_number=None, plot_column_number=None)</code>  <code>classmethod</code>","text":"<p>Check if a sensor record with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorRecord.exists(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     sensor_name=\"TemperatureSensor\",\n...     dataset_name=\"WeatherData\",\n...     experiment_name=\"ClimateExperiment\",\n...     season_name=\"Autumn\",\n...     site_name=\"SiteA\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1\n... )\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if the sensor record exists, False otherwise.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    timestamp: datetime,\n    sensor_name: str,\n    dataset_name: str,\n    experiment_name: str,\n    season_name: str,\n    site_name: str,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None\n) -&gt; bool:\n    \"\"\"\n    Check if a sensor record with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; SensorRecord.exists(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     sensor_name=\"TemperatureSensor\",\n        ...     dataset_name=\"WeatherData\",\n        ...     experiment_name=\"ClimateExperiment\",\n        ...     season_name=\"Autumn\",\n        ...     site_name=\"SiteA\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1\n        ... )\n        True\n\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        sensor_name (str): The name of the sensor.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment.\n        season_name (str): The name of the season.\n        site_name (str): The name of the site.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n    Returns:\n        bool: True if the sensor record exists, False otherwise.\n    \"\"\"\n    try:\n        exists = SensorRecordModel.exists(\n            timestamp=timestamp,\n            sensor_name=sensor_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of sensor record: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.filter","title":"<code>filter(start_timestamp=None, end_timestamp=None, sensor_names=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>  <code>classmethod</code>","text":"<p>Filter sensor records based on custom logic.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_records = SensorRecord.filter(\n...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n...     sensor_names=[\"TemperatureSensor\", \"HumiditySensor\"],\n...     dataset_names=[\"WeatherData\"],\n...     experiment_names=[\"ClimateExperiment\"],\n...     site_names=[\"SiteA\", \"SiteB\"],\n...     season_names=[\"Autumn\"]\n... )\n&gt;&gt;&gt; for record in sensor_records:\n...     print(record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), sensor_name='HumiditySensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteB', season_name='Autumn', plot_number=2)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>datetime</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>sensor_names</code> <code>List[str]</code> <p>List of sensor names. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>List[str]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <p>Yields:     SensorRecord: Filtered sensor records.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef filter(\n    cls,\n    start_timestamp: datetime = None,\n    end_timestamp: datetime = None,\n    sensor_names: List[str] = None,\n    dataset_names: List[str] = None,\n    experiment_names: List[str] = None,\n    season_names: List[str] = None,\n    site_names: List[str] = None\n) -&gt; Generator[\"SensorRecord\", None, None]:\n    \"\"\"\n    Filter sensor records based on custom logic.\n\n    Examples:\n        &gt;&gt;&gt; sensor_records = SensorRecord.filter(\n        ...     start_timestamp=datetime(2023, 10, 1, 0, 0, 0),\n        ...     end_timestamp=datetime(2023, 10, 31, 23, 59, 59),\n        ...     sensor_names=[\"TemperatureSensor\", \"HumiditySensor\"],\n        ...     dataset_names=[\"WeatherData\"],\n        ...     experiment_names=[\"ClimateExperiment\"],\n        ...     site_names=[\"SiteA\", \"SiteB\"],\n        ...     season_names=[\"Autumn\"]\n        ... )\n        &gt;&gt;&gt; for record in sensor_records:\n        ...     print(record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), sensor_name='HumiditySensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteB', season_name='Autumn', plot_number=2)\n\n    Args:\n        start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n        end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n        sensor_names (List[str], optional): List of sensor names. Defaults to None.\n        dataset_names (List[str], optional): List of dataset names. Defaults to None.\n        experiment_names (List[str], optional): List of experiment names. Defaults to None.\n        season_names (List[str], optional): List of season names. Defaults to None.\n        site_names (List[str], optional): List of site names. Defaults to None.\n    Yields:\n        SensorRecord: Filtered sensor records.\n    \"\"\"\n    try:\n        records = SensorRecordModel.filter_records(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            sensor_names=sensor_names,\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            site_names=site_names,\n            season_names=season_names\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error filtering sensor records: {e}\")\n        yield from []\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.get","title":"<code>get(timestamp, sensor_name, dataset_name, experiment_name=None, site_name=None, season_name=None, plot_number=None, plot_row_number=None, plot_column_number=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor record by its parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.get(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     sensor_name=\"TemperatureSensor\",\n...     dataset_name=\"WeatherData\",\n...     experiment_name=\"ClimateExperiment\",\n...     site_name=\"SiteA\",\n...     season_name=\"Autumn\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1\n... )\n&gt;&gt;&gt; print(sensor_record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[SensorRecord]: The sensor record, or None if not found.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    timestamp: datetime,\n    sensor_name: str,\n    dataset_name: str,\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None\n) -&gt; Optional[\"SensorRecord\"]:\n    \"\"\"\n    Retrieve a sensor record by its parameters.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.get(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     sensor_name=\"TemperatureSensor\",\n        ...     dataset_name=\"WeatherData\",\n        ...     experiment_name=\"ClimateExperiment\",\n        ...     site_name=\"SiteA\",\n        ...     season_name=\"Autumn\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1\n        ... )\n        &gt;&gt;&gt; print(sensor_record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        sensor_name (str): The name of the sensor.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n    Returns:\n        Optional[SensorRecord]: The sensor record, or None if not found.\n    \"\"\"\n    try:\n        if not timestamp:\n            print(\"Timestamp is required to get a sensor record.\")\n            return None\n        if not dataset_name:\n            print(\"Dataset name is required to get a sensor record.\")\n            return None\n        if not sensor_name:\n            print(\"Sensor name is required to get a sensor record.\")\n            return None\n        if not experiment_name and not site_name and not season_name:\n            print(\"At least one of experiment_name, site_name, or season_name is required to get a sensor record.\")\n            return None\n        if not all([plot_number, plot_row_number, plot_column_number]):\n            print(\"Plot number, plot row number, and plot column number are required if a plot is specified.\")\n            return None\n        sensor_record = SensorRecordsIMMVModel.get_by_parameters(\n            timestamp=timestamp,\n            sensor_name=sensor_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number\n        )\n        if not sensor_record:\n            print(\"No sensor record found with the provided parameters.\")\n            return None\n        sensor_record = cls.model_validate(sensor_record)\n        return sensor_record\n    except Exception as e:\n        print(f\"Error getting sensor record: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.get_all","title":"<code>get_all(limit=100)</code>  <code>classmethod</code>","text":"<p>Retrieve all sensor records, up to a specified limit.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_records = SensorRecord.get_all(limit=10)\n&gt;&gt;&gt; for record in sensor_records:\n...     print(record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='HumiditySensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteB', season_name='Winter', plot_number=2)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The maximum number of records to retrieve. Defaults to 100.</p> <code>100</code> <p>Returns:     Optional[List[SensorRecord]]: List of sensor records, or None if not found.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef get_all(cls, limit: int = 100) -&gt; Optional[List[\"SensorRecord\"]]:\n    \"\"\"\n    Retrieve all sensor records, up to a specified limit.\n\n    Examples:\n        &gt;&gt;&gt; sensor_records = SensorRecord.get_all(limit=10)\n        &gt;&gt;&gt; for record in sensor_records:\n        ...     print(record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='HumiditySensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteB', season_name='Winter', plot_number=2)\n\n    Args:\n        limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n    Returns:\n        Optional[List[SensorRecord]]: List of sensor records, or None if not found.\n    \"\"\"\n    try:\n        records = SensorRecordModel.all(limit=limit)\n        if not records or len(records) == 0:\n            print(\"No sensor records found.\")\n            return None\n        records = [cls.model_validate(record) for record in records]\n        return records\n    except Exception as e:\n        print(f\"Error getting all sensor records: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor record by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(sensor_record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the sensor record.</p> required <p>Returns:     Optional[SensorRecord]: The sensor record, or None if not found.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"SensorRecord\"]:\n    \"\"\"\n    Retrieve a sensor record by its ID.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(sensor_record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n    Args:\n        id (UUID | int | str): The ID of the sensor record.\n    Returns:\n        Optional[SensorRecord]: The sensor record, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SensorRecordModel.get(id)\n        if not db_instance:\n            print(f\"No sensor record found with ID: {id}\")\n            return None\n        record = cls.model_validate(db_instance)\n        return record\n    except Exception as e:\n        print(f\"Error getting sensor record by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the sensor record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; record_info = sensor_record.get_info()\n&gt;&gt;&gt; print(record_info)\n{'notes': 'Initial record', 'created_by': 'user123'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The record's info, or None if not found.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the sensor record.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; record_info = sensor_record.get_info()\n        &gt;&gt;&gt; print(record_info)\n        {'notes': 'Initial record', 'created_by': 'user123'}\n\n    Returns:\n        Optional[dict]: The record's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_record = SensorRecordModel.get(current_id)\n        if not sensor_record:\n            print(f\"No sensor record found with ID: {current_id}\")\n            return None\n        record_info = sensor_record.record_info\n        if not record_info:\n            print(\"No record info available for this sensor record.\")\n            return None\n        return record_info\n    except Exception as e:\n        print(f\"Error getting sensor record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.insert","title":"<code>insert(records)</code>  <code>classmethod</code>","text":"<p>Insert a list of sensor records into the database.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[SensorRecord]</code> <p>The records to insert.</p> required <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef insert(cls, records: List[\"SensorRecord\"]) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a list of sensor records into the database.\n\n    Args:\n        records (List[SensorRecord]): The records to insert.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not records or len(records) == 0:\n            raise ValueError(\"No records provided for insertion.\")\n            return False, []\n        records = [cls.process_record(record) for record in tqdm(records, desc=\"Processing Records for Sensor: \" + records[0].sensor_name)]\n        records_to_insert = []\n        for record in records:\n            record_to_insert = record.model_dump()\n            record_to_insert = {k: v for k, v in record_to_insert.items() if v is not None}\n            records_to_insert.append(record_to_insert)\n        print(f\"Inserting {len(records_to_insert)} records.\")\n        inserted_record_ids = SensorRecordModel.insert_bulk('sensor_records_unique', records_to_insert)\n        print(f\"Inserted {len(inserted_record_ids)} records.\")\n        return True, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting records: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.process_record","title":"<code>process_record(record)</code>  <code>classmethod</code>","text":"<p>Process a sensor record (custom logic, e.g., file upload).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; record = SensorRecord(\n...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"WeatherData\",\n...     sensor_name=\"TemperatureSensor\",\n...     experiment_name=\"ClimateExperiment\",\n...     site_name=\"SiteA\",\n...     season_name=\"Autumn\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     record_file=\"/path/to/record/file.txt\"\n... )\n&gt;&gt;&gt; processed_record = SensorRecord.process_record(record)\n&gt;&gt;&gt; print(processed_record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>SensorRecord</code> <p>The sensor record to process.</p> required <p>Returns:     SensorRecord: The processed sensor record.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef process_record(cls, record: \"SensorRecord\") -&gt; \"SensorRecord\":\n    \"\"\"\n    Process a sensor record (custom logic, e.g., file upload).\n\n    Examples:\n        &gt;&gt;&gt; record = SensorRecord(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"WeatherData\",\n        ...     sensor_name=\"TemperatureSensor\",\n        ...     experiment_name=\"ClimateExperiment\",\n        ...     site_name=\"SiteA\",\n        ...     season_name=\"Autumn\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     record_file=\"/path/to/record/file.txt\"\n        ... )\n        &gt;&gt;&gt; processed_record = SensorRecord.process_record(record)\n        &gt;&gt;&gt; print(processed_record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n    Args:\n        record (SensorRecord): The sensor record to process.\n    Returns:\n        SensorRecord: The processed sensor record.\n    \"\"\"\n    try:\n        file = record.record_file\n        if not file:\n            print(f\"record_file is required to process SensorRecord.\")\n            return record\n        file_key = cls.create_file_uri(record)\n        if not file_key:\n            print(f\"Failed to create file URI for SensorRecord: {record}\")\n            return record\n        content_type, _ = mimetypes.guess_type(file)\n        # Generate Metadata for upload\n        file_metadata = {\n            \"Sensor-Name\": record.sensor_name,\n            \"Dataset-Name\": record.dataset_name,\n            \"Experiment-Name\": record.experiment_name,\n            \"Site-Name\": record.site_name,\n            \"Season-Name\": record.season_name,\n            \"Collection-Date\": record.collection_date.isoformat() if record.collection_date else None,\n            \"Timestamp\": record.timestamp.isoformat() if record.timestamp else None,\n        }\n        cls.minio_storage_provider.upload_file(\n            object_name=file_key,\n            input_file_path=file,\n            bucket_name=\"gemini\",\n            content_type=content_type,\n            metadata=file_metadata\n        )\n        record.record_file = file_key\n        return record\n    except Exception as e:\n        print(f\"Error processing SensorRecord: {e}\")\n        return record\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the sensor record's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_record = sensor_record.refresh()\n&gt;&gt;&gt; print(refreshed_record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[SensorRecord]</code> <p>Optional[SensorRecord]: The refreshed sensor record, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>def refresh(self) -&gt; Optional[\"SensorRecord\"]:\n    \"\"\"\n    Refresh the sensor record's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_record = sensor_record.refresh()\n        &gt;&gt;&gt; print(refreshed_record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n    Returns:\n        Optional[SensorRecord]: The refreshed sensor record, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SensorRecordModel.get(self.id)\n        if not db_instance:\n            print(f\"SensorRecord with id {self.id} not found.\")\n            return None\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing SensorRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.search","title":"<code>search(sensor_name=None, sensor_data=None, dataset_name=None, experiment_name=None, site_name=None, season_name=None, plot_number=None, plot_row_number=None, plot_column_number=None, collection_date=None, record_info=None)</code>  <code>classmethod</code>","text":"<p>Search for sensor records based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_records = SensorRecord.search(\n...     sensor_name=\"TemperatureSensor\",\n...     dataset_name=\"WeatherData\",\n...     experiment_name=\"ClimateExperiment\",\n...     site_name=\"SiteA\",\n...     season_name=\"Autumn\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     collection_date=date(2023, 10, 1),\n...     record_info={\"notes\": \"Initial record\"}\n... )\n&gt;&gt;&gt; for record in sensor_records:\n...     print(record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor. Defaults to None.</p> <code>None</code> <code>sensor_data</code> <code>dict</code> <p>The data content. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Yields:     SensorRecord: Matching sensor records.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    sensor_name: str = None,\n    sensor_data: dict = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    collection_date: date = None,\n    record_info: dict = None\n) -&gt; Generator[\"SensorRecord\", None, None]:\n    \"\"\"\n    Search for sensor records based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; sensor_records = SensorRecord.search(\n        ...     sensor_name=\"TemperatureSensor\",\n        ...     dataset_name=\"WeatherData\",\n        ...     experiment_name=\"ClimateExperiment\",\n        ...     site_name=\"SiteA\",\n        ...     season_name=\"Autumn\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     collection_date=date(2023, 10, 1),\n        ...     record_info={\"notes\": \"Initial record\"}\n        ... )\n        &gt;&gt;&gt; for record in sensor_records:\n        ...     print(record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n    Args:\n        sensor_name (str, optional): The name of the sensor. Defaults to None.\n        sensor_data (dict, optional): The data content. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Yields:\n        SensorRecord: Matching sensor records.\n    \"\"\"\n    try:\n        if not any([sensor_name, dataset_name, experiment_name, site_name, season_name, plot_number, plot_row_number, plot_column_number]):\n            print(\"At least one search parameter must be provided.\")\n            return\n        records = SensorRecordsIMMVModel.stream(\n            sensor_name=sensor_name,\n            sensor_data=sensor_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            collection_date=collection_date,\n            record_info=record_info\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error searching sensor records: {e}\")\n        yield from []\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.set_info","title":"<code>set_info(record_info)</code>","text":"<p>Set the additional information of the sensor record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = sensor_record.set_info(\n...     record_info={\"notes\": \"Updated record\", \"created_by\": \"user123\"}\n... )\n&gt;&gt;&gt; print(updated_record.get_info())\n{'notes': 'Updated record', 'created_by': 'user123'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[SensorRecord]: The updated sensor record, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>def set_info(self, record_info: dict) -&gt; Optional[\"SensorRecord\"]:\n    \"\"\"\n    Set the additional information of the sensor record.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = sensor_record.set_info(\n        ...     record_info={\"notes\": \"Updated record\", \"created_by\": \"user123\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record.get_info())\n        {'notes': 'Updated record', 'created_by': 'user123'}\n\n    Args:\n        record_info (dict): The new information to set.\n    Returns:\n        Optional[SensorRecord]: The updated sensor record, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_record = SensorRecordModel.get(current_id)\n        if not sensor_record:\n            print(f\"No sensor record found with ID: {current_id}\")\n            return None\n        SensorRecordModel.update(\n            sensor_record,\n            record_info=record_info\n        )\n        sensor_record = self.model_validate(sensor_record)\n        self.refresh()\n        return sensor_record\n    except Exception as e:\n        print(f\"Error setting sensor record info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_records/#gemini.api.sensor_record.SensorRecord.update","title":"<code>update(sensor_data=None, record_info=None)</code>","text":"<p>Update the details of the sensor record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = sensor_record.update(\n...     sensor_data={\"temperature\": 23.0},\n...     record_info={\"notes\": \"Updated record\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nSensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_data</code> <code>dict</code> <p>The new sensor data. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>The new record information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[SensorRecord]: The updated sensor record, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_record.py</code> <pre><code>def update(\n    self,\n    sensor_data: dict = None,\n    record_info: dict = None\n) -&gt; Optional[\"SensorRecord\"]:\n    \"\"\"\n    Update the details of the sensor record.\n\n    Examples:\n        &gt;&gt;&gt; sensor_record = SensorRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = sensor_record.update(\n        ...     sensor_data={\"temperature\": 23.0},\n        ...     record_info={\"notes\": \"Updated record\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        SensorRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), sensor_name='TemperatureSensor', dataset_name='WeatherData', experiment_name='ClimateExperiment', site_name='SiteA', season_name='Autumn', plot_number=1)\n\n    Args:\n        sensor_data (dict, optional): The new sensor data. Defaults to None.\n        record_info (dict, optional): The new record information. Defaults to None.\n    Returns:\n        Optional[SensorRecord]: The updated sensor record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([sensor_data, record_info]):\n            print(\"At least one update parameter must be provided.\")\n            return None\n        current_id = self.id\n        sensor_record = SensorRecordModel.get(current_id)\n        if not sensor_record:\n            print(f\"No sensor record found with ID: {current_id}\")\n            return None\n        sensor_record = SensorRecordModel.update(\n            sensor_record,\n            sensor_data=sensor_data,\n            record_info=record_info\n        )\n        sensor_record = self.model_validate(sensor_record)\n        self.refresh()\n        return sensor_record\n    except Exception as e:\n        print(f\"Error updating sensor record: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/","title":"Sensor Types API","text":""},{"location":"api/sensor_types/#description","title":"Description","text":"<p>A sensor type defines the type of a specific Sensor.</p> <p>The following sensor types are pre-defined, along with their <code>sensor_type_id</code>:</p> Sensor Type sensor_type_id Default 0 RGB 1 NIR 2 Thermal 3 Multispectral 4 Weather 5 GPS 6 Calibration 7 Depth 8 IMU 9 Disparity 10 Confidence 11"},{"location":"api/sensor_types/#module","title":"Module","text":"<p>This module defines the SensorType class, which represents a type or category for sensors.</p> <p>It includes methods for creating, retrieving, updating, and deleting sensor types, as well as methods for checking existence, searching, and managing additional information.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a sensor type with the given name exists.</li> <li><code>create</code>: Create a new sensor type.</li> <li><code>get</code>: Retrieve a sensor type by its name.</li> <li><code>get_by_id</code>: Retrieve a sensor type by its ID.</li> <li><code>get_all</code>: Retrieve all sensor types.</li> <li><code>search</code>: Search for sensor types based on various criteria.</li> <li><code>update</code>: Update the details of a sensor type.</li> <li><code>delete</code>: Delete a sensor type.</li> <li><code>refresh</code>: Refresh the sensor type's data from the database.</li> <li><code>get_info</code>: Get the additional information of the sensor type.</li> <li><code>set_info</code>: Set the additional information of the sensor type.</li> </ul>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType","title":"<code>SensorType</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a type or category for sensors.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the sensor type.</p> <code>sensor_type_name</code> <code>str</code> <p>The name of the sensor type.</p> <code>sensor_type_info</code> <code>Optional[dict]</code> <p>Additional information about the sensor type.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>class SensorType(APIBase):\n    \"\"\"\n    Represents a type or category for sensors.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the sensor type.\n        sensor_type_name (str): The name of the sensor type.\n        sensor_type_info (Optional[dict]): Additional information about the sensor type.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"sensor_type_id\"))\n\n    sensor_type_name: str\n    sensor_type_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the SensorType object.\"\"\"\n        return f\"SensorType(sensor_type_name={self.sensor_type_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the SensorType object.\"\"\"\n        return f\"SensorType(sensor_type_name={self.sensor_type_name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        sensor_type_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a sensor type with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; SensorType.exists(\"TemperatureSensor\")\n            True\n            &gt;&gt;&gt; SensorType.exists(\"NonExistentSensor\")\n            False\n\n        Args:\n            sensor_type_name (str): The name of the sensor type.\n        Returns:\n            bool: True if the sensor type exists, False otherwise.\n        \"\"\"\n        try:\n            exists = SensorTypeModel.exists(sensor_type_name=sensor_type_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of sensor type: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        sensor_type_name: str,\n        sensor_type_info: dict = {},\n    ) -&gt; Optional[\"SensorType\"]:\n        \"\"\"\n        Create a new sensor type.\n\n        Examples:\n            &gt;&gt;&gt; SensorType.create(\"TemperatureSensor\", {\"unit\": \"Celsius\"})\n            SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n        Args:\n            sensor_type_name (str): The name of the sensor type.\n            sensor_type_info (dict, optional): Additional information about the sensor type. Defaults to {{}}.\n        Returns:\n            Optional[SensorType]: The created sensor type, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SensorTypeModel.get_or_create(\n                sensor_type_name=sensor_type_name,\n                sensor_type_info=sensor_type_info,\n            )\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error creating sensor type: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, sensor_type_name: str) -&gt; Optional[\"SensorType\"]:\n        \"\"\"\n        Retrieve a sensor type by its name.\n\n        Examples:\n            &gt;&gt;&gt; SensorType.get(\"TemperatureSensor\")\n            SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n        Args:\n            sensor_type_name (str): The name of the sensor type.\n        Returns:\n            Optional[SensorType]: The sensor type, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SensorTypeModel.get_by_parameters(sensor_type_name=sensor_type_name)\n            if not db_instance:\n                print(f\"Sensor type with name {sensor_type_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting sensor type: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"SensorType\"]:\n        \"\"\"\n        Retrieve a sensor type by its ID.\n\n        Examples:\n            &gt;&gt;&gt; SensorType.get_by_id(UUID('...'))\n            SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the sensor type.\n        Returns:\n            Optional[SensorType]: The sensor type, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SensorTypeModel.get(id)\n            if not db_instance:\n                print(f\"Sensor type with ID {id} does not exist.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting sensor type by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"SensorType\"]]:\n        \"\"\"\n        Retrieve all sensor types.\n\n        Examples:\n            &gt;&gt;&gt; SensorType.get_all()\n            [SensorType(sensor_type_name='TemperatureSensor', id=UUID(...)), ...]\n\n        Returns:\n            Optional[List[SensorType]]: List of all sensor types, or None if not found.\n        \"\"\"\n        try:\n            instances = SensorTypeModel.all()\n            if not instances or len(instances) == 0:\n                print(\"No sensor types found.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error getting all sensor types: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        sensor_type_name: str = None,\n        sensor_type_info: dict = None\n    ) -&gt; Optional[List[\"SensorType\"]]:\n        \"\"\"\n        Search for sensor types based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; SensorType.search(sensor_type_name=\"TemperatureSensor\")\n            [SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))]\n\n        Args:\n            sensor_type_name (str, optional): The name of the sensor type. Defaults to None.\n            sensor_type_info (dict, optional): Additional information. Defaults to None.\n        Returns:\n            Optional[List[SensorType]]: List of matching sensor types, or None if not found.\n        \"\"\"\n        try:\n            if not any([sensor_type_name, sensor_type_info]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n\n            instances = SensorTypeModel.search(\n                sensor_type_name=sensor_type_name,\n                sensor_type_info=sensor_type_info\n            )\n            if not instances or len(instances) == 0:\n                print(\"No sensor types found with the provided search parameters.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error searching sensor types: {e}\")\n            return None\n\n    def update(\n        self,\n        sensor_type_name: str = None,\n        sensor_type_info: dict = None,\n    ) -&gt; Optional[\"SensorType\"]:\n        \"\"\"\n        Update the details of the sensor type.\n\n        Examples:\n            &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n            &gt;&gt;&gt; sensor_type.update(sensor_type_name=\"NewTemperatureSensor\")\n            SensorType(sensor_type_name='NewTemperatureSensor', id=UUID(...))\n\n        Args:\n            sensor_type_name (str, optional): The new name. Defaults to None.\n            sensor_type_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[SensorType]: The updated sensor type, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([sensor_type_name, sensor_type_info]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n\n            current_id = self.id\n            sensor_type = SensorTypeModel.get(current_id)\n            if not sensor_type:\n                print(f\"Sensor type with ID {current_id} does not exist.\")\n                return None\n\n            sensor_type = SensorTypeModel.update(\n                sensor_type,\n                sensor_type_name=sensor_type_name,\n                sensor_type_info=sensor_type_info\n            )\n            instance = self.model_validate(sensor_type)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error updating sensor type: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the sensor type.\n\n        Examples:\n            &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n            &gt;&gt;&gt; sensor_type.delete()\n            True\n\n        Returns:\n            bool: True if the sensor type was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_type = SensorTypeModel.get(current_id)\n            if not sensor_type:\n                print(f\"Sensor type with ID {current_id} does not exist.\")\n                return False\n            SensorTypeModel.delete(sensor_type)\n            return True\n        except Exception as e:\n            print(f\"Error deleting sensor type: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"SensorType\"]:\n        \"\"\"\n        Refresh the sensor type's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n            &gt;&gt;&gt; sensor_type.refresh()\n            SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n        Returns:\n            Optional[SensorType]: The refreshed sensor type, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SensorTypeModel.get(self.id)\n            if not db_instance:\n                print(f\"Sensor type with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing sensor type: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the sensor type.\n\n        Examples:\n            &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n            &gt;&gt;&gt; sensor_type.get_info()\n            {'unit': 'Celsius'}\n\n        Returns:\n            Optional[dict]: The sensor type's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_type = SensorTypeModel.get(current_id)\n            if not sensor_type:\n                print(f\"Sensor type with ID {current_id} does not exist.\")\n                return None\n            sensor_type_info = sensor_type.sensor_type_info\n            if not sensor_type_info:\n                print(\"SensorType info is empty.\")\n                return None\n            return sensor_type_info\n        except Exception as e:\n            print(f\"Error getting sensor type info: {e}\")\n            return None\n\n    def set_info(self, sensor_type_info: dict) -&gt; Optional[\"SensorType\"]:\n        \"\"\"\n        Set the additional information of the sensor type.\n\n        Examples:\n            &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n            &gt;&gt;&gt; sensor_type.set_info({\"unit\": \"Celsius\"})\n            &gt;&gt;&gt; sensor_type.get_info()\n            {'unit': 'Celsius'}\n\n        Args:\n            sensor_type_info (dict): The new information to set.\n        Returns:\n            Optional[SensorType]: The updated sensor type, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor_type = SensorTypeModel.get(current_id)\n            if not sensor_type:\n                print(f\"Sensor type with ID {current_id} does not exist.\")\n                return None\n            sensor_type = SensorTypeModel.update(\n                sensor_type,\n                sensor_type_info=sensor_type_info,\n            )\n            instance = self.model_validate(sensor_type)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error setting sensor type info: {e}\")\n            return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the SensorType object.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the SensorType object.\"\"\"\n    return f\"SensorType(sensor_type_name={self.sensor_type_name}, id={self.id})\"\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the SensorType object.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the SensorType object.\"\"\"\n    return f\"SensorType(sensor_type_name={self.sensor_type_name}, id={self.id})\"\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.create","title":"<code>create(sensor_type_name, sensor_type_info={})</code>  <code>classmethod</code>","text":"<p>Create a new sensor type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorType.create(\"TemperatureSensor\", {\"unit\": \"Celsius\"})\nSensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_type_name</code> <code>str</code> <p>The name of the sensor type.</p> required <code>sensor_type_info</code> <code>dict</code> <p>Additional information about the sensor type. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[SensorType]: The created sensor type, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    sensor_type_name: str,\n    sensor_type_info: dict = {},\n) -&gt; Optional[\"SensorType\"]:\n    \"\"\"\n    Create a new sensor type.\n\n    Examples:\n        &gt;&gt;&gt; SensorType.create(\"TemperatureSensor\", {\"unit\": \"Celsius\"})\n        SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n    Args:\n        sensor_type_name (str): The name of the sensor type.\n        sensor_type_info (dict, optional): Additional information about the sensor type. Defaults to {{}}.\n    Returns:\n        Optional[SensorType]: The created sensor type, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SensorTypeModel.get_or_create(\n            sensor_type_name=sensor_type_name,\n            sensor_type_info=sensor_type_info,\n        )\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error creating sensor type: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.delete","title":"<code>delete()</code>","text":"<p>Delete the sensor type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n&gt;&gt;&gt; sensor_type.delete()\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the sensor type was deleted, False otherwise.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the sensor type.\n\n    Examples:\n        &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n        &gt;&gt;&gt; sensor_type.delete()\n        True\n\n    Returns:\n        bool: True if the sensor type was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_type = SensorTypeModel.get(current_id)\n        if not sensor_type:\n            print(f\"Sensor type with ID {current_id} does not exist.\")\n            return False\n        SensorTypeModel.delete(sensor_type)\n        return True\n    except Exception as e:\n        print(f\"Error deleting sensor type: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.exists","title":"<code>exists(sensor_type_name)</code>  <code>classmethod</code>","text":"<p>Check if a sensor type with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorType.exists(\"TemperatureSensor\")\nTrue\n&gt;&gt;&gt; SensorType.exists(\"NonExistentSensor\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_type_name</code> <code>str</code> <p>The name of the sensor type.</p> required <p>Returns:     bool: True if the sensor type exists, False otherwise.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    sensor_type_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a sensor type with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; SensorType.exists(\"TemperatureSensor\")\n        True\n        &gt;&gt;&gt; SensorType.exists(\"NonExistentSensor\")\n        False\n\n    Args:\n        sensor_type_name (str): The name of the sensor type.\n    Returns:\n        bool: True if the sensor type exists, False otherwise.\n    \"\"\"\n    try:\n        exists = SensorTypeModel.exists(sensor_type_name=sensor_type_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of sensor type: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.get","title":"<code>get(sensor_type_name)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor type by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorType.get(\"TemperatureSensor\")\nSensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_type_name</code> <code>str</code> <p>The name of the sensor type.</p> required <p>Returns:     Optional[SensorType]: The sensor type, or None if not found.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>@classmethod\ndef get(cls, sensor_type_name: str) -&gt; Optional[\"SensorType\"]:\n    \"\"\"\n    Retrieve a sensor type by its name.\n\n    Examples:\n        &gt;&gt;&gt; SensorType.get(\"TemperatureSensor\")\n        SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n    Args:\n        sensor_type_name (str): The name of the sensor type.\n    Returns:\n        Optional[SensorType]: The sensor type, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SensorTypeModel.get_by_parameters(sensor_type_name=sensor_type_name)\n        if not db_instance:\n            print(f\"Sensor type with name {sensor_type_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting sensor type: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all sensor types.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorType.get_all()\n[SensorType(sensor_type_name='TemperatureSensor', id=UUID(...)), ...]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[SensorType]]</code> <p>Optional[List[SensorType]]: List of all sensor types, or None if not found.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"SensorType\"]]:\n    \"\"\"\n    Retrieve all sensor types.\n\n    Examples:\n        &gt;&gt;&gt; SensorType.get_all()\n        [SensorType(sensor_type_name='TemperatureSensor', id=UUID(...)), ...]\n\n    Returns:\n        Optional[List[SensorType]]: List of all sensor types, or None if not found.\n    \"\"\"\n    try:\n        instances = SensorTypeModel.all()\n        if not instances or len(instances) == 0:\n            print(\"No sensor types found.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error getting all sensor types: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor type by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorType.get_by_id(UUID('...'))\nSensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the sensor type.</p> required <p>Returns:     Optional[SensorType]: The sensor type, or None if not found.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"SensorType\"]:\n    \"\"\"\n    Retrieve a sensor type by its ID.\n\n    Examples:\n        &gt;&gt;&gt; SensorType.get_by_id(UUID('...'))\n        SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the sensor type.\n    Returns:\n        Optional[SensorType]: The sensor type, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SensorTypeModel.get(id)\n        if not db_instance:\n            print(f\"Sensor type with ID {id} does not exist.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting sensor type by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the sensor type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n&gt;&gt;&gt; sensor_type.get_info()\n{'unit': 'Celsius'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The sensor type's info, or None if not found.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the sensor type.\n\n    Examples:\n        &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n        &gt;&gt;&gt; sensor_type.get_info()\n        {'unit': 'Celsius'}\n\n    Returns:\n        Optional[dict]: The sensor type's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_type = SensorTypeModel.get(current_id)\n        if not sensor_type:\n            print(f\"Sensor type with ID {current_id} does not exist.\")\n            return None\n        sensor_type_info = sensor_type.sensor_type_info\n        if not sensor_type_info:\n            print(\"SensorType info is empty.\")\n            return None\n        return sensor_type_info\n    except Exception as e:\n        print(f\"Error getting sensor type info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the sensor type's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n&gt;&gt;&gt; sensor_type.refresh()\nSensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[SensorType]</code> <p>Optional[SensorType]: The refreshed sensor type, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>def refresh(self) -&gt; Optional[\"SensorType\"]:\n    \"\"\"\n    Refresh the sensor type's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n        &gt;&gt;&gt; sensor_type.refresh()\n        SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))\n\n    Returns:\n        Optional[SensorType]: The refreshed sensor type, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SensorTypeModel.get(self.id)\n        if not db_instance:\n            print(f\"Sensor type with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing sensor type: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.search","title":"<code>search(sensor_type_name=None, sensor_type_info=None)</code>  <code>classmethod</code>","text":"<p>Search for sensor types based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; SensorType.search(sensor_type_name=\"TemperatureSensor\")\n[SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_type_name</code> <code>str</code> <p>The name of the sensor type. Defaults to None.</p> <code>None</code> <code>sensor_type_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[SensorType]]: List of matching sensor types, or None if not found.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    sensor_type_name: str = None,\n    sensor_type_info: dict = None\n) -&gt; Optional[List[\"SensorType\"]]:\n    \"\"\"\n    Search for sensor types based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; SensorType.search(sensor_type_name=\"TemperatureSensor\")\n        [SensorType(sensor_type_name='TemperatureSensor', id=UUID(...))]\n\n    Args:\n        sensor_type_name (str, optional): The name of the sensor type. Defaults to None.\n        sensor_type_info (dict, optional): Additional information. Defaults to None.\n    Returns:\n        Optional[List[SensorType]]: List of matching sensor types, or None if not found.\n    \"\"\"\n    try:\n        if not any([sensor_type_name, sensor_type_info]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n\n        instances = SensorTypeModel.search(\n            sensor_type_name=sensor_type_name,\n            sensor_type_info=sensor_type_info\n        )\n        if not instances or len(instances) == 0:\n            print(\"No sensor types found with the provided search parameters.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error searching sensor types: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.set_info","title":"<code>set_info(sensor_type_info)</code>","text":"<p>Set the additional information of the sensor type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n&gt;&gt;&gt; sensor_type.set_info({\"unit\": \"Celsius\"})\n&gt;&gt;&gt; sensor_type.get_info()\n{'unit': 'Celsius'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_type_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[SensorType]: The updated sensor type, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>def set_info(self, sensor_type_info: dict) -&gt; Optional[\"SensorType\"]:\n    \"\"\"\n    Set the additional information of the sensor type.\n\n    Examples:\n        &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n        &gt;&gt;&gt; sensor_type.set_info({\"unit\": \"Celsius\"})\n        &gt;&gt;&gt; sensor_type.get_info()\n        {'unit': 'Celsius'}\n\n    Args:\n        sensor_type_info (dict): The new information to set.\n    Returns:\n        Optional[SensorType]: The updated sensor type, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor_type = SensorTypeModel.get(current_id)\n        if not sensor_type:\n            print(f\"Sensor type with ID {current_id} does not exist.\")\n            return None\n        sensor_type = SensorTypeModel.update(\n            sensor_type,\n            sensor_type_info=sensor_type_info,\n        )\n        instance = self.model_validate(sensor_type)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error setting sensor type info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensor_types/#gemini.api.sensor_type.SensorType.update","title":"<code>update(sensor_type_name=None, sensor_type_info=None)</code>","text":"<p>Update the details of the sensor type.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n&gt;&gt;&gt; sensor_type.update(sensor_type_name=\"NewTemperatureSensor\")\nSensorType(sensor_type_name='NewTemperatureSensor', id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_type_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>sensor_type_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[SensorType]: The updated sensor type, or None if an error occurred.</p> Source code in <code>gemini/api/sensor_type.py</code> <pre><code>def update(\n    self,\n    sensor_type_name: str = None,\n    sensor_type_info: dict = None,\n) -&gt; Optional[\"SensorType\"]:\n    \"\"\"\n    Update the details of the sensor type.\n\n    Examples:\n        &gt;&gt;&gt; sensor_type = SensorType.get(\"TemperatureSensor\")\n        &gt;&gt;&gt; sensor_type.update(sensor_type_name=\"NewTemperatureSensor\")\n        SensorType(sensor_type_name='NewTemperatureSensor', id=UUID(...))\n\n    Args:\n        sensor_type_name (str, optional): The new name. Defaults to None.\n        sensor_type_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[SensorType]: The updated sensor type, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([sensor_type_name, sensor_type_info]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n\n        current_id = self.id\n        sensor_type = SensorTypeModel.get(current_id)\n        if not sensor_type:\n            print(f\"Sensor type with ID {current_id} does not exist.\")\n            return None\n\n        sensor_type = SensorTypeModel.update(\n            sensor_type,\n            sensor_type_name=sensor_type_name,\n            sensor_type_info=sensor_type_info\n        )\n        instance = self.model_validate(sensor_type)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error updating sensor type: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/","title":"Sensor API","text":""},{"location":"api/sensors/#description","title":"Description","text":"<p>A sensor is a device, apparatus, or data collection agent (human or otherwise) that collects data in the form of Sensor Records. Sensors can be part of a Sensor Platform alongside other related sensors and can be associated with multiple Experiments.</p>"},{"location":"api/sensors/#module","title":"Module","text":"<p>This module defines the Sensor class, which represents a sensor entity, including its metadata, associations to sensor platforms, experiments, datasets, and records, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting sensors, as well as methods for checking existence, searching, and managing associations with related entities and records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a sensor with the given name exists.</li> <li><code>create</code>: Create a new sensor.</li> <li><code>get</code>: Retrieve a sensor by its name and experiment.</li> <li><code>get_by_id</code>: Retrieve a sensor by its ID.</li> <li><code>get_all</code>: Retrieve all sensors.</li> <li><code>search</code>: Search for sensors based on various criteria.</li> <li><code>update</code>: Update the details of a sensor.</li> <li><code>delete</code>: Delete a sensor.</li> <li><code>refresh</code>: Refresh the sensor's data from the database.</li> <li><code>get_info</code>: Get the additional information of the sensor.</li> <li><code>set_info</code>: Set the additional information of the sensor.</li> <li>Association methods for sensor platforms, experiments, datasets, and records.</li> </ul>"},{"location":"api/sensors/#gemini.api.sensor.Sensor","title":"<code>Sensor</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a sensor entity, including its metadata, associations to sensor platforms, experiments, datasets, and records, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the sensor.</p> <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> <code>sensor_type_id</code> <code>int</code> <p>The ID of the sensor type.</p> <code>sensor_data_type_id</code> <code>int</code> <p>The ID of the sensor data type.</p> <code>sensor_data_format_id</code> <code>int</code> <p>The ID of the sensor data format.</p> <code>sensor_info</code> <code>Optional[dict]</code> <p>Additional information about the sensor.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>class Sensor(APIBase):\n    \"\"\"\n    Represents a sensor entity, including its metadata, associations to sensor platforms, experiments, datasets, and records, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the sensor.\n        sensor_name (str): The name of the sensor.\n        sensor_type_id (int): The ID of the sensor type.\n        sensor_data_type_id (int): The ID of the sensor data type.\n        sensor_data_format_id (int): The ID of the sensor data format.\n        sensor_info (Optional[dict]): Additional information about the sensor.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"sensor_id\"))\n\n    sensor_name: str\n    sensor_type_id: int\n    sensor_data_type_id: int\n    sensor_data_format_id: int\n    sensor_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Sensor object.\"\"\"\n        return f\"Sensor(sensor_name={self.sensor_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Sensor object.\"\"\"\n        return f\"Sensor(sensor_name={self.sensor_name}, id={self.id}, sensor_type_id={self.sensor_type_id}, sensor_data_type_id={self.sensor_data_type_id}, sensor_data_format_id={self.sensor_data_format_id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        sensor_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a sensor with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Sensor.exists(sensor_name=\"Temperature Sensor\")\n            True\n\n            &gt;&gt;&gt; Sensor.exists(sensor_name=\"Nonexistent Sensor\")\n            False\n\n        Args:\n            sensor_name (str): The name of the sensor.\n        Returns:\n            bool: True if the sensor exists, False otherwise.\n        \"\"\"\n        try:\n            exists = SensorModel.exists(sensor_name=sensor_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of sensor: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        sensor_name: str,\n        sensor_type: GEMINISensorType = GEMINISensorType.Default,\n        sensor_data_type: GEMINIDataType = GEMINIDataType.Default,\n        sensor_data_format: GEMINIDataFormat = GEMINIDataFormat.Default,\n        sensor_info: dict = {},\n        experiment_name: str = None,\n        sensor_platform_name: str = None\n    ) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Create a new sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.create(sensor_name=\"Temperature Sensor\", sensor_type=GEMINISensorType.Temperature, sensor_data_type=GEMINIDataType.Float, sensor_data_format=GEMINIDataFormat.JSON)\n            &gt;&gt;&gt; print(sensor)\n            Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n        Args:\n            sensor_name (str): The name of the sensor.\n            sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to Default.\n            sensor_data_type (GEMINIDataType, optional): The data type. Defaults to Default.\n            sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to Default.\n            sensor_info (dict, optional): Additional information. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n            sensor_platform_name (str, optional): The name of the sensor platform to associate. Defaults to None.\n        Returns:\n            Optional[Sensor]: The created sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            sensor_type_id = sensor_type.value\n            sensor_data_format_id = sensor_data_format.value\n            sensor_data_type_id = sensor_data_type.value\n\n            db_instance = SensorModel.get_or_create(\n                sensor_name=sensor_name,\n                sensor_type_id=sensor_type_id,\n                sensor_data_type_id=sensor_data_type_id,\n                sensor_data_format_id=sensor_data_format_id,\n                sensor_info=sensor_info,\n            )\n            sensor = cls.model_validate(db_instance)\n            if experiment_name:\n                sensor.associate_experiment(experiment_name=experiment_name)\n            if sensor_platform_name:\n                sensor.associate_sensor_platform(sensor_platform_name=sensor_platform_name)\n            return sensor\n        except Exception as e:\n            print(f\"Error creating sensor: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        sensor_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Retrieve a sensor by its name and experiment.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\", experiment_name=\"Experiment 1\")\n            &gt;&gt;&gt; print(sensor)\n            Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n        Args:\n            sensor_name (str): The name of the sensor.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Sensor]: The sensor, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SensorModel.get_by_parameters(\n                sensor_name=sensor_name,\n                experiment_name=experiment_name\n            )\n            if not db_instance:\n                print(f\"Sensor with name {sensor_name} not found.\")\n                return None\n            sensor = cls.model_validate(db_instance)\n            return sensor\n        except Exception as e:\n            print(f\"Error getting sensor: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Retrieve a sensor by its ID.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get_by_id(id=UUID('...'))\n            &gt;&gt;&gt; print(sensor)\n            Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n        Args:\n            id (UUID | int | str): The ID of the sensor.\n        Returns:\n            Optional[Sensor]: The sensor, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SensorModel.get(id)\n            if not db_instance:\n                print(f\"Sensor with ID {id} does not exist.\")\n                return None\n            sensor = cls.model_validate(db_instance)\n            return sensor\n        except Exception as e:\n            print(f\"Error getting sensor by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Sensor\"]]:\n        \"\"\"\n        Retrieve all sensors.\n\n        Examples:\n            &gt;&gt;&gt; sensors = Sensor.get_all()\n            &gt;&gt;&gt; for sensor in sensors:\n            ...     print(sensor)\n            Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n            Sensor(sensor_name=Humidity Sensor, sensor_type_id=2, sensor_data_type_id=2, sensor_data_format_id=2, id=UUID('...'))\n\n        Returns:\n            Optional[List[Sensor]]: List of all sensors, or None if not found.\n        \"\"\"\n        try:\n            sensors = SensorModel.all()\n            if not sensors or len(sensors) == 0:\n                print(\"No sensors found.\")\n                return None\n            sensors = [cls.model_validate(sensor) for sensor in sensors]\n            return sensors\n        except Exception as e:\n            print(f\"Error getting all sensors: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        sensor_name: str = None,\n        sensor_type: GEMINISensorType = None,\n        sensor_data_type: GEMINIDataType = None,\n        sensor_data_format: GEMINIDataFormat = None,\n        sensor_info: dict = None,\n        experiment_name: str = None,\n        sensor_platform_name: str = None\n    ) -&gt; Optional[List[\"Sensor\"]]:\n        \"\"\"\n        Search for sensors based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; sensors = Sensor.search(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; for sensor in sensors:\n            ...     print(sensor)\n            Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n            &gt;&gt;&gt; sensors = Sensor.search(sensor_type=GEMINISensorType.Temperature)\n            &gt;&gt;&gt; for sensor in sensors:\n            ...     print(sensor)\n            Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n\n        Args:\n            sensor_name (str, optional): The name of the sensor. Defaults to None.\n            sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to None.\n            sensor_data_type (GEMINIDataType, optional): The data type. Defaults to None.\n            sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to None.\n            sensor_info (dict, optional): Additional information. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            sensor_platform_name (str, optional): The name of the sensor platform. Defaults to None.\n        Returns:\n            Optional[List[Sensor]]: List of matching sensors, or None if not found.\n        \"\"\"\n        try:\n            if not any([sensor_name, sensor_type, sensor_data_type, sensor_data_format, sensor_info, experiment_name, sensor_platform_name]):\n                print(\"Must provide at least one search parameter.\")\n                return None\n            sensors = ExperimentSensorsViewModel.search(\n                sensor_name=sensor_name,\n                sensor_type=sensor_type.value if sensor_type else None,\n                sensor_data_type=sensor_data_type.value if sensor_data_type else None,\n                sensor_data_format=sensor_data_format.value if sensor_data_format else None,\n                sensor_info=sensor_info,\n                experiment_name=experiment_name,\n                sensor_platform_name=sensor_platform_name\n            )\n            if not sensors or len(sensors) == 0:\n                print(\"No sensors found with the provided search parameters.\")\n                return None\n            sensors = [cls.model_validate(sensor) for sensor in sensors]\n            return sensors\n        except Exception as e:\n            print(f\"Error searching sensors: {e}\")\n            return None\n\n    def update(\n        self,\n        sensor_name: str = None, \n        sensor_type: GEMINISensorType = None,\n        sensor_data_type: GEMINIDataType = None,\n        sensor_data_format: GEMINIDataFormat = None,\n        sensor_info: dict = None\n    ) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Update the details of the sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; updated_sensor = sensor.update(sensor_name=\"New Temperature Sensor\", sensor_type=GEMINISensorType.Humidity)\n            &gt;&gt;&gt; print(updated_sensor)\n            Sensor(sensor_name=New Temperature Sensor, sensor_type_id=2, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n        Args:\n            sensor_name (str, optional): The new name. Defaults to None.\n            sensor_type (GEMINISensorType, optional): The new type. Defaults to None.\n            sensor_data_type (GEMINIDataType, optional): The new data type. Defaults to None.\n            sensor_data_format (GEMINIDataFormat, optional): The new data format. Defaults to None.\n            sensor_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[Sensor]: The updated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([sensor_type, sensor_data_type, sensor_data_format, sensor_info, sensor_name]):\n                print(\"At least one update parameter must be provided.\")\n                return None\n\n            current_id = self.id\n            sensor = SensorModel.get(current_id)\n            if not sensor:\n                print(f\"Sensor with ID {current_id} does not exist.\")\n                return None\n\n            sensor = SensorModel.update(\n                sensor,\n                sensor_name=sensor_name,\n                sensor_type_id=sensor_type.value if sensor_type else None,\n                sensor_data_type_id=sensor_data_type.value if sensor_data_type else None,\n                sensor_data_format_id=sensor_data_format.value if sensor_data_format else None,\n                sensor_info=sensor_info\n            )\n            updated_sensor = self.model_validate(sensor)\n            self.refresh()\n            return updated_sensor\n        except Exception as e:\n            print(f\"Error updating sensor: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; success = sensor.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the sensor was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor = SensorModel.get(current_id)\n            if not sensor:\n                print(f\"Sensor with ID {current_id} does not exist.\")\n                return False\n            SensorModel.delete(sensor)\n            return True\n        except Exception as e:\n            print(f\"Error deleting sensor: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Refresh the sensor's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; refreshed_sensor = sensor.refresh()\n            &gt;&gt;&gt; print(refreshed_sensor)\n            Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n        Returns:\n            Optional[Sensor]: The refreshed sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SensorModel.get(self.id)\n            if not db_instance:\n                print(f\"Sensor with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    actual_value = getattr(instance, key)\n                    setattr(self, key, actual_value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing sensor: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; sensor_info = sensor.get_info()\n            &gt;&gt;&gt; print(sensor_info)\n            {'manufacturer': 'SensorCorp', 'model': 'TempX1000', 'calibration_date': '2023-01-01'}\n\n        Returns:\n            Optional[dict]: The sensor's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor = SensorModel.get(current_id)\n            if not sensor:\n                print(f\"Sensor with ID {current_id} does not exist.\")\n                return None\n            sensor_info = sensor.sensor_info\n            if not sensor_info:\n                print(\"Sensor info is empty.\")\n                return None\n            return sensor_info\n        except Exception as e:\n            print(f\"Error getting sensor info: {e}\")\n            return None\n\n    def set_info(self, sensor_info: dict) -&gt; Optional[\"Sensor\"]:\n        \"\"\"\n        Set the additional information of the sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; updated_sensor = sensor.set_info(sensor_info={'manufacturer': 'SensorCorp', 'model': 'TempX1000'})\n            &gt;&gt;&gt; print(updated_sensor.get_info())\n            {'manufacturer': 'SensorCorp', 'model': 'TempX1000'}\n\n        Args:\n            sensor_info (dict): The new information to set.\n        Returns:\n            Optional[Sensor]: The updated sensor, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            sensor = SensorModel.get(current_id)\n            if not sensor:\n                print(f\"Sensor with ID {current_id} does not exist.\")\n                return None\n            sensor = SensorModel.update(\n                sensor,\n                sensor_info=sensor_info\n            )\n            sensor = self.model_validate(sensor)\n            self.refresh()\n            return sensor\n        except Exception as e:\n            print(f\"Error setting sensor info: {e}\")\n            return None\n\n    def get_associated_sensor_platforms(self) -&gt; Optional[List[\"SensorPlatform\"]]:\n        \"\"\"\n        Get all sensor platforms associated with this sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; sensor_platforms = sensor.get_associated_sensor_platforms()\n            &gt;&gt;&gt; for platform in sensor_platforms:\n            ...     print(platform)\n            SensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n            SensorPlatform(sensor_platform_name=Platform 2, id=UUID('...'))\n\n        Returns:\n            Optional[List[SensorPlatform]]: A list of associated sensor platforms, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            sensor_platforms = SensorPlatformSensorsViewModel.search(sensor_id=self.id)\n            if not sensor_platforms or len(sensor_platforms) == 0:\n                print(\"No associated sensor platforms found.\")\n                return None\n            sensor_platforms = [SensorPlatform.model_validate(sensor_platform) for sensor_platform in sensor_platforms]\n            return sensor_platforms\n        except Exception as e:\n            print(f\"Error getting associated sensor platforms: {e}\")\n            return None\n\n    def associate_sensor_platform(self, sensor_platform_name: str) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Associate this sensor with a sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; sensor_platform = sensor.associate_sensor_platform(sensor_platform_name=\"Platform 1\")\n            &gt;&gt;&gt; print(sensor_platform)\n            SensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform to associate.\n        Returns:\n            Optional[SensorPlatform]: The associated sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n            if not sensor_platform:\n                print(f\"Sensor platform {sensor_platform_name} does not exist.\")\n                return None\n            existing_association = SensorPlatformSensorModel.get_by_parameters(\n                sensor_platform_id=sensor_platform.id,\n                sensor_id=self.id\n            )\n            if existing_association:\n                print(f\"Sensor {self.sensor_name} already associated with sensor platform {sensor_platform_name}.\")\n                return None\n            new_association = SensorPlatformSensorModel.get_or_create(\n                sensor_platform_id=sensor_platform.id,\n                sensor_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate sensor {self.sensor_name} with sensor platform {sensor_platform_name}.\")\n                return None\n            self.refresh()\n            return sensor_platform\n        except Exception as e:\n            print(f\"Error associating sensor platform: {e}\")\n            return None\n\n    def unassociate_sensor_platform(self, sensor_platform_name: str) -&gt; Optional[\"SensorPlatform\"]:\n        \"\"\"\n        Unassociate this sensor from a sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; sensor_platform = sensor.unassociate_sensor_platform(sensor_platform_name=\"Platform 1\")\n            &gt;&gt;&gt; print(sensor_platform)\n            SensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform to unassociate.\n        Returns:\n            Optional[SensorPlatform]: The unassociated sensor platform, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n            if not sensor_platform:\n                print(f\"Sensor platform {sensor_platform_name} does not exist.\")\n                return None\n            existing_association = SensorPlatformSensorModel.get_by_parameters(\n                sensor_platform_id=sensor_platform.id,\n                sensor_id=self.id\n            )\n            if not existing_association:\n                print(f\"Sensor {self.sensor_name} not associated with sensor platform {sensor_platform_name}.\")\n                return None\n            is_deleted = SensorPlatformSensorModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate sensor {self.sensor_name} from sensor platform {sensor_platform_name}.\")\n                return None\n            self.refresh()\n            return sensor_platform\n        except Exception as e:\n            print(f\"Error unassociating sensor platform: {e}\")\n            return None\n\n    def belongs_to_sensor_platform(self, sensor_platform_name: str) -&gt; bool:\n        \"\"\"\n        Check if this sensor is associated with a specific sensor platform.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; is_associated = sensor.belongs_to_sensor_platform(sensor_platform_name=\"Platform 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            sensor_platform_name (str): The name of the sensor platform to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.sensor_platform import SensorPlatform\n            sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n            if not sensor_platform:\n                print(f\"Sensor platform {sensor_platform_name} does not exist.\")\n                return False\n            association_exists = SensorPlatformSensorModel.exists(\n                sensor_platform_id=sensor_platform.id,\n                sensor_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking sensor platform membership: {e}\")\n            return\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with this sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; experiments = sensor.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n            Experiment(experiment_name=Experiment 2, experiment_start_date='2023-06-01', experiment_end_date='2023-11-30', id=UUID('...'))\n\n        Returns:\n            Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiments = ExperimentSensorsViewModel.search(sensor_id=self.id)\n            if not experiments or len(experiments) == 0:\n                print(\"No associated experiments found.\")\n                return None\n            experiments = [Experiment.model_validate(experiment) for experiment in experiments]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this sensor with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; experiment = sensor.associate_experiment(experiment_name=\"Experiment 1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentSensorModel.get_by_parameters(\n                experiment_id=experiment.id,\n                sensor_id=self.id\n            )\n            if existing_association:\n                print(f\"Sensor {self.sensor_name} already associated with experiment {experiment_name}.\")\n                return None\n            new_association = ExperimentSensorModel.get_or_create(\n                experiment_id=experiment.id,\n                sensor_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate sensor {self.sensor_name} with experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating experiment: {e}\")\n            return None\n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this sensor from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; experiment = sensor.unassociate_experiment(experiment_name=\"Experiment 1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentSensorModel.get_by_parameters(\n                experiment_id=experiment.id,\n                sensor_id=self.id\n            )\n            if not existing_association:\n                print(f\"Sensor {self.sensor_name} not associated with experiment {experiment_name}.\")\n                return None\n            is_deleted = ExperimentSensorModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate sensor {self.sensor_name} from experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassociating experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this sensor is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; is_associated = sensor.belongs_to_experiment(experiment_name=\"Experiment 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentSensorModel.exists(\n                experiment_id=experiment.id,\n                sensor_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking experiment membership: {e}\")\n            return False\n\n    def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n        \"\"\"\n        Get all datasets associated with this sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; datasets = sensor.get_associated_datasets()\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(dataset_name=Dataset 1, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n            Dataset(dataset_name=Dataset 2, dataset_type=Sensor, collection_date='2023-06-01', id=UUID('...'))\n\n        Returns:\n            Optional[List[Dataset]]: A list of associated datasets, or None if not found.\n        \"\"\"\n        try:\n            datasets = SensorDatasetsViewModel.search(sensor_id=self.id)\n            if not datasets or len(datasets) == 0:\n                print(\"No associated datasets found.\")\n                return None\n            datasets = [Dataset.model_validate(dataset) for dataset in datasets]\n            return datasets\n        except Exception as e:\n            print(f\"Error getting associated datasets: {e}\")\n            return None\n\n    def create_new_dataset(\n        self,\n        dataset_name: str,\n        dataset_info: dict = {},\n        collection_date: date = None,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Create and associate a new dataset with this sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; dataset = sensor.create_new_dataset(dataset_name=\"New Sensor Dataset\", collection_date=date(2023, 1, 1), experiment_name=\"Experiment 1\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=New Sensor Dataset, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the new dataset.\n            dataset_info (dict, optional): Additional information. Defaults to {{}}.\n            collection_date (date, optional): The collection date. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.create(\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                collection_date=collection_date,\n                experiment_name=experiment_name,\n                dataset_type=GEMINIDatasetType.Sensor\n            )\n            if not dataset:\n                print(\"Failed to create new dataset.\")\n                return None\n            dataset = self.associate_dataset(dataset_name=dataset.dataset_name)\n            return dataset\n        except Exception as e:\n            print(f\"Error creating new dataset: {e}\")\n            return None\n\n    def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Associate this sensor with a dataset.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; dataset = sensor.associate_dataset(dataset_name=\"Sensor Dataset 1\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=Sensor Dataset 1, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n\n        Args:\n            dataset_name (str): The name of the dataset to associate.\n        Returns:\n            Optional[Dataset]: The associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name=dataset_name)\n            if not dataset:\n                print(f\"Dataset {dataset_name} does not exist.\")\n                return None\n            existing_association = SensorDatasetModel.get_by_parameters(\n                dataset_id=dataset.id,\n                sensor_id=self.id\n            )\n            if existing_association:\n                print(f\"Sensor {self.sensor_name} already associated with dataset {dataset_name}.\")\n                return None\n            new_association = SensorDatasetModel.get_or_create(\n                dataset_id=dataset.id,\n                sensor_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate sensor {self.sensor_name} with dataset {dataset_name}.\")\n                return None\n            self.refresh()\n            return dataset\n        except Exception as e:\n            print(f\"Error associating dataset: {e}\")\n            return None\n\n    def insert_record(\n        self,\n        timestamp: datetime = None,\n        collection_date: date = None,\n        dataset_name: str = None,\n        sensor_data: dict = {},\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_number: int = -1,\n        plot_row_number: int = -1,\n        plot_column_number: int = -1,\n        record_file: str = None,\n        record_info: dict = {}\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a single sensor record for this sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; success, record_ids = sensor.insert_record(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date(2023, 1, 1),\n            ...     dataset_name=\"Sensor Dataset 1\",\n            ...     sensor_data={\"temperature\": 22.5},\n            ...     experiment_name=\"Experiment 1\",\n            ...     season_name=\"Spring\",\n            ...     site_name=\"Site A\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     record_file=None,\n            ...     record_info={\"notes\": \"First record\"}\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID('...')]\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            sensor_data (dict, optional): The sensor data. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to -1.\n            plot_row_number (int, optional): The plot row number. Defaults to -1.\n            plot_column_number (int, optional): The plot column number. Defaults to -1.\n            record_file (str, optional): The file path or URI. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name or not season_name or not site_name:\n                raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n            if not sensor_data and not record_file:\n                raise ValueError(\"Either sensor_data or record_file must be provided.\")\n\n            timestamp = timestamp if timestamp else datetime.now()\n            collection_date = collection_date if collection_date else timestamp.date()\n            sensor_name = self.sensor_name\n\n            if not dataset_name:\n                dataset_name = f\"{sensor_name} Dataset {collection_date}\"\n\n            sensor_record = SensorRecord.create(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                sensor_name=sensor_name,\n                sensor_data=sensor_data,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number if plot_number != -1 else None,\n                plot_row_number=plot_row_number if plot_row_number != -1 else None,\n                plot_column_number=plot_column_number if plot_column_number != -1 else None,\n                record_file=record_file if record_file else None,\n                record_info=record_info if record_info else {},\n                insert_on_create=False\n            )\n            success, inserted_record_ids = SensorRecord.insert([sensor_record])\n            if not success:\n                print(\"Failed to insert sensor record.\")\n                return False, []\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting sensor record: {e}\")\n            return False, []\n\n    def insert_records(\n        self,\n        timestamps: List[datetime] = None,\n        collection_date: date = None,\n        sensor_data: List[dict] = [],\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_numbers: List[int] = None,\n        plot_row_numbers: List[int] = None,\n        plot_column_numbers: List[int] = None,\n        record_files: List[str] = None,\n        record_info: List[dict] = []\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert multiple sensor records for this sensor.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; success, record_ids = sensor.insert_records(\n            ...     timestamps=[datetime.now(), datetime.now()],\n            ...     collection_date=date(2023, 1, 1),\n            ...     sensor_data=[{\"temperature\": 22.5}, {\"temperature\": 23.0}],\n            ...     dataset_name=\"Sensor Dataset 1\",\n            ...     experiment_name=\"Experiment 1\",\n            ...     season_name=\"Spring\",\n            ...     site_name=\"Site A\",\n            ...     plot_numbers=[1, 2],\n            ...     plot_row_numbers=[1, 2],\n            ...     plot_column_numbers=[1, 2],\n            ...     record_files=None,\n            ...     record_info=[{\"notes\": \"First record\"}, {\"notes\": \"Second record\"}]\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID('...'), UUID('...')]\n\n        Args:\n            timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            sensor_data (List[dict], optional): List of sensor data. Defaults to [].\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_numbers (List[int], optional): List of plot numbers. Defaults to None.\n            plot_row_numbers (List[int], optional): List of plot row numbers. Defaults to None.\n            plot_column_numbers (List[int], optional): List of plot column numbers. Defaults to None.\n            record_files (List[str], optional): List of file paths or URIs. Defaults to None.\n            record_info (List[dict], optional): List of additional info. Defaults to [].\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name or not season_name or not site_name:\n                raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n            if len(timestamps) == 0:\n                raise ValueError(\"At least one timestamp must be provided.\")\n\n            if not dataset_name:\n                dataset_name = f\"{self.sensor_name} Dataset {collection_date}\"\n\n            collection_date = collection_date if collection_date else timestamps[0].date()\n            sensor_records = []\n            timestamps_length = len(timestamps)\n\n            for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Sensor: \" + self.sensor_name):\n                sensor_record = SensorRecord.create(\n                    timestamp=timestamps[i],\n                    collection_date=collection_date,\n                    sensor_name=self.sensor_name,\n                    sensor_data=sensor_data[i] if sensor_data else {},\n                    experiment_name=experiment_name,\n                    dataset_name=dataset_name if dataset_name else f\"{self.sensor_name} Dataset\",\n                    season_name=season_name,\n                    site_name=site_name,\n                    plot_number=plot_numbers[i] if plot_numbers else None,\n                    plot_row_number=plot_row_numbers[i] if plot_row_numbers else None,\n                    plot_column_number=plot_column_numbers[i] if plot_column_numbers else None,\n                    record_file=record_files[i] if record_files else None,\n                    record_info=record_info[i] if record_info else {},\n                    insert_on_create=False\n                )\n                sensor_records.append(sensor_record)\n\n            success, inserted_record_ids = SensorRecord.insert(sensor_records)\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting sensor records: {e}\")\n            return False, []\n\n    def search_records(\n        self,\n        collection_date: date = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        record_info: dict = None\n    ) -&gt; List[SensorRecord]:\n        \"\"\"\n        Search for sensor records associated with this sensor based on search parameters.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; records = sensor.search_records(\n            ...     collection_date=date(2023, 1, 1),\n            ...     dataset_name=\"Sensor Dataset 1\",\n            ...     experiment_name=\"Experiment 1\",\n            ...     season_name=\"Spring\",\n            ...     site_name=\"Site A\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     record_info={\"notes\": \"First record\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=1)\n            SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=2)\n\n        Args:\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Returns:\n            List[SensorRecord]: List of matching sensor records, or empty list if not found.\n        \"\"\"\n        try:\n            record_info = record_info if record_info else {}\n            record_info = {k: v for k, v in record_info.items() if v is not None}\n\n            records = SensorRecord.search(\n                sensor_name=self.sensor_name,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                record_info=record_info\n            )\n            return records\n        except Exception as e:\n            print(f\"Error searching sensor records: {e}\")\n            return []\n\n    def filter_records(\n        self,\n        start_timestamp: Optional[datetime] = None,\n        end_timestamp: Optional[datetime] = None,\n        dataset_names: Optional[List[str]] = None,\n        experiment_names: Optional[List[str]] = None,\n        season_names: Optional[List[str]] = None,\n        site_names: Optional[List[str]] = None\n    ) -&gt; List[SensorRecord]:\n        \"\"\"\n        Filter sensor records associated with this sensor using a custom filter function.\n\n        Examples:\n            &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n            &gt;&gt;&gt; records = sensor.filter_records(\n            ...     start_timestamp=datetime(2023, 1, 1),\n            ...     end_timestamp=datetime(2023, 12, 31),\n            ...     dataset_names=[\"Sensor Dataset 1\"],\n            ...     experiment_names=[\"Experiment 1\"],\n            ...     season_names=[\"Spring\"],\n            ...     site_names=[\"Site A\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=1)\n            SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=2)\n\n\n        Args:\n            start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n            end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n            dataset_names (List[str], optional): List of dataset names. Defaults to None.\n            experiment_names (List[str], optional): List of experiment names. Defaults to None.\n            season_names (List[str], optional): List of season names. Defaults to None.\n            site_names (List[str], optional): List of site names. Defaults to None.\n        Returns:\n            List[SensorRecord]: List of filtered sensor records, or empty list if not found.\n        \"\"\"\n        try:\n            records = SensorRecord.filter(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                sensor_names=[self.sensor_name],\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            return records\n        except Exception as e:\n            print(f\"Error filtering sensor records: {e}\")\n            return []\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Sensor object.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Sensor object.\"\"\"\n    return f\"Sensor(sensor_name={self.sensor_name}, id={self.id}, sensor_type_id={self.sensor_type_id}, sensor_data_type_id={self.sensor_data_type_id}, sensor_data_format_id={self.sensor_data_format_id})\"\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Sensor object.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Sensor object.\"\"\"\n    return f\"Sensor(sensor_name={self.sensor_name}, id={self.id})\"\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.associate_dataset","title":"<code>associate_dataset(dataset_name)</code>","text":"<p>Associate this sensor with a dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; dataset = sensor.associate_dataset(dataset_name=\"Sensor Dataset 1\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=Sensor Dataset 1, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to associate.</p> required <p>Returns:     Optional[Dataset]: The associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Associate this sensor with a dataset.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; dataset = sensor.associate_dataset(dataset_name=\"Sensor Dataset 1\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=Sensor Dataset 1, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the dataset to associate.\n    Returns:\n        Optional[Dataset]: The associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name=dataset_name)\n        if not dataset:\n            print(f\"Dataset {dataset_name} does not exist.\")\n            return None\n        existing_association = SensorDatasetModel.get_by_parameters(\n            dataset_id=dataset.id,\n            sensor_id=self.id\n        )\n        if existing_association:\n            print(f\"Sensor {self.sensor_name} already associated with dataset {dataset_name}.\")\n            return None\n        new_association = SensorDatasetModel.get_or_create(\n            dataset_id=dataset.id,\n            sensor_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate sensor {self.sensor_name} with dataset {dataset_name}.\")\n            return None\n        self.refresh()\n        return dataset\n    except Exception as e:\n        print(f\"Error associating dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this sensor with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; experiment = sensor.associate_experiment(experiment_name=\"Experiment 1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this sensor with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; experiment = sensor.associate_experiment(experiment_name=\"Experiment 1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentSensorModel.get_by_parameters(\n            experiment_id=experiment.id,\n            sensor_id=self.id\n        )\n        if existing_association:\n            print(f\"Sensor {self.sensor_name} already associated with experiment {experiment_name}.\")\n            return None\n        new_association = ExperimentSensorModel.get_or_create(\n            experiment_id=experiment.id,\n            sensor_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate sensor {self.sensor_name} with experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.associate_sensor_platform","title":"<code>associate_sensor_platform(sensor_platform_name)</code>","text":"<p>Associate this sensor with a sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; sensor_platform = sensor.associate_sensor_platform(sensor_platform_name=\"Platform 1\")\n&gt;&gt;&gt; print(sensor_platform)\nSensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform to associate.</p> required <p>Returns:     Optional[SensorPlatform]: The associated sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def associate_sensor_platform(self, sensor_platform_name: str) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Associate this sensor with a sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; sensor_platform = sensor.associate_sensor_platform(sensor_platform_name=\"Platform 1\")\n        &gt;&gt;&gt; print(sensor_platform)\n        SensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform to associate.\n    Returns:\n        Optional[SensorPlatform]: The associated sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n        if not sensor_platform:\n            print(f\"Sensor platform {sensor_platform_name} does not exist.\")\n            return None\n        existing_association = SensorPlatformSensorModel.get_by_parameters(\n            sensor_platform_id=sensor_platform.id,\n            sensor_id=self.id\n        )\n        if existing_association:\n            print(f\"Sensor {self.sensor_name} already associated with sensor platform {sensor_platform_name}.\")\n            return None\n        new_association = SensorPlatformSensorModel.get_or_create(\n            sensor_platform_id=sensor_platform.id,\n            sensor_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate sensor {self.sensor_name} with sensor platform {sensor_platform_name}.\")\n            return None\n        self.refresh()\n        return sensor_platform\n    except Exception as e:\n        print(f\"Error associating sensor platform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this sensor is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; is_associated = sensor.belongs_to_experiment(experiment_name=\"Experiment 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this sensor is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; is_associated = sensor.belongs_to_experiment(experiment_name=\"Experiment 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentSensorModel.exists(\n            experiment_id=experiment.id,\n            sensor_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking experiment membership: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.belongs_to_sensor_platform","title":"<code>belongs_to_sensor_platform(sensor_platform_name)</code>","text":"<p>Check if this sensor is associated with a specific sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; is_associated = sensor.belongs_to_sensor_platform(sensor_platform_name=\"Platform 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def belongs_to_sensor_platform(self, sensor_platform_name: str) -&gt; bool:\n    \"\"\"\n    Check if this sensor is associated with a specific sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; is_associated = sensor.belongs_to_sensor_platform(sensor_platform_name=\"Platform 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n        if not sensor_platform:\n            print(f\"Sensor platform {sensor_platform_name} does not exist.\")\n            return False\n        association_exists = SensorPlatformSensorModel.exists(\n            sensor_platform_id=sensor_platform.id,\n            sensor_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking sensor platform membership: {e}\")\n        return\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.create","title":"<code>create(sensor_name, sensor_type=GEMINISensorType.Default, sensor_data_type=GEMINIDataType.Default, sensor_data_format=GEMINIDataFormat.Default, sensor_info={}, experiment_name=None, sensor_platform_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.create(sensor_name=\"Temperature Sensor\", sensor_type=GEMINISensorType.Temperature, sensor_data_type=GEMINIDataType.Float, sensor_data_format=GEMINIDataFormat.JSON)\n&gt;&gt;&gt; print(sensor)\nSensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <code>sensor_type</code> <code>GEMINISensorType</code> <p>The type of the sensor. Defaults to Default.</p> <code>Default</code> <code>sensor_data_type</code> <code>GEMINIDataType</code> <p>The data type. Defaults to Default.</p> <code>Default</code> <code>sensor_data_format</code> <code>GEMINIDataFormat</code> <p>The data format. Defaults to Default.</p> <code>Default</code> <code>sensor_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Sensor]: The created sensor, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    sensor_name: str,\n    sensor_type: GEMINISensorType = GEMINISensorType.Default,\n    sensor_data_type: GEMINIDataType = GEMINIDataType.Default,\n    sensor_data_format: GEMINIDataFormat = GEMINIDataFormat.Default,\n    sensor_info: dict = {},\n    experiment_name: str = None,\n    sensor_platform_name: str = None\n) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Create a new sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.create(sensor_name=\"Temperature Sensor\", sensor_type=GEMINISensorType.Temperature, sensor_data_type=GEMINIDataType.Float, sensor_data_format=GEMINIDataFormat.JSON)\n        &gt;&gt;&gt; print(sensor)\n        Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n    Args:\n        sensor_name (str): The name of the sensor.\n        sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to Default.\n        sensor_data_type (GEMINIDataType, optional): The data type. Defaults to Default.\n        sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to Default.\n        sensor_info (dict, optional): Additional information. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        sensor_platform_name (str, optional): The name of the sensor platform to associate. Defaults to None.\n    Returns:\n        Optional[Sensor]: The created sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        sensor_type_id = sensor_type.value\n        sensor_data_format_id = sensor_data_format.value\n        sensor_data_type_id = sensor_data_type.value\n\n        db_instance = SensorModel.get_or_create(\n            sensor_name=sensor_name,\n            sensor_type_id=sensor_type_id,\n            sensor_data_type_id=sensor_data_type_id,\n            sensor_data_format_id=sensor_data_format_id,\n            sensor_info=sensor_info,\n        )\n        sensor = cls.model_validate(db_instance)\n        if experiment_name:\n            sensor.associate_experiment(experiment_name=experiment_name)\n        if sensor_platform_name:\n            sensor.associate_sensor_platform(sensor_platform_name=sensor_platform_name)\n        return sensor\n    except Exception as e:\n        print(f\"Error creating sensor: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.create_new_dataset","title":"<code>create_new_dataset(dataset_name, dataset_info={}, collection_date=None, experiment_name=None)</code>","text":"<p>Create and associate a new dataset with this sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; dataset = sensor.create_new_dataset(dataset_name=\"New Sensor Dataset\", collection_date=date(2023, 1, 1), experiment_name=\"Experiment 1\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=New Sensor Dataset, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the new dataset.</p> required <code>dataset_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Dataset]: The created and associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def create_new_dataset(\n    self,\n    dataset_name: str,\n    dataset_info: dict = {},\n    collection_date: date = None,\n    experiment_name: str = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Create and associate a new dataset with this sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; dataset = sensor.create_new_dataset(dataset_name=\"New Sensor Dataset\", collection_date=date(2023, 1, 1), experiment_name=\"Experiment 1\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=New Sensor Dataset, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n\n    Args:\n        dataset_name (str): The name of the new dataset.\n        dataset_info (dict, optional): Additional information. Defaults to {{}}.\n        collection_date (date, optional): The collection date. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.create(\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            collection_date=collection_date,\n            experiment_name=experiment_name,\n            dataset_type=GEMINIDatasetType.Sensor\n        )\n        if not dataset:\n            print(\"Failed to create new dataset.\")\n            return None\n        dataset = self.associate_dataset(dataset_name=dataset.dataset_name)\n        return dataset\n    except Exception as e:\n        print(f\"Error creating new dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.delete","title":"<code>delete()</code>","text":"<p>Delete the sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; success = sensor.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the sensor was deleted, False otherwise.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; success = sensor.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the sensor was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor = SensorModel.get(current_id)\n        if not sensor:\n            print(f\"Sensor with ID {current_id} does not exist.\")\n            return False\n        SensorModel.delete(sensor)\n        return True\n    except Exception as e:\n        print(f\"Error deleting sensor: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.exists","title":"<code>exists(sensor_name)</code>  <code>classmethod</code>","text":"<p>Check if a sensor with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Sensor.exists(sensor_name=\"Temperature Sensor\")\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Sensor.exists(sensor_name=\"Nonexistent Sensor\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <p>Returns:     bool: True if the sensor exists, False otherwise.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    sensor_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a sensor with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Sensor.exists(sensor_name=\"Temperature Sensor\")\n        True\n\n        &gt;&gt;&gt; Sensor.exists(sensor_name=\"Nonexistent Sensor\")\n        False\n\n    Args:\n        sensor_name (str): The name of the sensor.\n    Returns:\n        bool: True if the sensor exists, False otherwise.\n    \"\"\"\n    try:\n        exists = SensorModel.exists(sensor_name=sensor_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of sensor: {e}\")\n        return False\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.filter_records","title":"<code>filter_records(start_timestamp=None, end_timestamp=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>","text":"<p>Filter sensor records associated with this sensor using a custom filter function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; records = sensor.filter_records(\n...     start_timestamp=datetime(2023, 1, 1),\n...     end_timestamp=datetime(2023, 12, 31),\n...     dataset_names=[\"Sensor Dataset 1\"],\n...     experiment_names=[\"Experiment 1\"],\n...     season_names=[\"Spring\"],\n...     site_names=[\"Site A\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nSensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=1)\nSensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=2)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>datetime</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>List[str]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <p>Returns:     List[SensorRecord]: List of filtered sensor records, or empty list if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def filter_records(\n    self,\n    start_timestamp: Optional[datetime] = None,\n    end_timestamp: Optional[datetime] = None,\n    dataset_names: Optional[List[str]] = None,\n    experiment_names: Optional[List[str]] = None,\n    season_names: Optional[List[str]] = None,\n    site_names: Optional[List[str]] = None\n) -&gt; List[SensorRecord]:\n    \"\"\"\n    Filter sensor records associated with this sensor using a custom filter function.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; records = sensor.filter_records(\n        ...     start_timestamp=datetime(2023, 1, 1),\n        ...     end_timestamp=datetime(2023, 12, 31),\n        ...     dataset_names=[\"Sensor Dataset 1\"],\n        ...     experiment_names=[\"Experiment 1\"],\n        ...     season_names=[\"Spring\"],\n        ...     site_names=[\"Site A\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=1)\n        SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=2)\n\n\n    Args:\n        start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n        end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n        dataset_names (List[str], optional): List of dataset names. Defaults to None.\n        experiment_names (List[str], optional): List of experiment names. Defaults to None.\n        season_names (List[str], optional): List of season names. Defaults to None.\n        site_names (List[str], optional): List of site names. Defaults to None.\n    Returns:\n        List[SensorRecord]: List of filtered sensor records, or empty list if not found.\n    \"\"\"\n    try:\n        records = SensorRecord.filter(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            sensor_names=[self.sensor_name],\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        return records\n    except Exception as e:\n        print(f\"Error filtering sensor records: {e}\")\n        return []\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.get","title":"<code>get(sensor_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor by its name and experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\", experiment_name=\"Experiment 1\")\n&gt;&gt;&gt; print(sensor)\nSensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Sensor]: The sensor, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    sensor_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Retrieve a sensor by its name and experiment.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\", experiment_name=\"Experiment 1\")\n        &gt;&gt;&gt; print(sensor)\n        Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n    Args:\n        sensor_name (str): The name of the sensor.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Sensor]: The sensor, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SensorModel.get_by_parameters(\n            sensor_name=sensor_name,\n            experiment_name=experiment_name\n        )\n        if not db_instance:\n            print(f\"Sensor with name {sensor_name} not found.\")\n            return None\n        sensor = cls.model_validate(db_instance)\n        return sensor\n    except Exception as e:\n        print(f\"Error getting sensor: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all sensors.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensors = Sensor.get_all()\n&gt;&gt;&gt; for sensor in sensors:\n...     print(sensor)\nSensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\nSensor(sensor_name=Humidity Sensor, sensor_type_id=2, sensor_data_type_id=2, sensor_data_format_id=2, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Sensor]]</code> <p>Optional[List[Sensor]]: List of all sensors, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Sensor\"]]:\n    \"\"\"\n    Retrieve all sensors.\n\n    Examples:\n        &gt;&gt;&gt; sensors = Sensor.get_all()\n        &gt;&gt;&gt; for sensor in sensors:\n        ...     print(sensor)\n        Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n        Sensor(sensor_name=Humidity Sensor, sensor_type_id=2, sensor_data_type_id=2, sensor_data_format_id=2, id=UUID('...'))\n\n    Returns:\n        Optional[List[Sensor]]: List of all sensors, or None if not found.\n    \"\"\"\n    try:\n        sensors = SensorModel.all()\n        if not sensors or len(sensors) == 0:\n            print(\"No sensors found.\")\n            return None\n        sensors = [cls.model_validate(sensor) for sensor in sensors]\n        return sensors\n    except Exception as e:\n        print(f\"Error getting all sensors: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.get_associated_datasets","title":"<code>get_associated_datasets()</code>","text":"<p>Get all datasets associated with this sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; datasets = sensor.get_associated_datasets()\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(dataset_name=Dataset 1, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\nDataset(dataset_name=Dataset 2, dataset_type=Sensor, collection_date='2023-06-01', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Dataset]]</code> <p>Optional[List[Dataset]]: A list of associated datasets, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n    \"\"\"\n    Get all datasets associated with this sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; datasets = sensor.get_associated_datasets()\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(dataset_name=Dataset 1, dataset_type=Sensor, collection_date='2023-01-01', id=UUID('...'))\n        Dataset(dataset_name=Dataset 2, dataset_type=Sensor, collection_date='2023-06-01', id=UUID('...'))\n\n    Returns:\n        Optional[List[Dataset]]: A list of associated datasets, or None if not found.\n    \"\"\"\n    try:\n        datasets = SensorDatasetsViewModel.search(sensor_id=self.id)\n        if not datasets or len(datasets) == 0:\n            print(\"No associated datasets found.\")\n            return None\n        datasets = [Dataset.model_validate(dataset) for dataset in datasets]\n        return datasets\n    except Exception as e:\n        print(f\"Error getting associated datasets: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with this sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; experiments = sensor.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\nExperiment(experiment_name=Experiment 2, experiment_start_date='2023-06-01', experiment_end_date='2023-11-30', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[Experiment]]: A list of associated experiments, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with this sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; experiments = sensor.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n        Experiment(experiment_name=Experiment 2, experiment_start_date='2023-06-01', experiment_end_date='2023-11-30', id=UUID('...'))\n\n    Returns:\n        Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiments = ExperimentSensorsViewModel.search(sensor_id=self.id)\n        if not experiments or len(experiments) == 0:\n            print(\"No associated experiments found.\")\n            return None\n        experiments = [Experiment.model_validate(experiment) for experiment in experiments]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.get_associated_sensor_platforms","title":"<code>get_associated_sensor_platforms()</code>","text":"<p>Get all sensor platforms associated with this sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; sensor_platforms = sensor.get_associated_sensor_platforms()\n&gt;&gt;&gt; for platform in sensor_platforms:\n...     print(platform)\nSensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\nSensorPlatform(sensor_platform_name=Platform 2, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[SensorPlatform]]</code> <p>Optional[List[SensorPlatform]]: A list of associated sensor platforms, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def get_associated_sensor_platforms(self) -&gt; Optional[List[\"SensorPlatform\"]]:\n    \"\"\"\n    Get all sensor platforms associated with this sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; sensor_platforms = sensor.get_associated_sensor_platforms()\n        &gt;&gt;&gt; for platform in sensor_platforms:\n        ...     print(platform)\n        SensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n        SensorPlatform(sensor_platform_name=Platform 2, id=UUID('...'))\n\n    Returns:\n        Optional[List[SensorPlatform]]: A list of associated sensor platforms, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        sensor_platforms = SensorPlatformSensorsViewModel.search(sensor_id=self.id)\n        if not sensor_platforms or len(sensor_platforms) == 0:\n            print(\"No associated sensor platforms found.\")\n            return None\n        sensor_platforms = [SensorPlatform.model_validate(sensor_platform) for sensor_platform in sensor_platforms]\n        return sensor_platforms\n    except Exception as e:\n        print(f\"Error getting associated sensor platforms: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a sensor by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get_by_id(id=UUID('...'))\n&gt;&gt;&gt; print(sensor)\nSensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the sensor.</p> required <p>Returns:     Optional[Sensor]: The sensor, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Retrieve a sensor by its ID.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get_by_id(id=UUID('...'))\n        &gt;&gt;&gt; print(sensor)\n        Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n    Args:\n        id (UUID | int | str): The ID of the sensor.\n    Returns:\n        Optional[Sensor]: The sensor, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SensorModel.get(id)\n        if not db_instance:\n            print(f\"Sensor with ID {id} does not exist.\")\n            return None\n        sensor = cls.model_validate(db_instance)\n        return sensor\n    except Exception as e:\n        print(f\"Error getting sensor by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; sensor_info = sensor.get_info()\n&gt;&gt;&gt; print(sensor_info)\n{'manufacturer': 'SensorCorp', 'model': 'TempX1000', 'calibration_date': '2023-01-01'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The sensor's info, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; sensor_info = sensor.get_info()\n        &gt;&gt;&gt; print(sensor_info)\n        {'manufacturer': 'SensorCorp', 'model': 'TempX1000', 'calibration_date': '2023-01-01'}\n\n    Returns:\n        Optional[dict]: The sensor's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor = SensorModel.get(current_id)\n        if not sensor:\n            print(f\"Sensor with ID {current_id} does not exist.\")\n            return None\n        sensor_info = sensor.sensor_info\n        if not sensor_info:\n            print(\"Sensor info is empty.\")\n            return None\n        return sensor_info\n    except Exception as e:\n        print(f\"Error getting sensor info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.insert_record","title":"<code>insert_record(timestamp=None, collection_date=None, dataset_name=None, sensor_data={}, experiment_name=None, season_name=None, site_name=None, plot_number=-1, plot_row_number=-1, plot_column_number=-1, record_file=None, record_info={})</code>","text":"<p>Insert a single sensor record for this sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; success, record_ids = sensor.insert_record(\n...     timestamp=datetime.now(),\n...     collection_date=date(2023, 1, 1),\n...     dataset_name=\"Sensor Dataset 1\",\n...     sensor_data={\"temperature\": 22.5},\n...     experiment_name=\"Experiment 1\",\n...     season_name=\"Spring\",\n...     site_name=\"Site A\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     record_file=None,\n...     record_info={\"notes\": \"First record\"}\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID('...')]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>sensor_data</code> <code>dict</code> <p>The sensor data. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to -1.</p> <code>-1</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to -1.</p> <code>-1</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to -1.</p> <code>-1</code> <code>record_file</code> <code>str</code> <p>The file path or URI. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def insert_record(\n    self,\n    timestamp: datetime = None,\n    collection_date: date = None,\n    dataset_name: str = None,\n    sensor_data: dict = {},\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_number: int = -1,\n    plot_row_number: int = -1,\n    plot_column_number: int = -1,\n    record_file: str = None,\n    record_info: dict = {}\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a single sensor record for this sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; success, record_ids = sensor.insert_record(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date(2023, 1, 1),\n        ...     dataset_name=\"Sensor Dataset 1\",\n        ...     sensor_data={\"temperature\": 22.5},\n        ...     experiment_name=\"Experiment 1\",\n        ...     season_name=\"Spring\",\n        ...     site_name=\"Site A\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     record_file=None,\n        ...     record_info={\"notes\": \"First record\"}\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID('...')]\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        sensor_data (dict, optional): The sensor data. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to -1.\n        plot_row_number (int, optional): The plot row number. Defaults to -1.\n        plot_column_number (int, optional): The plot column number. Defaults to -1.\n        record_file (str, optional): The file path or URI. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name or not season_name or not site_name:\n            raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n        if not sensor_data and not record_file:\n            raise ValueError(\"Either sensor_data or record_file must be provided.\")\n\n        timestamp = timestamp if timestamp else datetime.now()\n        collection_date = collection_date if collection_date else timestamp.date()\n        sensor_name = self.sensor_name\n\n        if not dataset_name:\n            dataset_name = f\"{sensor_name} Dataset {collection_date}\"\n\n        sensor_record = SensorRecord.create(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            sensor_name=sensor_name,\n            sensor_data=sensor_data,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number if plot_number != -1 else None,\n            plot_row_number=plot_row_number if plot_row_number != -1 else None,\n            plot_column_number=plot_column_number if plot_column_number != -1 else None,\n            record_file=record_file if record_file else None,\n            record_info=record_info if record_info else {},\n            insert_on_create=False\n        )\n        success, inserted_record_ids = SensorRecord.insert([sensor_record])\n        if not success:\n            print(\"Failed to insert sensor record.\")\n            return False, []\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting sensor record: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.insert_records","title":"<code>insert_records(timestamps=None, collection_date=None, sensor_data=[], dataset_name=None, experiment_name=None, season_name=None, site_name=None, plot_numbers=None, plot_row_numbers=None, plot_column_numbers=None, record_files=None, record_info=[])</code>","text":"<p>Insert multiple sensor records for this sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; success, record_ids = sensor.insert_records(\n...     timestamps=[datetime.now(), datetime.now()],\n...     collection_date=date(2023, 1, 1),\n...     sensor_data=[{\"temperature\": 22.5}, {\"temperature\": 23.0}],\n...     dataset_name=\"Sensor Dataset 1\",\n...     experiment_name=\"Experiment 1\",\n...     season_name=\"Spring\",\n...     site_name=\"Site A\",\n...     plot_numbers=[1, 2],\n...     plot_row_numbers=[1, 2],\n...     plot_column_numbers=[1, 2],\n...     record_files=None,\n...     record_info=[{\"notes\": \"First record\"}, {\"notes\": \"Second record\"}]\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID('...'), UUID('...')]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamps</code> <code>List[datetime]</code> <p>List of timestamps. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>sensor_data</code> <code>List[dict]</code> <p>List of sensor data. Defaults to [].</p> <code>[]</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_numbers</code> <code>List[int]</code> <p>List of plot numbers. Defaults to None.</p> <code>None</code> <code>plot_row_numbers</code> <code>List[int]</code> <p>List of plot row numbers. Defaults to None.</p> <code>None</code> <code>plot_column_numbers</code> <code>List[int]</code> <p>List of plot column numbers. Defaults to None.</p> <code>None</code> <code>record_files</code> <code>List[str]</code> <p>List of file paths or URIs. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>List[dict]</code> <p>List of additional info. Defaults to [].</p> <code>[]</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def insert_records(\n    self,\n    timestamps: List[datetime] = None,\n    collection_date: date = None,\n    sensor_data: List[dict] = [],\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_numbers: List[int] = None,\n    plot_row_numbers: List[int] = None,\n    plot_column_numbers: List[int] = None,\n    record_files: List[str] = None,\n    record_info: List[dict] = []\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert multiple sensor records for this sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; success, record_ids = sensor.insert_records(\n        ...     timestamps=[datetime.now(), datetime.now()],\n        ...     collection_date=date(2023, 1, 1),\n        ...     sensor_data=[{\"temperature\": 22.5}, {\"temperature\": 23.0}],\n        ...     dataset_name=\"Sensor Dataset 1\",\n        ...     experiment_name=\"Experiment 1\",\n        ...     season_name=\"Spring\",\n        ...     site_name=\"Site A\",\n        ...     plot_numbers=[1, 2],\n        ...     plot_row_numbers=[1, 2],\n        ...     plot_column_numbers=[1, 2],\n        ...     record_files=None,\n        ...     record_info=[{\"notes\": \"First record\"}, {\"notes\": \"Second record\"}]\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID('...'), UUID('...')]\n\n    Args:\n        timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        sensor_data (List[dict], optional): List of sensor data. Defaults to [].\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_numbers (List[int], optional): List of plot numbers. Defaults to None.\n        plot_row_numbers (List[int], optional): List of plot row numbers. Defaults to None.\n        plot_column_numbers (List[int], optional): List of plot column numbers. Defaults to None.\n        record_files (List[str], optional): List of file paths or URIs. Defaults to None.\n        record_info (List[dict], optional): List of additional info. Defaults to [].\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name or not season_name or not site_name:\n            raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n        if len(timestamps) == 0:\n            raise ValueError(\"At least one timestamp must be provided.\")\n\n        if not dataset_name:\n            dataset_name = f\"{self.sensor_name} Dataset {collection_date}\"\n\n        collection_date = collection_date if collection_date else timestamps[0].date()\n        sensor_records = []\n        timestamps_length = len(timestamps)\n\n        for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Sensor: \" + self.sensor_name):\n            sensor_record = SensorRecord.create(\n                timestamp=timestamps[i],\n                collection_date=collection_date,\n                sensor_name=self.sensor_name,\n                sensor_data=sensor_data[i] if sensor_data else {},\n                experiment_name=experiment_name,\n                dataset_name=dataset_name if dataset_name else f\"{self.sensor_name} Dataset\",\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_numbers[i] if plot_numbers else None,\n                plot_row_number=plot_row_numbers[i] if plot_row_numbers else None,\n                plot_column_number=plot_column_numbers[i] if plot_column_numbers else None,\n                record_file=record_files[i] if record_files else None,\n                record_info=record_info[i] if record_info else {},\n                insert_on_create=False\n            )\n            sensor_records.append(sensor_record)\n\n        success, inserted_record_ids = SensorRecord.insert(sensor_records)\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting sensor records: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the sensor's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; refreshed_sensor = sensor.refresh()\n&gt;&gt;&gt; print(refreshed_sensor)\nSensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Sensor]</code> <p>Optional[Sensor]: The refreshed sensor, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Refresh the sensor's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; refreshed_sensor = sensor.refresh()\n        &gt;&gt;&gt; print(refreshed_sensor)\n        Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n    Returns:\n        Optional[Sensor]: The refreshed sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SensorModel.get(self.id)\n        if not db_instance:\n            print(f\"Sensor with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                actual_value = getattr(instance, key)\n                setattr(self, key, actual_value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing sensor: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.search","title":"<code>search(sensor_name=None, sensor_type=None, sensor_data_type=None, sensor_data_format=None, sensor_info=None, experiment_name=None, sensor_platform_name=None)</code>  <code>classmethod</code>","text":"<p>Search for sensors based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensors = Sensor.search(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; for sensor in sensors:\n...     print(sensor)\nSensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n</code></pre> <pre><code>&gt;&gt;&gt; sensors = Sensor.search(sensor_type=GEMINISensorType.Temperature)\n&gt;&gt;&gt; for sensor in sensors:\n...     print(sensor)\nSensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The name of the sensor. Defaults to None.</p> <code>None</code> <code>sensor_type</code> <code>GEMINISensorType</code> <p>The type of the sensor. Defaults to None.</p> <code>None</code> <code>sensor_data_type</code> <code>GEMINIDataType</code> <p>The data type. Defaults to None.</p> <code>None</code> <code>sensor_data_format</code> <code>GEMINIDataFormat</code> <p>The data format. Defaults to None.</p> <code>None</code> <code>sensor_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Sensor]]: List of matching sensors, or None if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    sensor_name: str = None,\n    sensor_type: GEMINISensorType = None,\n    sensor_data_type: GEMINIDataType = None,\n    sensor_data_format: GEMINIDataFormat = None,\n    sensor_info: dict = None,\n    experiment_name: str = None,\n    sensor_platform_name: str = None\n) -&gt; Optional[List[\"Sensor\"]]:\n    \"\"\"\n    Search for sensors based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; sensors = Sensor.search(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; for sensor in sensors:\n        ...     print(sensor)\n        Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n        &gt;&gt;&gt; sensors = Sensor.search(sensor_type=GEMINISensorType.Temperature)\n        &gt;&gt;&gt; for sensor in sensors:\n        ...     print(sensor)\n        Sensor(sensor_name=Temperature Sensor, sensor_type_id=1, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n\n    Args:\n        sensor_name (str, optional): The name of the sensor. Defaults to None.\n        sensor_type (GEMINISensorType, optional): The type of the sensor. Defaults to None.\n        sensor_data_type (GEMINIDataType, optional): The data type. Defaults to None.\n        sensor_data_format (GEMINIDataFormat, optional): The data format. Defaults to None.\n        sensor_info (dict, optional): Additional information. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        sensor_platform_name (str, optional): The name of the sensor platform. Defaults to None.\n    Returns:\n        Optional[List[Sensor]]: List of matching sensors, or None if not found.\n    \"\"\"\n    try:\n        if not any([sensor_name, sensor_type, sensor_data_type, sensor_data_format, sensor_info, experiment_name, sensor_platform_name]):\n            print(\"Must provide at least one search parameter.\")\n            return None\n        sensors = ExperimentSensorsViewModel.search(\n            sensor_name=sensor_name,\n            sensor_type=sensor_type.value if sensor_type else None,\n            sensor_data_type=sensor_data_type.value if sensor_data_type else None,\n            sensor_data_format=sensor_data_format.value if sensor_data_format else None,\n            sensor_info=sensor_info,\n            experiment_name=experiment_name,\n            sensor_platform_name=sensor_platform_name\n        )\n        if not sensors or len(sensors) == 0:\n            print(\"No sensors found with the provided search parameters.\")\n            return None\n        sensors = [cls.model_validate(sensor) for sensor in sensors]\n        return sensors\n    except Exception as e:\n        print(f\"Error searching sensors: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.search_records","title":"<code>search_records(collection_date=None, dataset_name=None, experiment_name=None, season_name=None, site_name=None, plot_number=None, plot_row_number=None, plot_column_number=None, record_info=None)</code>","text":"<p>Search for sensor records associated with this sensor based on search parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; records = sensor.search_records(\n...     collection_date=date(2023, 1, 1),\n...     dataset_name=\"Sensor Dataset 1\",\n...     experiment_name=\"Experiment 1\",\n...     season_name=\"Spring\",\n...     site_name=\"Site A\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     record_info={\"notes\": \"First record\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nSensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=1)\nSensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=2)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Returns:     List[SensorRecord]: List of matching sensor records, or empty list if not found.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def search_records(\n    self,\n    collection_date: date = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    record_info: dict = None\n) -&gt; List[SensorRecord]:\n    \"\"\"\n    Search for sensor records associated with this sensor based on search parameters.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; records = sensor.search_records(\n        ...     collection_date=date(2023, 1, 1),\n        ...     dataset_name=\"Sensor Dataset 1\",\n        ...     experiment_name=\"Experiment 1\",\n        ...     season_name=\"Spring\",\n        ...     site_name=\"Site A\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     record_info={\"notes\": \"First record\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=1)\n        SensorRecord(id=UUID('...'), sensor_name='Temperature Sensor', timestamp='2023-01-01T00:00:00', dataset_name='Sensor Dataset 1', experiment_name='Experiment 1', season_name='Spring', site_name='Site A', plot_number=2)\n\n    Args:\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Returns:\n        List[SensorRecord]: List of matching sensor records, or empty list if not found.\n    \"\"\"\n    try:\n        record_info = record_info if record_info else {}\n        record_info = {k: v for k, v in record_info.items() if v is not None}\n\n        records = SensorRecord.search(\n            sensor_name=self.sensor_name,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            record_info=record_info\n        )\n        return records\n    except Exception as e:\n        print(f\"Error searching sensor records: {e}\")\n        return []\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.set_info","title":"<code>set_info(sensor_info)</code>","text":"<p>Set the additional information of the sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; updated_sensor = sensor.set_info(sensor_info={'manufacturer': 'SensorCorp', 'model': 'TempX1000'})\n&gt;&gt;&gt; print(updated_sensor.get_info())\n{'manufacturer': 'SensorCorp', 'model': 'TempX1000'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Sensor]: The updated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def set_info(self, sensor_info: dict) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Set the additional information of the sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; updated_sensor = sensor.set_info(sensor_info={'manufacturer': 'SensorCorp', 'model': 'TempX1000'})\n        &gt;&gt;&gt; print(updated_sensor.get_info())\n        {'manufacturer': 'SensorCorp', 'model': 'TempX1000'}\n\n    Args:\n        sensor_info (dict): The new information to set.\n    Returns:\n        Optional[Sensor]: The updated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        sensor = SensorModel.get(current_id)\n        if not sensor:\n            print(f\"Sensor with ID {current_id} does not exist.\")\n            return None\n        sensor = SensorModel.update(\n            sensor,\n            sensor_info=sensor_info\n        )\n        sensor = self.model_validate(sensor)\n        self.refresh()\n        return sensor\n    except Exception as e:\n        print(f\"Error setting sensor info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate this sensor from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; experiment = sensor.unassociate_experiment(experiment_name=\"Experiment 1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this sensor from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; experiment = sensor.unassociate_experiment(experiment_name=\"Experiment 1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment 1, experiment_start_date='2023-01-01', experiment_end_date='2023-12-31', id=UUID('...'))\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentSensorModel.get_by_parameters(\n            experiment_id=experiment.id,\n            sensor_id=self.id\n        )\n        if not existing_association:\n            print(f\"Sensor {self.sensor_name} not associated with experiment {experiment_name}.\")\n            return None\n        is_deleted = ExperimentSensorModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate sensor {self.sensor_name} from experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassociating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.unassociate_sensor_platform","title":"<code>unassociate_sensor_platform(sensor_platform_name)</code>","text":"<p>Unassociate this sensor from a sensor platform.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; sensor_platform = sensor.unassociate_sensor_platform(sensor_platform_name=\"Platform 1\")\n&gt;&gt;&gt; print(sensor_platform)\nSensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_platform_name</code> <code>str</code> <p>The name of the sensor platform to unassociate.</p> required <p>Returns:     Optional[SensorPlatform]: The unassociated sensor platform, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def unassociate_sensor_platform(self, sensor_platform_name: str) -&gt; Optional[\"SensorPlatform\"]:\n    \"\"\"\n    Unassociate this sensor from a sensor platform.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; sensor_platform = sensor.unassociate_sensor_platform(sensor_platform_name=\"Platform 1\")\n        &gt;&gt;&gt; print(sensor_platform)\n        SensorPlatform(sensor_platform_name=Platform 1, id=UUID('...'))\n\n    Args:\n        sensor_platform_name (str): The name of the sensor platform to unassociate.\n    Returns:\n        Optional[SensorPlatform]: The unassociated sensor platform, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.sensor_platform import SensorPlatform\n        sensor_platform = SensorPlatform.get(sensor_platform_name=sensor_platform_name)\n        if not sensor_platform:\n            print(f\"Sensor platform {sensor_platform_name} does not exist.\")\n            return None\n        existing_association = SensorPlatformSensorModel.get_by_parameters(\n            sensor_platform_id=sensor_platform.id,\n            sensor_id=self.id\n        )\n        if not existing_association:\n            print(f\"Sensor {self.sensor_name} not associated with sensor platform {sensor_platform_name}.\")\n            return None\n        is_deleted = SensorPlatformSensorModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate sensor {self.sensor_name} from sensor platform {sensor_platform_name}.\")\n            return None\n        self.refresh()\n        return sensor_platform\n    except Exception as e:\n        print(f\"Error unassociating sensor platform: {e}\")\n        return None\n</code></pre>"},{"location":"api/sensors/#gemini.api.sensor.Sensor.update","title":"<code>update(sensor_name=None, sensor_type=None, sensor_data_type=None, sensor_data_format=None, sensor_info=None)</code>","text":"<p>Update the details of the sensor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n&gt;&gt;&gt; updated_sensor = sensor.update(sensor_name=\"New Temperature Sensor\", sensor_type=GEMINISensorType.Humidity)\n&gt;&gt;&gt; print(updated_sensor)\nSensor(sensor_name=New Temperature Sensor, sensor_type_id=2, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>sensor_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>sensor_type</code> <code>GEMINISensorType</code> <p>The new type. Defaults to None.</p> <code>None</code> <code>sensor_data_type</code> <code>GEMINIDataType</code> <p>The new data type. Defaults to None.</p> <code>None</code> <code>sensor_data_format</code> <code>GEMINIDataFormat</code> <p>The new data format. Defaults to None.</p> <code>None</code> <code>sensor_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Sensor]: The updated sensor, or None if an error occurred.</p> Source code in <code>gemini/api/sensor.py</code> <pre><code>def update(\n    self,\n    sensor_name: str = None, \n    sensor_type: GEMINISensorType = None,\n    sensor_data_type: GEMINIDataType = None,\n    sensor_data_format: GEMINIDataFormat = None,\n    sensor_info: dict = None\n) -&gt; Optional[\"Sensor\"]:\n    \"\"\"\n    Update the details of the sensor.\n\n    Examples:\n        &gt;&gt;&gt; sensor = Sensor.get(sensor_name=\"Temperature Sensor\")\n        &gt;&gt;&gt; updated_sensor = sensor.update(sensor_name=\"New Temperature Sensor\", sensor_type=GEMINISensorType.Humidity)\n        &gt;&gt;&gt; print(updated_sensor)\n        Sensor(sensor_name=New Temperature Sensor, sensor_type_id=2, sensor_data_type_id=1, sensor_data_format_id=1, id=UUID('...'))\n\n    Args:\n        sensor_name (str, optional): The new name. Defaults to None.\n        sensor_type (GEMINISensorType, optional): The new type. Defaults to None.\n        sensor_data_type (GEMINIDataType, optional): The new data type. Defaults to None.\n        sensor_data_format (GEMINIDataFormat, optional): The new data format. Defaults to None.\n        sensor_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[Sensor]: The updated sensor, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([sensor_type, sensor_data_type, sensor_data_format, sensor_info, sensor_name]):\n            print(\"At least one update parameter must be provided.\")\n            return None\n\n        current_id = self.id\n        sensor = SensorModel.get(current_id)\n        if not sensor:\n            print(f\"Sensor with ID {current_id} does not exist.\")\n            return None\n\n        sensor = SensorModel.update(\n            sensor,\n            sensor_name=sensor_name,\n            sensor_type_id=sensor_type.value if sensor_type else None,\n            sensor_data_type_id=sensor_data_type.value if sensor_data_type else None,\n            sensor_data_format_id=sensor_data_format.value if sensor_data_format else None,\n            sensor_info=sensor_info\n        )\n        updated_sensor = self.model_validate(sensor)\n        self.refresh()\n        return updated_sensor\n    except Exception as e:\n        print(f\"Error updating sensor: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/","title":"Sites API","text":""},{"location":"api/sites/#description","title":"Description","text":"<p>A site is defined as the physical location in which Plots and Plants are located. A site can be associated with multiple Experiments.</p>"},{"location":"api/sites/#module","title":"Module","text":"<p>This module defines the Site class, which represents a geographical site entity, including its metadata, associations to experiments and plots, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting sites, as well as methods for checking existence, searching, and managing associations with experiments and plots.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a site with the given name exists.</li> <li><code>create</code>: Create a new site.</li> <li><code>get</code>: Retrieve a site by its name and experiment.</li> <li><code>get_by_id</code>: Retrieve a site by its ID.</li> <li><code>get_all</code>: Retrieve all sites.</li> <li><code>search</code>: Search for sites based on various criteria.</li> <li><code>update</code>: Update the details of a site.</li> <li><code>delete</code>: Delete a site.</li> <li><code>refresh</code>: Refresh the site's data from the database.</li> <li><code>get_info</code>: Get the additional information of the site.</li> <li><code>set_info</code>: Set the additional information of the site.</li> <li>Association methods for experiments and plots.</li> </ul>"},{"location":"api/sites/#gemini.api.site.Site","title":"<code>Site</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a geographical site entity, including its metadata, associations to experiments and plots, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the site.</p> <code>site_name</code> <code>str</code> <p>The name of the site.</p> <code>site_city</code> <code>Optional[str]</code> <p>The city where the site is located.</p> <code>site_state</code> <code>Optional[str]</code> <p>The state where the site is located.</p> <code>site_country</code> <code>Optional[str]</code> <p>The country where the site is located.</p> <code>site_info</code> <code>Optional[dict]</code> <p>Additional information about the site.</p> Source code in <code>gemini/api/site.py</code> <pre><code>class Site(APIBase):\n    \"\"\"\n    Represents a geographical site entity, including its metadata, associations to experiments and plots, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the site.\n        site_name (str): The name of the site.\n        site_city (Optional[str]): The city where the site is located.\n        site_state (Optional[str]): The state where the site is located.\n        site_country (Optional[str]): The country where the site is located.\n        site_info (Optional[dict]): Additional information about the site.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"site_id\"))\n\n    site_name: str\n    site_city: Optional[str] = None\n    site_state: Optional[str] = None\n    site_country: Optional[str] = None\n    site_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Site object.\"\"\"\n        return f\"Site(site_name={self.site_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Site object.\"\"\"\n        return f\"Site(site_name={self.site_name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        site_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a site with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Site.exists(\"Test Site\")\n            True\n            &gt;&gt;&gt; Site.exists(\"Nonexistent Site\")\n            False\n\n        Args:\n            site_name (str): The name of the site.\n        Returns:\n            bool: True if the site exists, False otherwise.\n        \"\"\"\n        try:\n            exists = SiteModel.exists(site_name=site_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of site: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        site_name: str,\n        site_city: str = None,\n        site_state: str = None,\n        site_country: str = None,\n        site_info: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Create a new site and associate it with an experiment if provided.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.create(\"Test Site\", \"Test City\", \"Test State\", \"Test Country\", {\"info\": \"test\"}, \"Test Experiment\")\n            &gt;&gt;&gt; print(site)\n            Site(site_name=Test Site, id=UUID(...))\n\n        Args:\n            site_name (str): The name of the site.\n            site_city (str, optional): The city. Defaults to None.\n            site_state (str, optional): The state. Defaults to None.\n            site_country (str, optional): The country. Defaults to None.\n            site_info (dict, optional): Additional information. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[Site]: The created site, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SiteModel.get_or_create(\n                site_name=site_name,\n                site_city=site_city,\n                site_state=site_state,\n                site_country=site_country,\n                site_info=site_info,\n            )\n            site = cls.model_validate(db_instance)\n            if experiment_name:\n                site.associate_experiment(experiment_name)\n            return site\n        except Exception as e:\n            print(f\"Error creating site: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        site_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Retrieve a site by its name and experiment.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\", \"Test Experiment\")\n            &gt;&gt;&gt; print(site)\n            Site(site_name=Test Site, id=UUID(...))\n\n        Args:\n            site_name (str): The name of the site.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Site]: The site, or None if not found.\n        \"\"\"\n        try:\n            db_instance = ExperimentSitesViewModel.get_by_parameters(\n                site_name=site_name,\n                experiment_name=experiment_name\n            )\n            if not db_instance:\n                print(f\"Site with name {site_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting site: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Retrieve a site by its ID.\n\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get_by_id(UUID('...'))\n            &gt;&gt;&gt; print(site)\n            Site(site_name=Test Site, id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the site.\n        Returns:\n            Optional[Site]: The site, or None if not found.\n        \"\"\"\n        try:\n            db_instance = SiteModel.get(id)\n            if not db_instance:\n                print(f\"Site with ID {id} does not exist.\")\n                return None\n            site = cls.model_validate(db_instance)\n            return site\n        except Exception as e:\n            print(f\"Error getting site by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Site\"]]:\n        \"\"\"\n        Retrieve all sites.\n\n        Examples:\n            &gt;&gt;&gt; sites = Site.get_all()\n            &gt;&gt;&gt; print(sites)\n            [Site(site_name=Site1, id=UUID(...)), Site(site_name=Site2, id=UUID(...))]\n\n        Returns:\n            Optional[List[Site]]: List of all sites, or None if not found.\n        \"\"\"\n        try:\n            sites = SiteModel.all()\n            if not sites or len(sites) == 0:\n                print(\"No sites found.\")\n                return None\n            sites = [cls.model_validate(site) for site in sites]\n            return sites\n        except Exception as e:\n            print(f\"Error getting all sites: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        site_name: str = None,\n        site_city: str = None,\n        site_state: str = None,\n        site_country: str = None,\n        site_info: dict = None,\n        experiment_name: str = None\n    ) -&gt; Optional[List[\"Site\"]]:\n        \"\"\"\n        Search for sites based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; sites = Site.search(site_name=\"Test Site\")\n            &gt;&gt;&gt; print(sites)\n            [Site(site_name=Test Site, id=UUID(...))]\n\n        Args:\n            site_name (str, optional): The name of the site. Defaults to None.\n            site_city (str, optional): The city. Defaults to None.\n            site_state (str, optional): The state. Defaults to None.\n            site_country (str, optional): The country. Defaults to None.\n            site_info (dict, optional): Additional information. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[List[Site]]: List of matching sites, or None if not found.\n        \"\"\"\n        try:\n            if not any([site_name, site_city, site_state, site_country, site_info, experiment_name]):\n                print(\"No search parameters provided.\")\n                return None\n\n            sites = ExperimentSitesViewModel.search(\n                site_name=site_name,\n                site_city=site_city,\n                site_state=site_state,\n                site_country=site_country,\n                site_info=site_info,\n                experiment_name=experiment_name\n            )\n            if not sites or len(sites) == 0:\n                print(\"No sites found matching the search criteria.\")\n                return None\n            sites = [cls.model_validate(site) for site in sites]\n            return sites\n        except Exception as e:\n            print(f\"Error searching sites: {e}\")\n            return None\n\n    def update(\n        self,\n        site_name: str = None,\n        site_city: str = None,\n        site_state: str = None,\n        site_country: str = None,\n        site_info: dict = None\n    ) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Update the details of the site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; updated_site = site.update(site_city=\"New City\", site_state=\"New State\")\n            &gt;&gt;&gt; print(updated_site)\n            Site(site_name=Test Site, id=UUID(...))\n\n        Args:\n            site_name (str, optional): The new name. Defaults to None.\n            site_city (str, optional): The new city. Defaults to None.\n            site_state (str, optional): The new state. Defaults to None.\n            site_country (str, optional): The new country. Defaults to None.\n            site_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[Site]: The updated site, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([site_city, site_state, site_country, site_info, site_name]):\n                raise ValueError(\"At least one update parameter must be provided.\")\n\n            current_id = self.id\n            site = SiteModel.get(current_id)\n            if not site:\n                print(f\"Site with ID {current_id} does not exist.\")\n                return None\n\n            updated_site = SiteModel.update(\n                site,\n                site_name=site_name,\n                site_city=site_city,\n                site_state=site_state,\n                site_country=site_country,\n                site_info=site_info\n            )\n            updated_site = self.model_validate(updated_site)\n            self.refresh()\n            return updated_site\n        except Exception as e:\n            print(f\"Error updating site: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; deleted = site.delete()\n            &gt;&gt;&gt; print(deleted)\n            True\n\n        Returns:\n            bool: True if the site was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            site = SiteModel.get(current_id)\n            if not site:\n                print(f\"Site with ID {current_id} does not exist.\")\n                return False\n\n            SiteModel.delete(site)\n            return True\n        except Exception as e:\n            print(f\"Error deleting site: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Refresh the site's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; refreshed_site = site.refresh()\n            &gt;&gt;&gt; print(refreshed_site)\n            Site(site_name=Test Site, id=UUID(...))\n\n        Returns:\n            Optional[Site]: The refreshed site, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = SiteModel.get(self.id)\n            if not db_instance:\n                print(f\"Site with ID {self.id} does not exist.\")\n                return self\n\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing site: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; site_info = site.get_info()\n            &gt;&gt;&gt; print(site_info)\n            {'info': 'test'}\n\n        Returns:\n            Optional[dict]: The site's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            site = SiteModel.get(current_id)\n            if not site:\n                print(f\"Site with ID {current_id} does not exist.\")\n                return None\n\n            site_info = site.site_info\n            if not site_info:\n                print(\"Site info is empty.\")\n                return None\n            return site_info\n        except Exception as e:\n            print(f\"Error getting site info: {e}\")\n            return None\n\n    def set_info(self, site_info: dict) -&gt; Optional[\"Site\"]:\n        \"\"\"\n        Set the additional information of the site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; updated_site = site.set_info({\"new_info\": \"updated\"})\n            &gt;&gt;&gt; print(updated_site.site_info)\n            {'new_info': 'updated'}\n\n        Args:\n            site_info (dict): The new information to set.\n        Returns:\n            Optional[Site]: The updated site, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            site = SiteModel.get(current_id)\n            if not site:\n                print(f\"Site with ID {current_id} does not exist.\")\n                return None\n\n            updated_site = SiteModel.update(\n                site,\n                site_info=site_info\n            )\n            updated_site = self.model_validate(updated_site)\n            self.refresh()\n            return updated_site\n        except Exception as e:\n            print(f\"Error setting site info: {e}\")\n            return None\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with this site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; experiments = site.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n            Experiment(experiment_name=Another Experiment, experiment_start_date=2023-02-01, experiment_end_date=2023-11-30, id=UUID(...))\n\n        Returns:\n            Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment_sites = ExperimentSitesViewModel.search(site_id=self.id)\n            if not experiment_sites or len(experiment_sites) == 0:\n                print(f\"No associated experiments found for site {self.site_name}.\")\n                return None\n            experiments = [Experiment.model_validate(experiment) for experiment in experiment_sites]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this site with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; experiment = site.associate_experiment(\"Test Experiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentSiteModel.get_by_parameters(\n                experiment_id=experiment.id,\n                site_id=self.id\n            )\n            if existing_association:\n                print(f\"Site {self.site_name} already associated with experiment {experiment_name}.\")\n                return None\n            new_association = ExperimentSiteModel.get_or_create(\n                experiment_id=experiment.id,\n                site_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate site {self.site_name} with experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating experiment: {e}\")\n            return None\n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this site from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; experiment = site.unassociate_experiment(\"Test Experiment\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentSiteModel.get_by_parameters(\n                experiment_id=experiment.id,\n                site_id=self.id\n            )\n            if not existing_association:\n                print(f\"Site {self.site_name} not associated with experiment {experiment_name}.\")\n                return None\n            is_deleted = ExperimentSiteModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate site {self.site_name} from experiment {experiment_name}.\")\n                return None\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassociating experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this site is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; is_associated = site.belongs_to_experiment(\"Test Experiment\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name=experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentSiteModel.exists(\n                experiment_id=experiment.id,\n                site_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking experiment membership: {e}\")\n            return False\n\n    def get_associated_plots(self) -&gt; Optional[List[\"Plot\"]]:\n        \"\"\"\n        Get all plots associated with this site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; plots = site.get_associated_plots()\n            &gt;&gt;&gt; for plot in plots:\n            ...     print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n            Plot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n\n        Returns:\n            Optional[List[Plot]]: A list of associated plots, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plots = PlotViewModel.search(site_id=self.id)\n            if not plots or len(plots) == 0:\n                print(f\"No associated plots found for site {self.site_name}.\")\n                return None\n            plots = [Plot.model_validate(plot) for plot in plots]\n            return plots\n        except Exception as e:\n            print(f\"Error getting associated plots: {e}\")\n            return None\n\n    def create_new_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None,\n        plot_info: dict = {}\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Create and associate a new plot with this site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; new_plot = site.create_new_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\", {\"info\": \"test\"})\n            &gt;&gt;&gt; print(new_plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            plot_info (dict, optional): Additional information. Defaults to {{}}.\n        Returns:\n            Optional[Plot]: The created and associated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            new_plot = Plot.create(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=self.site_name,\n                plot_info=plot_info\n            )\n            if not new_plot:\n                print(f\"Failed to create new plot {plot_number}.\")\n                return None\n            return new_plot\n        except Exception as e:\n            print(f\"Error creating new plot: {e}\")\n            return None\n\n    def associate_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Associate an existing plot with this site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; plot = site.associate_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n        Returns:\n            Optional[Plot]: The associated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name\n            )\n            if not plot:\n                print(f\"Plot {plot_number} does not exist.\")\n                return None\n            plot.associate_site(site_name=self.site_name)\n            return plot\n        except Exception as e:\n            print(f\"Error associating plot: {e}\")\n            return None\n\n\n    def unassociate_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None\n    ) -&gt; Optional[\"Plot\"]:\n        \"\"\"\n        Unassociate a plot from this site.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; plot = site.unassociate_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n            &gt;&gt;&gt; print(plot)\n            Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n        Returns:\n            Optional[Plot]: The unassociated plot, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name\n            )\n            if not plot:\n                print(f\"Plot {plot_number} does not exist.\")\n                return None\n            plot.unassociate_site()\n            return plot\n        except Exception as e:\n            print(f\"Error unassociating plot: {e}\")\n            return None\n\n\n    def belongs_to_plot(\n        self,\n        plot_number: int,\n        plot_row_number: int,\n        plot_column_number: int,\n        experiment_name: str = None,\n        season_name: str = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if this site is associated with a specific plot.\n\n        Examples:\n            &gt;&gt;&gt; site = Site.get(\"Test Site\")\n            &gt;&gt;&gt; is_associated = site.belongs_to_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            plot_number (int): The plot number.\n            plot_row_number (int): The row number of the plot.\n            plot_column_number (int): The column number of the plot.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.plot import Plot\n            plot = Plot.get(\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                experiment_name=experiment_name,\n                season_name=season_name\n            )\n            if not plot:\n                print(f\"Plot {plot_number} does not exist.\")\n                return False\n            association_exists = PlotViewModel.exists(\n                site_id=self.id,\n                plot_id=plot.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking plot membership: {e}\")\n            return False\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Site object.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Site object.\"\"\"\n    return f\"Site(site_name={self.site_name}, id={self.id})\"\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Site object.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Site object.\"\"\"\n    return f\"Site(site_name={self.site_name}, id={self.id})\"\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this site with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; experiment = site.associate_experiment(\"Test Experiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this site with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; experiment = site.associate_experiment(\"Test Experiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentSiteModel.get_by_parameters(\n            experiment_id=experiment.id,\n            site_id=self.id\n        )\n        if existing_association:\n            print(f\"Site {self.site_name} already associated with experiment {experiment_name}.\")\n            return None\n        new_association = ExperimentSiteModel.get_or_create(\n            experiment_id=experiment.id,\n            site_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate site {self.site_name} with experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.associate_plot","title":"<code>associate_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None)</code>","text":"<p>Associate an existing plot with this site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; plot = site.associate_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plot]: The associated plot, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def associate_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Associate an existing plot with this site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; plot = site.associate_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n    Returns:\n        Optional[Plot]: The associated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name\n        )\n        if not plot:\n            print(f\"Plot {plot_number} does not exist.\")\n            return None\n        plot.associate_site(site_name=self.site_name)\n        return plot\n    except Exception as e:\n        print(f\"Error associating plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this site is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; is_associated = site.belongs_to_experiment(\"Test Experiment\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this site is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; is_associated = site.belongs_to_experiment(\"Test Experiment\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentSiteModel.exists(\n            experiment_id=experiment.id,\n            site_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking experiment membership: {e}\")\n        return False\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.belongs_to_plot","title":"<code>belongs_to_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None)</code>","text":"<p>Check if this site is associated with a specific plot.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; is_associated = site.belongs_to_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def belongs_to_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None\n) -&gt; bool:\n    \"\"\"\n    Check if this site is associated with a specific plot.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; is_associated = site.belongs_to_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name\n        )\n        if not plot:\n            print(f\"Plot {plot_number} does not exist.\")\n            return False\n        association_exists = PlotViewModel.exists(\n            site_id=self.id,\n            plot_id=plot.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking plot membership: {e}\")\n        return False\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.create","title":"<code>create(site_name, site_city=None, site_state=None, site_country=None, site_info={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new site and associate it with an experiment if provided.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.create(\"Test Site\", \"Test City\", \"Test State\", \"Test Country\", {\"info\": \"test\"}, \"Test Experiment\")\n&gt;&gt;&gt; print(site)\nSite(site_name=Test Site, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <code>site_city</code> <code>str</code> <p>The city. Defaults to None.</p> <code>None</code> <code>site_state</code> <code>str</code> <p>The state. Defaults to None.</p> <code>None</code> <code>site_country</code> <code>str</code> <p>The country. Defaults to None.</p> <code>None</code> <code>site_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Site]: The created site, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    site_name: str,\n    site_city: str = None,\n    site_state: str = None,\n    site_country: str = None,\n    site_info: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Create a new site and associate it with an experiment if provided.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.create(\"Test Site\", \"Test City\", \"Test State\", \"Test Country\", {\"info\": \"test\"}, \"Test Experiment\")\n        &gt;&gt;&gt; print(site)\n        Site(site_name=Test Site, id=UUID(...))\n\n    Args:\n        site_name (str): The name of the site.\n        site_city (str, optional): The city. Defaults to None.\n        site_state (str, optional): The state. Defaults to None.\n        site_country (str, optional): The country. Defaults to None.\n        site_info (dict, optional): Additional information. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[Site]: The created site, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SiteModel.get_or_create(\n            site_name=site_name,\n            site_city=site_city,\n            site_state=site_state,\n            site_country=site_country,\n            site_info=site_info,\n        )\n        site = cls.model_validate(db_instance)\n        if experiment_name:\n            site.associate_experiment(experiment_name)\n        return site\n    except Exception as e:\n        print(f\"Error creating site: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.create_new_plot","title":"<code>create_new_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None, plot_info={})</code>","text":"<p>Create and associate a new plot with this site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; new_plot = site.create_new_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\", {\"info\": \"test\"})\n&gt;&gt;&gt; print(new_plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>plot_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[Plot]: The created and associated plot, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def create_new_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None,\n    plot_info: dict = {}\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Create and associate a new plot with this site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; new_plot = site.create_new_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\", {\"info\": \"test\"})\n        &gt;&gt;&gt; print(new_plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        plot_info (dict, optional): Additional information. Defaults to {{}}.\n    Returns:\n        Optional[Plot]: The created and associated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        new_plot = Plot.create(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=self.site_name,\n            plot_info=plot_info\n        )\n        if not new_plot:\n            print(f\"Failed to create new plot {plot_number}.\")\n            return None\n        return new_plot\n    except Exception as e:\n        print(f\"Error creating new plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.delete","title":"<code>delete()</code>","text":"<p>Delete the site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; deleted = site.delete()\n&gt;&gt;&gt; print(deleted)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the site was deleted, False otherwise.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; deleted = site.delete()\n        &gt;&gt;&gt; print(deleted)\n        True\n\n    Returns:\n        bool: True if the site was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        site = SiteModel.get(current_id)\n        if not site:\n            print(f\"Site with ID {current_id} does not exist.\")\n            return False\n\n        SiteModel.delete(site)\n        return True\n    except Exception as e:\n        print(f\"Error deleting site: {e}\")\n        return False\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.exists","title":"<code>exists(site_name)</code>  <code>classmethod</code>","text":"<p>Check if a site with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Site.exists(\"Test Site\")\nTrue\n&gt;&gt;&gt; Site.exists(\"Nonexistent Site\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <p>Returns:     bool: True if the site exists, False otherwise.</p> Source code in <code>gemini/api/site.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    site_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a site with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Site.exists(\"Test Site\")\n        True\n        &gt;&gt;&gt; Site.exists(\"Nonexistent Site\")\n        False\n\n    Args:\n        site_name (str): The name of the site.\n    Returns:\n        bool: True if the site exists, False otherwise.\n    \"\"\"\n    try:\n        exists = SiteModel.exists(site_name=site_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of site: {e}\")\n        return False\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.get","title":"<code>get(site_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a site by its name and experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\", \"Test Experiment\")\n&gt;&gt;&gt; print(site)\nSite(site_name=Test Site, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Site]: The site, or None if not found.</p> Source code in <code>gemini/api/site.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    site_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Retrieve a site by its name and experiment.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\", \"Test Experiment\")\n        &gt;&gt;&gt; print(site)\n        Site(site_name=Test Site, id=UUID(...))\n\n    Args:\n        site_name (str): The name of the site.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Site]: The site, or None if not found.\n    \"\"\"\n    try:\n        db_instance = ExperimentSitesViewModel.get_by_parameters(\n            site_name=site_name,\n            experiment_name=experiment_name\n        )\n        if not db_instance:\n            print(f\"Site with name {site_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting site: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all sites.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sites = Site.get_all()\n&gt;&gt;&gt; print(sites)\n[Site(site_name=Site1, id=UUID(...)), Site(site_name=Site2, id=UUID(...))]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Site]]</code> <p>Optional[List[Site]]: List of all sites, or None if not found.</p> Source code in <code>gemini/api/site.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Site\"]]:\n    \"\"\"\n    Retrieve all sites.\n\n    Examples:\n        &gt;&gt;&gt; sites = Site.get_all()\n        &gt;&gt;&gt; print(sites)\n        [Site(site_name=Site1, id=UUID(...)), Site(site_name=Site2, id=UUID(...))]\n\n    Returns:\n        Optional[List[Site]]: List of all sites, or None if not found.\n    \"\"\"\n    try:\n        sites = SiteModel.all()\n        if not sites or len(sites) == 0:\n            print(\"No sites found.\")\n            return None\n        sites = [cls.model_validate(site) for site in sites]\n        return sites\n    except Exception as e:\n        print(f\"Error getting all sites: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with this site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; experiments = site.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\nExperiment(experiment_name=Another Experiment, experiment_start_date=2023-02-01, experiment_end_date=2023-11-30, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[Experiment]]: A list of associated experiments, or None if not found.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with this site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; experiments = site.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n        Experiment(experiment_name=Another Experiment, experiment_start_date=2023-02-01, experiment_end_date=2023-11-30, id=UUID(...))\n\n    Returns:\n        Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment_sites = ExperimentSitesViewModel.search(site_id=self.id)\n        if not experiment_sites or len(experiment_sites) == 0:\n            print(f\"No associated experiments found for site {self.site_name}.\")\n            return None\n        experiments = [Experiment.model_validate(experiment) for experiment in experiment_sites]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.get_associated_plots","title":"<code>get_associated_plots()</code>","text":"<p>Get all plots associated with this site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; plots = site.get_associated_plots()\n&gt;&gt;&gt; for plot in plots:\n...     print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\nPlot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Plot]]</code> <p>Optional[List[Plot]]: A list of associated plots, or None if not found.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def get_associated_plots(self) -&gt; Optional[List[\"Plot\"]]:\n    \"\"\"\n    Get all plots associated with this site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; plots = site.get_associated_plots()\n        &gt;&gt;&gt; for plot in plots:\n        ...     print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n        Plot(plot_number=2, plot_row_number=1, plot_column_number=2, id=UUID(...))\n\n    Returns:\n        Optional[List[Plot]]: A list of associated plots, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plots = PlotViewModel.search(site_id=self.id)\n        if not plots or len(plots) == 0:\n            print(f\"No associated plots found for site {self.site_name}.\")\n            return None\n        plots = [Plot.model_validate(plot) for plot in plots]\n        return plots\n    except Exception as e:\n        print(f\"Error getting associated plots: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a site by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get_by_id(UUID('...'))\n&gt;&gt;&gt; print(site)\nSite(site_name=Test Site, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the site.</p> required <p>Returns:     Optional[Site]: The site, or None if not found.</p> Source code in <code>gemini/api/site.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Retrieve a site by its ID.\n\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get_by_id(UUID('...'))\n        &gt;&gt;&gt; print(site)\n        Site(site_name=Test Site, id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the site.\n    Returns:\n        Optional[Site]: The site, or None if not found.\n    \"\"\"\n    try:\n        db_instance = SiteModel.get(id)\n        if not db_instance:\n            print(f\"Site with ID {id} does not exist.\")\n            return None\n        site = cls.model_validate(db_instance)\n        return site\n    except Exception as e:\n        print(f\"Error getting site by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; site_info = site.get_info()\n&gt;&gt;&gt; print(site_info)\n{'info': 'test'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The site's info, or None if not found.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; site_info = site.get_info()\n        &gt;&gt;&gt; print(site_info)\n        {'info': 'test'}\n\n    Returns:\n        Optional[dict]: The site's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        site = SiteModel.get(current_id)\n        if not site:\n            print(f\"Site with ID {current_id} does not exist.\")\n            return None\n\n        site_info = site.site_info\n        if not site_info:\n            print(\"Site info is empty.\")\n            return None\n        return site_info\n    except Exception as e:\n        print(f\"Error getting site info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the site's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; refreshed_site = site.refresh()\n&gt;&gt;&gt; print(refreshed_site)\nSite(site_name=Test Site, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Site]</code> <p>Optional[Site]: The refreshed site, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Refresh the site's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; refreshed_site = site.refresh()\n        &gt;&gt;&gt; print(refreshed_site)\n        Site(site_name=Test Site, id=UUID(...))\n\n    Returns:\n        Optional[Site]: The refreshed site, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = SiteModel.get(self.id)\n        if not db_instance:\n            print(f\"Site with ID {self.id} does not exist.\")\n            return self\n\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing site: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.search","title":"<code>search(site_name=None, site_city=None, site_state=None, site_country=None, site_info=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for sites based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; sites = Site.search(site_name=\"Test Site\")\n&gt;&gt;&gt; print(sites)\n[Site(site_name=Test Site, id=UUID(...))]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>site_city</code> <code>str</code> <p>The city. Defaults to None.</p> <code>None</code> <code>site_state</code> <code>str</code> <p>The state. Defaults to None.</p> <code>None</code> <code>site_country</code> <code>str</code> <p>The country. Defaults to None.</p> <code>None</code> <code>site_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Site]]: List of matching sites, or None if not found.</p> Source code in <code>gemini/api/site.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    site_name: str = None,\n    site_city: str = None,\n    site_state: str = None,\n    site_country: str = None,\n    site_info: dict = None,\n    experiment_name: str = None\n) -&gt; Optional[List[\"Site\"]]:\n    \"\"\"\n    Search for sites based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; sites = Site.search(site_name=\"Test Site\")\n        &gt;&gt;&gt; print(sites)\n        [Site(site_name=Test Site, id=UUID(...))]\n\n    Args:\n        site_name (str, optional): The name of the site. Defaults to None.\n        site_city (str, optional): The city. Defaults to None.\n        site_state (str, optional): The state. Defaults to None.\n        site_country (str, optional): The country. Defaults to None.\n        site_info (dict, optional): Additional information. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[List[Site]]: List of matching sites, or None if not found.\n    \"\"\"\n    try:\n        if not any([site_name, site_city, site_state, site_country, site_info, experiment_name]):\n            print(\"No search parameters provided.\")\n            return None\n\n        sites = ExperimentSitesViewModel.search(\n            site_name=site_name,\n            site_city=site_city,\n            site_state=site_state,\n            site_country=site_country,\n            site_info=site_info,\n            experiment_name=experiment_name\n        )\n        if not sites or len(sites) == 0:\n            print(\"No sites found matching the search criteria.\")\n            return None\n        sites = [cls.model_validate(site) for site in sites]\n        return sites\n    except Exception as e:\n        print(f\"Error searching sites: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.set_info","title":"<code>set_info(site_info)</code>","text":"<p>Set the additional information of the site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; updated_site = site.set_info({\"new_info\": \"updated\"})\n&gt;&gt;&gt; print(updated_site.site_info)\n{'new_info': 'updated'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Site]: The updated site, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def set_info(self, site_info: dict) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Set the additional information of the site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; updated_site = site.set_info({\"new_info\": \"updated\"})\n        &gt;&gt;&gt; print(updated_site.site_info)\n        {'new_info': 'updated'}\n\n    Args:\n        site_info (dict): The new information to set.\n    Returns:\n        Optional[Site]: The updated site, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        site = SiteModel.get(current_id)\n        if not site:\n            print(f\"Site with ID {current_id} does not exist.\")\n            return None\n\n        updated_site = SiteModel.update(\n            site,\n            site_info=site_info\n        )\n        updated_site = self.model_validate(updated_site)\n        self.refresh()\n        return updated_site\n    except Exception as e:\n        print(f\"Error setting site info: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate this site from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; experiment = site.unassociate_experiment(\"Test Experiment\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this site from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; experiment = site.unassociate_experiment(\"Test Experiment\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Test Experiment, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name=experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentSiteModel.get_by_parameters(\n            experiment_id=experiment.id,\n            site_id=self.id\n        )\n        if not existing_association:\n            print(f\"Site {self.site_name} not associated with experiment {experiment_name}.\")\n            return None\n        is_deleted = ExperimentSiteModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate site {self.site_name} from experiment {experiment_name}.\")\n            return None\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassociating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.unassociate_plot","title":"<code>unassociate_plot(plot_number, plot_row_number, plot_column_number, experiment_name=None, season_name=None)</code>","text":"<p>Unassociate a plot from this site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; plot = site.unassociate_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n&gt;&gt;&gt; print(plot)\nPlot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>plot_number</code> <code>int</code> <p>The plot number.</p> required <code>plot_row_number</code> <code>int</code> <p>The row number of the plot.</p> required <code>plot_column_number</code> <code>int</code> <p>The column number of the plot.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Plot]: The unassociated plot, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def unassociate_plot(\n    self,\n    plot_number: int,\n    plot_row_number: int,\n    plot_column_number: int,\n    experiment_name: str = None,\n    season_name: str = None\n) -&gt; Optional[\"Plot\"]:\n    \"\"\"\n    Unassociate a plot from this site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; plot = site.unassociate_plot(1, 1, 1, \"Test Experiment\", \"2023 Season\")\n        &gt;&gt;&gt; print(plot)\n        Plot(plot_number=1, plot_row_number=1, plot_column_number=1, id=UUID(...))\n\n    Args:\n        plot_number (int): The plot number.\n        plot_row_number (int): The row number of the plot.\n        plot_column_number (int): The column number of the plot.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n    Returns:\n        Optional[Plot]: The unassociated plot, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.plot import Plot\n        plot = Plot.get(\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            experiment_name=experiment_name,\n            season_name=season_name\n        )\n        if not plot:\n            print(f\"Plot {plot_number} does not exist.\")\n            return None\n        plot.unassociate_site()\n        return plot\n    except Exception as e:\n        print(f\"Error unassociating plot: {e}\")\n        return None\n</code></pre>"},{"location":"api/sites/#gemini.api.site.Site.update","title":"<code>update(site_name=None, site_city=None, site_state=None, site_country=None, site_info=None)</code>","text":"<p>Update the details of the site.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; site = Site.get(\"Test Site\")\n&gt;&gt;&gt; updated_site = site.update(site_city=\"New City\", site_state=\"New State\")\n&gt;&gt;&gt; print(updated_site)\nSite(site_name=Test Site, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>site_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>site_city</code> <code>str</code> <p>The new city. Defaults to None.</p> <code>None</code> <code>site_state</code> <code>str</code> <p>The new state. Defaults to None.</p> <code>None</code> <code>site_country</code> <code>str</code> <p>The new country. Defaults to None.</p> <code>None</code> <code>site_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Site]: The updated site, or None if an error occurred.</p> Source code in <code>gemini/api/site.py</code> <pre><code>def update(\n    self,\n    site_name: str = None,\n    site_city: str = None,\n    site_state: str = None,\n    site_country: str = None,\n    site_info: dict = None\n) -&gt; Optional[\"Site\"]:\n    \"\"\"\n    Update the details of the site.\n\n    Examples:\n        &gt;&gt;&gt; site = Site.get(\"Test Site\")\n        &gt;&gt;&gt; updated_site = site.update(site_city=\"New City\", site_state=\"New State\")\n        &gt;&gt;&gt; print(updated_site)\n        Site(site_name=Test Site, id=UUID(...))\n\n    Args:\n        site_name (str, optional): The new name. Defaults to None.\n        site_city (str, optional): The new city. Defaults to None.\n        site_state (str, optional): The new state. Defaults to None.\n        site_country (str, optional): The new country. Defaults to None.\n        site_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[Site]: The updated site, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([site_city, site_state, site_country, site_info, site_name]):\n            raise ValueError(\"At least one update parameter must be provided.\")\n\n        current_id = self.id\n        site = SiteModel.get(current_id)\n        if not site:\n            print(f\"Site with ID {current_id} does not exist.\")\n            return None\n\n        updated_site = SiteModel.update(\n            site,\n            site_name=site_name,\n            site_city=site_city,\n            site_state=site_state,\n            site_country=site_country,\n            site_info=site_info\n        )\n        updated_site = self.model_validate(updated_site)\n        self.refresh()\n        return updated_site\n    except Exception as e:\n        print(f\"Error updating site: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/","title":"Trait Levels API","text":""},{"location":"api/trait_levels/#description","title":"Description","text":"<p>A trait level defines the level at which is a specific Trait is defined.</p> <p>The following trait levels are pre-defined, along with their <code>trait_level_id</code>:</p> Trait Level ID Default 0 Plot 1 Plant 2"},{"location":"api/trait_levels/#module","title":"Module","text":"<p>This module defines the TraitLevel class, which represents a level or category for traits.</p> <p>It includes methods for creating, retrieving, updating, and deleting trait levels, as well as methods for checking existence, searching, and managing additional information.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a trait level with the given name exists.</li> <li><code>create</code>: Create a new trait level.</li> <li><code>get</code>: Retrieve a trait level by its name.</li> <li><code>get_by_id</code>: Retrieve a trait level by its ID.</li> <li><code>get_all</code>: Retrieve all trait levels.</li> <li><code>search</code>: Search for trait levels based on various criteria.</li> <li><code>update</code>: Update the details of a trait level.</li> <li><code>delete</code>: Delete a trait level.</li> <li><code>refresh</code>: Refresh the trait level's data from the database.</li> <li><code>get_info</code>: Get the additional information of the trait level.</li> <li><code>set_info</code>: Set the additional information of the trait level.</li> </ul>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel","title":"<code>TraitLevel</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a level or category for traits.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the trait level.</p> <code>trait_level_name</code> <code>str</code> <p>The name of the trait level.</p> <code>trait_level_info</code> <code>Optional[dict]</code> <p>Additional information about the trait level.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>class TraitLevel(APIBase):\n    \"\"\"\n    Represents a level or category for traits.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the trait level.\n        trait_level_name (str): The name of the trait level.\n        trait_level_info (Optional[dict]): Additional information about the trait level.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"trait_level_id\"))\n\n    trait_level_name: str\n    trait_level_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the TraitLevel object.\"\"\"\n        return f\"TraitLevel(trait_level_name={self.trait_level_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the TraitLevel object.\"\"\"\n        return f\"TraitLevel(trait_level_name={self.trait_level_name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        trait_level_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a trait level with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; TraitLevel.exists(\"example_trait_level\")\n            True\n\n            &gt;&gt;&gt; TraitLevel.exists(\"non_existent_trait_level\")\n            False\n\n        Args:\n            trait_level_name (str): The name of the trait level.\n        Returns:\n            bool: True if the trait level exists, False otherwise.\n        \"\"\"\n        try:\n            exists = TraitLevelModel.exists(trait_level_name=trait_level_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of trait level: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        trait_level_name: str,\n        trait_level_info: dict = {},\n    ) -&gt; Optional[\"TraitLevel\"]:\n        \"\"\"\n        Create a new trait level.\n\n        Examples:\n            &gt;&gt;&gt; TraitLevel.create(\"example_trait_level\", {\"description\": \"An example trait level\"})\n            TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n\n        Args:\n            trait_level_name (str): The name of the trait level.\n            trait_level_info (dict, optional): Additional information about the trait level. Defaults to {{}}.\n        Returns:\n            Optional[TraitLevel]: The created trait level, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = TraitLevelModel.get_or_create(\n                trait_level_name=trait_level_name,\n                trait_level_info=trait_level_info,\n            )\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error creating trait level: {e}\")\n            return None\n\n    @classmethod\n    def get(cls, trait_level_name: str) -&gt; Optional[\"TraitLevel\"]:\n        \"\"\"\n        Retrieve a trait level by its name.\n\n        Examples:\n            &gt;&gt;&gt; TraitLevel.get(\"example_trait_level\")\n            TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n        Args:\n            trait_level_name (str): The name of the trait level.\n        Returns:\n            Optional[TraitLevel]: The trait level, or None if not found.\n        \"\"\"\n        try:\n            db_instance = TraitLevelModel.get_by_parameters(trait_level_name=trait_level_name)\n            if not db_instance:\n                print(f\"Trait level with name {trait_level_name} not found.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting trait level: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"TraitLevel\"]:\n        \"\"\"\n        Retrieve a trait level by its ID.\n\n        Examples:\n            &gt;&gt;&gt; TraitLevel.get_by_id(UUID('...'))\n            TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n        Args:\n            id (UUID | int | str): The ID of the trait level.\n        Returns:\n            Optional[TraitLevel]: The trait level, or None if not found.\n        \"\"\"\n        try:\n            db_instance = TraitLevelModel.get(id)\n            if not db_instance:\n                print(f\"Trait level with ID {id} does not exist.\")\n                return None\n            instance = cls.model_validate(db_instance)\n            return instance\n        except Exception as e:\n            print(f\"Error getting trait level by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"TraitLevel\"]]:\n        \"\"\"\n        Retrieve all trait levels.\n\n        Examples:\n            &gt;&gt;&gt; TraitLevel.get_all()\n            [TraitLevel(trait_level_name='example_trait_level', id=UUID('...')),\n             TraitLevel(trait_level_name='another_trait_level', id=UUID('...'))]\n\n        Returns:\n            Optional[List[TraitLevel]]: List of all trait levels, or None if not found.\n        \"\"\"\n        try:\n            instances = TraitLevelModel.all()\n            if not instances or len(instances) == 0:\n                print(\"No trait levels found.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error getting all trait levels: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        trait_level_name: str = None,\n        trait_level_info: dict = None\n    ) -&gt; Optional[List[\"TraitLevel\"]]:\n        \"\"\"\n        Search for trait levels based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; TraitLevel.search(trait_level_name=\"example_trait_level\")\n            [TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))]\n\n        Args:\n            trait_level_name (str, optional): The name of the trait level. Defaults to None.\n            trait_level_info (dict, optional): Additional information. Defaults to None.\n        Returns:\n            Optional[List[TraitLevel]]: List of matching trait levels, or None if not found.\n        \"\"\"\n        try:\n            if not any([trait_level_name, trait_level_info]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n\n            instances = TraitLevelModel.search(\n                trait_level_name=trait_level_name,\n                trait_level_info=trait_level_info\n            )\n            if not instances or len(instances) == 0:\n                print(\"No trait levels found with the provided search parameters.\")\n                return None\n            instances = [cls.model_validate(instance) for instance in instances]\n            return instances\n        except Exception as e:\n            print(f\"Error searching trait levels: {e}\")\n            return None\n\n    def update(\n            self,\n            trait_level_name: str = None,\n            trait_level_info: dict = None\n        ) -&gt; Optional[\"TraitLevel\"]:\n        \"\"\"\n        Update the details of the trait level.\n\n        Examples:\n            &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n            &gt;&gt;&gt; updated_trait_level = trait_level.update(trait_level_name=\"new_name\", trait_level_info={\"description\": \"Updated description\"})\n            &gt;&gt;&gt; print(updated_trait_level)\n            TraitLevel(trait_level_name='new_name', id=UUID('...'))\n\n        Args:\n            trait_level_name (str, optional): The new name. Defaults to None.\n            trait_level_info (dict, optional): The new information. Defaults to None.\n        Returns:\n            Optional[TraitLevel]: The updated trait level, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([trait_level_name, trait_level_info]):\n                print(\"At least one parameter must be provided for update.\")\n                return None\n\n            current_id = self.id\n            trait_level = TraitLevelModel.get(current_id)\n            if not trait_level:\n                 print(f\"Trait level with ID {current_id} does not exist.\")\n                 return None\n\n            trait_level = TraitLevelModel.update(\n                trait_level,\n                trait_level_name=trait_level_name,\n                trait_level_info=trait_level_info,\n            )\n            instance = self.model_validate(trait_level)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error updating trait level: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the trait level.\n\n        Examples:\n            &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n            &gt;&gt;&gt; deleted = trait_level.delete()\n            &gt;&gt;&gt; print(deleted)\n            True\n\n        Returns:\n            bool: True if the trait level was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait_level = TraitLevelModel.get(current_id)\n            if not trait_level:\n                 print(f\"Trait level with ID {current_id} does not exist.\")\n                 return False\n            TraitLevelModel.delete(trait_level)\n            return True\n        except Exception as e:\n            print(f\"Error deleting trait level: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"TraitLevel\"]:\n        \"\"\"\n        Refresh the trait level's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n            &gt;&gt;&gt; refreshed_trait_level = trait_level.refresh()\n            &gt;&gt;&gt; print(refreshed_trait_level)\n            TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n        Returns:\n            Optional[TraitLevel]: The refreshed trait level, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = TraitLevelModel.get(self.id)\n            if not db_instance:\n                print(f\"Trait level with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing trait level: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the trait level.\n\n        Examples:\n            &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n            &gt;&gt;&gt; info = trait_level.get_info()\n            &gt;&gt;&gt; print(info)\n            {'description': 'An example trait level'}\n\n        Returns:\n            Optional[dict]: The trait level's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait_level = TraitLevelModel.get(current_id)\n            if not trait_level:\n                print(f\"Trait level with ID {current_id} does not exist.\")\n                return None\n            trait_level_info = trait_level.trait_level_info\n            if not trait_level_info:\n                print(\"TraitLevel info is empty.\")\n                return None\n            return trait_level_info\n        except Exception as e:\n            print(f\"Error getting trait level info: {e}\")\n            return None\n\n    def set_info(self, trait_level_info: dict) -&gt; Optional[\"TraitLevel\"]:\n        \"\"\"\n        Set the additional information of the trait level.\n\n        Examples:\n            &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n            &gt;&gt;&gt; updated_trait_level = trait_level.set_info({\"description\": \"Updated description\"})\n            &gt;&gt;&gt; print(updated_trait_level.get_info())\n            {'description': 'Updated description'}\n\n        Args:\n            trait_level_info (dict): The new information to set.\n        Returns:\n            Optional[TraitLevel]: The updated trait level, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait_level = TraitLevelModel.get(current_id)\n            if not trait_level:\n                print(f\"Trait level with ID {current_id} does not exist.\")\n                return None\n            trait_level = TraitLevelModel.update(\n                trait_level,\n                trait_level_info=trait_level_info,\n            )\n            instance = self.model_validate(trait_level)\n            self.refresh()\n            return instance\n        except Exception as e:\n            print(f\"Error setting trait level info: {e}\")\n            return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the TraitLevel object.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the TraitLevel object.\"\"\"\n    return f\"TraitLevel(trait_level_name={self.trait_level_name}, id={self.id})\"\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the TraitLevel object.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the TraitLevel object.\"\"\"\n    return f\"TraitLevel(trait_level_name={self.trait_level_name}, id={self.id})\"\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.create","title":"<code>create(trait_level_name, trait_level_info={})</code>  <code>classmethod</code>","text":"<p>Create a new trait level.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitLevel.create(\"example_trait_level\", {\"description\": \"An example trait level\"})\nTraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_level_name</code> <code>str</code> <p>The name of the trait level.</p> required <code>trait_level_info</code> <code>dict</code> <p>Additional information about the trait level. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     Optional[TraitLevel]: The created trait level, or None if an error occurred.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    trait_level_name: str,\n    trait_level_info: dict = {},\n) -&gt; Optional[\"TraitLevel\"]:\n    \"\"\"\n    Create a new trait level.\n\n    Examples:\n        &gt;&gt;&gt; TraitLevel.create(\"example_trait_level\", {\"description\": \"An example trait level\"})\n        TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n\n    Args:\n        trait_level_name (str): The name of the trait level.\n        trait_level_info (dict, optional): Additional information about the trait level. Defaults to {{}}.\n    Returns:\n        Optional[TraitLevel]: The created trait level, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = TraitLevelModel.get_or_create(\n            trait_level_name=trait_level_name,\n            trait_level_info=trait_level_info,\n        )\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error creating trait level: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.delete","title":"<code>delete()</code>","text":"<p>Delete the trait level.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n&gt;&gt;&gt; deleted = trait_level.delete()\n&gt;&gt;&gt; print(deleted)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the trait level was deleted, False otherwise.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the trait level.\n\n    Examples:\n        &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n        &gt;&gt;&gt; deleted = trait_level.delete()\n        &gt;&gt;&gt; print(deleted)\n        True\n\n    Returns:\n        bool: True if the trait level was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait_level = TraitLevelModel.get(current_id)\n        if not trait_level:\n             print(f\"Trait level with ID {current_id} does not exist.\")\n             return False\n        TraitLevelModel.delete(trait_level)\n        return True\n    except Exception as e:\n        print(f\"Error deleting trait level: {e}\")\n        return False\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.exists","title":"<code>exists(trait_level_name)</code>  <code>classmethod</code>","text":"<p>Check if a trait level with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitLevel.exists(\"example_trait_level\")\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; TraitLevel.exists(\"non_existent_trait_level\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_level_name</code> <code>str</code> <p>The name of the trait level.</p> required <p>Returns:     bool: True if the trait level exists, False otherwise.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    trait_level_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a trait level with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; TraitLevel.exists(\"example_trait_level\")\n        True\n\n        &gt;&gt;&gt; TraitLevel.exists(\"non_existent_trait_level\")\n        False\n\n    Args:\n        trait_level_name (str): The name of the trait level.\n    Returns:\n        bool: True if the trait level exists, False otherwise.\n    \"\"\"\n    try:\n        exists = TraitLevelModel.exists(trait_level_name=trait_level_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of trait level: {e}\")\n        return False\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.get","title":"<code>get(trait_level_name)</code>  <code>classmethod</code>","text":"<p>Retrieve a trait level by its name.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitLevel.get(\"example_trait_level\")\nTraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_level_name</code> <code>str</code> <p>The name of the trait level.</p> required <p>Returns:     Optional[TraitLevel]: The trait level, or None if not found.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>@classmethod\ndef get(cls, trait_level_name: str) -&gt; Optional[\"TraitLevel\"]:\n    \"\"\"\n    Retrieve a trait level by its name.\n\n    Examples:\n        &gt;&gt;&gt; TraitLevel.get(\"example_trait_level\")\n        TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n    Args:\n        trait_level_name (str): The name of the trait level.\n    Returns:\n        Optional[TraitLevel]: The trait level, or None if not found.\n    \"\"\"\n    try:\n        db_instance = TraitLevelModel.get_by_parameters(trait_level_name=trait_level_name)\n        if not db_instance:\n            print(f\"Trait level with name {trait_level_name} not found.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting trait level: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all trait levels.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitLevel.get_all()\n[TraitLevel(trait_level_name='example_trait_level', id=UUID('...')),\n TraitLevel(trait_level_name='another_trait_level', id=UUID('...'))]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[TraitLevel]]</code> <p>Optional[List[TraitLevel]]: List of all trait levels, or None if not found.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"TraitLevel\"]]:\n    \"\"\"\n    Retrieve all trait levels.\n\n    Examples:\n        &gt;&gt;&gt; TraitLevel.get_all()\n        [TraitLevel(trait_level_name='example_trait_level', id=UUID('...')),\n         TraitLevel(trait_level_name='another_trait_level', id=UUID('...'))]\n\n    Returns:\n        Optional[List[TraitLevel]]: List of all trait levels, or None if not found.\n    \"\"\"\n    try:\n        instances = TraitLevelModel.all()\n        if not instances or len(instances) == 0:\n            print(\"No trait levels found.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error getting all trait levels: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a trait level by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitLevel.get_by_id(UUID('...'))\nTraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the trait level.</p> required <p>Returns:     Optional[TraitLevel]: The trait level, or None if not found.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"TraitLevel\"]:\n    \"\"\"\n    Retrieve a trait level by its ID.\n\n    Examples:\n        &gt;&gt;&gt; TraitLevel.get_by_id(UUID('...'))\n        TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n    Args:\n        id (UUID | int | str): The ID of the trait level.\n    Returns:\n        Optional[TraitLevel]: The trait level, or None if not found.\n    \"\"\"\n    try:\n        db_instance = TraitLevelModel.get(id)\n        if not db_instance:\n            print(f\"Trait level with ID {id} does not exist.\")\n            return None\n        instance = cls.model_validate(db_instance)\n        return instance\n    except Exception as e:\n        print(f\"Error getting trait level by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the trait level.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n&gt;&gt;&gt; info = trait_level.get_info()\n&gt;&gt;&gt; print(info)\n{'description': 'An example trait level'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The trait level's info, or None if not found.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the trait level.\n\n    Examples:\n        &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n        &gt;&gt;&gt; info = trait_level.get_info()\n        &gt;&gt;&gt; print(info)\n        {'description': 'An example trait level'}\n\n    Returns:\n        Optional[dict]: The trait level's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait_level = TraitLevelModel.get(current_id)\n        if not trait_level:\n            print(f\"Trait level with ID {current_id} does not exist.\")\n            return None\n        trait_level_info = trait_level.trait_level_info\n        if not trait_level_info:\n            print(\"TraitLevel info is empty.\")\n            return None\n        return trait_level_info\n    except Exception as e:\n        print(f\"Error getting trait level info: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the trait level's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n&gt;&gt;&gt; refreshed_trait_level = trait_level.refresh()\n&gt;&gt;&gt; print(refreshed_trait_level)\nTraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[TraitLevel]</code> <p>Optional[TraitLevel]: The refreshed trait level, or None if an error occurred.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>def refresh(self) -&gt; Optional[\"TraitLevel\"]:\n    \"\"\"\n    Refresh the trait level's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n        &gt;&gt;&gt; refreshed_trait_level = trait_level.refresh()\n        &gt;&gt;&gt; print(refreshed_trait_level)\n        TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))\n\n    Returns:\n        Optional[TraitLevel]: The refreshed trait level, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = TraitLevelModel.get(self.id)\n        if not db_instance:\n            print(f\"Trait level with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing trait level: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.search","title":"<code>search(trait_level_name=None, trait_level_info=None)</code>  <code>classmethod</code>","text":"<p>Search for trait levels based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitLevel.search(trait_level_name=\"example_trait_level\")\n[TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_level_name</code> <code>str</code> <p>The name of the trait level. Defaults to None.</p> <code>None</code> <code>trait_level_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[TraitLevel]]: List of matching trait levels, or None if not found.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    trait_level_name: str = None,\n    trait_level_info: dict = None\n) -&gt; Optional[List[\"TraitLevel\"]]:\n    \"\"\"\n    Search for trait levels based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; TraitLevel.search(trait_level_name=\"example_trait_level\")\n        [TraitLevel(trait_level_name='example_trait_level', id=UUID('...'))]\n\n    Args:\n        trait_level_name (str, optional): The name of the trait level. Defaults to None.\n        trait_level_info (dict, optional): Additional information. Defaults to None.\n    Returns:\n        Optional[List[TraitLevel]]: List of matching trait levels, or None if not found.\n    \"\"\"\n    try:\n        if not any([trait_level_name, trait_level_info]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n\n        instances = TraitLevelModel.search(\n            trait_level_name=trait_level_name,\n            trait_level_info=trait_level_info\n        )\n        if not instances or len(instances) == 0:\n            print(\"No trait levels found with the provided search parameters.\")\n            return None\n        instances = [cls.model_validate(instance) for instance in instances]\n        return instances\n    except Exception as e:\n        print(f\"Error searching trait levels: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.set_info","title":"<code>set_info(trait_level_info)</code>","text":"<p>Set the additional information of the trait level.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n&gt;&gt;&gt; updated_trait_level = trait_level.set_info({\"description\": \"Updated description\"})\n&gt;&gt;&gt; print(updated_trait_level.get_info())\n{'description': 'Updated description'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_level_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[TraitLevel]: The updated trait level, or None if an error occurred.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>def set_info(self, trait_level_info: dict) -&gt; Optional[\"TraitLevel\"]:\n    \"\"\"\n    Set the additional information of the trait level.\n\n    Examples:\n        &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n        &gt;&gt;&gt; updated_trait_level = trait_level.set_info({\"description\": \"Updated description\"})\n        &gt;&gt;&gt; print(updated_trait_level.get_info())\n        {'description': 'Updated description'}\n\n    Args:\n        trait_level_info (dict): The new information to set.\n    Returns:\n        Optional[TraitLevel]: The updated trait level, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait_level = TraitLevelModel.get(current_id)\n        if not trait_level:\n            print(f\"Trait level with ID {current_id} does not exist.\")\n            return None\n        trait_level = TraitLevelModel.update(\n            trait_level,\n            trait_level_info=trait_level_info,\n        )\n        instance = self.model_validate(trait_level)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error setting trait level info: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_levels/#gemini.api.trait_level.TraitLevel.update","title":"<code>update(trait_level_name=None, trait_level_info=None)</code>","text":"<p>Update the details of the trait level.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n&gt;&gt;&gt; updated_trait_level = trait_level.update(trait_level_name=\"new_name\", trait_level_info={\"description\": \"Updated description\"})\n&gt;&gt;&gt; print(updated_trait_level)\nTraitLevel(trait_level_name='new_name', id=UUID('...'))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_level_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>trait_level_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[TraitLevel]: The updated trait level, or None if an error occurred.</p> Source code in <code>gemini/api/trait_level.py</code> <pre><code>def update(\n        self,\n        trait_level_name: str = None,\n        trait_level_info: dict = None\n    ) -&gt; Optional[\"TraitLevel\"]:\n    \"\"\"\n    Update the details of the trait level.\n\n    Examples:\n        &gt;&gt;&gt; trait_level = TraitLevel.get(\"example_trait_level\")\n        &gt;&gt;&gt; updated_trait_level = trait_level.update(trait_level_name=\"new_name\", trait_level_info={\"description\": \"Updated description\"})\n        &gt;&gt;&gt; print(updated_trait_level)\n        TraitLevel(trait_level_name='new_name', id=UUID('...'))\n\n    Args:\n        trait_level_name (str, optional): The new name. Defaults to None.\n        trait_level_info (dict, optional): The new information. Defaults to None.\n    Returns:\n        Optional[TraitLevel]: The updated trait level, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([trait_level_name, trait_level_info]):\n            print(\"At least one parameter must be provided for update.\")\n            return None\n\n        current_id = self.id\n        trait_level = TraitLevelModel.get(current_id)\n        if not trait_level:\n             print(f\"Trait level with ID {current_id} does not exist.\")\n             return None\n\n        trait_level = TraitLevelModel.update(\n            trait_level,\n            trait_level_name=trait_level_name,\n            trait_level_info=trait_level_info,\n        )\n        instance = self.model_validate(trait_level)\n        self.refresh()\n        return instance\n    except Exception as e:\n        print(f\"Error updating trait level: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/","title":"Trait Records API","text":""},{"location":"api/trait_records/#description","title":"Description","text":"<p>A trait record is a record that belongs to a specific Trait, a specific Experiment, Season, Site, and Plot.</p> <p>It is defined by the following properties:</p> Property Type Description <code>id</code> <code>UUID</code> The unique identifier of the trait record. <code>timestamp</code> <code>datetime</code> The timestamp of the record. <code>collection_date</code> <code>date</code> The collection date of the record. <code>trait_name</code> <code>string</code> The name of the associated trait. <code>trait_id</code> <code>UUID</code> The ID of the associated trait. <code>trait_value</code> <code>float</code> The value associated with the trait record. <code>dataset_id</code> <code>UUID</code> The ID of the associated dataset. <code>dataset_name</code> <code>string</code> The name of the associated dataset. <code>experiment_name</code> <code>string</code> The name of the associated experiment. <code>experiment_id</code> <code>UUID</code> The ID of the associated experiment. <code>season_name</code> <code>string</code> The name of the associated season. <code>season_id</code> <code>UUID</code> The ID of the associated season. <code>site_name</code> <code>string</code> The name of the associated site. <code>site_id</code> <code>UUID</code> The ID of the associated site. <code>plot_id</code> <code>UUID</code> The ID of the associated plot. <code>plot_number</code> <code>integer</code> The number of the associated plot. <code>plot_row_number</code> <code>integer</code> The row number of the associated plot. <code>plot_column_number</code> <code>integer</code> The column number of the associated plot. <code>record_info</code> <code>dict</code> Additional information about the record. <p>A trait record is uniquely identified within a trait by its <code>timestamp</code>, <code>trait_name</code>, <code>dataset_name</code>, <code>experiment_name</code>, <code>season_name</code>, <code>site_name</code>, <code>plot_number</code>, <code>plot_row_number</code> and <code>plot_column_number</code>. There will be no two trait records with the same timestamp and belonging to the same trait, dataset, experiment, season and site.</p>"},{"location":"api/trait_records/#module","title":"Module","text":"<p>This module defines the TraitRecord class, which represents a record of a trait, including metadata, associations to datasets, experiments, sites, seasons, and plots, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting trait records, as well as methods for checking existence, searching, filtering, and managing additional information.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a trait record with the given parameters exists.</li> <li><code>create</code>: Create a new trait record.</li> <li><code>insert</code>: Insert a list of trait records into the database.</li> <li><code>get</code>: Retrieve a trait record by its parameters.</li> <li><code>get_by_id</code>: Retrieve a trait record by its ID.</li> <li><code>get_all</code>: Retrieve all trait records.</li> <li><code>search</code>: Search for trait records based on various criteria.</li> <li><code>filter</code>: Filter trait records based on custom logic.</li> <li><code>update</code>: Update the details of a trait record.</li> <li><code>delete</code>: Delete a trait record.</li> <li><code>refresh</code>: Refresh the trait record's data from the database.</li> <li><code>get_info</code>: Get the additional information of the trait record.</li> <li><code>set_info</code>: Set the additional information of the trait record.</li> </ul>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord","title":"<code>TraitRecord</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a record of a trait, including metadata, associations to datasets, experiments, sites, seasons, and plots, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the trait record.</p> <code>timestamp</code> <code>Optional[datetime]</code> <p>The timestamp of the record.</p> <code>collection_date</code> <code>Optional[date]</code> <p>The collection date of the record.</p> <code>dataset_id</code> <code>Optional[ID]</code> <p>The ID of the associated dataset.</p> <code>dataset_name</code> <code>Optional[str]</code> <p>The name of the associated dataset.</p> <code>trait_id</code> <code>Optional[ID]</code> <p>The ID of the associated trait.</p> <code>trait_name</code> <code>Optional[str]</code> <p>The name of the associated trait.</p> <code>trait_value</code> <code>Optional[float]</code> <p>The value of the trait.</p> <code>experiment_id</code> <code>Optional[ID]</code> <p>The ID of the associated experiment.</p> <code>experiment_name</code> <code>Optional[str]</code> <p>The name of the associated experiment.</p> <code>season_id</code> <code>Optional[ID]</code> <p>The ID of the associated season.</p> <code>season_name</code> <code>Optional[str]</code> <p>The name of the associated season.</p> <code>site_id</code> <code>Optional[ID]</code> <p>The ID of the associated site.</p> <code>site_name</code> <code>Optional[str]</code> <p>The name of the associated site.</p> <code>plot_id</code> <code>Optional[ID]</code> <p>The ID of the associated plot.</p> <code>plot_number</code> <code>Optional[int]</code> <p>The number of the associated plot.</p> <code>plot_row_number</code> <code>Optional[int]</code> <p>The row number of the associated plot.</p> <code>plot_column_number</code> <code>Optional[int]</code> <p>The column number of the associated plot.</p> <code>record_info</code> <code>Optional[dict]</code> <p>Additional information about the record.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>class TraitRecord(APIBase):\n    \"\"\"\n    Represents a record of a trait, including metadata, associations to datasets, experiments, sites, seasons, and plots, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the trait record.\n        timestamp (Optional[datetime]): The timestamp of the record.\n        collection_date (Optional[date]): The collection date of the record.\n        dataset_id (Optional[ID]): The ID of the associated dataset.\n        dataset_name (Optional[str]): The name of the associated dataset.\n        trait_id (Optional[ID]): The ID of the associated trait.\n        trait_name (Optional[str]): The name of the associated trait.\n        trait_value (Optional[float]): The value of the trait.\n        experiment_id (Optional[ID]): The ID of the associated experiment.\n        experiment_name (Optional[str]): The name of the associated experiment.\n        season_id (Optional[ID]): The ID of the associated season.\n        season_name (Optional[str]): The name of the associated season.\n        site_id (Optional[ID]): The ID of the associated site.\n        site_name (Optional[str]): The name of the associated site.\n        plot_id (Optional[ID]): The ID of the associated plot.\n        plot_number (Optional[int]): The number of the associated plot.\n        plot_row_number (Optional[int]): The row number of the associated plot.\n        plot_column_number (Optional[int]): The column number of the associated plot.\n        record_info (Optional[dict]): Additional information about the record.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"trait_record_id\"))\n\n    timestamp: Optional[datetime] = None\n    collection_date: Optional[date] = None\n    dataset_id: Optional[ID] = None\n    dataset_name: Optional[str] = None\n    trait_id: Optional[ID] = None\n    trait_name: Optional[str] = None\n    trait_value: Optional[float] = None\n    experiment_id: Optional[ID] = None\n    experiment_name : Optional[str] = None\n    season_id: Optional[ID] = None\n    season_name: Optional[str] = None\n    site_id: Optional[ID] = None\n    site_name: Optional[str] = None\n    plot_id: Optional[ID] = None\n    plot_number: Optional[int] = None\n    plot_row_number: Optional[int] = None\n    plot_column_number: Optional[int] = None\n    record_info: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the TraitRecord object.\"\"\"\n        return f\"TraitRecord(id={self.id}, timestamp={self.timestamp}, trait_name={self.trait_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the TraitRecord object.\"\"\"\n        return f\"TraitRecord(id={self.id}, timestamp={self.timestamp}, trait_name={self.trait_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number})\"\n\n    @classmethod\n    def exists(\n        cls,\n        timestamp: datetime,\n        trait_name: str,\n        dataset_name: str,\n        experiment_name: str,\n        site_name: str,\n        season_name: str,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None\n    ) -&gt; bool:\n        \"\"\"\n        Check if a trait record with the given parameters exists.\n\n        Examples:\n            &gt;&gt;&gt; TraitRecord.exists(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0),\n            ...     trait_name=\"Height\",\n            ...     dataset_name=\"Plant Growth Study\",\n            ...     experiment_name=\"Growth Experiment 1\",\n            ...     site_name=\"Research Farm A\",\n            ...     season_name=\"Spring 2023\",\n            ...     plot_number=1,\n            ...     plot_row_number=2,\n            ...     plot_column_number=3\n            ... )\n            True\n\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            trait_name (str): The name of the trait.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment.\n            season_name (str): The name of the season.\n            site_name (str): The name of the site.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n        Returns:\n            bool: True if the trait record exists, False otherwise.\n        \"\"\"\n        try:\n            exists = TraitRecordModel.exists(\n                timestamp=timestamp,\n                trait_name=trait_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number\n            )\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of TraitRecord: {e}\")\n            raise e\n\n    @classmethod\n    def create(\n        cls,\n        timestamp: datetime = datetime.now(),\n        collection_date: date = None,\n        dataset_name: str = None,\n        trait_name: str = None,\n        trait_value: float = None,\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        record_info: dict = {},\n        insert_on_create: bool = True\n    ) -&gt; Optional[\"TraitRecord\"]:\n        \"\"\"\n        Create a new trait record.\n\n        Examples:\n            &gt;&gt;&gt; TraitRecord.create(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0),\n            ...     collection_date=date(2023, 10, 1),\n            ...     dataset_name=\"Plant Growth Study\",\n            ...     trait_name=\"Height\",\n            ...     trait_value=150.0,\n            ...     experiment_name=\"Growth Experiment 1\",\n            ...     site_name=\"Research Farm A\",\n            ...     season_name=\"Spring 2023\",\n            ...     plot_number=1,\n            ...     plot_row_number=2,\n            ...     plot_column_number=3,\n            ...     record_info={\"notes\": \"Initial measurement\"},\n            ...     insert_on_create=True\n            ... )\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            trait_name (str, optional): The name of the trait. Defaults to None.\n            trait_value (float, optional): The value of the trait. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n            insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n        Returns:\n            Optional[TraitRecord]: The created trait record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([experiment_name, site_name, season_name]):\n                raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n            if not trait_name:\n                raise ValueError(\"Trait name is required.\")\n            if not dataset_name:\n                raise ValueError(\"Dataset name is required.\")\n            if not all([plot_number, plot_row_number, plot_column_number]):\n                raise ValueError(\"Plot information (number, row, column) is required if any is provided.\")\n            if not timestamp:\n                timestamp = datetime.now()\n            if not collection_date:\n                collection_date = timestamp.date()\n            if not trait_value:\n                raise ValueError(\"Trait value is required.\")\n            trait_record = TraitRecord(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                trait_name=trait_name,\n                trait_value=trait_value,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                record_info=record_info\n            )\n            if insert_on_create:\n                insert_success, inserted_record_ids = cls.insert([trait_record])\n                if not insert_success:\n                    print(f\"Failed to insert TraitRecord: {trait_record}\")\n                    return None\n                if not inserted_record_ids or len(inserted_record_ids) == 0:\n                    print(f\"No TraitRecord IDs returned after insertion.\")\n                    return None\n                inserted_record_id = inserted_record_ids[0]\n                trait_record = cls.get_by_id(inserted_record_id)\n            return trait_record\n        except Exception as e:\n            print(f\"Error creating TraitRecord: {e}\")\n            return None\n\n    @classmethod\n    def insert(cls, records: List[\"TraitRecord\"]) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a list of trait records into the database.\n\n        Args:\n            records (List[TraitRecord]): The records to insert.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not records or len(records) == 0:\n                print(f\"No records provided to insert.\")\n                return False, []\n            records_to_insert = []\n            for record in records:\n                record_dict = record.model_dump()\n                record_dict = {k: v for k, v in record_dict.items() if v is not None}\n                records_to_insert.append(record_dict)\n            print(f\"Inserting {len(records_to_insert)} TraitRecords.\")\n            inserted_record_ids = TraitRecordModel.insert_bulk('trait_records_unique', records_to_insert)\n            print(f\"Inserted {len(inserted_record_ids)} TraitRecords.\")\n            return True, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting TraitRecords: {e}\")\n            return False, []\n\n    @classmethod\n    def get(\n        cls,\n        timestamp: datetime,\n        trait_name: str,\n        dataset_name: str,\n        experiment_name: str,\n        site_name: str,\n        season_name: str,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None\n    ) -&gt; Optional[\"TraitRecord\"]:\n        \"\"\"\n        Retrieve a trait record by its parameters.\n\n        Examples:\n            &gt;&gt;&gt; TraitRecord.get(\n            ...     timestamp=datetime(2023, 10, 1, 12, 0),\n            ...     trait_name=\"Height\",\n            ...     dataset_name=\"Plant Growth Study\",\n            ...     experiment_name=\"Growth Experiment 1\",\n            ...     site_name=\"Research Farm A\",\n            ...     season_name=\"Spring 2023\",\n            ...     plot_number=1,\n            ...     plot_row_number=2,\n            ...     plot_column_number=3\n            ... )\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            timestamp (datetime): The timestamp of the record.\n            trait_name (str): The name of the trait.\n            dataset_name (str): The name of the dataset.\n            experiment_name (str): The name of the experiment.\n            site_name (str): The name of the site.\n            season_name (str): The name of the season.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n        Returns:\n            Optional[TraitRecord]: The trait record, or None if not found.\n        \"\"\"\n        try:\n            if not timestamp:\n                print(\"Timestamp is required to get TraitRecord.\")\n                return None\n            if not trait_name:\n                print(\"Trait name is required to get TraitRecord.\")\n                return None\n            if not dataset_name:\n                print(\"Dataset name is required to get TraitRecord.\")\n                return None\n            if not experiment_name and not site_name and not season_name:\n                print(\"At least one of experiment_name, site_name, or season_name is required to get TraitRecord.\")\n                return None\n            if not all([plot_number, plot_row_number, plot_column_number]):\n                print(\"Plot information (number, row, column) is required if any is provided.\")\n                return None\n            trait_record = TraitRecordsIMMVModel.get_by_parameters(\n                timestamp=timestamp,\n                trait_name=trait_name,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number\n            )\n            if not trait_record:\n                print(\"TraitRecord not found with the provided parameters.\")\n                return None\n            trait_record = cls.model_validate(trait_record)\n            return trait_record\n        except Exception as e:\n            print(f\"Error getting TraitRecord: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"TraitRecord\"]:\n        \"\"\"\n        Retrieve a trait record by its ID.\n\n        Examples:\n            &gt;&gt;&gt; TraitRecord.get_by_id(UUID('...'))\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            id (UUID | int | str): The ID of the trait record.\n        Returns:\n            Optional[TraitRecord]: The trait record, or None if not found.\n        \"\"\"\n        try:\n            db_instance = TraitRecordModel.get(id)\n            if not db_instance:\n                print(f\"TraitRecord with ID {id} not found.\")\n                return None\n            record = cls.model_validate(db_instance)\n            return record\n        except Exception as e:\n            print(f\"Error getting TraitRecord by ID {id}: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls, limit: int = 100) -&gt; Optional[List[\"TraitRecord\"]]:\n        \"\"\"\n        Retrieve all trait records, up to a specified limit.\n\n        Examples:\n            &gt;&gt;&gt; TraitRecord.get_all(limit=10)\n            &gt;&gt;&gt; for record in TraitRecord.get_all(limit=10):\n            ...     print(record)\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), trait_name='Width', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n        Returns:\n            Optional[List[TraitRecord]]: List of trait records, or None if not found.\n        \"\"\"\n        try:\n            records = TraitRecordModel.all(limit=limit)\n            if not records or len(records) == 0:\n                print(f\"No TraitRecords found\")\n                return None\n            records = [cls.model_validate(instance) for instance in records]\n            return records\n        except Exception as e:\n            print(f\"Error getting all TraitRecords: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls,\n        dataset_name: str = None,\n        trait_name: str = None,\n        trait_value: float = None,\n        experiment_name: str = None,\n        site_name: str = None,\n        season_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        collection_date: date = None,\n        record_info: dict = None\n    ) -&gt; Generator[\"TraitRecord\", None, None]:\n        \"\"\"\n        Search for trait records based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; for record in TraitRecord.search(dataset_name=\"Plant Growth Study\", trait_name=\"Height\"):\n            ...     print(record)\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            trait_name (str, optional): The name of the trait. Defaults to None.\n            trait_value (float, optional): The value of the trait. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Yields:\n            TraitRecord: Matching trait records.\n        \"\"\"\n        try:\n            if not any([dataset_name, trait_name, trait_value, experiment_name, site_name, season_name, plot_number, plot_row_number, plot_column_number, collection_date, record_info]):\n                print(\"At least one search parameter must be provided.\")\n                return\n            records = TraitRecordsIMMVModel.stream(\n                dataset_name=dataset_name,\n                trait_name=trait_name,\n                trait_value=trait_value,\n                experiment_name=experiment_name,\n                site_name=site_name,\n                season_name=season_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                collection_date=collection_date,\n                record_info=record_info\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error searching TraitRecords: {e}\")\n            yield from []\n\n\n    @classmethod\n    def filter(\n        cls,\n        start_timestamp: Optional[datetime] = None,\n        end_timestamp: Optional[datetime] = None,\n        trait_names: Optional[List[str]] = None,\n        dataset_names: Optional[List[str]] = None,\n        experiment_names: Optional[List[str]] = None,\n        season_names: Optional[List[str]] = None,\n        site_names: Optional[List[str]] = None\n    ) -&gt; Generator[\"TraitRecord\", None, None]:\n        \"\"\"\n        Filter trait records based on custom logic.\n\n        Examples:\n            &gt;&gt;&gt; records = TraitRecord.filter(\n            ...     start_timestamp=datetime(2023, 10, 1, 0, 0),\n            ...     end_timestamp=datetime(2023, 10, 31, 23, 59),\n            ...     trait_names=[\"Height\", \"Width\"],\n            ...     dataset_names=[\"Plant Growth Study\"],\n            ...     experiment_names=[\"Growth Experiment 1\"],\n            ...     season_names=[\"Spring 2023\"],\n            ...     site_names=[\"Research Farm A\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n            end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n            trait_names (List[str], optional): List of trait names. Defaults to None.\n            dataset_names (List[str], optional): List of dataset names. Defaults to None.\n            experiment_names (List[str], optional): List of experiment names. Defaults to None.\n            season_names (List[str], optional): List of season names. Defaults to None.\n            site_names (List[str], optional): List of site names. Defaults to None.\n        Yields:\n            TraitRecord: Filtered trait records.\n        \"\"\"\n        try:\n            if not any([start_timestamp, end_timestamp, trait_names, dataset_names, experiment_names, season_names, site_names]):\n                print(\"At least one filter parameter must be provided.\")\n                return\n            records = TraitRecordModel.filter_records(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                trait_names=trait_names,\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            for record in records:\n                record = cls.model_validate(record)\n                yield record\n        except Exception as e:\n            print(f\"Error filtering TraitRecords: {e}\")\n            yield from []\n\n    def update(\n        self,\n        trait_value: float = None,\n        record_info: dict = None\n    ) -&gt; Optional[\"TraitRecord\"]:\n        \"\"\"\n        Update the details of the trait record.\n\n        Examples:\n            &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = trait_record.update(\n            ...     trait_value=160.0,\n            ...     record_info={\"notes\": \"Updated measurement\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record)\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Args:\n            trait_value (float, optional): The new trait value. Defaults to None.\n            record_info (dict, optional): The new record information. Defaults to None.\n        Returns:\n            Optional[TraitRecord]: The updated trait record, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([trait_value, record_info]):\n                print(\"At least one parameter must be provided to update TraitRecord.\")\n                return None\n            current_id = self.id\n            trait_record = TraitRecordModel.get(current_id)\n            if not trait_record:\n                print(f\"TraitRecord with ID {current_id} not found.\")\n                return None\n            trait_record = TraitRecordModel.update(\n                trait_record,\n                trait_value=trait_value,\n                record_info=record_info\n            )\n            trait_record = self.model_validate(trait_record)\n            self.refresh()\n            return trait_record\n        except Exception as e:\n            print(f\"Error updating TraitRecord: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the trait record.\n\n        Examples:\n            &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; success = trait_record.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the trait record was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait_record = TraitRecordModel.get(current_id)\n            if not trait_record:\n                print(f\"TraitRecord with ID {current_id} not found.\")\n                return False\n            TraitRecordModel.delete(trait_record)\n            return True\n        except Exception as e:\n            print(f\"Error deleting TraitRecord: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"TraitRecord\"]:\n        \"\"\"\n        Refresh the trait record's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; refreshed_record = trait_record.refresh()\n            &gt;&gt;&gt; print(refreshed_record)\n            TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n        Returns:\n            Optional[TraitRecord]: The refreshed trait record, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = TraitRecordModel.get(self.id)\n            if not db_instance:\n                print(f\"TraitRecord with ID {self.id} not found.\")\n                return None\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != 'id':\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing TraitRecord: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the trait record.\n\n        Examples:\n            &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; record_info = trait_record.get_info()\n            &gt;&gt;&gt; print(record_info)\n            {'notes': 'Initial measurement', 'source': 'Field observation'}\n\n        Returns:\n            Optional[dict]: The record's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait_record = TraitRecordModel.get(current_id)\n            if not trait_record:\n                print(f\"TraitRecord with ID {current_id} not found.\")\n                return None\n            record_info = trait_record.record_info\n            if not record_info:\n                print(f\"No record info found for TraitRecord with ID {current_id}.\")\n                return None\n            return record_info\n        except Exception as e:\n            print(f\"Error getting record info for TraitRecord: {e}\")\n            return None\n\n    def set_info(self, record_info: dict) -&gt; Optional[\"TraitRecord\"]:\n        \"\"\"\n        Set the additional information of the trait record.\n\n        Examples:\n            &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n            &gt;&gt;&gt; updated_record = trait_record.set_info(\n            ...     record_info={\"notes\": \"Updated measurement\", \"source\": \"Field observation\"}\n            ... )\n            &gt;&gt;&gt; print(updated_record.record_info)\n            {'notes': 'Updated measurement', 'source': 'Field observation'}\n\n        Args:\n            record_info (dict): The new information to set.\n        Returns:\n            Optional[TraitRecord]: The updated trait record, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait_record = TraitRecordModel.get(current_id)\n            if not trait_record:\n                print(f\"TraitRecord with ID {current_id} not found.\")\n                return None\n            TraitRecordModel.update(\n                trait_record,\n                record_info=record_info\n            )\n            trait_record = self.model_validate(trait_record)\n            self.refresh()\n            return trait_record\n        except Exception as e:\n            print(f\"Error setting record info for TraitRecord: {e}\")\n            return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the TraitRecord object.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the TraitRecord object.\"\"\"\n    return f\"TraitRecord(id={self.id}, timestamp={self.timestamp}, trait_name={self.trait_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number})\"\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the TraitRecord object.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the TraitRecord object.\"\"\"\n    return f\"TraitRecord(id={self.id}, timestamp={self.timestamp}, trait_name={self.trait_name}, dataset_name={self.dataset_name}, experiment_name={self.experiment_name}, site_name={self.site_name}, season_name={self.season_name}, plot_number={self.plot_number}, plot_row_number={self.plot_row_number}, plot_column_number={self.plot_column_number})\"\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.create","title":"<code>create(timestamp=datetime.now(), collection_date=None, dataset_name=None, trait_name=None, trait_value=None, experiment_name=None, site_name=None, season_name=None, plot_number=None, plot_row_number=None, plot_column_number=None, record_info={}, insert_on_create=True)</code>  <code>classmethod</code>","text":"<p>Create a new trait record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitRecord.create(\n...     timestamp=datetime(2023, 10, 1, 12, 0),\n...     collection_date=date(2023, 10, 1),\n...     dataset_name=\"Plant Growth Study\",\n...     trait_name=\"Height\",\n...     trait_value=150.0,\n...     experiment_name=\"Growth Experiment 1\",\n...     site_name=\"Research Farm A\",\n...     season_name=\"Spring 2023\",\n...     plot_number=1,\n...     plot_row_number=2,\n...     plot_column_number=3,\n...     record_info={\"notes\": \"Initial measurement\"},\n...     insert_on_create=True\n... )\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to now.</p> <code>now()</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>trait_name</code> <code>str</code> <p>The name of the trait. Defaults to None.</p> <code>None</code> <code>trait_value</code> <code>float</code> <p>The value of the trait. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <code>insert_on_create</code> <code>bool</code> <p>Whether to insert on create. Defaults to True.</p> <code>True</code> <p>Returns:     Optional[TraitRecord]: The created trait record, or None if an error occurred.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    timestamp: datetime = datetime.now(),\n    collection_date: date = None,\n    dataset_name: str = None,\n    trait_name: str = None,\n    trait_value: float = None,\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    record_info: dict = {},\n    insert_on_create: bool = True\n) -&gt; Optional[\"TraitRecord\"]:\n    \"\"\"\n    Create a new trait record.\n\n    Examples:\n        &gt;&gt;&gt; TraitRecord.create(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0),\n        ...     collection_date=date(2023, 10, 1),\n        ...     dataset_name=\"Plant Growth Study\",\n        ...     trait_name=\"Height\",\n        ...     trait_value=150.0,\n        ...     experiment_name=\"Growth Experiment 1\",\n        ...     site_name=\"Research Farm A\",\n        ...     season_name=\"Spring 2023\",\n        ...     plot_number=1,\n        ...     plot_row_number=2,\n        ...     plot_column_number=3,\n        ...     record_info={\"notes\": \"Initial measurement\"},\n        ...     insert_on_create=True\n        ... )\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to now.\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        trait_name (str, optional): The name of the trait. Defaults to None.\n        trait_value (float, optional): The value of the trait. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n        insert_on_create (bool, optional): Whether to insert on create. Defaults to True.\n    Returns:\n        Optional[TraitRecord]: The created trait record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([experiment_name, site_name, season_name]):\n            raise ValueError(\"At least one of experiment_name, site_name, or season_name must be provided.\")\n        if not trait_name:\n            raise ValueError(\"Trait name is required.\")\n        if not dataset_name:\n            raise ValueError(\"Dataset name is required.\")\n        if not all([plot_number, plot_row_number, plot_column_number]):\n            raise ValueError(\"Plot information (number, row, column) is required if any is provided.\")\n        if not timestamp:\n            timestamp = datetime.now()\n        if not collection_date:\n            collection_date = timestamp.date()\n        if not trait_value:\n            raise ValueError(\"Trait value is required.\")\n        trait_record = TraitRecord(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            trait_name=trait_name,\n            trait_value=trait_value,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            record_info=record_info\n        )\n        if insert_on_create:\n            insert_success, inserted_record_ids = cls.insert([trait_record])\n            if not insert_success:\n                print(f\"Failed to insert TraitRecord: {trait_record}\")\n                return None\n            if not inserted_record_ids or len(inserted_record_ids) == 0:\n                print(f\"No TraitRecord IDs returned after insertion.\")\n                return None\n            inserted_record_id = inserted_record_ids[0]\n            trait_record = cls.get_by_id(inserted_record_id)\n        return trait_record\n    except Exception as e:\n        print(f\"Error creating TraitRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.delete","title":"<code>delete()</code>","text":"<p>Delete the trait record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; success = trait_record.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the trait record was deleted, False otherwise.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the trait record.\n\n    Examples:\n        &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; success = trait_record.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the trait record was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait_record = TraitRecordModel.get(current_id)\n        if not trait_record:\n            print(f\"TraitRecord with ID {current_id} not found.\")\n            return False\n        TraitRecordModel.delete(trait_record)\n        return True\n    except Exception as e:\n        print(f\"Error deleting TraitRecord: {e}\")\n        return False\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.exists","title":"<code>exists(timestamp, trait_name, dataset_name, experiment_name, site_name, season_name, plot_number=None, plot_row_number=None, plot_column_number=None)</code>  <code>classmethod</code>","text":"<p>Check if a trait record with the given parameters exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitRecord.exists(\n...     timestamp=datetime(2023, 10, 1, 12, 0),\n...     trait_name=\"Height\",\n...     dataset_name=\"Plant Growth Study\",\n...     experiment_name=\"Growth Experiment 1\",\n...     site_name=\"Research Farm A\",\n...     season_name=\"Spring 2023\",\n...     plot_number=1,\n...     plot_row_number=2,\n...     plot_column_number=3\n... )\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <p>Returns:     bool: True if the trait record exists, False otherwise.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    timestamp: datetime,\n    trait_name: str,\n    dataset_name: str,\n    experiment_name: str,\n    site_name: str,\n    season_name: str,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None\n) -&gt; bool:\n    \"\"\"\n    Check if a trait record with the given parameters exists.\n\n    Examples:\n        &gt;&gt;&gt; TraitRecord.exists(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0),\n        ...     trait_name=\"Height\",\n        ...     dataset_name=\"Plant Growth Study\",\n        ...     experiment_name=\"Growth Experiment 1\",\n        ...     site_name=\"Research Farm A\",\n        ...     season_name=\"Spring 2023\",\n        ...     plot_number=1,\n        ...     plot_row_number=2,\n        ...     plot_column_number=3\n        ... )\n        True\n\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        trait_name (str): The name of the trait.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment.\n        season_name (str): The name of the season.\n        site_name (str): The name of the site.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n    Returns:\n        bool: True if the trait record exists, False otherwise.\n    \"\"\"\n    try:\n        exists = TraitRecordModel.exists(\n            timestamp=timestamp,\n            trait_name=trait_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number\n        )\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of TraitRecord: {e}\")\n        raise e\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.filter","title":"<code>filter(start_timestamp=None, end_timestamp=None, trait_names=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>  <code>classmethod</code>","text":"<p>Filter trait records based on custom logic.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; records = TraitRecord.filter(\n...     start_timestamp=datetime(2023, 10, 1, 0, 0),\n...     end_timestamp=datetime(2023, 10, 31, 23, 59),\n...     trait_names=[\"Height\", \"Width\"],\n...     dataset_names=[\"Plant Growth Study\"],\n...     experiment_names=[\"Growth Experiment 1\"],\n...     season_names=[\"Spring 2023\"],\n...     site_names=[\"Research Farm A\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>datetime</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>trait_names</code> <code>List[str]</code> <p>List of trait names. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>List[str]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <p>Yields:     TraitRecord: Filtered trait records.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef filter(\n    cls,\n    start_timestamp: Optional[datetime] = None,\n    end_timestamp: Optional[datetime] = None,\n    trait_names: Optional[List[str]] = None,\n    dataset_names: Optional[List[str]] = None,\n    experiment_names: Optional[List[str]] = None,\n    season_names: Optional[List[str]] = None,\n    site_names: Optional[List[str]] = None\n) -&gt; Generator[\"TraitRecord\", None, None]:\n    \"\"\"\n    Filter trait records based on custom logic.\n\n    Examples:\n        &gt;&gt;&gt; records = TraitRecord.filter(\n        ...     start_timestamp=datetime(2023, 10, 1, 0, 0),\n        ...     end_timestamp=datetime(2023, 10, 31, 23, 59),\n        ...     trait_names=[\"Height\", \"Width\"],\n        ...     dataset_names=[\"Plant Growth Study\"],\n        ...     experiment_names=[\"Growth Experiment 1\"],\n        ...     season_names=[\"Spring 2023\"],\n        ...     site_names=[\"Research Farm A\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n        end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n        trait_names (List[str], optional): List of trait names. Defaults to None.\n        dataset_names (List[str], optional): List of dataset names. Defaults to None.\n        experiment_names (List[str], optional): List of experiment names. Defaults to None.\n        season_names (List[str], optional): List of season names. Defaults to None.\n        site_names (List[str], optional): List of site names. Defaults to None.\n    Yields:\n        TraitRecord: Filtered trait records.\n    \"\"\"\n    try:\n        if not any([start_timestamp, end_timestamp, trait_names, dataset_names, experiment_names, season_names, site_names]):\n            print(\"At least one filter parameter must be provided.\")\n            return\n        records = TraitRecordModel.filter_records(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            trait_names=trait_names,\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error filtering TraitRecords: {e}\")\n        yield from []\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.get","title":"<code>get(timestamp, trait_name, dataset_name, experiment_name, site_name, season_name, plot_number=None, plot_row_number=None, plot_column_number=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a trait record by its parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitRecord.get(\n...     timestamp=datetime(2023, 10, 1, 12, 0),\n...     trait_name=\"Height\",\n...     dataset_name=\"Plant Growth Study\",\n...     experiment_name=\"Growth Experiment 1\",\n...     site_name=\"Research Farm A\",\n...     season_name=\"Spring 2023\",\n...     plot_number=1,\n...     plot_row_number=2,\n...     plot_column_number=3\n... )\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record.</p> required <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <code>dataset_name</code> <code>str</code> <p>The name of the dataset.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment.</p> required <code>site_name</code> <code>str</code> <p>The name of the site.</p> required <code>season_name</code> <code>str</code> <p>The name of the season.</p> required <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[TraitRecord]: The trait record, or None if not found.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    timestamp: datetime,\n    trait_name: str,\n    dataset_name: str,\n    experiment_name: str,\n    site_name: str,\n    season_name: str,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None\n) -&gt; Optional[\"TraitRecord\"]:\n    \"\"\"\n    Retrieve a trait record by its parameters.\n\n    Examples:\n        &gt;&gt;&gt; TraitRecord.get(\n        ...     timestamp=datetime(2023, 10, 1, 12, 0),\n        ...     trait_name=\"Height\",\n        ...     dataset_name=\"Plant Growth Study\",\n        ...     experiment_name=\"Growth Experiment 1\",\n        ...     site_name=\"Research Farm A\",\n        ...     season_name=\"Spring 2023\",\n        ...     plot_number=1,\n        ...     plot_row_number=2,\n        ...     plot_column_number=3\n        ... )\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        timestamp (datetime): The timestamp of the record.\n        trait_name (str): The name of the trait.\n        dataset_name (str): The name of the dataset.\n        experiment_name (str): The name of the experiment.\n        site_name (str): The name of the site.\n        season_name (str): The name of the season.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n    Returns:\n        Optional[TraitRecord]: The trait record, or None if not found.\n    \"\"\"\n    try:\n        if not timestamp:\n            print(\"Timestamp is required to get TraitRecord.\")\n            return None\n        if not trait_name:\n            print(\"Trait name is required to get TraitRecord.\")\n            return None\n        if not dataset_name:\n            print(\"Dataset name is required to get TraitRecord.\")\n            return None\n        if not experiment_name and not site_name and not season_name:\n            print(\"At least one of experiment_name, site_name, or season_name is required to get TraitRecord.\")\n            return None\n        if not all([plot_number, plot_row_number, plot_column_number]):\n            print(\"Plot information (number, row, column) is required if any is provided.\")\n            return None\n        trait_record = TraitRecordsIMMVModel.get_by_parameters(\n            timestamp=timestamp,\n            trait_name=trait_name,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number\n        )\n        if not trait_record:\n            print(\"TraitRecord not found with the provided parameters.\")\n            return None\n        trait_record = cls.model_validate(trait_record)\n        return trait_record\n    except Exception as e:\n        print(f\"Error getting TraitRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.get_all","title":"<code>get_all(limit=100)</code>  <code>classmethod</code>","text":"<p>Retrieve all trait records, up to a specified limit.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitRecord.get_all(limit=10)\n&gt;&gt;&gt; for record in TraitRecord.get_all(limit=10):\n...     print(record)\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), trait_name='Width', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>limit</code> <code>int</code> <p>The maximum number of records to retrieve. Defaults to 100.</p> <code>100</code> <p>Returns:     Optional[List[TraitRecord]]: List of trait records, or None if not found.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef get_all(cls, limit: int = 100) -&gt; Optional[List[\"TraitRecord\"]]:\n    \"\"\"\n    Retrieve all trait records, up to a specified limit.\n\n    Examples:\n        &gt;&gt;&gt; TraitRecord.get_all(limit=10)\n        &gt;&gt;&gt; for record in TraitRecord.get_all(limit=10):\n        ...     print(record)\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), trait_name='Width', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        limit (int, optional): The maximum number of records to retrieve. Defaults to 100.\n    Returns:\n        Optional[List[TraitRecord]]: List of trait records, or None if not found.\n    \"\"\"\n    try:\n        records = TraitRecordModel.all(limit=limit)\n        if not records or len(records) == 0:\n            print(f\"No TraitRecords found\")\n            return None\n        records = [cls.model_validate(instance) for instance in records]\n        return records\n    except Exception as e:\n        print(f\"Error getting all TraitRecords: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a trait record by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; TraitRecord.get_by_id(UUID('...'))\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the trait record.</p> required <p>Returns:     Optional[TraitRecord]: The trait record, or None if not found.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"TraitRecord\"]:\n    \"\"\"\n    Retrieve a trait record by its ID.\n\n    Examples:\n        &gt;&gt;&gt; TraitRecord.get_by_id(UUID('...'))\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        id (UUID | int | str): The ID of the trait record.\n    Returns:\n        Optional[TraitRecord]: The trait record, or None if not found.\n    \"\"\"\n    try:\n        db_instance = TraitRecordModel.get(id)\n        if not db_instance:\n            print(f\"TraitRecord with ID {id} not found.\")\n            return None\n        record = cls.model_validate(db_instance)\n        return record\n    except Exception as e:\n        print(f\"Error getting TraitRecord by ID {id}: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the trait record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; record_info = trait_record.get_info()\n&gt;&gt;&gt; print(record_info)\n{'notes': 'Initial measurement', 'source': 'Field observation'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The record's info, or None if not found.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the trait record.\n\n    Examples:\n        &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; record_info = trait_record.get_info()\n        &gt;&gt;&gt; print(record_info)\n        {'notes': 'Initial measurement', 'source': 'Field observation'}\n\n    Returns:\n        Optional[dict]: The record's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait_record = TraitRecordModel.get(current_id)\n        if not trait_record:\n            print(f\"TraitRecord with ID {current_id} not found.\")\n            return None\n        record_info = trait_record.record_info\n        if not record_info:\n            print(f\"No record info found for TraitRecord with ID {current_id}.\")\n            return None\n        return record_info\n    except Exception as e:\n        print(f\"Error getting record info for TraitRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.insert","title":"<code>insert(records)</code>  <code>classmethod</code>","text":"<p>Insert a list of trait records into the database.</p> <p>Parameters:</p> Name Type Description Default <code>records</code> <code>List[TraitRecord]</code> <p>The records to insert.</p> required <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef insert(cls, records: List[\"TraitRecord\"]) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a list of trait records into the database.\n\n    Args:\n        records (List[TraitRecord]): The records to insert.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not records or len(records) == 0:\n            print(f\"No records provided to insert.\")\n            return False, []\n        records_to_insert = []\n        for record in records:\n            record_dict = record.model_dump()\n            record_dict = {k: v for k, v in record_dict.items() if v is not None}\n            records_to_insert.append(record_dict)\n        print(f\"Inserting {len(records_to_insert)} TraitRecords.\")\n        inserted_record_ids = TraitRecordModel.insert_bulk('trait_records_unique', records_to_insert)\n        print(f\"Inserted {len(inserted_record_ids)} TraitRecords.\")\n        return True, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting TraitRecords: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the trait record's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; refreshed_record = trait_record.refresh()\n&gt;&gt;&gt; print(refreshed_record)\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Returns:</p> Type Description <code>Optional[TraitRecord]</code> <p>Optional[TraitRecord]: The refreshed trait record, or None if an error occurred.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>def refresh(self) -&gt; Optional[\"TraitRecord\"]:\n    \"\"\"\n    Refresh the trait record's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; refreshed_record = trait_record.refresh()\n        &gt;&gt;&gt; print(refreshed_record)\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Returns:\n        Optional[TraitRecord]: The refreshed trait record, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = TraitRecordModel.get(self.id)\n        if not db_instance:\n            print(f\"TraitRecord with ID {self.id} not found.\")\n            return None\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != 'id':\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing TraitRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.search","title":"<code>search(dataset_name=None, trait_name=None, trait_value=None, experiment_name=None, site_name=None, season_name=None, plot_number=None, plot_row_number=None, plot_column_number=None, collection_date=None, record_info=None)</code>  <code>classmethod</code>","text":"<p>Search for trait records based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; for record in TraitRecord.search(dataset_name=\"Plant Growth Study\", trait_name=\"Height\"):\n...     print(record)\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>trait_name</code> <code>str</code> <p>The name of the trait. Defaults to None.</p> <code>None</code> <code>trait_value</code> <code>float</code> <p>The value of the trait. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Yields:     TraitRecord: Matching trait records.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>@classmethod\ndef search(\n    cls,\n    dataset_name: str = None,\n    trait_name: str = None,\n    trait_value: float = None,\n    experiment_name: str = None,\n    site_name: str = None,\n    season_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    collection_date: date = None,\n    record_info: dict = None\n) -&gt; Generator[\"TraitRecord\", None, None]:\n    \"\"\"\n    Search for trait records based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; for record in TraitRecord.search(dataset_name=\"Plant Growth Study\", trait_name=\"Height\"):\n        ...     print(record)\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 2, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        trait_name (str, optional): The name of the trait. Defaults to None.\n        trait_value (float, optional): The value of the trait. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Yields:\n        TraitRecord: Matching trait records.\n    \"\"\"\n    try:\n        if not any([dataset_name, trait_name, trait_value, experiment_name, site_name, season_name, plot_number, plot_row_number, plot_column_number, collection_date, record_info]):\n            print(\"At least one search parameter must be provided.\")\n            return\n        records = TraitRecordsIMMVModel.stream(\n            dataset_name=dataset_name,\n            trait_name=trait_name,\n            trait_value=trait_value,\n            experiment_name=experiment_name,\n            site_name=site_name,\n            season_name=season_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            collection_date=collection_date,\n            record_info=record_info\n        )\n        for record in records:\n            record = cls.model_validate(record)\n            yield record\n    except Exception as e:\n        print(f\"Error searching TraitRecords: {e}\")\n        yield from []\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.set_info","title":"<code>set_info(record_info)</code>","text":"<p>Set the additional information of the trait record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = trait_record.set_info(\n...     record_info={\"notes\": \"Updated measurement\", \"source\": \"Field observation\"}\n... )\n&gt;&gt;&gt; print(updated_record.record_info)\n{'notes': 'Updated measurement', 'source': 'Field observation'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>record_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[TraitRecord]: The updated trait record, or None if an error occurred.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>def set_info(self, record_info: dict) -&gt; Optional[\"TraitRecord\"]:\n    \"\"\"\n    Set the additional information of the trait record.\n\n    Examples:\n        &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = trait_record.set_info(\n        ...     record_info={\"notes\": \"Updated measurement\", \"source\": \"Field observation\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record.record_info)\n        {'notes': 'Updated measurement', 'source': 'Field observation'}\n\n    Args:\n        record_info (dict): The new information to set.\n    Returns:\n        Optional[TraitRecord]: The updated trait record, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait_record = TraitRecordModel.get(current_id)\n        if not trait_record:\n            print(f\"TraitRecord with ID {current_id} not found.\")\n            return None\n        TraitRecordModel.update(\n            trait_record,\n            record_info=record_info\n        )\n        trait_record = self.model_validate(trait_record)\n        self.refresh()\n        return trait_record\n    except Exception as e:\n        print(f\"Error setting record info for TraitRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/trait_records/#gemini.api.trait_record.TraitRecord.update","title":"<code>update(trait_value=None, record_info=None)</code>","text":"<p>Update the details of the trait record.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n&gt;&gt;&gt; updated_record = trait_record.update(\n...     trait_value=160.0,\n...     record_info={\"notes\": \"Updated measurement\"}\n... )\n&gt;&gt;&gt; print(updated_record)\nTraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_value</code> <code>float</code> <p>The new trait value. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>The new record information. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[TraitRecord]: The updated trait record, or None if an error occurred.</p> Source code in <code>gemini/api/trait_record.py</code> <pre><code>def update(\n    self,\n    trait_value: float = None,\n    record_info: dict = None\n) -&gt; Optional[\"TraitRecord\"]:\n    \"\"\"\n    Update the details of the trait record.\n\n    Examples:\n        &gt;&gt;&gt; trait_record = TraitRecord.get_by_id(UUID('...'))\n        &gt;&gt;&gt; updated_record = trait_record.update(\n        ...     trait_value=160.0,\n        ...     record_info={\"notes\": \"Updated measurement\"}\n        ... )\n        &gt;&gt;&gt; print(updated_record)\n        TraitRecord(id=UUID('...'), timestamp=datetime(2023, 10, 1, 12, 0), trait_name='Height', dataset_name='Plant Growth Study', experiment_name='Growth Experiment 1', site_name='Research Farm A', season_name='Spring 2023', plot_number=1, plot_row_number=2, plot_column_number=3)\n\n    Args:\n        trait_value (float, optional): The new trait value. Defaults to None.\n        record_info (dict, optional): The new record information. Defaults to None.\n    Returns:\n        Optional[TraitRecord]: The updated trait record, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([trait_value, record_info]):\n            print(\"At least one parameter must be provided to update TraitRecord.\")\n            return None\n        current_id = self.id\n        trait_record = TraitRecordModel.get(current_id)\n        if not trait_record:\n            print(f\"TraitRecord with ID {current_id} not found.\")\n            return None\n        trait_record = TraitRecordModel.update(\n            trait_record,\n            trait_value=trait_value,\n            record_info=record_info\n        )\n        trait_record = self.model_validate(trait_record)\n        self.refresh()\n        return trait_record\n    except Exception as e:\n        print(f\"Error updating TraitRecord: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/","title":"Traits API","text":""},{"location":"api/traits/#description","title":"Description","text":"<p>Traits represent properties of a Cultivar or Plant. A trait can be associated with multiple Experiments.</p>"},{"location":"api/traits/#module","title":"Module","text":"<p>This module defines the Trait class, which represents a trait entity, including its metadata, associations to experiments, datasets, and records, and related operations.</p> <p>It includes methods for creating, retrieving, updating, and deleting traits, as well as methods for checking existence, searching, and managing associations with related entities and records.</p> <p>This module includes the following methods:</p> <ul> <li><code>exists</code>: Check if a trait with the given name exists.</li> <li><code>create</code>: Create a new trait.</li> <li><code>get</code>: Retrieve a trait by its name and experiment.</li> <li><code>get_by_id</code>: Retrieve a trait by its ID.</li> <li><code>get_all</code>: Retrieve all traits.</li> <li><code>search</code>: Search for traits based on various criteria.</li> <li><code>update</code>: Update the details of a trait.</li> <li><code>delete</code>: Delete a trait.</li> <li><code>refresh</code>: Refresh the trait's data from the database.</li> <li><code>get_info</code>: Get the additional information of the trait.</li> <li><code>set_info</code>: Set the additional information of the trait.</li> <li>Association methods for experiments, datasets, and records.</li> </ul>"},{"location":"api/traits/#gemini.api.trait.Trait","title":"<code>Trait</code>","text":"<p>               Bases: <code>APIBase</code></p> <p>Represents a trait entity, including its metadata, associations to experiments, datasets, and records, and related operations.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>Optional[ID]</code> <p>The unique identifier of the trait.</p> <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> <code>trait_units</code> <code>str</code> <p>The units of the trait.</p> <code>trait_level_id</code> <code>Optional[int]</code> <p>The ID of the trait level.</p> <code>trait_info</code> <code>Optional[dict]</code> <p>Additional information about the trait.</p> <code>trait_metrics</code> <code>Optional[dict]</code> <p>Metrics associated with the trait.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>class Trait(APIBase):\n    \"\"\"\n    Represents a trait entity, including its metadata, associations to experiments, datasets, and records, and related operations.\n\n    Attributes:\n        id (Optional[ID]): The unique identifier of the trait.\n        trait_name (str): The name of the trait.\n        trait_units (str): The units of the trait.\n        trait_level_id (Optional[int]): The ID of the trait level.\n        trait_info (Optional[dict]): Additional information about the trait.\n        trait_metrics (Optional[dict]): Metrics associated with the trait.\n    \"\"\"\n\n    id: Optional[ID] = Field(None, validation_alias=AliasChoices(\"id\", \"trait_id\"))\n\n    trait_name: str\n    trait_units: str\n    trait_level_id: Optional[int] = None\n    trait_info: Optional[dict] = None\n    trait_metrics: Optional[dict] = None\n\n    def __str__(self):\n        \"\"\"Return a string representation of the Trait object.\"\"\"\n        return f\"Trait(trait_name={self.trait_name}, id={self.id})\"\n\n    def __repr__(self):\n        \"\"\"Return a detailed string representation of the Trait object.\"\"\"\n        return f\"Trait(trait_name={self.trait_name}, id={self.id})\"\n\n    @classmethod\n    def exists(\n        cls,\n        trait_name: str\n    ) -&gt; bool:\n        \"\"\"\n        Check if a trait with the given name exists.\n\n        Examples:\n            &gt;&gt;&gt; Trait.exists(\"Leaf Area Index\")\n            True\n\n            &gt;&gt;&gt; Trait.exists(\"Nonexistent Trait\")\n            False\n\n        Args:\n            trait_name (str): The name of the trait.\n        Returns:\n            bool: True if the trait exists, False otherwise.\n        \"\"\"\n        try:\n            exists = TraitModel.exists(trait_name=trait_name)\n            return exists\n        except Exception as e:\n            print(f\"Error checking existence of trait: {e}\")\n            return False\n\n    @classmethod\n    def create(\n        cls,\n        trait_name: str,\n        trait_units: str = None,\n        trait_level: GEMINITraitLevel = GEMINITraitLevel.Plot,\n        trait_info: dict = {},\n        trait_metrics: dict = {},\n        experiment_name: str = None\n    ) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Create a new trait and associate it with an experiment if provided.\n\n        Examples:\n            &gt;&gt;&gt; Trait.create(\"Leaf Area Index\", \"cm^2\", GEMINITraitLevel.Plot, {\"description\": \"Leaf area index\"}, {\"mean\": 5.0}, \"Experiment 1\")\n            Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n        Args:\n            trait_name (str): The name of the trait.\n            trait_units (str, optional): The units of the trait. Defaults to None.\n            trait_level (GEMINITraitLevel, optional): The level of the trait. Defaults to Plot.\n            trait_info (dict, optional): Additional information. Defaults to {{}}.\n            trait_metrics (dict, optional): Metrics associated with the trait. Defaults to {{}}.\n            experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n        Returns:\n            Optional[Trait]: The created trait, or None if an error occurred.\n        \"\"\"\n        try:\n            trait_level_id = trait_level.value if isinstance(trait_level, GEMINITraitLevel) else trait_level\n            trait = TraitModel.get_or_create(\n                trait_name=trait_name,\n                trait_units=trait_units,\n                trait_level_id=trait_level_id,\n                trait_metrics=trait_metrics,\n                trait_info=trait_info,\n            )\n            trait = cls.model_validate(trait)\n            if experiment_name:\n                trait.associate_experiment(experiment_name)\n            return trait\n        except Exception as e:\n            print(f\"Error creating trait: {e}\")\n            return None\n\n    @classmethod\n    def get(\n        cls,\n        trait_name: str,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Retrieve a trait by its name and experiment.\n\n        Examples:\n            &gt;&gt;&gt; Trait.get(\"Leaf Area Index\", \"Experiment 1\")\n            Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n        Args:\n            trait_name (str): The name of the trait.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Trait]: The trait, or None if not found.\n        \"\"\"\n        try:\n            trait = ExperimentTraitsViewModel.get_by_parameters(\n                trait_name=trait_name,\n                experiment_name=experiment_name   \n            )\n            if not trait:\n                print(f\"Trait with name {trait_name} not found.\")\n                return None\n            trait = cls.model_validate(trait)\n            return trait\n        except Exception as e:\n            print(f\"Error getting trait: {e}\")\n            return None\n\n    @classmethod\n    def get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Retrieve a trait by its ID.\n\n        Examples:\n            &gt;&gt;&gt; Trait.get_by_id(UUID('...'))\n            Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n        Args:\n            id (UUID | int | str): The ID of the trait.\n        Returns:\n            Optional[Trait]: The trait, or None if not found.\n        \"\"\"\n        try:\n            trait = TraitModel.get(id)\n            if not trait:\n                print(f\"Trait with ID {id} does not exist.\")\n                return None\n            trait = cls.model_validate(trait)\n            return trait\n        except Exception as e:\n            print(f\"Error getting trait by ID: {e}\")\n            return None\n\n    @classmethod\n    def get_all(cls) -&gt; Optional[List[\"Trait\"]]:\n        \"\"\"\n        Retrieve all traits.\n\n        Examples:\n            &gt;&gt;&gt; Trait.get_all()\n            [Trait(trait_name=Leaf Area Index, id=UUID(...)), Trait(trait_name=Plant Height, id=UUID(...))]\n\n        Returns:\n            Optional[List[Trait]]: List of all traits, or None if not found.\n        \"\"\"\n        try:\n            traits = TraitModel.all()\n            if not traits or len(traits) == 0:\n                print(\"No traits found.\")\n                return None\n            traits = [cls.model_validate(trait) for trait in traits]\n            return traits\n        except Exception as e:\n            print(f\"Error getting all traits: {e}\")\n            return None\n\n    @classmethod\n    def search(\n        cls, \n        trait_name: str = None,\n        trait_units: str = None,\n        trait_level: GEMINITraitLevel = None,\n        trait_info: dict = None,\n        trait_metrics: dict = None,\n        experiment_name: str = None\n    ) -&gt; Optional[List[\"Trait\"]]:\n        \"\"\"\n        Search for traits based on various criteria.\n\n        Examples:\n            &gt;&gt;&gt; Trait.search(trait_name=\"Leaf Area Index\")\n            [Trait(trait_name=Leaf Area Index, id=UUID(...))]\n\n        Args:\n            trait_name (str, optional): The name of the trait. Defaults to None.\n            trait_units (str, optional): The units of the trait. Defaults to None.\n            trait_level (GEMINITraitLevel, optional): The level of the trait. Defaults to None.\n            trait_info (dict, optional): Additional information. Defaults to None.\n            trait_metrics (dict, optional): Metrics associated with the trait. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[List[Trait]]: List of matching traits, or None if not found.\n        \"\"\"\n        try:\n            if not any([experiment_name, trait_name, trait_units, trait_level, trait_info, trait_metrics]):\n                print(\"At least one search parameter must be provided.\")\n                return None\n\n            traits = ExperimentTraitsViewModel.search(\n                experiment_name=experiment_name,\n                trait_name=trait_name,\n                trait_units=trait_units,\n                trait_level_id=trait_level.value if trait_level else None,\n                trait_info=trait_info,\n                trait_metrics=trait_metrics\n            )\n            if not traits or len(traits) == 0:\n                print(\"No traits found with the provided search parameters.\")\n                return None\n            traits = [cls.model_validate(trait) for trait in traits]\n            return traits if traits else None\n        except Exception as e:\n            print(f\"Error searching traits: {e}\")\n            return None\n\n    def update(\n        self,\n        trait_name: str = None, \n        trait_units: str = None,\n        trait_level: GEMINITraitLevel = None,\n        trait_info: dict = None,\n        trait_metrics: dict = None,\n    ) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Update the details of the trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; updated_trait = trait.update(trait_name=\"New Leaf Area Index\", trait_units=\"m^2\")\n            &gt;&gt;&gt; print(updated_trait)\n            Trait(trait_name=New Leaf Area Index, id=UUID(...))\n\n        Args:\n            trait_name (str, optional): The new name. Defaults to None.\n            trait_units (str, optional): The new units. Defaults to None.\n            trait_level (GEMINITraitLevel, optional): The new level. Defaults to None.\n            trait_info (dict, optional): The new information. Defaults to None.\n            trait_metrics (dict, optional): The new metrics. Defaults to None.\n        Returns:\n            Optional[Trait]: The updated trait, or None if an error occurred.\n        \"\"\"\n        try:\n            if not any([trait_units, trait_level, trait_info, trait_metrics, trait_name]):\n                print(\"At least one update parameter must be provided.\")\n                return None\n\n            current_id = self.id\n            trait = TraitModel.get(current_id)\n            if not trait:\n                print(f\"Trait with ID {current_id} does not exist.\")\n                return None\n\n            trait = TraitModel.update(\n                trait,\n                trait_name=trait_name,\n                trait_units=trait_units,\n                trait_level_id=trait_level.value if trait_level else None,\n                trait_info=trait_info,\n                trait_metrics=trait_metrics\n            )\n            trait = self.model_validate(trait)\n            self.refresh()\n            return trait \n        except Exception as e:\n            print(f\"Error updating trait: {e}\")\n            return None\n\n    def delete(self) -&gt; bool:\n        \"\"\"\n        Delete the trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; success = trait.delete()\n            &gt;&gt;&gt; print(success)\n            True\n\n        Returns:\n            bool: True if the trait was deleted, False otherwise.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait = TraitModel.get(current_id)\n            if not trait:\n                print(f\"Trait with ID {current_id} does not exist.\")\n                return False\n            TraitModel.delete(trait)\n            return True\n        except Exception as e:\n            print(f\"Error deleting trait: {e}\")\n            return False\n\n    def refresh(self) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Refresh the trait's data from the database.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; refreshed_trait = trait.refresh()\n            &gt;&gt;&gt; print(refreshed_trait)\n            Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n        Returns:\n            Optional[Trait]: The refreshed trait, or None if an error occurred.\n        \"\"\"\n        try:\n            db_instance = TraitModel.get(self.id)\n            if not db_instance:\n                print(f\"Trait with ID {self.id} does not exist.\")\n                return self\n            instance = self.model_validate(db_instance)\n            for key, value in instance.model_dump().items():\n                if hasattr(self, key) and key != \"id\":\n                    setattr(self, key, value)\n            return self\n        except Exception as e:\n            print(f\"Error refreshing trait: {e}\")\n            return None\n\n    def get_info(self) -&gt; Optional[dict]:\n        \"\"\"\n        Get the additional information of the trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; trait_info = trait.get_info()\n            &gt;&gt;&gt; print(trait_info)\n            {'description': 'Leaf area index', 'source': 'Field measurements'}\n\n        Returns:\n            Optional[dict]: The trait's info, or None if not found.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait = TraitModel.get(current_id)\n            if not trait:\n                print(f\"Trait with ID {current_id} does not exist.\")\n                return None\n            trait_info = trait.trait_info\n            if not trait_info:\n                print(\"Trait info is empty.\")\n                return None\n            return trait_info\n        except Exception as e:\n            print(f\"Error getting trait info: {e}\")\n            return None\n\n    def set_info(self, trait_info: dict) -&gt; Optional[\"Trait\"]:\n        \"\"\"\n        Set the additional information of the trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; updated_trait = trait.set_info({\"description\": \"Updated leaf area index\", \"source\": \"New measurements\"})\n            &gt;&gt;&gt; print(updated_trait.get_info())\n            {'description': 'Updated leaf area index', 'source': 'New measurements'}\n\n        Args:\n            trait_info (dict): The new information to set.\n        Returns:\n            Optional[Trait]: The updated trait, or None if an error occurred.\n        \"\"\"\n        try:\n            current_id = self.id\n            trait = TraitModel.get(current_id)\n            if not trait:\n                print(f\"Trait with ID {current_id} does not exist.\")\n                return None\n            trait = TraitModel.update(\n                trait,\n                trait_info=trait_info\n            )\n            trait = self.model_validate(trait)\n            self.refresh()\n            return self\n        except Exception as e:\n            print(f\"Error setting trait info: {e}\")\n            return None\n\n    def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n        \"\"\"\n        Get all experiments associated with this trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; experiments = trait.get_associated_experiments()\n            &gt;&gt;&gt; for experiment in experiments:\n            ...     print(experiment)\n            Experiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n            Experiment(experiment_name=Experiment 2, experiment_start_date=2023-02-01, experiment_end_date=2023-11-30, id=UUID(...))\n\n        Returns:\n            Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment_traits = ExperimentTraitsViewModel.search(trait_id=self.id)\n            if not experiment_traits or len(experiment_traits) == 0:\n                print(\"No associated experiments found.\")\n                return None\n            experiments = [Experiment.model_validate(experiment) for experiment in experiment_traits]\n            return experiments\n        except Exception as e:\n            print(f\"Error getting associated experiments: {e}\")\n            return None\n\n    def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Associate this trait with an experiment.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; experiment = trait.associate_experiment(\"Experiment 1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to associate.\n        Returns:\n            Optional[Experiment]: The associated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentTraitModel.get_by_parameters(\n                experiment_id=experiment.id,\n                trait_id=self.id\n            )\n            if existing_association:\n                print(f\"Trait {self.trait_name} is already associated with experiment {experiment_name}.\")\n                return True\n            new_association = ExperimentTraitModel.get_or_create(\n                experiment_id=experiment.id,\n                trait_id=self.id\n            )\n            if not new_association:\n                print(f\"Failed to associate trait {self.trait_name} with experiment {experiment_name}.\")\n                return False\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error associating experiment: {e}\")\n            return None\n\n    def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n        \"\"\"\n        Unassociate this trait from an experiment.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; experiment = trait.unassociate_experiment(\"Experiment 1\")\n            &gt;&gt;&gt; print(experiment)\n            Experiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n        Args:\n            experiment_name (str): The name of the experiment to unassociate.\n        Returns:\n            Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return None\n            existing_association = ExperimentTraitModel.get_by_parameters(\n                experiment_id=experiment.id,\n                trait_id=self.id\n            )\n            if not existing_association:\n                print(f\"Trait {self.trait_name} is not associated with experiment {experiment_name}.\")\n                return None\n            is_deleted = ExperimentTraitModel.delete(existing_association)\n            if not is_deleted:\n                print(f\"Failed to unassociate trait {self.trait_name} from experiment {experiment_name}.\")\n                return False\n            self.refresh()\n            return experiment\n        except Exception as e:\n            print(f\"Error unassociating experiment: {e}\")\n            return None\n\n    def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n        \"\"\"\n        Check if this trait is associated with a specific experiment.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; is_associated = trait.belongs_to_experiment(\"Experiment 1\")\n            &gt;&gt;&gt; print(is_associated)\n            True\n\n        Args:\n            experiment_name (str): The name of the experiment to check.\n        Returns:\n            bool: True if associated, False otherwise.\n        \"\"\"\n        try:\n            from gemini.api.experiment import Experiment\n            experiment = Experiment.get(experiment_name)\n            if not experiment:\n                print(f\"Experiment {experiment_name} does not exist.\")\n                return False\n            association_exists = ExperimentTraitModel.exists(\n                experiment_id=experiment.id,\n                trait_id=self.id\n            )\n            return association_exists\n        except Exception as e:\n            print(f\"Error checking if trait belongs to experiment: {e}\")\n            return\n\n    def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n        \"\"\"\n        Get all datasets associated with this trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; datasets = trait.get_associated_datasets()\n            &gt;&gt;&gt; for dataset in datasets:\n            ...     print(dataset)\n            Dataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n            Dataset(dataset_name=Leaf Area Index Dataset 2023-02-01, dataset_type=Trait, collection_date=2023-02-01, id=UUID(...))\n\n        Returns:\n            Optional[List[Dataset]]: A list of associated datasets, or None if not found.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            datasets = TraitDatasetsViewModel.search(trait_id=self.id)\n            if not datasets or len(datasets) == 0:\n                print(\"No associated datasets found.\")\n                return None\n            datasets = [Dataset.model_validate(dataset) for dataset in datasets]\n            return datasets\n        except Exception as e:\n            print(f\"Error getting associated datasets: {e}\")\n            return None\n\n    def create_new_dataset(\n        self,\n        dataset_name: str,\n        dataset_info: dict = {},\n        collection_date: date = None,\n        experiment_name: str = None\n    ) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Create and associate a new dataset with this trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; dataset = trait.create_new_dataset(\"Leaf Area Index Dataset 2023-01-01\", {\"description\": \"Dataset for leaf area index\"}, date(2023, 1, 1), \"Experiment 1\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n\n        Args:\n            dataset_name (str): The name of the new dataset.\n            dataset_info (dict, optional): Additional information. Defaults to {{}}.\n            collection_date (date, optional): The collection date. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n        Returns:\n            Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.create(\n                dataset_name=dataset_name,\n                dataset_info=dataset_info,\n                dataset_type=GEMINIDatasetType.Trait,\n                collection_date=collection_date,\n                experiment_name=experiment_name\n            )\n            if not dataset:\n                print(f\"Failed to create dataset {dataset_name}.\")\n                return None\n            dataset = self.associate_dataset(dataset_name)\n            return dataset\n        except Exception as e:\n            print(f\"Error creating new dataset: {e}\")\n            return None\n\n    def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n        \"\"\"\n        Associate this trait with a dataset.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; dataset = trait.associate_dataset(\"Leaf Area Index Dataset 2023-01-01\")\n            &gt;&gt;&gt; print(dataset)\n            Dataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n\n        Args:\n            dataset_name (str): The name of the dataset to associate.\n        Returns:\n            Optional[Dataset]: The associated dataset, or None if an error occurred.\n        \"\"\"\n        try:\n            from gemini.api.dataset import Dataset\n            dataset = Dataset.get(dataset_name)\n            if not dataset:\n                print(f\"Dataset {dataset_name} does not exist.\")\n                return None\n            existing_association = TraitDatasetModel.get_by_parameters(\n                trait_id=self.id,\n                dataset_id=dataset.id\n            )\n            if existing_association:\n                print(f\"Trait {self.trait_name} is already associated with dataset {dataset_name}.\")\n                return True\n            new_association = TraitDatasetModel.get_or_create(\n                trait_id=self.id,\n                dataset_id=dataset.id\n            )\n            if not new_association:\n                print(f\"Failed to associate trait {self.trait_name} with dataset {dataset_name}.\")\n                return False\n            self.refresh()\n            return dataset\n        except Exception as e:\n            print(f\"Error associating dataset: {e}\")\n            return None\n\n    def insert_record(\n        self,\n        timestamp: date = None,\n        collection_date: date = None,\n        dataset_name: str = None,\n        trait_value: float = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_number: int = -1,\n        plot_row_number: int = -1,\n        plot_column_number: int = -1,\n        record_info: dict = {}\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert a single trait record for this trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; success, record_ids = trait.insert_record(\n            ...     timestamp=datetime.now(),\n            ...     collection_date=date(2023, 1, 1),\n            ...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n            ...     trait_value=5.0,\n            ...     experiment_name=\"Experiment 1\",\n            ...     season_name=\"Spring 2023\",\n            ...     site_name=\"Field Site A\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     record_info={\"description\": \"Leaf area index measurement\"}\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID(...)]\n\n        Args:\n            timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            trait_value (float, optional): The value of the trait. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to -1.\n            plot_row_number (int, optional): The plot row number. Defaults to -1.\n            plot_column_number (int, optional): The plot column number. Defaults to -1.\n            record_info (dict, optional): Additional info. Defaults to {{}}.\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name or not season_name or not site_name:\n                raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n            if not trait_value:\n                raise ValueError(\"Trait value must be provided.\")\n\n            timestamp = timestamp if timestamp else datetime.now()\n            collection_date = collection_date if collection_date else timestamp.date()\n            trait_name = self.trait_name\n            if not dataset_name:\n                dataset_name = f\"{trait_name} Dataset {collection_date}\"\n            trait_record = TraitRecord.create(\n                timestamp=timestamp,\n                collection_date=collection_date,\n                trait_name=trait_name,\n                dataset_name=dataset_name,\n                trait_value=trait_value,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number if plot_number != -1 else None,\n                plot_row_number=plot_row_number if plot_row_number != -1 else None,\n                plot_column_number=plot_column_number if plot_column_number != -1 else None,\n                record_info=record_info if record_info else {},\n                insert_on_create=False\n            )\n            success, inserted_record_ids = TraitRecord.insert([trait_record])\n            if not success:\n                print(f\"Failed to insert record for trait {trait_name}.\")\n                return False, []\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting record: {e}\")\n            return False, []\n\n    def insert_records(\n        self,\n        timestamps: List[datetime] = None,\n        collection_date: date = None,\n        trait_values: List[float] = [],\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_numbers: List[int] = None,\n        plot_row_numbers: List[int] = None,\n        plot_column_numbers: List[int] = None,\n        record_info: List[dict] = []\n    ) -&gt; tuple[bool, List[str]]:\n        \"\"\"\n        Insert multiple trait records for this trait.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; success, record_ids = trait.insert_records(\n            ...     timestamps=[datetime.now(), datetime.now()],\n            ...     collection_date=date(2023, 1, 1),\n            ...     trait_values=[5.0, 6.0],\n            ...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n            ...     experiment_name=\"Experiment 1\",\n            ...     season_name=\"Spring 2023\",\n            ...     site_name=\"Field Site A\",\n            ...     plot_numbers=[1, 2],\n            ...     plot_row_numbers=[1, 2],\n            ...     plot_column_numbers=[1, 2],\n            ...     record_info=[{\"description\": \"Leaf area index measurement 1\"}, {\"description\": \"Leaf area index measurement 2\"}]\n            ... )\n            &gt;&gt;&gt; print(success, record_ids)\n            True [UUID(...), UUID(...)]\n\n        Args:\n            timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n            collection_date (date, optional): The collection date. Defaults to None.\n            trait_values (List[float], optional): List of trait values. Defaults to [].\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_numbers (List[int], optional): List of plot numbers. Defaults to None.\n            plot_row_numbers (List[int], optional): List of plot row numbers. Defaults to None.\n            plot_column_numbers (List[int], optional): List of plot column numbers. Defaults to None.\n            record_info (List[dict], optional): List of additional info. Defaults to [].\n        Returns:\n            tuple[bool, List[str]]: Success status and list of inserted record IDs.\n        \"\"\"\n        try:\n            if not experiment_name or not season_name or not site_name:\n                raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n            if len(timestamps) == 0:\n                raise ValueError(\"At least one timestamp must be provided.\")\n\n            if not dataset_name:\n                dataset_name = f\"{self.trait_name} Dataset {collection_date}\"\n\n            collection_date = collection_date if collection_date else timestamps[0].date()\n            trait_records = []\n            timestamps_length = len(timestamps)\n\n            for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Trait: \" + self.trait_name):\n                trait_record = TraitRecord.create(\n                    timestamp=timestamps[i],\n                    collection_date=collection_date,\n                    trait_name=self.trait_name,\n                    trait_value=trait_values[i] if trait_values else None,\n                    dataset_name=dataset_name if dataset_name else f\"{self.trait_name} Dataset {collection_date}\",\n                    experiment_name=experiment_name,\n                    season_name=season_name,\n                    site_name=site_name,\n                    plot_number=plot_numbers[i] if plot_numbers else None,\n                    plot_row_number=plot_row_numbers[i] if plot_row_numbers else None,\n                    plot_column_number=plot_column_numbers[i] if plot_column_numbers else None,\n                    record_info=record_info[i] if record_info else {},\n                    insert_on_create=False\n                )\n                trait_records.append(trait_record)\n\n            success, inserted_record_ids = TraitRecord.insert(trait_records)\n            return success, inserted_record_ids\n        except Exception as e:\n            print(f\"Error inserting records: {e}\")\n            return False, []\n\n    def search_records(\n        self,\n        collection_date: date = None,\n        dataset_name: str = None,\n        experiment_name: str = None,\n        season_name: str = None,\n        site_name: str = None,\n        plot_number: int = None,\n        plot_row_number: int = None,\n        plot_column_number: int = None,\n        record_info: dict = None\n    ) -&gt; List[TraitRecord]:\n        \"\"\"\n        Search for trait records associated with this trait based on search parameters.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; records = trait.search_records(\n            ...     collection_date=date(2023, 1, 1),\n            ...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n            ...     experiment_name=\"Experiment 1\",\n            ...     season_name=\"Spring 2023\",\n            ...     site_name=\"Field Site A\",\n            ...     plot_number=1,\n            ...     plot_row_number=1,\n            ...     plot_column_number=1,\n            ...     record_info={\"description\": \"Leaf area index measurement\"}\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=1, plot_row_number=1, plot_column_number=1)\n            TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=2, plot_row_number=2, plot_column_number=2)\n\n        Args:\n            collection_date (date, optional): The collection date. Defaults to None.\n            dataset_name (str, optional): The name of the dataset. Defaults to None.\n            experiment_name (str, optional): The name of the experiment. Defaults to None.\n            season_name (str, optional): The name of the season. Defaults to None.\n            site_name (str, optional): The name of the site. Defaults to None.\n            plot_number (int, optional): The plot number. Defaults to None.\n            plot_row_number (int, optional): The plot row number. Defaults to None.\n            plot_column_number (int, optional): The plot column number. Defaults to None.\n            record_info (dict, optional): Additional info. Defaults to None.\n        Returns:\n            List[TraitRecord]: List of matching trait records, or empty list if not found.\n        \"\"\"\n        try:\n            record_info = record_info if record_info else {}\n            record_info = {k: v for k, v in record_info.items() if v is not None}\n\n            records = TraitRecord.search(\n                trait_name=self.trait_name,\n                collection_date=collection_date,\n                dataset_name=dataset_name,\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_number,\n                plot_row_number=plot_row_number,\n                plot_column_number=plot_column_number,\n                record_info=record_info\n            )\n            return records\n        except Exception as e:\n            print(f\"Error searching records: {e}\")\n            return []\n\n    def filter_records(\n        self,\n        start_timestamp: Optional[datetime] = None,\n        end_timestamp: Optional[datetime] = None,\n        dataset_names: Optional[List[str]] = None,\n        experiment_names: Optional[List[str]] = None,\n        season_names: Optional[List[str]] = None,\n        site_names: Optional[List[str]] = None\n    ) -&gt; List[TraitRecord]:\n        \"\"\"\n        Filter trait records associated with this trait using a custom filter function.\n\n        Examples:\n            &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n            &gt;&gt;&gt; records = trait.filter_records(\n            ...     start_timestamp=datetime(2023, 1, 1),\n            ...     end_timestamp=datetime(2023, 12, 31),\n            ...     dataset_names=[\"Leaf Area Index Dataset 2023-01-01\"],\n            ...     experiment_names=[\"Experiment 1\"],\n            ...     season_names=[\"Spring 2023\"],\n            ...     site_names=[\"Field Site A\"]\n            ... )\n            &gt;&gt;&gt; for record in records:\n            ...     print(record)\n            TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=1, plot_row_number=1, plot_column_number=1)\n            TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=2, plot_row_number=2, plot_column_number=2)\n\n        Args:\n            start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n            end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n            dataset_names (List[str], optional): List of dataset names. Defaults to None.\n            experiment_names (List[str], optional): List of experiment names. Defaults to None.\n            season_names (List[str], optional): List of season names. Defaults to None.\n            site_names (List[str], optional): List of site names. Defaults to None.\n        Returns:\n            List[TraitRecord]: List of filtered trait records, or empty list if not found.\n        \"\"\"\n        try:\n            records = TraitRecord.filter(\n                start_timestamp=start_timestamp,\n                end_timestamp=end_timestamp,\n                trait_names=[self.trait_name],\n                dataset_names=dataset_names,\n                experiment_names=experiment_names,\n                season_names=season_names,\n                site_names=site_names\n            )\n            return records\n        except Exception as e:\n            print(f\"Error filtering trait records: {e}\")\n            return []\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a detailed string representation of the Trait object.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a detailed string representation of the Trait object.\"\"\"\n    return f\"Trait(trait_name={self.trait_name}, id={self.id})\"\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.__str__","title":"<code>__str__()</code>","text":"<p>Return a string representation of the Trait object.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def __str__(self):\n    \"\"\"Return a string representation of the Trait object.\"\"\"\n    return f\"Trait(trait_name={self.trait_name}, id={self.id})\"\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.associate_dataset","title":"<code>associate_dataset(dataset_name)</code>","text":"<p>Associate this trait with a dataset.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; dataset = trait.associate_dataset(\"Leaf Area Index Dataset 2023-01-01\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the dataset to associate.</p> required <p>Returns:     Optional[Dataset]: The associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def associate_dataset(self, dataset_name: str) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Associate this trait with a dataset.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; dataset = trait.associate_dataset(\"Leaf Area Index Dataset 2023-01-01\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n\n    Args:\n        dataset_name (str): The name of the dataset to associate.\n    Returns:\n        Optional[Dataset]: The associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.get(dataset_name)\n        if not dataset:\n            print(f\"Dataset {dataset_name} does not exist.\")\n            return None\n        existing_association = TraitDatasetModel.get_by_parameters(\n            trait_id=self.id,\n            dataset_id=dataset.id\n        )\n        if existing_association:\n            print(f\"Trait {self.trait_name} is already associated with dataset {dataset_name}.\")\n            return True\n        new_association = TraitDatasetModel.get_or_create(\n            trait_id=self.id,\n            dataset_id=dataset.id\n        )\n        if not new_association:\n            print(f\"Failed to associate trait {self.trait_name} with dataset {dataset_name}.\")\n            return False\n        self.refresh()\n        return dataset\n    except Exception as e:\n        print(f\"Error associating dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.associate_experiment","title":"<code>associate_experiment(experiment_name)</code>","text":"<p>Associate this trait with an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; experiment = trait.associate_experiment(\"Experiment 1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate.</p> required <p>Returns:     Optional[Experiment]: The associated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def associate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Associate this trait with an experiment.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; experiment = trait.associate_experiment(\"Experiment 1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to associate.\n    Returns:\n        Optional[Experiment]: The associated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentTraitModel.get_by_parameters(\n            experiment_id=experiment.id,\n            trait_id=self.id\n        )\n        if existing_association:\n            print(f\"Trait {self.trait_name} is already associated with experiment {experiment_name}.\")\n            return True\n        new_association = ExperimentTraitModel.get_or_create(\n            experiment_id=experiment.id,\n            trait_id=self.id\n        )\n        if not new_association:\n            print(f\"Failed to associate trait {self.trait_name} with experiment {experiment_name}.\")\n            return False\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error associating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.belongs_to_experiment","title":"<code>belongs_to_experiment(experiment_name)</code>","text":"<p>Check if this trait is associated with a specific experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; is_associated = trait.belongs_to_experiment(\"Experiment 1\")\n&gt;&gt;&gt; print(is_associated)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to check.</p> required <p>Returns:     bool: True if associated, False otherwise.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def belongs_to_experiment(self, experiment_name: str) -&gt; bool:\n    \"\"\"\n    Check if this trait is associated with a specific experiment.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; is_associated = trait.belongs_to_experiment(\"Experiment 1\")\n        &gt;&gt;&gt; print(is_associated)\n        True\n\n    Args:\n        experiment_name (str): The name of the experiment to check.\n    Returns:\n        bool: True if associated, False otherwise.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return False\n        association_exists = ExperimentTraitModel.exists(\n            experiment_id=experiment.id,\n            trait_id=self.id\n        )\n        return association_exists\n    except Exception as e:\n        print(f\"Error checking if trait belongs to experiment: {e}\")\n        return\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.create","title":"<code>create(trait_name, trait_units=None, trait_level=GEMINITraitLevel.Plot, trait_info={}, trait_metrics={}, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Create a new trait and associate it with an experiment if provided.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Trait.create(\"Leaf Area Index\", \"cm^2\", GEMINITraitLevel.Plot, {\"description\": \"Leaf area index\"}, {\"mean\": 5.0}, \"Experiment 1\")\nTrait(trait_name=Leaf Area Index, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <code>trait_units</code> <code>str</code> <p>The units of the trait. Defaults to None.</p> <code>None</code> <code>trait_level</code> <code>GEMINITraitLevel</code> <p>The level of the trait. Defaults to Plot.</p> <code>Plot</code> <code>trait_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>trait_metrics</code> <code>dict</code> <p>Metrics associated with the trait. Defaults to {{}}.</p> <code>{}</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment to associate. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Trait]: The created trait, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>@classmethod\ndef create(\n    cls,\n    trait_name: str,\n    trait_units: str = None,\n    trait_level: GEMINITraitLevel = GEMINITraitLevel.Plot,\n    trait_info: dict = {},\n    trait_metrics: dict = {},\n    experiment_name: str = None\n) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Create a new trait and associate it with an experiment if provided.\n\n    Examples:\n        &gt;&gt;&gt; Trait.create(\"Leaf Area Index\", \"cm^2\", GEMINITraitLevel.Plot, {\"description\": \"Leaf area index\"}, {\"mean\": 5.0}, \"Experiment 1\")\n        Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n    Args:\n        trait_name (str): The name of the trait.\n        trait_units (str, optional): The units of the trait. Defaults to None.\n        trait_level (GEMINITraitLevel, optional): The level of the trait. Defaults to Plot.\n        trait_info (dict, optional): Additional information. Defaults to {{}}.\n        trait_metrics (dict, optional): Metrics associated with the trait. Defaults to {{}}.\n        experiment_name (str, optional): The name of the experiment to associate. Defaults to None.\n    Returns:\n        Optional[Trait]: The created trait, or None if an error occurred.\n    \"\"\"\n    try:\n        trait_level_id = trait_level.value if isinstance(trait_level, GEMINITraitLevel) else trait_level\n        trait = TraitModel.get_or_create(\n            trait_name=trait_name,\n            trait_units=trait_units,\n            trait_level_id=trait_level_id,\n            trait_metrics=trait_metrics,\n            trait_info=trait_info,\n        )\n        trait = cls.model_validate(trait)\n        if experiment_name:\n            trait.associate_experiment(experiment_name)\n        return trait\n    except Exception as e:\n        print(f\"Error creating trait: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.create_new_dataset","title":"<code>create_new_dataset(dataset_name, dataset_info={}, collection_date=None, experiment_name=None)</code>","text":"<p>Create and associate a new dataset with this trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; dataset = trait.create_new_dataset(\"Leaf Area Index Dataset 2023-01-01\", {\"description\": \"Dataset for leaf area index\"}, date(2023, 1, 1), \"Experiment 1\")\n&gt;&gt;&gt; print(dataset)\nDataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>dataset_name</code> <code>str</code> <p>The name of the new dataset.</p> required <code>dataset_info</code> <code>dict</code> <p>Additional information. Defaults to {{}}.</p> <code>{}</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Dataset]: The created and associated dataset, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def create_new_dataset(\n    self,\n    dataset_name: str,\n    dataset_info: dict = {},\n    collection_date: date = None,\n    experiment_name: str = None\n) -&gt; Optional[\"Dataset\"]:\n    \"\"\"\n    Create and associate a new dataset with this trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; dataset = trait.create_new_dataset(\"Leaf Area Index Dataset 2023-01-01\", {\"description\": \"Dataset for leaf area index\"}, date(2023, 1, 1), \"Experiment 1\")\n        &gt;&gt;&gt; print(dataset)\n        Dataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n\n    Args:\n        dataset_name (str): The name of the new dataset.\n        dataset_info (dict, optional): Additional information. Defaults to {{}}.\n        collection_date (date, optional): The collection date. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Dataset]: The created and associated dataset, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        dataset = Dataset.create(\n            dataset_name=dataset_name,\n            dataset_info=dataset_info,\n            dataset_type=GEMINIDatasetType.Trait,\n            collection_date=collection_date,\n            experiment_name=experiment_name\n        )\n        if not dataset:\n            print(f\"Failed to create dataset {dataset_name}.\")\n            return None\n        dataset = self.associate_dataset(dataset_name)\n        return dataset\n    except Exception as e:\n        print(f\"Error creating new dataset: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.delete","title":"<code>delete()</code>","text":"<p>Delete the trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; success = trait.delete()\n&gt;&gt;&gt; print(success)\nTrue\n</code></pre> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the trait was deleted, False otherwise.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def delete(self) -&gt; bool:\n    \"\"\"\n    Delete the trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; success = trait.delete()\n        &gt;&gt;&gt; print(success)\n        True\n\n    Returns:\n        bool: True if the trait was deleted, False otherwise.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait = TraitModel.get(current_id)\n        if not trait:\n            print(f\"Trait with ID {current_id} does not exist.\")\n            return False\n        TraitModel.delete(trait)\n        return True\n    except Exception as e:\n        print(f\"Error deleting trait: {e}\")\n        return False\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.exists","title":"<code>exists(trait_name)</code>  <code>classmethod</code>","text":"<p>Check if a trait with the given name exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Trait.exists(\"Leaf Area Index\")\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Trait.exists(\"Nonexistent Trait\")\nFalse\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <p>Returns:     bool: True if the trait exists, False otherwise.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>@classmethod\ndef exists(\n    cls,\n    trait_name: str\n) -&gt; bool:\n    \"\"\"\n    Check if a trait with the given name exists.\n\n    Examples:\n        &gt;&gt;&gt; Trait.exists(\"Leaf Area Index\")\n        True\n\n        &gt;&gt;&gt; Trait.exists(\"Nonexistent Trait\")\n        False\n\n    Args:\n        trait_name (str): The name of the trait.\n    Returns:\n        bool: True if the trait exists, False otherwise.\n    \"\"\"\n    try:\n        exists = TraitModel.exists(trait_name=trait_name)\n        return exists\n    except Exception as e:\n        print(f\"Error checking existence of trait: {e}\")\n        return False\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.filter_records","title":"<code>filter_records(start_timestamp=None, end_timestamp=None, dataset_names=None, experiment_names=None, season_names=None, site_names=None)</code>","text":"<p>Filter trait records associated with this trait using a custom filter function.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; records = trait.filter_records(\n...     start_timestamp=datetime(2023, 1, 1),\n...     end_timestamp=datetime(2023, 12, 31),\n...     dataset_names=[\"Leaf Area Index Dataset 2023-01-01\"],\n...     experiment_names=[\"Experiment 1\"],\n...     season_names=[\"Spring 2023\"],\n...     site_names=[\"Field Site A\"]\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nTraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=1, plot_row_number=1, plot_column_number=1)\nTraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=2, plot_row_number=2, plot_column_number=2)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>start_timestamp</code> <code>datetime</code> <p>Start of timestamp range. Defaults to None.</p> <code>None</code> <code>end_timestamp</code> <code>datetime</code> <p>End of timestamp range. Defaults to None.</p> <code>None</code> <code>dataset_names</code> <code>List[str]</code> <p>List of dataset names. Defaults to None.</p> <code>None</code> <code>experiment_names</code> <code>List[str]</code> <p>List of experiment names. Defaults to None.</p> <code>None</code> <code>season_names</code> <code>List[str]</code> <p>List of season names. Defaults to None.</p> <code>None</code> <code>site_names</code> <code>List[str]</code> <p>List of site names. Defaults to None.</p> <code>None</code> <p>Returns:     List[TraitRecord]: List of filtered trait records, or empty list if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def filter_records(\n    self,\n    start_timestamp: Optional[datetime] = None,\n    end_timestamp: Optional[datetime] = None,\n    dataset_names: Optional[List[str]] = None,\n    experiment_names: Optional[List[str]] = None,\n    season_names: Optional[List[str]] = None,\n    site_names: Optional[List[str]] = None\n) -&gt; List[TraitRecord]:\n    \"\"\"\n    Filter trait records associated with this trait using a custom filter function.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; records = trait.filter_records(\n        ...     start_timestamp=datetime(2023, 1, 1),\n        ...     end_timestamp=datetime(2023, 12, 31),\n        ...     dataset_names=[\"Leaf Area Index Dataset 2023-01-01\"],\n        ...     experiment_names=[\"Experiment 1\"],\n        ...     season_names=[\"Spring 2023\"],\n        ...     site_names=[\"Field Site A\"]\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=1, plot_row_number=1, plot_column_number=1)\n        TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=2, plot_row_number=2, plot_column_number=2)\n\n    Args:\n        start_timestamp (datetime, optional): Start of timestamp range. Defaults to None.\n        end_timestamp (datetime, optional): End of timestamp range. Defaults to None.\n        dataset_names (List[str], optional): List of dataset names. Defaults to None.\n        experiment_names (List[str], optional): List of experiment names. Defaults to None.\n        season_names (List[str], optional): List of season names. Defaults to None.\n        site_names (List[str], optional): List of site names. Defaults to None.\n    Returns:\n        List[TraitRecord]: List of filtered trait records, or empty list if not found.\n    \"\"\"\n    try:\n        records = TraitRecord.filter(\n            start_timestamp=start_timestamp,\n            end_timestamp=end_timestamp,\n            trait_names=[self.trait_name],\n            dataset_names=dataset_names,\n            experiment_names=experiment_names,\n            season_names=season_names,\n            site_names=site_names\n        )\n        return records\n    except Exception as e:\n        print(f\"Error filtering trait records: {e}\")\n        return []\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.get","title":"<code>get(trait_name, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Retrieve a trait by its name and experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Trait.get(\"Leaf Area Index\", \"Experiment 1\")\nTrait(trait_name=Leaf Area Index, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the trait.</p> required <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Trait]: The trait, or None if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>@classmethod\ndef get(\n    cls,\n    trait_name: str,\n    experiment_name: str = None\n) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Retrieve a trait by its name and experiment.\n\n    Examples:\n        &gt;&gt;&gt; Trait.get(\"Leaf Area Index\", \"Experiment 1\")\n        Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n    Args:\n        trait_name (str): The name of the trait.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[Trait]: The trait, or None if not found.\n    \"\"\"\n    try:\n        trait = ExperimentTraitsViewModel.get_by_parameters(\n            trait_name=trait_name,\n            experiment_name=experiment_name   \n        )\n        if not trait:\n            print(f\"Trait with name {trait_name} not found.\")\n            return None\n        trait = cls.model_validate(trait)\n        return trait\n    except Exception as e:\n        print(f\"Error getting trait: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.get_all","title":"<code>get_all()</code>  <code>classmethod</code>","text":"<p>Retrieve all traits.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Trait.get_all()\n[Trait(trait_name=Leaf Area Index, id=UUID(...)), Trait(trait_name=Plant Height, id=UUID(...))]\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Trait]]</code> <p>Optional[List[Trait]]: List of all traits, or None if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>@classmethod\ndef get_all(cls) -&gt; Optional[List[\"Trait\"]]:\n    \"\"\"\n    Retrieve all traits.\n\n    Examples:\n        &gt;&gt;&gt; Trait.get_all()\n        [Trait(trait_name=Leaf Area Index, id=UUID(...)), Trait(trait_name=Plant Height, id=UUID(...))]\n\n    Returns:\n        Optional[List[Trait]]: List of all traits, or None if not found.\n    \"\"\"\n    try:\n        traits = TraitModel.all()\n        if not traits or len(traits) == 0:\n            print(\"No traits found.\")\n            return None\n        traits = [cls.model_validate(trait) for trait in traits]\n        return traits\n    except Exception as e:\n        print(f\"Error getting all traits: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.get_associated_datasets","title":"<code>get_associated_datasets()</code>","text":"<p>Get all datasets associated with this trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; datasets = trait.get_associated_datasets()\n&gt;&gt;&gt; for dataset in datasets:\n...     print(dataset)\nDataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\nDataset(dataset_name=Leaf Area Index Dataset 2023-02-01, dataset_type=Trait, collection_date=2023-02-01, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Dataset]]</code> <p>Optional[List[Dataset]]: A list of associated datasets, or None if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def get_associated_datasets(self) -&gt; Optional[List[\"Dataset\"]]:\n    \"\"\"\n    Get all datasets associated with this trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; datasets = trait.get_associated_datasets()\n        &gt;&gt;&gt; for dataset in datasets:\n        ...     print(dataset)\n        Dataset(dataset_name=Leaf Area Index Dataset 2023-01-01, dataset_type=Trait, collection_date=2023-01-01, id=UUID(...))\n        Dataset(dataset_name=Leaf Area Index Dataset 2023-02-01, dataset_type=Trait, collection_date=2023-02-01, id=UUID(...))\n\n    Returns:\n        Optional[List[Dataset]]: A list of associated datasets, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.dataset import Dataset\n        datasets = TraitDatasetsViewModel.search(trait_id=self.id)\n        if not datasets or len(datasets) == 0:\n            print(\"No associated datasets found.\")\n            return None\n        datasets = [Dataset.model_validate(dataset) for dataset in datasets]\n        return datasets\n    except Exception as e:\n        print(f\"Error getting associated datasets: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.get_associated_experiments","title":"<code>get_associated_experiments()</code>","text":"<p>Get all experiments associated with this trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; experiments = trait.get_associated_experiments()\n&gt;&gt;&gt; for experiment in experiments:\n...     print(experiment)\nExperiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\nExperiment(experiment_name=Experiment 2, experiment_start_date=2023-02-01, experiment_end_date=2023-11-30, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[List[Experiment]]</code> <p>Optional[List[Experiment]]: A list of associated experiments, or None if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def get_associated_experiments(self) -&gt; Optional[List[\"Experiment\"]]:\n    \"\"\"\n    Get all experiments associated with this trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; experiments = trait.get_associated_experiments()\n        &gt;&gt;&gt; for experiment in experiments:\n        ...     print(experiment)\n        Experiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n        Experiment(experiment_name=Experiment 2, experiment_start_date=2023-02-01, experiment_end_date=2023-11-30, id=UUID(...))\n\n    Returns:\n        Optional[List[Experiment]]: A list of associated experiments, or None if not found.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment_traits = ExperimentTraitsViewModel.search(trait_id=self.id)\n        if not experiment_traits or len(experiment_traits) == 0:\n            print(\"No associated experiments found.\")\n            return None\n        experiments = [Experiment.model_validate(experiment) for experiment in experiment_traits]\n        return experiments\n    except Exception as e:\n        print(f\"Error getting associated experiments: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.get_by_id","title":"<code>get_by_id(id)</code>  <code>classmethod</code>","text":"<p>Retrieve a trait by its ID.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Trait.get_by_id(UUID('...'))\nTrait(trait_name=Leaf Area Index, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>UUID | int | str</code> <p>The ID of the trait.</p> required <p>Returns:     Optional[Trait]: The trait, or None if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>@classmethod\ndef get_by_id(cls, id: UUID | int | str) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Retrieve a trait by its ID.\n\n    Examples:\n        &gt;&gt;&gt; Trait.get_by_id(UUID('...'))\n        Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n    Args:\n        id (UUID | int | str): The ID of the trait.\n    Returns:\n        Optional[Trait]: The trait, or None if not found.\n    \"\"\"\n    try:\n        trait = TraitModel.get(id)\n        if not trait:\n            print(f\"Trait with ID {id} does not exist.\")\n            return None\n        trait = cls.model_validate(trait)\n        return trait\n    except Exception as e:\n        print(f\"Error getting trait by ID: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.get_info","title":"<code>get_info()</code>","text":"<p>Get the additional information of the trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; trait_info = trait.get_info()\n&gt;&gt;&gt; print(trait_info)\n{'description': 'Leaf area index', 'source': 'Field measurements'}\n</code></pre> <p>Returns:</p> Type Description <code>Optional[dict]</code> <p>Optional[dict]: The trait's info, or None if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def get_info(self) -&gt; Optional[dict]:\n    \"\"\"\n    Get the additional information of the trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; trait_info = trait.get_info()\n        &gt;&gt;&gt; print(trait_info)\n        {'description': 'Leaf area index', 'source': 'Field measurements'}\n\n    Returns:\n        Optional[dict]: The trait's info, or None if not found.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait = TraitModel.get(current_id)\n        if not trait:\n            print(f\"Trait with ID {current_id} does not exist.\")\n            return None\n        trait_info = trait.trait_info\n        if not trait_info:\n            print(\"Trait info is empty.\")\n            return None\n        return trait_info\n    except Exception as e:\n        print(f\"Error getting trait info: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.insert_record","title":"<code>insert_record(timestamp=None, collection_date=None, dataset_name=None, trait_value=None, experiment_name=None, season_name=None, site_name=None, plot_number=-1, plot_row_number=-1, plot_column_number=-1, record_info={})</code>","text":"<p>Insert a single trait record for this trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; success, record_ids = trait.insert_record(\n...     timestamp=datetime.now(),\n...     collection_date=date(2023, 1, 1),\n...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n...     trait_value=5.0,\n...     experiment_name=\"Experiment 1\",\n...     season_name=\"Spring 2023\",\n...     site_name=\"Field Site A\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     record_info={\"description\": \"Leaf area index measurement\"}\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID(...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>datetime</code> <p>The timestamp of the record. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>trait_value</code> <code>float</code> <p>The value of the trait. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to -1.</p> <code>-1</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to -1.</p> <code>-1</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to -1.</p> <code>-1</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to {{}}.</p> <code>{}</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def insert_record(\n    self,\n    timestamp: date = None,\n    collection_date: date = None,\n    dataset_name: str = None,\n    trait_value: float = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_number: int = -1,\n    plot_row_number: int = -1,\n    plot_column_number: int = -1,\n    record_info: dict = {}\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert a single trait record for this trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; success, record_ids = trait.insert_record(\n        ...     timestamp=datetime.now(),\n        ...     collection_date=date(2023, 1, 1),\n        ...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n        ...     trait_value=5.0,\n        ...     experiment_name=\"Experiment 1\",\n        ...     season_name=\"Spring 2023\",\n        ...     site_name=\"Field Site A\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     record_info={\"description\": \"Leaf area index measurement\"}\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID(...)]\n\n    Args:\n        timestamp (datetime, optional): The timestamp of the record. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        trait_value (float, optional): The value of the trait. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to -1.\n        plot_row_number (int, optional): The plot row number. Defaults to -1.\n        plot_column_number (int, optional): The plot column number. Defaults to -1.\n        record_info (dict, optional): Additional info. Defaults to {{}}.\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name or not season_name or not site_name:\n            raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n        if not trait_value:\n            raise ValueError(\"Trait value must be provided.\")\n\n        timestamp = timestamp if timestamp else datetime.now()\n        collection_date = collection_date if collection_date else timestamp.date()\n        trait_name = self.trait_name\n        if not dataset_name:\n            dataset_name = f\"{trait_name} Dataset {collection_date}\"\n        trait_record = TraitRecord.create(\n            timestamp=timestamp,\n            collection_date=collection_date,\n            trait_name=trait_name,\n            dataset_name=dataset_name,\n            trait_value=trait_value,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number if plot_number != -1 else None,\n            plot_row_number=plot_row_number if plot_row_number != -1 else None,\n            plot_column_number=plot_column_number if plot_column_number != -1 else None,\n            record_info=record_info if record_info else {},\n            insert_on_create=False\n        )\n        success, inserted_record_ids = TraitRecord.insert([trait_record])\n        if not success:\n            print(f\"Failed to insert record for trait {trait_name}.\")\n            return False, []\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting record: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.insert_records","title":"<code>insert_records(timestamps=None, collection_date=None, trait_values=[], dataset_name=None, experiment_name=None, season_name=None, site_name=None, plot_numbers=None, plot_row_numbers=None, plot_column_numbers=None, record_info=[])</code>","text":"<p>Insert multiple trait records for this trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; success, record_ids = trait.insert_records(\n...     timestamps=[datetime.now(), datetime.now()],\n...     collection_date=date(2023, 1, 1),\n...     trait_values=[5.0, 6.0],\n...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n...     experiment_name=\"Experiment 1\",\n...     season_name=\"Spring 2023\",\n...     site_name=\"Field Site A\",\n...     plot_numbers=[1, 2],\n...     plot_row_numbers=[1, 2],\n...     plot_column_numbers=[1, 2],\n...     record_info=[{\"description\": \"Leaf area index measurement 1\"}, {\"description\": \"Leaf area index measurement 2\"}]\n... )\n&gt;&gt;&gt; print(success, record_ids)\nTrue [UUID(...), UUID(...)]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>timestamps</code> <code>List[datetime]</code> <p>List of timestamps. Defaults to None.</p> <code>None</code> <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>trait_values</code> <code>List[float]</code> <p>List of trait values. Defaults to [].</p> <code>[]</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_numbers</code> <code>List[int]</code> <p>List of plot numbers. Defaults to None.</p> <code>None</code> <code>plot_row_numbers</code> <code>List[int]</code> <p>List of plot row numbers. Defaults to None.</p> <code>None</code> <code>plot_column_numbers</code> <code>List[int]</code> <p>List of plot column numbers. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>List[dict]</code> <p>List of additional info. Defaults to [].</p> <code>[]</code> <p>Returns:     tuple[bool, List[str]]: Success status and list of inserted record IDs.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def insert_records(\n    self,\n    timestamps: List[datetime] = None,\n    collection_date: date = None,\n    trait_values: List[float] = [],\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_numbers: List[int] = None,\n    plot_row_numbers: List[int] = None,\n    plot_column_numbers: List[int] = None,\n    record_info: List[dict] = []\n) -&gt; tuple[bool, List[str]]:\n    \"\"\"\n    Insert multiple trait records for this trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; success, record_ids = trait.insert_records(\n        ...     timestamps=[datetime.now(), datetime.now()],\n        ...     collection_date=date(2023, 1, 1),\n        ...     trait_values=[5.0, 6.0],\n        ...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n        ...     experiment_name=\"Experiment 1\",\n        ...     season_name=\"Spring 2023\",\n        ...     site_name=\"Field Site A\",\n        ...     plot_numbers=[1, 2],\n        ...     plot_row_numbers=[1, 2],\n        ...     plot_column_numbers=[1, 2],\n        ...     record_info=[{\"description\": \"Leaf area index measurement 1\"}, {\"description\": \"Leaf area index measurement 2\"}]\n        ... )\n        &gt;&gt;&gt; print(success, record_ids)\n        True [UUID(...), UUID(...)]\n\n    Args:\n        timestamps (List[datetime], optional): List of timestamps. Defaults to None.\n        collection_date (date, optional): The collection date. Defaults to None.\n        trait_values (List[float], optional): List of trait values. Defaults to [].\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_numbers (List[int], optional): List of plot numbers. Defaults to None.\n        plot_row_numbers (List[int], optional): List of plot row numbers. Defaults to None.\n        plot_column_numbers (List[int], optional): List of plot column numbers. Defaults to None.\n        record_info (List[dict], optional): List of additional info. Defaults to [].\n    Returns:\n        tuple[bool, List[str]]: Success status and list of inserted record IDs.\n    \"\"\"\n    try:\n        if not experiment_name or not season_name or not site_name:\n            raise ValueError(\"Experiment name, season name, and site name must be provided.\")\n\n        if len(timestamps) == 0:\n            raise ValueError(\"At least one timestamp must be provided.\")\n\n        if not dataset_name:\n            dataset_name = f\"{self.trait_name} Dataset {collection_date}\"\n\n        collection_date = collection_date if collection_date else timestamps[0].date()\n        trait_records = []\n        timestamps_length = len(timestamps)\n\n        for i in tqdm(range(timestamps_length), desc=\"Arranging Records for Trait: \" + self.trait_name):\n            trait_record = TraitRecord.create(\n                timestamp=timestamps[i],\n                collection_date=collection_date,\n                trait_name=self.trait_name,\n                trait_value=trait_values[i] if trait_values else None,\n                dataset_name=dataset_name if dataset_name else f\"{self.trait_name} Dataset {collection_date}\",\n                experiment_name=experiment_name,\n                season_name=season_name,\n                site_name=site_name,\n                plot_number=plot_numbers[i] if plot_numbers else None,\n                plot_row_number=plot_row_numbers[i] if plot_row_numbers else None,\n                plot_column_number=plot_column_numbers[i] if plot_column_numbers else None,\n                record_info=record_info[i] if record_info else {},\n                insert_on_create=False\n            )\n            trait_records.append(trait_record)\n\n        success, inserted_record_ids = TraitRecord.insert(trait_records)\n        return success, inserted_record_ids\n    except Exception as e:\n        print(f\"Error inserting records: {e}\")\n        return False, []\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.refresh","title":"<code>refresh()</code>","text":"<p>Refresh the trait's data from the database.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; refreshed_trait = trait.refresh()\n&gt;&gt;&gt; print(refreshed_trait)\nTrait(trait_name=Leaf Area Index, id=UUID(...))\n</code></pre> <p>Returns:</p> Type Description <code>Optional[Trait]</code> <p>Optional[Trait]: The refreshed trait, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def refresh(self) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Refresh the trait's data from the database.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; refreshed_trait = trait.refresh()\n        &gt;&gt;&gt; print(refreshed_trait)\n        Trait(trait_name=Leaf Area Index, id=UUID(...))\n\n    Returns:\n        Optional[Trait]: The refreshed trait, or None if an error occurred.\n    \"\"\"\n    try:\n        db_instance = TraitModel.get(self.id)\n        if not db_instance:\n            print(f\"Trait with ID {self.id} does not exist.\")\n            return self\n        instance = self.model_validate(db_instance)\n        for key, value in instance.model_dump().items():\n            if hasattr(self, key) and key != \"id\":\n                setattr(self, key, value)\n        return self\n    except Exception as e:\n        print(f\"Error refreshing trait: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.search","title":"<code>search(trait_name=None, trait_units=None, trait_level=None, trait_info=None, trait_metrics=None, experiment_name=None)</code>  <code>classmethod</code>","text":"<p>Search for traits based on various criteria.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Trait.search(trait_name=\"Leaf Area Index\")\n[Trait(trait_name=Leaf Area Index, id=UUID(...))]\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The name of the trait. Defaults to None.</p> <code>None</code> <code>trait_units</code> <code>str</code> <p>The units of the trait. Defaults to None.</p> <code>None</code> <code>trait_level</code> <code>GEMINITraitLevel</code> <p>The level of the trait. Defaults to None.</p> <code>None</code> <code>trait_info</code> <code>dict</code> <p>Additional information. Defaults to None.</p> <code>None</code> <code>trait_metrics</code> <code>dict</code> <p>Metrics associated with the trait. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[List[Trait]]: List of matching traits, or None if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>@classmethod\ndef search(\n    cls, \n    trait_name: str = None,\n    trait_units: str = None,\n    trait_level: GEMINITraitLevel = None,\n    trait_info: dict = None,\n    trait_metrics: dict = None,\n    experiment_name: str = None\n) -&gt; Optional[List[\"Trait\"]]:\n    \"\"\"\n    Search for traits based on various criteria.\n\n    Examples:\n        &gt;&gt;&gt; Trait.search(trait_name=\"Leaf Area Index\")\n        [Trait(trait_name=Leaf Area Index, id=UUID(...))]\n\n    Args:\n        trait_name (str, optional): The name of the trait. Defaults to None.\n        trait_units (str, optional): The units of the trait. Defaults to None.\n        trait_level (GEMINITraitLevel, optional): The level of the trait. Defaults to None.\n        trait_info (dict, optional): Additional information. Defaults to None.\n        trait_metrics (dict, optional): Metrics associated with the trait. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n    Returns:\n        Optional[List[Trait]]: List of matching traits, or None if not found.\n    \"\"\"\n    try:\n        if not any([experiment_name, trait_name, trait_units, trait_level, trait_info, trait_metrics]):\n            print(\"At least one search parameter must be provided.\")\n            return None\n\n        traits = ExperimentTraitsViewModel.search(\n            experiment_name=experiment_name,\n            trait_name=trait_name,\n            trait_units=trait_units,\n            trait_level_id=trait_level.value if trait_level else None,\n            trait_info=trait_info,\n            trait_metrics=trait_metrics\n        )\n        if not traits or len(traits) == 0:\n            print(\"No traits found with the provided search parameters.\")\n            return None\n        traits = [cls.model_validate(trait) for trait in traits]\n        return traits if traits else None\n    except Exception as e:\n        print(f\"Error searching traits: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.search_records","title":"<code>search_records(collection_date=None, dataset_name=None, experiment_name=None, season_name=None, site_name=None, plot_number=None, plot_row_number=None, plot_column_number=None, record_info=None)</code>","text":"<p>Search for trait records associated with this trait based on search parameters.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; records = trait.search_records(\n...     collection_date=date(2023, 1, 1),\n...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n...     experiment_name=\"Experiment 1\",\n...     season_name=\"Spring 2023\",\n...     site_name=\"Field Site A\",\n...     plot_number=1,\n...     plot_row_number=1,\n...     plot_column_number=1,\n...     record_info={\"description\": \"Leaf area index measurement\"}\n... )\n&gt;&gt;&gt; for record in records:\n...     print(record)\nTraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=1, plot_row_number=1, plot_column_number=1)\nTraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=2, plot_row_number=2, plot_column_number=2)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>collection_date</code> <code>date</code> <p>The collection date. Defaults to None.</p> <code>None</code> <code>dataset_name</code> <code>str</code> <p>The name of the dataset. Defaults to None.</p> <code>None</code> <code>experiment_name</code> <code>str</code> <p>The name of the experiment. Defaults to None.</p> <code>None</code> <code>season_name</code> <code>str</code> <p>The name of the season. Defaults to None.</p> <code>None</code> <code>site_name</code> <code>str</code> <p>The name of the site. Defaults to None.</p> <code>None</code> <code>plot_number</code> <code>int</code> <p>The plot number. Defaults to None.</p> <code>None</code> <code>plot_row_number</code> <code>int</code> <p>The plot row number. Defaults to None.</p> <code>None</code> <code>plot_column_number</code> <code>int</code> <p>The plot column number. Defaults to None.</p> <code>None</code> <code>record_info</code> <code>dict</code> <p>Additional info. Defaults to None.</p> <code>None</code> <p>Returns:     List[TraitRecord]: List of matching trait records, or empty list if not found.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def search_records(\n    self,\n    collection_date: date = None,\n    dataset_name: str = None,\n    experiment_name: str = None,\n    season_name: str = None,\n    site_name: str = None,\n    plot_number: int = None,\n    plot_row_number: int = None,\n    plot_column_number: int = None,\n    record_info: dict = None\n) -&gt; List[TraitRecord]:\n    \"\"\"\n    Search for trait records associated with this trait based on search parameters.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; records = trait.search_records(\n        ...     collection_date=date(2023, 1, 1),\n        ...     dataset_name=\"Leaf Area Index Dataset 2023-01-01\",\n        ...     experiment_name=\"Experiment 1\",\n        ...     season_name=\"Spring 2023\",\n        ...     site_name=\"Field Site A\",\n        ...     plot_number=1,\n        ...     plot_row_number=1,\n        ...     plot_column_number=1,\n        ...     record_info={\"description\": \"Leaf area index measurement\"}\n        ... )\n        &gt;&gt;&gt; for record in records:\n        ...     print(record)\n        TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=1, plot_row_number=1, plot_column_number=1)\n        TraitRecord(id=UUID(...), trait_name=Leaf Area Index, collection_date=2023-01-01, dataset_name=Leaf Area Index Dataset 2023-01-01, experiment_name=Experiment 1, season_name=Spring 2023, site_name=Field Site A, plot_number=2, plot_row_number=2, plot_column_number=2)\n\n    Args:\n        collection_date (date, optional): The collection date. Defaults to None.\n        dataset_name (str, optional): The name of the dataset. Defaults to None.\n        experiment_name (str, optional): The name of the experiment. Defaults to None.\n        season_name (str, optional): The name of the season. Defaults to None.\n        site_name (str, optional): The name of the site. Defaults to None.\n        plot_number (int, optional): The plot number. Defaults to None.\n        plot_row_number (int, optional): The plot row number. Defaults to None.\n        plot_column_number (int, optional): The plot column number. Defaults to None.\n        record_info (dict, optional): Additional info. Defaults to None.\n    Returns:\n        List[TraitRecord]: List of matching trait records, or empty list if not found.\n    \"\"\"\n    try:\n        record_info = record_info if record_info else {}\n        record_info = {k: v for k, v in record_info.items() if v is not None}\n\n        records = TraitRecord.search(\n            trait_name=self.trait_name,\n            collection_date=collection_date,\n            dataset_name=dataset_name,\n            experiment_name=experiment_name,\n            season_name=season_name,\n            site_name=site_name,\n            plot_number=plot_number,\n            plot_row_number=plot_row_number,\n            plot_column_number=plot_column_number,\n            record_info=record_info\n        )\n        return records\n    except Exception as e:\n        print(f\"Error searching records: {e}\")\n        return []\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.set_info","title":"<code>set_info(trait_info)</code>","text":"<p>Set the additional information of the trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; updated_trait = trait.set_info({\"description\": \"Updated leaf area index\", \"source\": \"New measurements\"})\n&gt;&gt;&gt; print(updated_trait.get_info())\n{'description': 'Updated leaf area index', 'source': 'New measurements'}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_info</code> <code>dict</code> <p>The new information to set.</p> required <p>Returns:     Optional[Trait]: The updated trait, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def set_info(self, trait_info: dict) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Set the additional information of the trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; updated_trait = trait.set_info({\"description\": \"Updated leaf area index\", \"source\": \"New measurements\"})\n        &gt;&gt;&gt; print(updated_trait.get_info())\n        {'description': 'Updated leaf area index', 'source': 'New measurements'}\n\n    Args:\n        trait_info (dict): The new information to set.\n    Returns:\n        Optional[Trait]: The updated trait, or None if an error occurred.\n    \"\"\"\n    try:\n        current_id = self.id\n        trait = TraitModel.get(current_id)\n        if not trait:\n            print(f\"Trait with ID {current_id} does not exist.\")\n            return None\n        trait = TraitModel.update(\n            trait,\n            trait_info=trait_info\n        )\n        trait = self.model_validate(trait)\n        self.refresh()\n        return self\n    except Exception as e:\n        print(f\"Error setting trait info: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.unassociate_experiment","title":"<code>unassociate_experiment(experiment_name)</code>","text":"<p>Unassociate this trait from an experiment.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; experiment = trait.unassociate_experiment(\"Experiment 1\")\n&gt;&gt;&gt; print(experiment)\nExperiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>experiment_name</code> <code>str</code> <p>The name of the experiment to unassociate.</p> required <p>Returns:     Optional[Experiment]: The unassociated experiment, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def unassociate_experiment(self, experiment_name: str) -&gt; Optional[\"Experiment\"]:\n    \"\"\"\n    Unassociate this trait from an experiment.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; experiment = trait.unassociate_experiment(\"Experiment 1\")\n        &gt;&gt;&gt; print(experiment)\n        Experiment(experiment_name=Experiment 1, experiment_start_date=2023-01-01, experiment_end_date=2023-12-31, id=UUID(...))\n\n    Args:\n        experiment_name (str): The name of the experiment to unassociate.\n    Returns:\n        Optional[Experiment]: The unassociated experiment, or None if an error occurred.\n    \"\"\"\n    try:\n        from gemini.api.experiment import Experiment\n        experiment = Experiment.get(experiment_name)\n        if not experiment:\n            print(f\"Experiment {experiment_name} does not exist.\")\n            return None\n        existing_association = ExperimentTraitModel.get_by_parameters(\n            experiment_id=experiment.id,\n            trait_id=self.id\n        )\n        if not existing_association:\n            print(f\"Trait {self.trait_name} is not associated with experiment {experiment_name}.\")\n            return None\n        is_deleted = ExperimentTraitModel.delete(existing_association)\n        if not is_deleted:\n            print(f\"Failed to unassociate trait {self.trait_name} from experiment {experiment_name}.\")\n            return False\n        self.refresh()\n        return experiment\n    except Exception as e:\n        print(f\"Error unassociating experiment: {e}\")\n        return None\n</code></pre>"},{"location":"api/traits/#gemini.api.trait.Trait.update","title":"<code>update(trait_name=None, trait_units=None, trait_level=None, trait_info=None, trait_metrics=None)</code>","text":"<p>Update the details of the trait.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n&gt;&gt;&gt; updated_trait = trait.update(trait_name=\"New Leaf Area Index\", trait_units=\"m^2\")\n&gt;&gt;&gt; print(updated_trait)\nTrait(trait_name=New Leaf Area Index, id=UUID(...))\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>trait_name</code> <code>str</code> <p>The new name. Defaults to None.</p> <code>None</code> <code>trait_units</code> <code>str</code> <p>The new units. Defaults to None.</p> <code>None</code> <code>trait_level</code> <code>GEMINITraitLevel</code> <p>The new level. Defaults to None.</p> <code>None</code> <code>trait_info</code> <code>dict</code> <p>The new information. Defaults to None.</p> <code>None</code> <code>trait_metrics</code> <code>dict</code> <p>The new metrics. Defaults to None.</p> <code>None</code> <p>Returns:     Optional[Trait]: The updated trait, or None if an error occurred.</p> Source code in <code>gemini/api/trait.py</code> <pre><code>def update(\n    self,\n    trait_name: str = None, \n    trait_units: str = None,\n    trait_level: GEMINITraitLevel = None,\n    trait_info: dict = None,\n    trait_metrics: dict = None,\n) -&gt; Optional[\"Trait\"]:\n    \"\"\"\n    Update the details of the trait.\n\n    Examples:\n        &gt;&gt;&gt; trait = Trait.get(\"Leaf Area Index\")\n        &gt;&gt;&gt; updated_trait = trait.update(trait_name=\"New Leaf Area Index\", trait_units=\"m^2\")\n        &gt;&gt;&gt; print(updated_trait)\n        Trait(trait_name=New Leaf Area Index, id=UUID(...))\n\n    Args:\n        trait_name (str, optional): The new name. Defaults to None.\n        trait_units (str, optional): The new units. Defaults to None.\n        trait_level (GEMINITraitLevel, optional): The new level. Defaults to None.\n        trait_info (dict, optional): The new information. Defaults to None.\n        trait_metrics (dict, optional): The new metrics. Defaults to None.\n    Returns:\n        Optional[Trait]: The updated trait, or None if an error occurred.\n    \"\"\"\n    try:\n        if not any([trait_units, trait_level, trait_info, trait_metrics, trait_name]):\n            print(\"At least one update parameter must be provided.\")\n            return None\n\n        current_id = self.id\n        trait = TraitModel.get(current_id)\n        if not trait:\n            print(f\"Trait with ID {current_id} does not exist.\")\n            return None\n\n        trait = TraitModel.update(\n            trait,\n            trait_name=trait_name,\n            trait_units=trait_units,\n            trait_level_id=trait_level.value if trait_level else None,\n            trait_info=trait_info,\n            trait_metrics=trait_metrics\n        )\n        trait = self.model_validate(trait)\n        self.refresh()\n        return trait \n    except Exception as e:\n        print(f\"Error updating trait: {e}\")\n        return None\n</code></pre>"},{"location":"database/schema/","title":"GEMINI Database Schema","text":""},{"location":"database/schema/#core-schema-er-diagram","title":"Core Schema ER Diagram","text":"<p>Core Schema ER Diagram</p>"},{"location":"database/schema/#analysis-schema-er-diagram","title":"Analysis Schema ER Diagram","text":"<p>Analysis Schema ER Diagram</p>"},{"location":"database/schema/#metadata-schema-er-diagram","title":"Metadata Schema ER Diagram","text":"<p>Metadata Schema ER Diagram</p>"},{"location":"database/scripts/","title":"Database Initialization Scripts","text":"<p>This section provides an overview of the SQL scripts used to initialize the GEMINI database. These scripts are located in the <code>gemini/db/init_sql/scripts/</code> directory.</p>"},{"location":"database/scripts/#script-locations","title":"Script Locations","text":"<ul> <li>1_init_db.sh: <code>gemini/db/init_sql/1_init_db.sh</code></li> <li>2_init_schema.sql: <code>gemini/db/init_sql/scripts/2_init_schema.sql</code></li> <li>4_init_columnar.sql: <code>gemini/db/init_sql/scripts/4_init_columnar.sql</code></li> <li>5_init_views.sql: <code>gemini/db/init_sql/scripts/5_init_views.sql</code></li> <li>6_init_functions.sql: <code>gemini/db/init_sql/scripts/6_init_functions.sql</code></li> </ul>"},{"location":"database/scripts/#1_init_dbsh","title":"1_init_db.sh","text":"<p>This shell script is the entry point for initializing the database. It performs the following steps:</p> <ul> <li>Checks if the database already exists.</li> <li>Creates the database if it doesn't exist.</li> <li>Applies the SQL scripts to create the schema and initial data.</li> </ul>"},{"location":"database/scripts/#2_init_schemasql","title":"2_init_schema.sql","text":"<p>This SQL script defines the database schema, including:</p> <ul> <li>Creation of tables for main entities such as <code>cultivars</code>, <code>data_formats</code>, <code>data_types</code>, <code>datasets</code>, <code>experiments</code>, <code>models</code>, <code>plants</code>, <code>plots</code>, <code>procedures</code>, <code>resources</code>, <code>scripts</code>, <code>seasons</code>, <code>sensor_platforms</code>, <code>sensor_types</code>, <code>sensors</code>, <code>sites</code>, <code>trait_levels</code>, and <code>traits</code>.</li> <li>Definition of data types for each column in the tables.</li> <li>Definition of primary keys and foreign keys to establish relationships between tables.</li> <li>Creation of unique constraints and indexes to ensure data integrity and optimize query performance.</li> </ul>"},{"location":"database/scripts/#4_init_columnarsql","title":"4_init_columnar.sql","text":"<p>This SQL script creates the columnar tables for storing time series data.</p> <ul> <li>Creation of tables for <code>dataset_records</code>, <code>model_records</code>, <code>procedure_records</code>, <code>script_records</code>, <code>sensor_records</code>, and <code>trait_records</code>.</li> <li>Definition of data types for each column in the tables, optimized for columnar storage.</li> <li>Creation of unique constraints and indexes to ensure data integrity and optimize query performance.</li> </ul>"},{"location":"database/scripts/#5_init_viewssql","title":"5_init_views.sql","text":"<p>This SQL script creates the views for simplifying data access.</p> <ul> <li>Creation of views for <code>experiment_datasets_view</code>, <code>experiment_models_view</code>, <code>experiment_procedures_view</code>, <code>experiment_scripts_view</code>, <code>experiment_seasons_view</code>, <code>experiment_sensors_view</code>, <code>experiment_sites_view</code>, <code>experiment_traits_view</code>, <code>model_runs_view</code>, <code>plant_view</code>, <code>plot_cultivar_view</code>, <code>procedure_runs_view</code>, <code>script_runs_view</code>, <code>sensor_platform_sensors_view</code>, <code>sensor_datasets_view</code>, <code>trait_datasets_view</code>, <code>datatype_format_view</code>, <code>ValidPlotCombinationsView</code>, <code>ValidDatasetCombinationsView</code>, <code>ValidSensorDatasetCombinationsView</code>, <code>ValidTraitDatasetCombinationsView</code>, <code>ValidProcedureDatasetCombinationsView</code>, <code>ValidModelDatasetCombinationsView</code>, <code>ValidScriptDatasetCombinationsView</code>.</li> </ul>"},{"location":"database/scripts/#6_init_functionssql","title":"6_init_functions.sql","text":"<p>This SQL script creates the functions for filtering data.</p> <ul> <li>Creation of functions for <code>filter_dataset_records</code>, <code>filter_model_records</code>, <code>filter_procedure_records</code>, <code>filter_script_records</code>, <code>filter_sensor_records</code>, and <code>filter_trait_records</code>.</li> </ul>"},{"location":"database/models/cultivars/","title":"Cultivars","text":"<p>The <code>cultivars</code> table stores information about different plant cultivars used in experiments. Each row represents a unique cultivar, identified by its accession and population.</p>"},{"location":"database/models/cultivars/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the cultivar. <code>cultivar_accession</code> <code>String(255)</code> The accession identifier for the cultivar. This is part of a composite unique key. <code>cultivar_population</code> <code>String(255)</code> The population name of the cultivar. This is part of a composite unique key. <code>cultivar_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the cultivar. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/cultivars/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>cultivar_accession</code> and <code>cultivar_population</code> ensures that each combination of accession and population is unique within the table.</li> <li>GIN Index: A GIN index named <code>idx_cultivars_info</code> is applied to the <code>cultivar_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/cultivars/#relationships","title":"Relationships","text":"<p>The <code>cultivars</code> table is related to other tables in the database, such as <code>experiments</code> and <code>plots</code>, to associate experimental data with specific cultivars. These relationships are defined in the corresponding association tables.</p>"},{"location":"database/models/data_formats/","title":"Data Formats","text":"<p>The <code>data_formats</code> table stores information about the different data formats supported by the GEMINI framework.</p>"},{"location":"database/models/data_formats/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>Integer</code> Primary Key. A unique identifier for the data format. <code>data_format_name</code> <code>String(255)</code> The name of the data format (e.g., \"CSV\", \"JSON\"). This column has a unique constraint. <code>data_format_mime_type</code> <code>String(255)</code> The MIME type associated with the data format. Defaults to 'application/octet-stream'. <code>data_format_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the data format. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/data_formats/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>data_format_name</code> ensures that each data format has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_data_formats_info</code> is applied to the <code>data_format_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/data_formats/#relationships","title":"Relationships","text":"<p>The <code>data_formats</code> table is referenced by other tables that need to specify a data format, such as <code>data_types</code>.</p>"},{"location":"database/models/data_type_formats/","title":"Data Type Formats","text":"<p>The <code>data_type_formats</code> table links data types with their supported data formats.</p>"},{"location":"database/models/data_type_formats/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>data_type_id</code> <code>Integer</code> Primary Key, Foreign Key. Links to <code>data_types.id</code>. <code>data_format_id</code> <code>Integer</code> Primary Key, Foreign Key. Links to <code>data_formats.id</code>."},{"location":"database/models/data_types/","title":"Data Types","text":"<p>The <code>data_types</code> table stores information about the different types of data that can be collected and analyzed within the GEMINI framework.</p>"},{"location":"database/models/data_types/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>Integer</code> Primary Key. A unique identifier for the data type. <code>data_type_name</code> <code>String(255)</code> The name of the data type (e.g., \"Temperature\", \"Humidity\"). This column has a unique constraint. <code>data_type_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the data type. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/data_types/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>data_type_name</code> ensures that each data type has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_data_types_info</code> is applied to the <code>data_type_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/data_types/#relationships","title":"Relationships","text":"<p>The <code>data_types</code> table is associated with the <code>data_formats</code> table through the <code>data_type_formats</code> association table, indicating which formats are available for each data type.</p>"},{"location":"database/models/dataset_records/","title":"Dataset Records","text":"<p>The <code>dataset_records</code> table stores individual data records within datasets, designed for columnar storage.</p>"},{"location":"database/models/dataset_records/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. Unique identifier for the dataset record. <code>timestamp</code> <code>TIMESTAMP</code> Timestamp of the record. <code>collection_date</code> <code>DATE</code> The date when the data was collected. <code>dataset_id</code> <code>UUID</code> Foreign key referencing the dataset. <code>dataset_name</code> <code>String(255)</code> The name of the dataset. <code>dataset_data</code> <code>JSONB</code> Additional JSONB data for the dataset. <code>experiment_id</code> <code>UUID</code> Foreign key referencing the experiment. <code>experiment_name</code> <code>String(255)</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Foreign key referencing the season. <code>season_name</code> <code>String(255)</code> The name of the season. <code>site_id</code> <code>UUID</code> Foreign key referencing the site. <code>site_name</code> <code>String(255)</code> The name of the site. <code>record_file</code> <code>String(255)</code> The file where the record is stored. <code>record_info</code> <code>JSONB</code> Additional JSONB data for the record."},{"location":"database/models/dataset_records/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>timestamp</code>, <code>collection_date</code>, <code>dataset_id</code>, <code>dataset_name</code>, <code>experiment_id</code>, <code>experiment_name</code>, <code>season_id</code>, <code>season_name</code>, <code>site_id</code>, and <code>site_name</code> ensures uniqueness for each record.</li> <li>GIN Index: A GIN index named <code>idx_dataset_records_record_info</code> is applied to the <code>record_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/dataset_records/#methods","title":"Methods","text":"<ul> <li><code>filter_records</code>: A class method that allows filtering dataset records based on various parameters such as <code>start_timestamp</code>, <code>end_timestamp</code>, <code>dataset_names</code>, <code>experiment_names</code>, <code>season_names</code>, and <code>site_names</code>. This method leverages a PostgreSQL function <code>gemini.filter_dataset_records</code> for efficient filtering.</li> </ul>"},{"location":"database/models/dataset_types/","title":"Dataset Types","text":"<p>The <code>dataset_types</code> table categorizes the datasets stored in the GEMINI framework. This helps in organizing and querying datasets based on their nature.</p>"},{"location":"database/models/dataset_types/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>Integer</code> Primary Key. A unique identifier for the dataset type. <code>dataset_type_name</code> <code>String(255)</code> The name of the dataset type (e.g., \"Phenotypic\", \"Genotypic\"). This column has a unique constraint. <code>dataset_type_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the dataset type. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/dataset_types/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>dataset_type_name</code> ensures that each dataset type has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_dataset_types_info</code> is applied to the <code>dataset_type_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/dataset_types/#relationships","title":"Relationships","text":"<p>The <code>dataset_types</code> table is referenced by the <code>datasets</code> table to categorize each dataset.</p>"},{"location":"database/models/dataset_views/","title":"Dataset Views","text":"<p>This section describes the views related to datasets, which provide simplified or aggregated access to dataset-related information.</p>"},{"location":"database/models/dataset_views/#sensor-datasets-view-sensor_datasets_view","title":"Sensor Datasets View (<code>sensor_datasets_view</code>)","text":"<p>This view combines information from sensors and datasets to show which sensors are associated with which datasets.</p>"},{"location":"database/models/dataset_views/#view-schema","title":"View Schema","text":"Column Name Data Type Description <code>sensor_id</code> <code>UUID</code> Unique identifier for the sensor. <code>sensor_name</code> <code>String</code> The name of the sensor. <code>dataset_id</code> <code>UUID</code> Unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_info</code> <code>JSONB</code> Additional JSONB data for the dataset. <code>collection_date</code> <code>DATE</code> The date when the data was collected. <code>dataset_type_id</code> <code>Integer</code> Foreign key referencing the dataset type. <code>sensor_dataset_info</code> <code>JSONB</code> Additional JSONB data for the sensor-dataset association."},{"location":"database/models/dataset_views/#trait-datasets-view-trait_datasets_view","title":"Trait Datasets View (<code>trait_datasets_view</code>)","text":"<p>This view combines information from traits and datasets to show which traits are associated with which datasets.</p>"},{"location":"database/models/dataset_views/#view-schema_1","title":"View Schema","text":"Column Name Data Type Description <code>trait_id</code> <code>UUID</code> Unique identifier for the trait. <code>trait_name</code> <code>String</code> The name of the trait. <code>dataset_id</code> <code>UUID</code> Unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_info</code> <code>JSONB</code> Additional JSONB data for the dataset. <code>collection_date</code> <code>DATE</code> The date when the data was collected. <code>dataset_type_id</code> <code>Integer</code> Foreign key referencing the dataset type. <code>trait_dataset_info</code> <code>JSONB</code> Additional JSONB data for the trait-dataset association."},{"location":"database/models/dataset_views/#procedure-datasets-view-procedure_datasets_view","title":"Procedure Datasets View (<code>procedure_datasets_view</code>)","text":"<p>This view combines information from procedures and datasets to show which procedures are associated with which datasets.</p>"},{"location":"database/models/dataset_views/#view-schema_2","title":"View Schema","text":"Column Name Data Type Description <code>procedure_id</code> <code>UUID</code> Unique identifier for the procedure. <code>procedure_name</code> <code>String</code> The name of the procedure. <code>dataset_id</code> <code>UUID</code> Unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_info</code> <code>JSONB</code> Additional JSONB data for the dataset. <code>collection_date</code> <code>DATE</code> The date when the data was collected. <code>dataset_type_id</code> <code>Integer</code> Foreign key referencing the dataset type. <code>procedure_dataset_info</code> <code>JSONB</code> Additional JSONB data for the procedure-dataset association."},{"location":"database/models/dataset_views/#script-datasets-view-script_datasets_view","title":"Script Datasets View (<code>script_datasets_view</code>)","text":"<p>This view combines information from scripts and datasets to show which scripts are associated with which datasets.</p>"},{"location":"database/models/dataset_views/#view-schema_3","title":"View Schema","text":"Column Name Data Type Description <code>script_id</code> <code>UUID</code> Unique identifier for the script. <code>script_name</code> <code>String</code> The name of the script. <code>dataset_id</code> <code>UUID</code> Unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_info</code> <code>JSONB</code> Additional JSONB data for the dataset. <code>collection_date</code> <code>DATE</code> The date when the data was collected. <code>dataset_type_id</code> <code>Integer</code> Foreign key referencing the dataset type. <code>script_dataset_info</code> <code>JSONB</code> Additional JSONB data for the script-dataset association."},{"location":"database/models/dataset_views/#model-datasets-view-model_datasets_view","title":"Model Datasets View (<code>model_datasets_view</code>)","text":"<p>This view combines information from models and datasets to show which models are associated with which datasets.</p>"},{"location":"database/models/dataset_views/#view-schema_4","title":"View Schema","text":"Column Name Data Type Description <code>model_id</code> <code>UUID</code> Unique identifier for the model. <code>model_name</code> <code>String</code> The name of the model. <code>dataset_id</code> <code>UUID</code> Unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_info</code> <code>JSONB</code> Additional JSONB data for the dataset. <code>collection_date</code> <code>DATE</code> The date when the data was collected. <code>dataset_type_id</code> <code>Integer</code> Foreign key referencing the dataset type. <code>model_dataset_info</code> <code>JSONB</code> Additional JSONB data for the model-dataset association."},{"location":"database/models/datasets/","title":"Datasets","text":"<p>The <code>datasets</code> table is a central table in the GEMINI database, storing metadata about each dataset.</p>"},{"location":"database/models/datasets/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the dataset. <code>collection_date</code> <code>TIMESTAMP</code> The date when the dataset was collected. <code>dataset_name</code> <code>String(255)</code> The name of the dataset. This column has a unique constraint. <code>dataset_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the dataset. <code>dataset_type_id</code> <code>Integer</code> Foreign Key. References the <code>id</code> of the dataset type in the <code>dataset_types</code> table. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/datasets/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>dataset_name</code> ensures that each dataset has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_datasets_info</code> is applied to the <code>dataset_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/datasets/#relationships","title":"Relationships","text":"<ul> <li><code>dataset_type</code>: A many-to-one relationship with the <code>dataset_types</code> table, linking each dataset to its corresponding type.</li> <li>Association Tables: The <code>datasets</code> table is linked to many other tables through various association tables, such as <code>experiment_datasets</code>, <code>sensor_datasets</code>, etc., to create a comprehensive data network.</li> </ul>"},{"location":"database/models/datatype_format_view/","title":"Data Type Formats View","text":"<p>The <code>datatype_formats_view</code> table combines information from data types and data formats.</p>"},{"location":"database/models/datatype_format_view/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>data_type_id</code> <code>UUID</code> Primary Key. A unique identifier for the data type. <code>data_type_name</code> <code>String</code> The name of the data type. <code>data_type_info</code> <code>JSONB</code> Additional JSONB data for the data type. <code>data_format_id</code> <code>UUID</code> Primary Key. A unique identifier for the data format. <code>data_format_name</code> <code>String</code> The name of the data format. <code>data_format_mime_type</code> <code>String</code> The MIME type associated with the data format. <code>data_format_info</code> <code>JSONB</code> Additional JSONB data for the data format."},{"location":"database/models/experiment_cultivars/","title":"Experiment Cultivars","text":"<p>The <code>experiment_cultivars</code> table links experiments with the cultivars being studied.</p>"},{"location":"database/models/experiment_cultivars/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>cultivar_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>cultivars.id</code>."},{"location":"database/models/experiment_datasets/","title":"Experiment Datasets","text":"<p>The <code>experiment_datasets</code> table links experiments with their associated datasets.</p>"},{"location":"database/models/experiment_datasets/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>dataset_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>datasets.id</code>."},{"location":"database/models/experiment_models/","title":"Experiment Models","text":"<p>The <code>experiment_models</code> table links experiments with the models being used.</p>"},{"location":"database/models/experiment_models/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>model_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>models.id</code>."},{"location":"database/models/experiment_procedures/","title":"Experiment Procedures","text":"<p>The <code>experiment_procedures</code> table links experiments with the procedures followed.</p>"},{"location":"database/models/experiment_procedures/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>procedure_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>procedures.id</code>."},{"location":"database/models/experiment_scripts/","title":"Experiment Scripts","text":"<p>The <code>experiment_scripts</code> table links experiments with the scripts used.</p>"},{"location":"database/models/experiment_scripts/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>script_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>scripts.id</code>."},{"location":"database/models/experiment_sensor_platforms/","title":"Experiment Sensor Platforms","text":"<p>The <code>experiment_sensor_platforms</code> table links experiments with the sensor platforms used.</p>"},{"location":"database/models/experiment_sensor_platforms/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>sensor_platform_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>sensor_platforms.id</code>."},{"location":"database/models/experiment_sensors/","title":"Experiment Sensors","text":"<p>The <code>experiment_sensors</code> table links experiments with the sensors used.</p>"},{"location":"database/models/experiment_sensors/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>sensor_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>sensors.id</code>."},{"location":"database/models/experiment_sites/","title":"Experiment Sites","text":"<p>The <code>experiment_sites</code> table links experiments to the sites where they are conducted.</p>"},{"location":"database/models/experiment_sites/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>site_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>sites.id</code>."},{"location":"database/models/experiment_traits/","title":"Experiment Traits","text":"<p>The <code>experiment_traits</code> table links experiments with the traits being measured.</p>"},{"location":"database/models/experiment_traits/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>experiments.id</code>. <code>trait_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>traits.id</code>."},{"location":"database/models/experiment_views/","title":"Experiment Views","text":"<p>This section describes the views related to experiments, which provide simplified or aggregated access to experiment-related information.</p>"},{"location":"database/models/experiment_views/#experiment-seasons-view-experiment_seasons_view","title":"Experiment Seasons View (<code>experiment_seasons_view</code>)","text":"<p>This view combines information from experiments and seasons.</p>"},{"location":"database/models/experiment_views/#view-schema","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>season_id</code> <code>UUID</code> Unique identifier for the season. <code>season_name</code> <code>String</code> The name of the season. <code>season_start_date</code> <code>String</code> The start date of the season. <code>season_end_date</code> <code>String</code> The end date of the season. <code>season_info</code> <code>JSONB</code> Additional JSONB data for the season."},{"location":"database/models/experiment_views/#experiment-sites-view-experiment_sites_view","title":"Experiment Sites View (<code>experiment_sites_view</code>)","text":"<p>This view combines information from experiments and sites.</p>"},{"location":"database/models/experiment_views/#view-schema_1","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>site_id</code> <code>UUID</code> Unique identifier for the site. <code>site_name</code> <code>String</code> The name of the site. <code>site_city</code> <code>String</code> The city where the site is located. <code>site_state</code> <code>String</code> The state where the site is located. <code>site_country</code> <code>String</code> The country where the site is located. <code>site_info</code> <code>JSONB</code> Additional JSONB data for the site."},{"location":"database/models/experiment_views/#experiment-traits-view-experiment_traits_view","title":"Experiment Traits View (<code>experiment_traits_view</code>)","text":"<p>This view combines information from experiments and traits.</p>"},{"location":"database/models/experiment_views/#view-schema_2","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>trait_id</code> <code>UUID</code> Unique identifier for the trait. <code>trait_name</code> <code>String</code> The name of the trait. <code>trait_units</code> <code>String</code> The units in which the trait is measured. <code>trait_metrics</code> <code>String</code> The metrics of the trait. <code>trait_level_id</code> <code>Integer</code> Foreign key referencing the trait level. <code>trait_info</code> <code>JSONB</code> Additional JSONB data for the trait."},{"location":"database/models/experiment_views/#experiment-sensors-view-experiment_sensors_view","title":"Experiment Sensors View (<code>experiment_sensors_view</code>)","text":"<p>This view combines information from experiments and sensors.</p>"},{"location":"database/models/experiment_views/#view-schema_3","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>sensor_id</code> <code>UUID</code> Unique identifier for the sensor. <code>sensor_name</code> <code>String</code> The name of the sensor. <code>sensor_type_id</code> <code>Integer</code> Foreign key referencing the sensor type. <code>sensor_data_type_id</code> <code>Integer</code> Foreign key referencing the data type of the sensor's data. <code>sensor_data_format_id</code> <code>Integer</code> Foreign key referencing the data format of the sensor's data. <code>sensor_info</code> <code>JSONB</code> Additional JSONB data for the sensor."},{"location":"database/models/experiment_views/#experiment-sensor-platforms-view-experiment_sensor_platforms_view","title":"Experiment Sensor Platforms View (<code>experiment_sensor_platforms_view</code>)","text":"<p>This view combines information from experiments and sensor platforms.</p>"},{"location":"database/models/experiment_views/#view-schema_4","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>sensor_platform_id</code> <code>UUID</code> Unique identifier for the sensor platform. <code>sensor_platform_name</code> <code>String</code> The name of the sensor platform. <code>sensor_platform_info</code> <code>JSONB</code> Additional JSONB data for the sensor platform."},{"location":"database/models/experiment_views/#experiment-cultivars-view-experiment_cultivars_view","title":"Experiment Cultivars View (<code>experiment_cultivars_view</code>)","text":"<p>This view combines information from experiments and cultivars.</p>"},{"location":"database/models/experiment_views/#view-schema_5","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>cultivar_id</code> <code>UUID</code> Unique identifier for the cultivar. <code>cultivar_accession</code> <code>String</code> The accession identifier for the cultivar. <code>cultivar_population</code> <code>String</code> The population name of the cultivar. <code>cultivar_info</code> <code>JSONB</code> Additional JSONB data for the cultivar."},{"location":"database/models/experiment_views/#experiment-procedures-view-experiment_procedures_view","title":"Experiment Procedures View (<code>experiment_procedures_view</code>)","text":"<p>This view combines information from experiments and procedures.</p>"},{"location":"database/models/experiment_views/#view-schema_6","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>procedure_id</code> <code>UUID</code> Unique identifier for the procedure. <code>procedure_name</code> <code>String</code> The name of the procedure. <code>procedure_info</code> <code>JSONB</code> Additional JSONB data for the procedure."},{"location":"database/models/experiment_views/#experiment-scripts-view-experiment_scripts_view","title":"Experiment Scripts View (<code>experiment_scripts_view</code>)","text":"<p>This view combines information from experiments and scripts.</p>"},{"location":"database/models/experiment_views/#view-schema_7","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>script_id</code> <code>UUID</code> Unique identifier for the script. <code>script_name</code> <code>String</code> The name of the script. <code>script_url</code> <code>String</code> The URL where the script can be accessed. <code>script_extension</code> <code>String</code> The file extension of the script. <code>script_info</code> <code>JSONB</code> Additional JSONB data for the script."},{"location":"database/models/experiment_views/#experiment-models-view-experiment_models_view","title":"Experiment Models View (<code>experiment_models_view</code>)","text":"<p>This view combines information from experiments and models.</p>"},{"location":"database/models/experiment_views/#view-schema_8","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>model_id</code> <code>UUID</code> Unique identifier for the model. <code>model_name</code> <code>String</code> The name of the model. <code>model_url</code> <code>String</code> The URL where the model can be accessed. <code>model_info</code> <code>JSONB</code> Additional JSONB data for the model."},{"location":"database/models/experiment_views/#experiment-datasets-view-experiment_datasets_view","title":"Experiment Datasets View (<code>experiment_datasets_view</code>)","text":"<p>This view combines information from experiments and datasets.</p>"},{"location":"database/models/experiment_views/#view-schema_9","title":"View Schema","text":"Column Name Data Type Description <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>experiment_info</code> <code>JSONB</code> Additional JSONB data for the experiment. <code>experiment_start_date</code> <code>String</code> The start date of the experiment. <code>experiment_end_date</code> <code>String</code> The end date of the experiment. <code>dataset_id</code> <code>UUID</code> Unique identifier for the dataset. <code>collection_date</code> <code>String</code> The date when the data was collected. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_type_id</code> <code>Integer</code> Foreign key referencing the dataset type. <code>dataset_info</code> <code>JSONB</code> Additional JSONB data for the dataset."},{"location":"database/models/experiments/","title":"Experiments","text":"<p>The <code>experiments</code> table stores information about the experiments conducted.</p>"},{"location":"database/models/experiments/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the experiment. <code>experiment_name</code> <code>String(255)</code> The name of the experiment. This column has a unique constraint. <code>experiment_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the experiment. <code>experiment_start_date</code> <code>DATE</code> The start date of the experiment. <code>experiment_end_date</code> <code>DATE</code> The end date of the experiment. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/experiments/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>experiment_name</code> ensures that each experiment has a unique name.</li> <li>Check Constraint: Ensures that <code>experiment_start_date</code> is less than or equal to <code>experiment_end_date</code>.</li> <li>GIN Index: A GIN index named <code>idx_experiments_info</code> is applied to the <code>experiment_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/experiments/#relationships","title":"Relationships","text":"<p>The <code>experiments</code> table is a central entity and is linked to many other tables through association tables, such as <code>experiment_sites</code>, <code>experiment_sensors</code>, <code>experiment_cultivars</code>, etc., to define the scope and components of each experiment.</p>"},{"location":"database/models/model_datasets/","title":"Model Datasets","text":"<p>The <code>model_datasets</code> table links models to the datasets they use.</p>"},{"location":"database/models/model_datasets/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>model_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>models.id</code>. <code>dataset_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>datasets.id</code>."},{"location":"database/models/model_records/","title":"Model Records","text":"<p>The <code>model_records</code> table stores individual data records generated by model runs, designed for columnar storage.</p>"},{"location":"database/models/model_records/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. Unique identifier for the model record. <code>timestamp</code> <code>TIMESTAMP</code> Timestamp of the record. <code>model_id</code> <code>UUID</code> Foreign key referencing the model. <code>model_name</code> <code>String(255)</code> The name of the model. <code>model_run_id</code> <code>UUID</code> Foreign key referencing the model run. <code>model_data</code> <code>JSONB</code> Additional JSONB data for the model. <code>experiment_id</code> <code>UUID</code> Foreign key referencing the experiment. <code>experiment_name</code> <code>String(255)</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Foreign key referencing the season. <code>season_name</code> <code>String(255)</code> The name of the season. <code>site_id</code> <code>UUID</code> Foreign key referencing the site. <code>site_name</code> <code>String(255)</code> The name of the site. <code>record_file</code> <code>String(255)</code> The file where the record is stored. <code>record_info</code> <code>JSONB</code> Additional JSONB data for the record."},{"location":"database/models/model_records/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>timestamp</code>, <code>model_id</code>, <code>model_name</code>, <code>model_run_id</code>, <code>experiment_id</code>, <code>experiment_name</code>, <code>season_id</code>, <code>season_name</code>, <code>site_id</code>, and <code>site_name</code> ensures uniqueness for each record.</li> <li>GIN Index: A GIN index named <code>idx_model_records_record_info</code> is applied to the <code>record_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/model_records/#methods","title":"Methods","text":"<ul> <li><code>filter_records</code>: A class method that allows filtering model records based on various parameters such as <code>start_timestamp</code>, <code>end_timestamp</code>, <code>model_names</code>, <code>model_run_ids</code>, <code>experiment_names</code>, <code>season_names</code>, and <code>site_names</code>. This method leverages a PostgreSQL function <code>gemini.filter_model_records</code> for efficient filtering.</li> </ul>"},{"location":"database/models/model_runs/","title":"Model Runs","text":"<p>The <code>model_runs</code> table stores information about each execution of a model.</p>"},{"location":"database/models/model_runs/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the model run. <code>model_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the model in the <code>models</code> table. <code>model_run_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the model run. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/model_runs/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>model_id</code> and <code>model_run_info</code> ensures that each combination is unique.</li> <li>GIN Index: A GIN index named <code>idx_model_runs_info</code> is applied to the <code>model_run_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/model_runs/#relationships","title":"Relationships","text":"<ul> <li><code>model</code>: A many-to-one relationship with the <code>models</code> table, linking each model run to the model that was executed.</li> </ul>"},{"location":"database/models/models/","title":"Models","text":"<p>The <code>models</code> table stores information about the predictive or analytical models used in the GEMINI framework.</p>"},{"location":"database/models/models/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the model. <code>model_name</code> <code>String(255)</code> The name of the model. <code>model_url</code> <code>String(255)</code> The URL where the model can be accessed. <code>model_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the model. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/models/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>model_name</code> and <code>model_url</code> ensures that each combination is unique.</li> <li>GIN Index: A GIN index named <code>idx_models_info</code> is applied to the <code>model_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/models/#relationships","title":"Relationships","text":"<ul> <li><code>model_runs</code>: A one-to-many relationship with the <code>model_runs</code> table, where one model can have multiple runs.</li> <li>Association Tables: The <code>models</code> table is linked to other entities like <code>experiments</code> and <code>datasets</code> through association tables.</li> </ul>"},{"location":"database/models/overview/","title":"Overview","text":"<p>This section provides an overview of the database models used within the GEMINI framework. These models define the structure and relationships of the data stored in the database, enabling the framework to manage and interact with the application's data effectively.</p>"},{"location":"database/models/overview/#main-entity-tables","title":"Main Entity Tables","text":"<ul> <li>Cultivars</li> <li>Data Formats</li> <li>Data Types</li> <li>Dataset Types</li> <li>Datasets</li> <li>Experiments</li> <li>Model Runs</li> <li>Models</li> <li>Plants</li> <li>Plots</li> <li>Procedure Runs</li> <li>Procedures</li> <li>Resources</li> <li>Script Runs</li> <li>Scripts</li> <li>Seasons</li> <li>Sensor Platforms</li> <li>Sensor Types</li> <li>Sensors</li> <li>Sites</li> <li>Trait Levels</li> <li>Traits</li> </ul>"},{"location":"database/models/overview/#association-tables","title":"Association Tables","text":"<ul> <li>Data Type Formats</li> <li>Experiment Sites</li> <li>Experiment Sensors</li> <li>Experiment Sensor Platforms</li> <li>Experiment Traits</li> <li>Experiment Cultivars</li> <li>Experiment Models</li> <li>Experiment Procedures</li> <li>Experiment Scripts</li> <li>Experiment Datasets</li> <li>Plot Cultivars</li> <li>Trait Sensors</li> <li>Sensor Platform Sensors</li> <li>Sensor Datasets</li> <li>Trait Datasets</li> <li>Model Datasets</li> <li>Script Datasets</li> <li>Procedure Datasets</li> </ul>"},{"location":"database/models/overview/#columnar-tables","title":"Columnar Tables","text":"<ul> <li>Dataset Records</li> <li>Model Records</li> <li>Procedure Records</li> <li>Script Records</li> <li>Sensor Records</li> <li>Trait Records</li> </ul>"},{"location":"database/models/overview/#views","title":"Views","text":"<ul> <li>Data Type Formats View</li> <li>Experiment Views</li> <li>Plant View</li> <li>Plot Cultivar View</li> <li>Plot Plant View</li> <li>Run Views</li> <li>Validation Views</li> <li> <p>Dataset Views</p> </li> <li> <p>Data Type Formats View</p> </li> <li>Experiment Views</li> <li>Plant View</li> <li>Plot Cultivar View</li> <li>Plot Plant View</li> <li>Run Views</li> <li>Validation Views</li> <li>Dataset Views</li> </ul>"},{"location":"database/models/plant_view/","title":"Plant View","text":"<p>The <code>plant_view</code> table combines information from plants, plots, cultivars, experiments, seasons and sites.</p>"},{"location":"database/models/plant_view/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>plant_id</code> <code>UUID</code> Primary Key. A unique identifier for the plant. <code>plot_id</code> <code>UUID</code> Unique identifier for the plot where the plant is located. <code>plant_number</code> <code>Integer</code> The number of the plant within the plot. <code>plant_info</code> <code>JSONB</code> Additional JSONB data for the plant. <code>cultivar_id</code> <code>UUID</code> Unique identifier for the cultivar of the plant. <code>cultivar_accession</code> <code>String</code> The accession identifier for the cultivar. <code>cultivar_population</code> <code>String</code> The population name of the cultivar. <code>plot_id</code> <code>UUID</code> Unique identifier for the plot. <code>plot_number</code> <code>Integer</code> The number of the plot. <code>plot_row_number</code> <code>Integer</code> The row number of the plot in a grid layout. <code>plot_column_number</code> <code>Integer</code> The column number of the plot in a grid layout. <code>plot_info</code> <code>JSONB</code> Additional JSONB data describing the plot. <code>plot_geometry_info</code> <code>JSONB</code> Additional JSONB data describing the plot's geometry. <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment to which the plot belongs. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Unique identifier for the season during which the plot was used. <code>season_name</code> <code>String</code> The name of the season. <code>site_id</code> <code>UUID</code> Unique identifier for the site where the plot is located. <code>site_name</code> <code>String</code> The name of the site."},{"location":"database/models/plants/","title":"Plants","text":"<p>The <code>plants</code> table stores information about individual plants within a plot.</p>"},{"location":"database/models/plants/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the plant. <code>plot_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the plot where the plant is located. <code>plant_number</code> <code>Integer</code> The number of the plant within the plot. <code>plant_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the plant. <code>cultivar_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the cultivar for this plant. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/plants/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>plot_id</code> and <code>plant_number</code> ensures that each plant number is unique within a plot.</li> <li>GIN Index: A GIN index named <code>idx_plants_info</code> is applied to the <code>plant_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/plants/#relationships","title":"Relationships","text":"<ul> <li><code>plot</code>: A many-to-one relationship with the <code>plots</code> table.</li> <li><code>cultivar</code>: A many-to-one relationship with the <code>cultivars</code> table.</li> </ul>"},{"location":"database/models/plot_cultivar_view/","title":"Plot Cultivar View","text":"<p>The <code>plot_cultivar_view</code> table combines information from plots and cultivars.</p>"},{"location":"database/models/plot_cultivar_view/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>plot_id</code> <code>UUID</code> Primary Key. A unique identifier for the plot. <code>plot_number</code> <code>Integer</code> The number of the plot. <code>plot_row_number</code> <code>Integer</code> The row number of the plot in a grid layout. <code>plot_column_number</code> <code>Integer</code> The column number of the plot in a grid layout. <code>plot_info</code> <code>JSONB</code> Additional JSONB data describing the plot. <code>plot_geometry_info</code> <code>JSONB</code> Additional JSONB data describing the plot's geometry. <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment to which the plot belongs. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Unique identifier for the season during which the plot was used. <code>season_name</code> <code>String</code> The name of the season. <code>site_id</code> <code>UUID</code> Unique identifier for the site where the plot is located. <code>site_name</code> <code>String</code> The name of the site. <code>cultivar_id</code> <code>UUID</code> Unique identifier for the cultivar. <code>cultivar_accession</code> <code>String</code> The accession identifier for the cultivar. <code>cultivar_population</code> <code>String</code> The population name of the cultivar. <code>cultivar_info</code> <code>JSONB</code> Additional JSONB data for the cultivar."},{"location":"database/models/plot_cultivars/","title":"Plot Cultivars","text":"<p>The <code>plot_cultivars</code> table links plots to the cultivars planted in them.</p>"},{"location":"database/models/plot_cultivars/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>plot_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>plots.id</code>. <code>cultivar_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>cultivars.id</code>."},{"location":"database/models/plot_plant_view/","title":"Plot Plant View","text":"<p>The <code>plot_plant_view</code> table combines information from plots and plants.</p>"},{"location":"database/models/plot_plant_view/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>plant_id</code> <code>UUID</code> Primary Key. A unique identifier for the plant. <code>plot_id</code> <code>UUID</code> Unique identifier for the plot where the plant is located. <code>plant_number</code> <code>Integer</code> The number of the plant within the plot. <code>plant_info</code> <code>JSONB</code> Additional JSONB data for the plant. <code>cultivar_id</code> <code>UUID</code> Unique identifier for the cultivar of the plant. <code>cultivar_accession</code> <code>String</code> The accession identifier for the cultivar. <code>cultivar_population</code> <code>String</code> The population name of the cultivar. <code>plot_id</code> <code>UUID</code> Unique identifier for the plot. <code>plot_number</code> <code>Integer</code> The number of the plot. <code>plot_row_number</code> <code>Integer</code> The row number of the plot in a grid layout. <code>plot_column_number</code> <code>Integer</code> The column number of the plot in a grid layout. <code>plot_info</code> <code>JSONB</code> Additional JSONB data describing the plot. <code>plot_geometry_info</code> <code>JSONB</code> Additional JSONB data describing the plot's geometry. <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment to which the plot belongs. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Unique identifier for the season during which the plot was used. <code>site_id</code> <code>UUID</code> Unique identifier for the site where the plot is located. <code>site_name</code> <code>String</code> The name of the site."},{"location":"database/models/plot_view/","title":"Plot View","text":"<p>The <code>plot_view</code> table combines information from plots, experiments, seasons and sites.</p>"},{"location":"database/models/plot_view/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>plot_id</code> <code>UUID</code> Primary Key. A unique identifier for the plot. <code>plot_number</code> <code>Integer</code> The number of the plot. <code>plot_row_number</code> <code>Integer</code> The row number of the plot in a grid layout. <code>plot_column_number</code> <code>Integer</code> The column number of the plot in a grid layout. <code>plot_info</code> <code>JSONB</code> Additional JSONB data describing the plot. <code>plot_geometry_info</code> <code>JSONB</code> Additional JSONB data describing the plot's geometry. <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment to which the plot belongs. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Unique identifier for the season during which the plot was used. <code>season_name</code> <code>String</code> The name of the season. <code>site_id</code> <code>UUID</code> Unique identifier for the site where the plot is located. <code>site_name</code> <code>String</code> The name of the site."},{"location":"database/models/plots/","title":"Plots","text":"<p>The <code>plots</code> table defines the spatial layout of an experiment, breaking it down into individual plots.</p>"},{"location":"database/models/plots/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the plot. <code>experiment_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the experiment to which the plot belongs. <code>season_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the season during which the plot was used. <code>site_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the site where the plot is located. <code>plot_number</code> <code>Integer</code> The number of the plot. <code>plot_row_number</code> <code>Integer</code> The row number of the plot in a grid layout. <code>plot_column_number</code> <code>Integer</code> The column number of the plot in a grid layout. <code>plot_geometry_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the plot's geometry. <code>plot_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the plot. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/plots/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>experiment_id</code>, <code>season_id</code>, <code>site_id</code>, <code>plot_number</code>, <code>plot_row_number</code>, and <code>plot_column_number</code> ensures that each plot is uniquely defined within an experiment for a given season and site.</li> <li>GIN Index: A GIN index named <code>idx_plots_info</code> is applied to the <code>plot_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/plots/#relationships","title":"Relationships","text":"<ul> <li><code>experiment</code>: A many-to-one relationship with the <code>experiments</code> table.</li> <li><code>season</code>: A many-to-one relationship with the <code>seasons</code> table.</li> <li><code>site</code>: A many-to-one relationship with the <code>sites</code> table.</li> <li><code>plants</code>: A one-to-many relationship with the <code>plants</code> table, where one plot can contain multiple plants.</li> </ul>"},{"location":"database/models/procedure_datasets/","title":"Procedure Datasets","text":"<p>The <code>procedure_datasets</code> table links procedures to the datasets they are associated with.</p>"},{"location":"database/models/procedure_datasets/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>procedure_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>procedures.id</code>. <code>dataset_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>datasets.id</code>."},{"location":"database/models/procedure_records/","title":"Procedure Records","text":"<p>The <code>procedure_records</code> table stores individual data records generated by procedure runs, designed for columnar storage.</p>"},{"location":"database/models/procedure_records/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. Unique identifier for the procedure record. <code>timestamp</code> <code>TIMESTAMP</code> Timestamp of the record. <code>procedure_id</code> <code>UUID</code> Foreign key referencing the procedure. <code>procedure_name</code> <code>String(255)</code> The name of the procedure. <code>procedure_run_id</code> <code>UUID</code> Foreign key referencing the procedure run. <code>procedure_data</code> <code>JSONB</code> Additional JSONB data for the procedure. <code>experiment_id</code> <code>UUID</code> Foreign key referencing the experiment. <code>experiment_name</code> <code>String(255)</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Foreign key referencing the season. <code>season_name</code> <code>String(255)</code> The name of the season. <code>site_id</code> <code>UUID</code> Foreign key referencing the site. <code>site_name</code> <code>String(255)</code> The name of the site. <code>record_file</code> <code>String(255)</code> The file where the record is stored. <code>record_info</code> <code>JSONB</code> Additional JSONB data for the record."},{"location":"database/models/procedure_records/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>timestamp</code>, <code>procedure_id</code>, <code>procedure_name</code>, <code>procedure_run_id</code>, <code>experiment_id</code>, <code>experiment_name</code>, <code>season_id</code>, <code>season_name</code>, <code>site_id</code>, and <code>site_name</code> ensures uniqueness for each record.</li> <li>GIN Index: A GIN index named <code>idx_procedure_records_record_info</code> is applied to the <code>record_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/procedure_records/#methods","title":"Methods","text":"<ul> <li><code>filter_records</code>: A class method that allows filtering procedure records based on various parameters such as <code>start_timestamp</code>, <code>end_timestamp</code>, <code>procedure_names</code>, <code>procedure_run_ids</code>, <code>experiment_names</code>, <code>season_names</code>, and <code>site_names</code>. This method leverages a PostgreSQL function <code>gemini.filter_procedure_records</code> for efficient filtering.</li> </ul>"},{"location":"database/models/procedure_runs/","title":"Procedure Runs","text":"<p>The <code>procedure_runs</code> table tracks every execution of a procedure.</p>"},{"location":"database/models/procedure_runs/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the procedure run. <code>procedure_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the procedure in the <code>procedures</code> table. <code>procedure_run_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the procedure run. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/procedure_runs/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>procedure_id</code> and <code>procedure_run_info</code> ensures that each combination is unique.</li> <li>GIN Index: A GIN index named <code>idx_procedure_runs_info</code> is applied to the <code>procedure_run_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/procedure_runs/#relationships","title":"Relationships","text":"<ul> <li><code>procedure</code>: A many-to-one relationship with the <code>procedures</code> table, linking each procedure run to the procedure that was executed.</li> </ul>"},{"location":"database/models/procedures/","title":"Procedures","text":"<p>The <code>procedures</code> table stores information about the standard operating procedures (SOPs) or protocols followed in the experiments.</p>"},{"location":"database/models/procedures/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the procedure. <code>procedure_name</code> <code>String(255)</code> The name of the procedure. This column has a unique constraint. <code>procedure_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the procedure. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/procedures/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>procedure_name</code> ensures that each procedure has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_procedures_info</code> is applied to the <code>procedure_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/procedures/#relationships","title":"Relationships","text":"<ul> <li><code>procedure_runs</code>: A one-to-many relationship with the <code>procedure_runs</code> table, where one procedure can have multiple runs.</li> <li>Association Tables: The <code>procedures</code> table is linked to other entities like <code>experiments</code> and <code>datasets</code> through association tables.</li> </ul>"},{"location":"database/models/resources/","title":"Resources","text":"<p>The <code>resources</code> table stores information about data files and other resources associated with experiments.</p>"},{"location":"database/models/resources/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the resource. <code>resource_uri</code> <code>String(255)</code> The URI of the resource. <code>resource_file_name</code> <code>String(255)</code> The file name of the resource. <code>is_external</code> <code>Boolean</code> A flag indicating whether the resource is external. <code>resource_experiment_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the experiment to which the resource belongs. <code>resource_data_format_id</code> <code>Integer</code> Foreign Key. References the <code>id</code> of the data format in the <code>data_formats</code> table. <code>resource_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the resource. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/resources/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>resource_uri</code> and <code>resource_file_name</code> ensures that each resource has a unique combination of URI and file name.</li> <li>GIN Index: A GIN index named <code>idx_resources_info</code> is applied to the <code>resource_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/resources/#relationships","title":"Relationships","text":"<ul> <li><code>experiment</code>: A many-to-one relationship with the <code>experiments</code> table.</li> <li><code>data_format</code>: A many-to-one relationship with the <code>data_formats</code> table.</li> </ul>"},{"location":"database/models/run_views/","title":"Run Views","text":"<p>This section describes the views related to runs, which provide simplified or aggregated access to run-related information.</p>"},{"location":"database/models/run_views/#procedure-runs-view-procedure_runs_view","title":"Procedure Runs View (<code>procedure_runs_view</code>)","text":"<p>This view combines information from procedures and procedure runs.</p>"},{"location":"database/models/run_views/#view-schema","title":"View Schema","text":"Column Name Data Type Description <code>procedure_run_id</code> <code>UUID</code> Primary Key. A unique identifier for the procedure run. <code>procedure_id</code> <code>UUID</code> Primary Key. A unique identifier for the procedure. <code>procedure_name</code> <code>String</code> The name of the procedure. <code>procedure_info</code> <code>JSONB</code> Additional JSONB data for the procedure. <code>procedure_run_info</code> <code>JSONB</code> Additional JSONB data for the procedure run."},{"location":"database/models/run_views/#script-runs-view-script_runs_view","title":"Script Runs View (<code>script_runs_view</code>)","text":"<p>This view combines information from scripts and script runs.</p>"},{"location":"database/models/run_views/#view-schema_1","title":"View Schema","text":"Column Name Data Type Description <code>script_run_id</code> <code>UUID</code> Primary Key. A unique identifier for the script run. <code>script_id</code> <code>UUID</code> Primary Key. A unique identifier for the script. <code>script_name</code> <code>String</code> The name of the script. <code>script_url</code> <code>String</code> The URL where the script can be accessed. <code>script_extension</code> <code>String</code> The file extension of the script. <code>script_info</code> <code>JSONB</code> Additional JSONB data for the script. <code>script_run_info</code> <code>JSONB</code> Additional JSONB data for the script run."},{"location":"database/models/run_views/#model-runs-view-model_runs_view","title":"Model Runs View (<code>model_runs_view</code>)","text":"<p>This view combines information from models and model runs.</p>"},{"location":"database/models/run_views/#view-schema_2","title":"View Schema","text":"Column Name Data Type Description <code>model_run_id</code> <code>UUID</code> Primary Key. A unique identifier for the model run. <code>model_id</code> <code>UUID</code> Primary Key. A unique identifier for the model. <code>model_name</code> <code>String</code> The name of the model. <code>model_url</code> <code>String</code> The URL where the model can be accessed. <code>model_info</code> <code>JSONB</code> Additional JSONB data for the model. <code>model_run_info</code> <code>JSONB</code> Additional JSONB data for the model run."},{"location":"database/models/script_datasets/","title":"Script Datasets","text":"<p>The <code>script_datasets</code> table links scripts to the datasets they process.</p>"},{"location":"database/models/script_datasets/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>script_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>scripts.id</code>. <code>dataset_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>datasets.id</code>."},{"location":"database/models/script_records/","title":"Script Records","text":"<p>The <code>script_records</code> table stores individual data records generated by script runs, designed for columnar storage.</p>"},{"location":"database/models/script_records/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. Unique identifier for the script record. <code>timestamp</code> <code>TIMESTAMP</code> Timestamp of the record. <code>script_id</code> <code>UUID</code> Foreign key referencing the script. <code>script_name</code> <code>String(255)</code> The name of the script. <code>script_run_id</code> <code>UUID</code> Foreign key referencing the script run. <code>script_data</code> <code>JSONB</code> Additional JSONB data for the script. <code>experiment_id</code> <code>UUID</code> Foreign key referencing the experiment. <code>experiment_name</code> <code>String(255)</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Foreign key referencing the season. <code>season_name</code> <code>String(255)</code> The name of the season. <code>site_id</code> <code>UUID</code> Foreign key referencing the site. <code>site_name</code> <code>String(255)</code> The name of the site. <code>record_file</code> <code>String(255)</code> The file where the record is stored. <code>record_info</code> <code>JSONB</code> Additional JSONB data for the record."},{"location":"database/models/script_records/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>timestamp</code>, <code>script_id</code>, <code>script_name</code>, <code>script_run_id</code>, <code>experiment_id</code>, <code>experiment_name</code>, <code>season_id</code>, <code>season_name</code>, <code>site_id</code>, and <code>site_name</code> ensures uniqueness for each record.</li> <li>GIN Index: A GIN index named <code>idx_script_records_record_info</code> is applied to the <code>record_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/script_records/#methods","title":"Methods","text":"<ul> <li><code>filter_records</code>: A class method that allows filtering script records based on various parameters such as <code>start_timestamp</code>, <code>end_timestamp</code>, <code>script_names</code>, <code>script_run_ids</code>, <code>experiment_names</code>, <code>season_names</code>, and <code>site_names</code>. This method leverages a PostgreSQL function <code>gemini.filter_script_records</code> for efficient filtering.</li> </ul>"},{"location":"database/models/script_runs/","title":"Script Runs","text":"<p>The <code>script_runs</code> table logs every execution of a script.</p>"},{"location":"database/models/script_runs/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the script run. <code>script_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the script in the <code>scripts</code> table. <code>script_run_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the script run. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/script_runs/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>script_id</code> and <code>script_run_info</code> ensures that each combination is unique.</li> <li>GIN Index: A GIN index named <code>idx_script_runs_info</code> is applied to the <code>script_run_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/script_runs/#relationships","title":"Relationships","text":"<ul> <li><code>script</code>: A many-to-one relationship with the <code>scripts</code> table, linking each script run to the script that was executed.</li> </ul>"},{"location":"database/models/scripts/","title":"Scripts","text":"<p>The <code>scripts</code> table stores information about scripts used for data processing, analysis, or other tasks.</p>"},{"location":"database/models/scripts/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the script. <code>script_name</code> <code>String(255)</code> The name of the script. <code>script_url</code> <code>String(255)</code> The URL where the script can be accessed. <code>script_extension</code> <code>String(255)</code> The file extension of the script. <code>script_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the script. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/scripts/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>script_name</code> and <code>script_url</code> ensures that each combination is unique.</li> <li>GIN Index: A GIN index named <code>idx_scripts_info</code> is applied to the <code>script_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/scripts/#relationships","title":"Relationships","text":"<ul> <li><code>script_runs</code>: A one-to-many relationship with the <code>script_runs</code> table, where one script can have multiple runs.</li> <li>Association Tables: The <code>scripts</code> table is linked to other entities like <code>experiments</code> and <code>datasets</code> through association tables.</li> </ul>"},{"location":"database/models/seasons/","title":"Seasons","text":"<p>The <code>seasons</code> table defines the different growing seasons or time periods for experiments.</p>"},{"location":"database/models/seasons/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the season. <code>experiment_id</code> <code>UUID</code> Foreign Key. References the <code>id</code> of the experiment to which the season belongs. <code>season_name</code> <code>String(255)</code> The name of the season. <code>season_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the season. <code>season_start_date</code> <code>DATE</code> The start date of the season. <code>season_end_date</code> <code>DATE</code> The end date of the season. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/seasons/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>experiment_id</code> and <code>season_name</code> ensures that each season name is unique within an experiment.</li> <li>Check Constraint: Ensures that <code>season_start_date</code> is less than or equal to <code>season_end_date</code>.</li> <li>GIN Index: A GIN index named <code>idx_seasons_info</code> is applied to the <code>season_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/seasons/#relationships","title":"Relationships","text":"<ul> <li><code>experiment</code>: A many-to-one relationship with the <code>experiments</code> table.</li> <li><code>plots</code>: A one-to-many relationship with the <code>plots</code> table, where one season can have multiple plots.</li> </ul>"},{"location":"database/models/sensor_datasets/","title":"Sensor Datasets","text":"<p>The <code>sensor_datasets</code> table links sensors to the datasets they generate.</p>"},{"location":"database/models/sensor_datasets/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>sensor_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>sensors.id</code>. <code>dataset_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>datasets.id</code>."},{"location":"database/models/sensor_platform_sensors/","title":"Sensor Platform Sensors","text":"<p>The <code>sensor_platform_sensors</code> table links sensor platforms to the sensors they carry.</p>"},{"location":"database/models/sensor_platform_sensors/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>sensor_platform_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>sensor_platforms.id</code>. <code>sensor_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>sensors.id</code>."},{"location":"database/models/sensor_platforms/","title":"Sensor Platforms","text":"<p>The <code>sensor_platforms</code> table stores information about the platforms on which sensors are mounted.</p>"},{"location":"database/models/sensor_platforms/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the sensor platform. <code>sensor_platform_name</code> <code>String(255)</code> The name of the sensor platform. This column has a unique constraint. <code>sensor_platform_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the sensor platform. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/sensor_platforms/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>sensor_platform_name</code> ensures that each sensor platform has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_sensor_platforms_info</code> is applied to the <code>sensor_platform_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/sensor_platforms/#relationships","title":"Relationships","text":"<ul> <li>Association Tables: The <code>sensor_platforms</code> table is linked to <code>sensors</code> and <code>experiments</code> through association tables.</li> </ul>"},{"location":"database/models/sensor_records/","title":"Sensor Records","text":"<p>The <code>sensor_records</code> table stores individual data records collected by sensors, designed for columnar storage.</p>"},{"location":"database/models/sensor_records/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. Unique identifier for the sensor record. <code>timestamp</code> <code>TIMESTAMP</code> Timestamp of the record. <code>sensor_id</code> <code>UUID</code> Foreign key referencing the sensor. <code>sensor_name</code> <code>String(255)</code> The name of the sensor. <code>sensor_type_id</code> <code>Integer</code> Foreign key referencing the sensor type. <code>sensor_type_name</code> <code>String(255)</code> The name of the sensor type. <code>sensor_data</code> <code>JSONB</code> Additional JSONB data for the sensor. <code>experiment_id</code> <code>UUID</code> Foreign key referencing the experiment. <code>experiment_name</code> <code>String(255)</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Foreign key referencing the season. <code>season_name</code> <code>String(255)</code> The name of the season. <code>site_id</code> <code>UUID</code> Foreign key referencing the site. <code>site_name</code> <code>String(255)</code> The name of the site. <code>record_file</code> <code>String(255)</code> The file where the record is stored. <code>record_info</code> <code>JSONB</code> Additional JSONB data for the record."},{"location":"database/models/sensor_records/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>timestamp</code>, <code>sensor_id</code>, <code>sensor_name</code>, <code>sensor_type_id</code>, <code>sensor_type_name</code>, <code>experiment_id</code>, <code>experiment_name</code>, <code>season_id</code>, <code>season_name</code>, <code>site_id</code>, and <code>site_name</code> ensures uniqueness for each record.</li> <li>GIN Index: A GIN index named <code>idx_sensor_records_record_info</code> is applied to the <code>record_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/sensor_records/#methods","title":"Methods","text":"<ul> <li><code>filter_records</code>: A class method that allows filtering sensor records based on various parameters such as <code>start_timestamp</code>, <code>end_timestamp</code>, <code>sensor_names</code>, <code>sensor_type_names</code>, <code>experiment_names</code>, <code>season_names</code>, and <code>site_names</code>. This method leverages a PostgreSQL function <code>gemini.filter_sensor_records</code> for efficient filtering.</li> </ul>"},{"location":"database/models/sensor_types/","title":"Sensor Types","text":"<p>The <code>sensor_types</code> table categorizes the sensors used in the GEMINI framework.</p>"},{"location":"database/models/sensor_types/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>Integer</code> Primary Key. A unique identifier for the sensor type. <code>sensor_type_name</code> <code>String(255)</code> The name of the sensor type (e.g., \"Temperature\", \"Humidity\"). This column has a unique constraint. <code>sensor_type_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the sensor type. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/sensor_types/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>sensor_type_name</code> ensures that each sensor type has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_sensor_types_info</code> is applied to the <code>sensor_type_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/sensor_types/#relationships","title":"Relationships","text":"<ul> <li><code>sensors</code>: A one-to-many relationship with the <code>sensors</code> table, where one sensor type can be associated with multiple sensors.</li> </ul>"},{"location":"database/models/sensors/","title":"Sensors","text":"<p>The <code>sensors</code> table stores information about the individual sensors used to collect data.</p>"},{"location":"database/models/sensors/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the sensor. <code>sensor_name</code> <code>String(255)</code> The name of the sensor. This column has a unique constraint. <code>sensor_type_id</code> <code>Integer</code> Foreign Key. References the <code>id</code> of the sensor type in the <code>sensor_types</code> table. <code>sensor_data_type_id</code> <code>Integer</code> Foreign Key. References the <code>id</code> of the data type in the <code>data_types</code> table. <code>sensor_data_format_id</code> <code>Integer</code> Foreign Key. References the <code>id</code> of the data format in the <code>data_formats</code> table. <code>sensor_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the sensor. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/sensors/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>sensor_name</code> ensures that each sensor has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_sensors_info</code> is applied to the <code>sensor_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/sensors/#relationships","title":"Relationships","text":"<ul> <li><code>sensor_type</code>: A many-to-one relationship with the <code>sensor_types</code> table.</li> <li><code>data_type</code>: A many-to-one relationship with the <code>data_types</code> table.</li> <li><code>data_format</code>: A many-to-one relationship with the <code>data_formats</code> table.</li> <li>Association Tables: The <code>sensors</code> table is linked to <code>sensor_platforms</code>, <code>experiments</code>, and <code>datasets</code> through association tables.</li> </ul>"},{"location":"database/models/sites/","title":"Sites","text":"<p>The <code>sites</code> table stores information about the physical locations where experiments are conducted.</p>"},{"location":"database/models/sites/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the site. <code>site_name</code> <code>String(255)</code> The name of the site. <code>site_city</code> <code>String(255)</code> The city where the site is located. <code>site_state</code> <code>String(255)</code> The state where the site is located. <code>site_country</code> <code>String(255)</code> The country where the site is located. <code>site_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the site. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/sites/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>site_name</code>, <code>site_city</code>, <code>site_state</code>, and <code>site_country</code> ensures that each site is unique.</li> <li>GIN Index: A GIN index named <code>idx_sites_info</code> is applied to the <code>site_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/sites/#relationships","title":"Relationships","text":"<ul> <li>Association Tables: The <code>sites</code> table is linked to <code>experiments</code> through the <code>experiment_sites</code> association table.</li> </ul>"},{"location":"database/models/trait_datasets/","title":"Trait Datasets","text":"<p>The <code>trait_datasets</code> table links traits to the datasets that contain measurements for them.</p>"},{"location":"database/models/trait_datasets/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>trait_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>traits.id</code>. <code>dataset_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>datasets.id</code>."},{"location":"database/models/trait_levels/","title":"Trait Levels","text":"<p>The <code>trait_levels</code> table stores information about the different levels or categories for categorical traits.</p>"},{"location":"database/models/trait_levels/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>Integer</code> Primary Key. A unique identifier for the trait level. <code>trait_level_name</code> <code>String(255)</code> The name of the trait level. This column has a unique constraint. <code>trait_level_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the trait level. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/trait_levels/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>trait_level_name</code> ensures that each trait level has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_trait_levels_info</code> is applied to the <code>trait_level_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/trait_levels/#relationships","title":"Relationships","text":"<ul> <li><code>traits</code>: A one-to-many relationship with the <code>traits</code> table, where one trait level can be associated with multiple traits.</li> </ul>"},{"location":"database/models/trait_records/","title":"Trait Records","text":"<p>The <code>trait_records</code> table stores individual data records for traits, designed for columnar storage.</p>"},{"location":"database/models/trait_records/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. Unique identifier for the trait record. <code>timestamp</code> <code>TIMESTAMP</code> Timestamp of the record. <code>trait_id</code> <code>UUID</code> Foreign key referencing the trait. <code>trait_name</code> <code>String(255)</code> The name of the trait. <code>trait_units</code> <code>String(255)</code> The units in which the trait is measured. <code>trait_level_id</code> <code>Integer</code> Foreign key referencing the trait level. <code>trait_level_name</code> <code>String(255)</code> The name of the trait level. <code>trait_data</code> <code>JSONB</code> Additional JSONB data for the trait. <code>experiment_id</code> <code>UUID</code> Foreign key referencing the experiment. <code>experiment_name</code> <code>String(255)</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Foreign key referencing the season. <code>season_name</code> <code>String(255)</code> The name of the season. <code>site_id</code> <code>UUID</code> Foreign key referencing the site. <code>site_name</code> <code>String(255)</code> The name of the site. <code>record_file</code> <code>String(255)</code> The file where the record is stored. <code>record_info</code> <code>JSONB</code> Additional JSONB data for the record."},{"location":"database/models/trait_records/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>timestamp</code>, <code>trait_id</code>, <code>trait_name</code>, <code>trait_units</code>, <code>trait_level_id</code>, <code>trait_level_name</code>, <code>experiment_id</code>, <code>experiment_name</code>, <code>season_id</code>, <code>season_name</code>, <code>site_id</code>, and <code>site_name</code> ensures uniqueness for each record.</li> <li>GIN Index: A GIN index named <code>idx_trait_records_record_info</code> is applied to the <code>record_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/trait_records/#methods","title":"Methods","text":"<ul> <li><code>filter_records</code>: A class method that allows filtering trait records based on various parameters such as <code>start_timestamp</code>, <code>end_timestamp</code>, <code>trait_names</code>, <code>trait_level_names</code>, <code>experiment_names</code>, <code>season_names</code>, and <code>site_names</code>. This method leverages a PostgreSQL function <code>gemini.filter_trait_records</code> for efficient filtering.</li> </ul>"},{"location":"database/models/trait_sensors/","title":"Trait Sensors","text":"<p>The <code>trait_sensors</code> table links traits to the sensors used to measure them.</p>"},{"location":"database/models/trait_sensors/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>trait_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>traits.id</code>. <code>sensor_id</code> <code>UUID</code> Primary Key, Foreign Key. Links to <code>sensors.id</code>."},{"location":"database/models/traits/","title":"Traits","text":"<p>The <code>traits</code> table stores information about the various traits being measured or observed.</p>"},{"location":"database/models/traits/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>id</code> <code>UUID</code> Primary Key. A unique identifier for the trait. <code>trait_name</code> <code>String(255)</code> The name of the trait. This column has a unique constraint. <code>trait_units</code> <code>String(255)</code> The units in which the trait is measured. <code>trait_level_id</code> <code>Integer</code> Foreign Key. References the <code>id</code> of the trait level in the <code>trait_levels</code> table. <code>trait_metrics</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the trait metrics. <code>trait_info</code> <code>JSONB</code> A JSONB column for storing additional, unstructured information about the trait. <code>created_at</code> <code>TIMESTAMP</code> The timestamp when the record was created. Defaults to the current time. <code>updated_at</code> <code>TIMESTAMP</code> The timestamp when the record was last updated. Automatically updates on any modification."},{"location":"database/models/traits/#constraints-and-indexes","title":"Constraints and Indexes","text":"<ul> <li>Unique Constraint: A <code>UniqueConstraint</code> on <code>trait_name</code> ensures that each trait has a unique name.</li> <li>GIN Index: A GIN index named <code>idx_traits_info</code> is applied to the <code>trait_info</code> column to optimize queries on the JSONB data.</li> </ul>"},{"location":"database/models/traits/#relationships","title":"Relationships","text":"<ul> <li><code>trait_level</code>: A many-to-one relationship with the <code>trait_levels</code> table.</li> <li>Association Tables: The <code>traits</code> table is linked to <code>experiments</code> and <code>datasets</code> through association tables.</li> </ul>"},{"location":"database/models/validation_views/","title":"Validation Views","text":"<p>This section describes the views related to validation, which provide simplified or aggregated access to validation-related information.</p>"},{"location":"database/models/validation_views/#valid-plot-combinations-view","title":"Valid Plot Combinations View","text":"<p>The <code>ValidPlotCombinationsView</code> table combines information from plots, experiments, seasons and sites to validate plot combinations.</p>"},{"location":"database/models/validation_views/#table-schema","title":"Table Schema","text":"Column Name Data Type Description <code>plot_id</code> <code>UUID</code> Primary Key. A unique identifier for the plot. <code>plot_number</code> <code>Integer</code> The number of the plot. <code>plot_row_number</code> <code>Integer</code> The row number of the plot in a grid layout. <code>plot_column_number</code> <code>Integer</code> The column number of the plot in a grid layout. <code>plot_info</code> <code>JSONB</code> Additional JSONB data describing the plot. <code>plot_geometry_info</code> <code>JSONB</code> Additional JSONB data describing the plot's geometry. <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment to which the plot belongs. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Unique identifier for the season during which the plot was used. <code>site_id</code> <code>UUID</code> Unique identifier for the site where the plot is located. <code>site_name</code> <code>String</code> The name of the site."},{"location":"database/models/validation_views/#valid-dataset-combinations-view","title":"Valid Dataset Combinations View","text":"<p>The <code>ValidDatasetCombinationsView</code> table combines information from datasets, experiments, seasons and sites to validate dataset combinations.</p>"},{"location":"database/models/validation_views/#table-schema_1","title":"Table Schema","text":"Column Name Data Type Description <code>dataset_id</code> <code>UUID</code> Primary Key. A unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_info</code> <code>JSONB</code> Additional JSONB data describing the dataset. <code>experiment_id</code> <code>UUID</code> Unique identifier for the experiment to which the dataset belongs. <code>experiment_name</code> <code>String</code> The name of the experiment. <code>season_id</code> <code>UUID</code> Unique identifier for the season during which the dataset was used. <code>site_id</code> <code>UUID</code> Unique identifier for the site where the dataset is located. <code>site_name</code> <code>String</code> The name of the site."},{"location":"database/models/validation_views/#valid-sensor-dataset-combinations-view","title":"Valid Sensor Dataset Combinations View","text":"<p>The <code>ValidSensorDatasetCombinationsView</code> table combines information from sensors and datasets to validate sensor dataset combinations.</p>"},{"location":"database/models/validation_views/#table-schema_2","title":"Table Schema","text":"Column Name Data Type Description <code>sensor_id</code> <code>UUID</code> Primary Key. A unique identifier for the sensor. <code>sensor_name</code> <code>String</code> The name of the sensor. <code>sensor_type_id</code> <code>Integer</code> The sensor type id. <code>dataset_id</code> <code>UUID</code> Primary Key. A unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_type_id</code> <code>Integer</code> The dataset type id."},{"location":"database/models/validation_views/#valid-trait-dataset-combinations-view","title":"Valid Trait Dataset Combinations View","text":"<p>The <code>ValidTraitDatasetCombinationsView</code> table combines information from traits and datasets to validate trait dataset combinations.</p>"},{"location":"database/models/validation_views/#table-schema_3","title":"Table Schema","text":"Column Name Data Type Description <code>trait_id</code> <code>UUID</code> Primary Key. A unique identifier for the trait. <code>trait_name</code> <code>String</code> The name of the trait. <code>trait_units</code> <code>String</code> The units of the trait. <code>trait_level_id</code> <code>Integer</code> The trait level id. <code>dataset_id</code> <code>UUID</code> Primary Key. A unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_type_id</code> <code>Integer</code> The dataset type id."},{"location":"database/models/validation_views/#valid-procedure-dataset-combinations-view","title":"Valid Procedure Dataset Combinations View","text":"<p>The <code>ValidProcedureDatasetCombinationsView</code> table combines information from procedures and datasets to validate procedure dataset combinations.</p>"},{"location":"database/models/validation_views/#table-schema_4","title":"Table Schema","text":"Column Name Data Type Description <code>procedure_id</code> <code>UUID</code> Primary Key. A unique identifier for the procedure. <code>procedure_name</code> <code>String</code> The name of the procedure. <code>dataset_id</code> <code>UUID</code> Primary Key. A unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_type_id</code> <code>Integer</code> The dataset type id."},{"location":"database/models/validation_views/#valid-model-dataset-combinations-view","title":"Valid Model Dataset Combinations View","text":"<p>The <code>ValidModelDatasetCombinationsView</code> table combines information from models and datasets to validate model dataset combinations.</p>"},{"location":"database/models/validation_views/#table-schema_5","title":"Table Schema","text":"Column Name Data Type Description <code>model_id</code> <code>UUID</code> Primary Key. A unique identifier for the model. <code>model_name</code> <code>String</code> The name of the model. <code>dataset_id</code> <code>UUID</code> Primary Key. A unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_type_id</code> <code>Integer</code> The dataset type id."},{"location":"database/models/validation_views/#valid-script-dataset-combinations-view","title":"Valid Script Dataset Combinations View","text":"<p>The <code>ValidScriptDatasetCombinationsView</code> table combines information from scripts and datasets to validate script dataset combinations.</p>"},{"location":"database/models/validation_views/#table-schema_6","title":"Table Schema","text":"Column Name Data Type Description <code>script_id</code> <code>UUID</code> Primary Key. A unique identifier for the script. <code>script_name</code> <code>String</code> The name of the script. <code>dataset_id</code> <code>UUID</code> Primary Key. A unique identifier for the dataset. <code>dataset_name</code> <code>String</code> The name of the dataset. <code>dataset_type_id</code> <code>Integer</code> The dataset type id."},{"location":"examples/cultivar_api/","title":"Cultivar API Example","text":"<p>This example demonstrates how to use the Cultivar API in the Gemini framework.</p>"},{"location":"examples/cultivar_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/cultivar_api.py</code>.</p>"},{"location":"examples/cultivar_api/#code","title":"Code","text":"<pre><code>from gemini.api.cultivar import Cultivar\n\n# Create a new Cultivar for Experiment A\nnew_cultivar = Cultivar.create(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\",\n    cultivar_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created Cultivar: {new_cultivar}\")\n\n# Get Cultivar with Population and Accession\ncultivar = Cultivar.get(\"Cultivar Test 1\", \"Accession A\")\nprint(f\"Got Cultivar: {cultivar}\")\n\n# Get the same Cultivar by ID\ncultivar_by_id = Cultivar.get_by_id(new_cultivar.id)\nprint(f\"Got Cultivar by ID: {cultivar_by_id}\")\n\n# Get all cultivars\nall_cultivars = Cultivar.get_all()\nprint(f\"All Cultivars:\")\nfor cultivar in all_cultivars:\n    print(cultivar)\n\n# Search for cultivars in Experiment A\nsearched_cultivars = Cultivar.search(experiment_name=\"Experiment A\")\nlength_searched_cultivars = len(searched_cultivars)\nprint(f\"Found {length_searched_cultivars} cultivars in Experiment A\")\n\n# Refresh the cultivar\ncultivar.refresh()\nprint(f\"Refreshed Cultivar: {cultivar}\")\n\n# Update the cultivar_info\ncultivar.set_info(\n    cultivar_info={\"test\": \"test_updated\"},\n)\nprint(f\"Updated Cultivar Info: {cultivar.get_info()}\")\n\n# Check if the cultivar exists before deletion\nexists = Cultivar.exists(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\"\n)\nprint(f\"Cultivar exists: {exists}\")\n\n# Delete the created cultivar\nis_deleted = new_cultivar.delete()\nprint(f\"Deleted Cultivar: {is_deleted}\")\n\n# Check if the cultivar exists after deletion\nexists_after_deletion = Cultivar.exists(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\"\n)\nprint(f\"Cultivar exists after deletion: {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/cultivar_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing cultivars using the Gemini API:</p> <ul> <li>Creating a cultivar:  The <code>Cultivar.create()</code> method is used to create a new cultivar associated with a specific experiment.</li> <li>Getting a cultivar: The <code>Cultivar.get()</code> method retrieves a cultivar by its population and accession.  The <code>Cultivar.get_by_id()</code> method retrieves a cultivar by its unique ID.</li> <li>Getting all cultivars: The <code>Cultivar.get_all()</code> method retrieves all cultivars in the database.</li> <li>Searching for cultivars: The <code>Cultivar.search()</code> method finds cultivars based on specified criteria, such as the experiment name.</li> <li>Refreshing a cultivar: The <code>Cultivar.refresh()</code> method updates the cultivar object with the latest data from the database.</li> <li>Updating cultivar information: The <code>Cultivar.set_info()</code> method updates the <code>cultivar_info</code> field with new data.</li> <li>Checking for existence: The <code>Cultivar.exists()</code> method verifies if a cultivar with the given population and accession exists.</li> <li>Deleting a cultivar: The <code>Cultivar.delete()</code> method removes the cultivar from the database.</li> </ul>"},{"location":"examples/cultivar_experiment_api/","title":"Cultivar Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate cultivars with experiments using the Gemini framework.</p>"},{"location":"examples/cultivar_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/cultivar_experiment_api.py</code>.</p>"},{"location":"examples/cultivar_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.cultivar import Cultivar\n\n# Create a new cultivar for Experiment A\nnew_cultivar = Cultivar.create(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\",\n    cultivar_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created Cultivar: {new_cultivar}\")\n\n# Get Associated Experiments\nassociated_experiments = new_cultivar.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the cultivar with Experiment B\nnew_cultivar.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Cultivar with Experiment B\")\n\n# Check if the cultivar is associated with Experiment B\nis_associated = new_cultivar.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Cultivar associated with Experiment B? {is_associated}\")\n\n# Unassociate the cultivar from Experiment B\nnew_cultivar.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Cultivar from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_cultivar.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Cultivar still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/cultivar_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between cultivars and experiments:</p> <ul> <li>Creating a cultivar: A new cultivar is created and associated with Experiment A.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the cultivar.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the cultivar with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the cultivar is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the cultivar and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the cultivar is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/cultivar_plot_api/","title":"Cultivar Plot API Example","text":"<p>This example demonstrates how to associate and unassociate cultivars with plots using the Gemini framework.</p>"},{"location":"examples/cultivar_plot_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/cultivar_plot_api.py</code>.</p>"},{"location":"examples/cultivar_plot_api/#code","title":"Code","text":"<pre><code>from gemini.api.plot import Plot\nfrom gemini.api.cultivar import Cultivar\n\n# Create a plot object\nnew_plot = Plot.create(\n    plot_number=100,\n    plot_row_number=101,\n    plot_column_number=101,\n    plot_info={\n        \"plot_type\": \"test\",\n        \"plot_size\": 100,\n        \"plot_location\": \"test_location\",\n    },\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Plot created: {new_plot}\")\n\n# Create a new cultivar for Experiment A\nnew_cultivar = Cultivar.create(\n    cultivar_accession=\"Test Cultivar\",\n    cultivar_population=\"Test Population\",\n    experiment_name=\"Experiment A\",\n    cultivar_info={\n        \"cultivar_type\": \"test\",\n        \"cultivar_size\": 100,\n        \"cultivar_location\": \"test_location\",\n    }\n)\nprint(f\"Cultivar created: {new_cultivar}\")\n\n# Associate the plot with the cultivar\nnew_cultivar.associate_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    experiment_name=new_plot.experiment_name,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Plot {new_plot.plot_number} associated with Cultivar {new_cultivar.cultivar_accession}\")\n\n# Get all the plots associated with the cultivar\nassociated_plots = new_cultivar.get_associated_plots()\nfor plot in associated_plots:\n    print(f\"Associated Plot: {plot.plot_number}, Row: {plot.plot_row_number}, Column: {plot.plot_column_number}\")\n\n# Check association of plot with cultivar\nis_associated = new_cultivar.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    experiment_name=new_plot.experiment_name,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Is Plot {new_plot.plot_number} associated with Cultivar {new_cultivar.cultivar_accession}? {is_associated}\")\n\n# Remove the association\nnew_cultivar.unassociate_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    experiment_name=new_plot.experiment_name,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Plot {new_plot.plot_number} unassociated from Cultivar {new_cultivar.cultivar_accession}\")\n\n# Check if the plot is still associated\nis_associated = new_cultivar.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    experiment_name=new_plot.experiment_name,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Is Plot {new_plot.plot_number} associated with Cultivar {new_cultivar.cultivar_accession}? {is_associated}\")\n</code></pre>"},{"location":"examples/cultivar_plot_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between cultivars and plots:</p> <ul> <li>Creating a plot: A new plot is created with specific attributes like plot number, row number, and column number.</li> <li>Creating a cultivar: A new cultivar is created and associated with Experiment A.</li> <li>Associating with a plot: The <code>associate_plot()</code> method associates the cultivar with the created plot.</li> <li>Getting associated plots: The <code>get_associated_plots()</code> method retrieves a list of plots associated with the cultivar.</li> <li>Checking association: The <code>belongs_to_plot()</code> method verifies if the cultivar is associated with a specific plot.</li> <li>Unassociating from a plot: The <code>unassociate_plot()</code> method removes the association between the cultivar and the plot.</li> <li>Verifying unassociation: The <code>belongs_to_plot()</code> method is used again to confirm that the cultivar is no longer associated with the plot.</li> </ul>"},{"location":"examples/data_format_api/","title":"Data Format API Example","text":"<p>This example demonstrates how to use the Data Format API in the Gemini framework.</p>"},{"location":"examples/data_format_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/data_format_api.py</code>.</p>"},{"location":"examples/data_format_api/#code","title":"Code","text":"<pre><code>from gemini.api.data_format import DataFormat\n\n# Create a new data format\nnew_data_format = DataFormat.create(\n    data_format_name=\"Test Data Format\",\n    data_format_mime_type=\"application/json\",\n    data_format_info={\n        \"format_type\": \"test\",\n        \"format_size\": 100,\n        \"format_location\": \"test_location\",\n    }\n)\nprint(f\"Data Format created: {new_data_format}\")\n\n# Get Data Format by ID\ndata_format_by_id = DataFormat.get_by_id(new_data_format.id)\nprint(f\"Data Format by ID: {data_format_by_id}\")\n\n# Get Data Format by Name\ndata_format_by_name = DataFormat.get(data_format_name=\"Test Data Format\")\nprint(f\"Data Format by Name: {data_format_by_name}\")\n\n# Get all Data Formats\nall_data_formats = DataFormat.get_all()\nfor data_format in all_data_formats:\n    print(data_format)\n\n# Search Data Formats\nsearch_results = DataFormat.search(data_format_name=\"Test Data Format\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Data Format\ndata_format = data_format.update(\n    data_format_mime_type=\"application/xml\",\n    data_format_info={\n        \"format_type\": \"updated_test\",\n        \"format_size\": 200,\n        \"format_location\": \"updated_test_location\",\n    },\n)\nprint(f\"Updated Data Format: {data_format}\")\n\n# Set Data Format Info\ndata_format.set_info(\n    data_format_info={\n        \"format_type\": \"new_test\",\n        \"format_size\": 300,\n        \"format_location\": \"new_test_location\",\n    }\n)\nprint(f\"Data Format Info set: {data_format.get_info()}\")\n\n# Check if Data Format exists\ndata_format_exists = DataFormat.exists(data_format_name=\"Test Data Format\")\nprint(f\"Does Data Format exist? {data_format_exists}\")\n\n# Delete Data Format\ndata_format.delete()\nprint(f\"Data Format deleted: {data_format}\")\n\n# Check if Data Format exists after deletion\ndata_format_exists_after_deletion = DataFormat.exists(data_format_name=\"Test Data Format\")\nprint(f\"Does Data Format exist after deletion? {data_format_exists_after_deletion}\")\n</code></pre>"},{"location":"examples/data_format_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing data formats using the Gemini API:</p> <ul> <li>Creating a data format: The <code>DataFormat.create()</code> method is used to create a new data format with a name, MIME type, and additional information.</li> <li>Getting a data format: The <code>DataFormat.get_by_id()</code> method retrieves a data format by its unique ID. The <code>DataFormat.get()</code> method retrieves a data format by its name.</li> <li>Getting all data formats: The <code>DataFormat.get_all()</code> method retrieves all data formats in the database.</li> <li>Searching for data formats: The <code>DataFormat.search()</code> method finds data formats based on specified criteria, such as the name.</li> <li>Updating a data format: The <code>DataFormat.update()</code> method updates the attributes of an existing data format.</li> <li>Setting data format information: The <code>DataFormat.set_info()</code> method updates the <code>data_format_info</code> field with new data.</li> <li>Checking for existence: The <code>DataFormat.exists()</code> method verifies if a data format with the given name exists.</li> <li>Deleting a data format: The <code>DataFormat.delete()</code> method removes the data format from the database.</li> </ul>"},{"location":"examples/data_format_types_api/","title":"Data Format Types API Example","text":"<p>This example demonstrates how to associate and unassociate data formats with data types using the Gemini framework.</p>"},{"location":"examples/data_format_types_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/data_format_types_api.py</code>.</p>"},{"location":"examples/data_format_types_api/#code","title":"Code","text":"<pre><code>from gemini.api.data_format import DataFormat\nfrom gemini.api.data_type import DataType \n\n# Get the PNG data format\npng_format = DataFormat.get(\"PNG\")\nprint(f\"PNG Data Format: {png_format}\")\n\n# Get associated data types\nassociated_data_types = png_format.get_associated_data_types()\nfor data_type in associated_data_types:\n    print(f\"Associated Data Type: {data_type}\")\n\n# Create a new data type\nnew_data_type = DataType.create(\n    data_type_name=\"Test Data Type\",\n    data_type_info={\n        \"description\": \"This is a test data type for API demonstration.\",\n        \"version\": \"1.0\",\n    }\n)\nprint(f\"Created new data type: {new_data_type}\")\n\n# Associate the new data type with the PNG data format\npng_format.associate_data_type(data_type_name=new_data_type.data_type_name)\nprint(f\"Associated data format {png_format.data_format_name} with data type {new_data_type.data_type_name}\")\n\n# Check if Belongs to Data Type\nis_associated = png_format.belongs_to_data_type(data_type_name=new_data_type.data_type_name)\nprint(f\"Is data format {png_format.data_format_name} associated with data type {new_data_type.data_type_name}? {is_associated}\")\n\n# Unassociate the data format from the data type\npng_format.unassociate_data_type(data_type_name=new_data_type.data_type_name)\nprint(f\"Unassociated data format {png_format.data_format_name} from data type {new_data_type.data_type_name}\")\n\n# Verify the unassociation\nis_associated_after_unassociation = png_format.belongs_to_data_type(data_type_name=new_data_type.data_type_name)\nprint(f\"Is data format {png_format.data_format_name} still associated with data type {new_data_type.data_type_name}? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/data_format_types_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between data formats and data types:</p> <ul> <li>Getting a data format: The <code>DataFormat.get()</code> method retrieves a data format by its name (in this case, \"PNG\").</li> <li>Getting associated data types: The <code>get_associated_data_types()</code> method retrieves a list of data types associated with the data format.</li> <li>Creating a data type: A new data type is created with a name and additional information.</li> <li>Associating with a data type: The <code>associate_data_type()</code> method associates the data format with the created data type.</li> <li>Checking association: The <code>belongs_to_data_type()</code> method verifies if the data format is associated with a specific data type.</li> <li>Unassociating from a data type: The <code>unassociate_data_type()</code> method removes the association between the data format and the data type.</li> <li>Verifying unassociation: The <code>belongs_to_data_type()</code> method is used again to confirm that the data format is no longer associated with the data type.</li> </ul>"},{"location":"examples/data_type_api/","title":"Data Type API Example","text":"<p>This example demonstrates how to use the Data Type API in the Gemini framework.</p>"},{"location":"examples/data_type_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/data_type_api.py</code>.</p>"},{"location":"examples/data_type_api/#code","title":"Code","text":"<pre><code>from gemini.api.data_type import DataType\n\n# Create a new data type\nnew_data_type = DataType.create(\n    data_type_name=\"Test Data Type\",\n    data_type_info={\n        \"description\": \"This is a test data type for API demonstration.\",\n        \"version\": \"1.0\",\n    }\n)\nprint(f\"Created new data type: {new_data_type}\")\n\n# Get Data Type by ID\ndata_type_by_id = DataType.get_by_id(new_data_type.id)\nprint(f\"Data Type by ID: {data_type_by_id}\")\n\n# Get Data Type by Name\ndata_type_by_name = DataType.get(data_type_name=\"Test Data Type\")\nprint(f\"Data Type by Name: {data_type_by_name}\")\n\n# Get all Data Types\nall_data_types = DataType.get_all()\nfor data_type in all_data_types:\n    print(data_type)\n\n# Search Data Types\nsearch_results = DataType.search(data_type_name=\"Test Data Type\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Data Type\ndata_type = data_type.update(\n    data_type_info={\n        \"description\": \"Updated test data type for API demonstration.\",\n        \"version\": \"1.1\",\n    }\n)\nprint(f\"Updated Data Type: {data_type}\")\n\n# Set Data Type Info\ndata_type.set_info(\n    data_type_info={\n        \"description\": \"New test data type for API demonstration.\",\n        \"version\": \"2.0\",\n    }\n)\nprint(f\"Data Type Info set: {data_type.get_info()}\")\n\n# Check if Data Type exists\ndata_type_exists = DataType.exists(data_type_name=\"Test Data Type\")\nprint(f\"Does Data Type exist? {data_type_exists}\")\n\n# Delete Data Type\ndata_type.delete()\nprint(f\"Data Type deleted: {data_type}\")\n\n# Check if Data Type exists after deletion\ndata_type_exists_after_deletion = DataType.exists(data_type_name=\"Test Data Type\")\nprint(f\"Does Data Type exist after deletion? {data_type_exists_after_deletion}\")\n</code></pre>"},{"location":"examples/data_type_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing data types using the Gemini API:</p> <ul> <li>Creating a data type: The <code>DataType.create()</code> method is used to create a new data type with a name and additional information (description, version).</li> <li>Getting a data type: The <code>DataType.get_by_id()</code> method retrieves a data type by its unique ID. The <code>DataType.get()</code> method retrieves a data type by its name.</li> <li>Getting all data types: The <code>DataType.get_all()</code> method retrieves all data types in the database.</li> <li>Searching for data types: The <code>DataType.search()</code> method finds data types based on specified criteria, such as the name.</li> <li>Updating a data type: The <code>DataType.update()</code> method updates the attributes of an existing data type.</li> <li>Setting data type information: The <code>DataType.set_info()</code> method updates the <code>data_type_info</code> field with new data.</li> <li>Checking for existence: The <code>DataType.exists()</code> method verifies if a data type with the given name exists.</li> <li>Deleting a data type: The <code>DataType.delete()</code> method removes the data type from the database.</li> </ul>"},{"location":"examples/dataset_api/","title":"Dataset API Example","text":"<p>This example demonstrates how to use the Dataset API in the Gemini framework.</p>"},{"location":"examples/dataset_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/dataset_api.py</code>.</p>"},{"location":"examples/dataset_api/#code","title":"Code","text":"<pre><code>from gemini.api.dataset import Dataset, GEMINIDatasetType\n\n# Create a new dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"Test Dataset\",\n    dataset_type=GEMINIDatasetType.Sensor,\n    dataset_info={\n        \"description\": \"This is a test dataset for API demonstration.\",\n        \"version\": \"1.0\",\n    },\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created Dataset: {new_dataset}\")\n\n# Get Dataset by ID\ndataset_by_id = Dataset.get_by_id(new_dataset.id)\nprint(f\"Dataset by ID: {dataset_by_id}\")\n\n# Get Dataset by Name\ndataset_by_name = Dataset.get(dataset_name=\"Test Dataset\")\nprint(f\"Dataset by Name: {dataset_by_name}\")\n\n# Get all Datasets\nall_datasets = Dataset.get_all()\nfor dataset in all_datasets:\n    print(dataset)\n\n# Search Datasets\nsearch_results = Dataset.search(experiment_name=\"Experiment A\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Dataset\ndataset = dataset.update(\n    dataset_info={\n        \"description\": \"Updated test dataset for API demonstration.\",\n        \"version\": \"1.1\",\n    },\n    collection_date=\"2023-10-02\",\n)\nprint(f\"Updated Dataset: {dataset}\")\n\n# Set Dataset Info\ndataset.set_info(\n    dataset_info={\n        \"description\": \"New test dataset for API demonstration.\",\n        \"version\": \"2.0\",\n    }\n)\nprint(f\"Dataset Info set: {dataset.get_info()}\")\n\n# Check if Dataset exists\ndataset_exists = Dataset.exists(dataset_name=\"Test Dataset\")\nprint(f\"Does Dataset exist? {dataset_exists}\")\n\n# Delete Dataset\ndataset.delete()\nprint(f\"Dataset deleted: {dataset}\")\n\n# Check if Dataset exists after deletion\ndataset_exists_after_deletion = Dataset.exists(dataset_name=\"Test Dataset\")\nprint(f\"Does Dataset exist after deletion? {dataset_exists_after_deletion}\")\n</code></pre>"},{"location":"examples/dataset_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing datasets using the Gemini API:</p> <ul> <li>Creating a dataset: The <code>Dataset.create()</code> method is used to create a new dataset with a name, type, additional information, collection date, and associated experiment.</li> <li>Getting a dataset: The <code>Dataset.get_by_id()</code> method retrieves a dataset by its unique ID. The <code>Dataset.get()</code> method retrieves a dataset by its name.</li> <li>Getting all datasets: The <code>Dataset.get_all()</code> method retrieves all datasets in the database.</li> <li>Searching for datasets: The <code>Dataset.search()</code> method finds datasets based on specified criteria, such as the experiment name.</li> <li>Updating a dataset: The <code>Dataset.update()</code> method updates the attributes of an existing dataset.</li> <li>Setting dataset information: The <code>Dataset.set_info()</code> method updates the <code>dataset_info</code> field with new data.</li> <li>Checking for existence: The <code>Dataset.exists()</code> method verifies if a dataset with the given name exists.</li> <li>Deleting a dataset: The <code>Dataset.delete()</code> method removes the dataset from the database.</li> </ul>"},{"location":"examples/dataset_experiment_api/","title":"Dataset Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate datasets with experiments using the Gemini framework.</p>"},{"location":"examples/dataset_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/dataset_experiment_api.py</code>.</p>"},{"location":"examples/dataset_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.dataset import Dataset, GEMINIDatasetType\n\n# Create a new dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"Test Dataset\",\n    dataset_type=GEMINIDatasetType.Sensor,\n    dataset_info={\n        \"description\": \"This is a test dataset for API demonstration.\",\n        \"version\": \"1.0\",\n    },\n    experiment_name=\"Experiment A\",\n    collection_date=\"2023-10-01\"\n)\nprint(f\"Created Dataset: {new_dataset}\")\n\n# Get associated experiments for the dataset\nassociated_experiments = new_dataset.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the dataset with Experiment B\nnew_dataset.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated dataset {new_dataset.dataset_name} with Experiment B\")\n\n# Check if the dataset is associated with Experiment B\nis_associated = new_dataset.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is dataset {new_dataset.dataset_name} associated with Experiment B? {is_associated}\")\n\n# Unassociate the dataset from Experiment B\nnew_dataset.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated dataset {new_dataset.dataset_name} from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_dataset.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is dataset {new_dataset.dataset_name} still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/dataset_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between datasets and experiments:</p> <ul> <li>Creating a dataset: A new dataset is created and associated with Experiment A.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the dataset.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the dataset with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the dataset is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the dataset and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the dataset is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/dataset_record_api/","title":"Dataset Record API Example","text":"<p>This example demonstrates how to use the DatasetRecord API in the Gemini framework.</p>"},{"location":"examples/dataset_record_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/dataset_record_api.py</code>.</p>"},{"location":"examples/dataset_record_api/#code","title":"Code","text":"<pre><code>from gemini.api.dataset_record import DatasetRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\n\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Create a new Dataset Record for Dataset A, with Experiment A, Site A1 and Season 1A\nnew_dataset_record = DatasetRecord.create(\n    timestamp=timestamp,\n    collection_date=timestamp.date(),\n    dataset_name=\"Dataset A\",\n    dataset_data={\"key\": \"value\"},\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    record_info={\"test\": \"test\"},\n    insert_on_create=True\n)\nprint(f\"Created Dataset Record: {new_dataset_record}\")\n\n# Get Dataset Record by ID\ndataset_record_by_id = DatasetRecord.get_by_id(new_dataset_record.id)\nprint(f\"Dataset Record by ID: {dataset_record_by_id}\")\n\n# Get Dataset Record\ndataset_record_by_name = DatasetRecord.get(\n    timestamp=new_dataset_record.timestamp,\n    dataset_name=\"Dataset A\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Dataset Record by Name: {dataset_record_by_name}\")\n\n# Get all Dataset Records limit by 10\ndataset_records = DatasetRecord.get_all(limit=10)\nprint(f\"Dataset Records (limit 10):\")\nfor record in dataset_records:\n    print(record)\n\n# Search Dataset Records\nsearched_records = DatasetRecord.search(\n    experiment_name=\"Experiment A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\nprint(f\"Found {len(searched_records)} records in Experiment A:\")\n\n# Update the newly created Dataset Record\nupdated_record = new_dataset_record.update(\n    dataset_data={\"key\": \"new_value\"},\n    record_info={\"test\": \"test_updated\"}\n)\nprint(f\"Updated Dataset Record: {updated_record}\")\n\n# Set Dataset Record Info\nupdated_record.set_info(\n    record_info={\"test\": \"test_set_info\"}\n)\nprint(f\"Dataset Record Info set: {updated_record.get_info()}\")\n\n# Check if Dataset Record exists\nexists = DatasetRecord.exists(\n    timestamp=new_dataset_record.timestamp,\n    dataset_name=\"Dataset A\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Does Dataset Record exist? {exists}\")\n\n# Delete Dataset Record\nis_deleted = new_dataset_record.delete()\nprint(f\"Dataset Record deleted: {is_deleted}\")\n\n# Check if Dataset Record exists after deletion\nexists_after_deletion = DatasetRecord.exists(\n    timestamp=new_dataset_record.timestamp,\n    dataset_name=\"Dataset A\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Does Dataset Record exist after deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/dataset_record_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing dataset records using the Gemini API:</p> <ul> <li>Creating a dataset record: The <code>DatasetRecord.create()</code> method is used to create a new dataset record with a timestamp, collection date, associated dataset, experiment, site, and season.</li> <li>Getting a dataset record: The <code>DatasetRecord.get_by_id()</code> method retrieves a dataset record by its unique ID. The <code>DatasetRecord.get()</code> method retrieves a dataset record by its timestamp, dataset name, experiment name, site name, and season name.</li> <li>Getting all dataset records: The <code>DatasetRecord.get_all()</code> method retrieves all dataset records, with an optional limit.</li> <li>Searching for dataset records: The <code>DatasetRecord.search()</code> method finds dataset records based on specified criteria, such as the experiment name.</li> <li>Updating a dataset record: The <code>DatasetRecord.update()</code> method updates the attributes of an existing dataset record.</li> <li>Setting dataset record information: The <code>DatasetRecord.set_info()</code> method updates the <code>record_info</code> field with new data.</li> <li>Checking for existence: The <code>DatasetRecord.exists()</code> method verifies if a dataset record with the given attributes exists.</li> <li>Deleting a dataset record: The <code>DatasetRecord.delete()</code> method removes the dataset record from the database.</li> </ul>"},{"location":"examples/dataset_record_files_api/","title":"Dataset Record Files API Example","text":"<p>This example demonstrates how to use the DatasetRecord API to associate files with dataset records in the Gemini framework.</p>"},{"location":"examples/dataset_record_files_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/dataset_record_files_api.py</code>.</p>"},{"location":"examples/dataset_record_files_api/#code","title":"Code","text":"<pre><code>from gemini.api.dataset_record import DatasetRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport os\n\n# Create Timestamp\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Get Sample Image Folder\nscript_folder = os.path.dirname(os.path.abspath(__file__))\nsample_image_folder = os.path.join(script_folder, \"sample_images\")\nsample_image_files = [\n    os.path.join(sample_image_folder, f) for f in os.listdir(sample_image_folder)\n    if os.path.isfile(os.path.join(sample_image_folder, f))\n]\nprint(f\"Sample Image Files: {sample_image_files}\")\n\n\n# Creating Records to add to DatasetRecord\nrecords_to_add = []\nfor image_file in sample_image_files:\n    timestamp = timestamp + timedelta(minutes=randint(1, 60))  # Increment timestamp for each file\n    collection_date = timestamp.date()  # Use the date part of the timestamp\n    record = DatasetRecord.create(\n        timestamp=timestamp,\n        collection_date=collection_date,\n        dataset_name=\"Dataset A\",\n        experiment_name=\"Experiment A\",\n        site_name=\"Site A1\",\n        season_name=\"Season 1A\",\n        record_file=image_file,\n        record_info={\"test\": \"test\"},\n        insert_on_create=False\n    )\n    records_to_add.append(record)\n\nDatasetRecord.insert(records_to_add)\n\n# Search the Dataset Records\nsearched_records = DatasetRecord.search(\n    collection_date=timestamp.date(),\n    dataset_name=\"Dataset A\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\n# Print the searched records\nprint(f\"Found {len(searched_records)} records in Dataset A, Experiment A, Site A1, Season 1A:\")\nfor record in searched_records:\n    print(record)\n\n# Insert the file records into the DatasetRecord\n# for record in records\n</code></pre>"},{"location":"examples/dataset_record_files_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to associate files with dataset records using the Gemini API:</p> <ul> <li>Creating dataset records with files: The <code>DatasetRecord.create()</code> method is used to create new dataset records, each associated with a file from the <code>sample_images</code> directory. The <code>insert_on_create</code> parameter is set to <code>False</code> to allow batch insertion.</li> <li>Inserting dataset records: The <code>DatasetRecord.insert()</code> method is used to efficiently insert multiple dataset records into the database.</li> <li>Searching for dataset records: The <code>DatasetRecord.search()</code> method is used to find dataset records based on specified criteria.</li> </ul>"},{"location":"examples/dataset_type_api/","title":"Dataset Type API Example","text":"<p>This example demonstrates how to use the DatasetType API in the Gemini framework.</p>"},{"location":"examples/dataset_type_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/dataset_type_api.py</code>.</p>"},{"location":"examples/dataset_type_api/#code","title":"Code","text":"<pre><code>from gemini.api.dataset_type import DatasetType\n\n# Create a new dataset type\nnew_dataset_type = DatasetType.create(\n    dataset_type_name=\"Test Dataset Type\",\n    dataset_type_info={\n        \"description\": \"This is a test dataset type for API demonstration.\",\n        \"version\": \"1.0\",\n    }\n)\nprint(f\"Created new dataset type: {new_dataset_type}\")\n\n# Get Dataset Type by ID\ndataset_type_by_id = DatasetType.get_by_id(new_dataset_type.id)\nprint(f\"Dataset Type by ID: {dataset_type_by_id}\")\n\n# Get Dataset Type by Name\ndataset_type_by_name = DatasetType.get(dataset_type_name=\"Test Dataset Type\")\nprint(f\"Dataset Type by Name: {dataset_type_by_name}\")\n\n# Get all Dataset Types\nall_dataset_types = DatasetType.get_all()\nfor dataset_type in all_dataset_types:\n    print(dataset_type)\n\n# Search Dataset Types\nsearch_results = DatasetType.search(dataset_type_name=\"Test Dataset Type\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Dataset Type\ndataset_type = dataset_type.update(\n    dataset_type_info={\n        \"description\": \"Updated test dataset type for API demonstration.\",\n        \"version\": \"1.1\",\n    }\n)\nprint(f\"Updated Dataset Type: {dataset_type}\")\n\n# Set Dataset Type Info\ndataset_type.set_info(\n    dataset_type_info={\n        \"description\": \"New test dataset type for API demonstration.\",\n        \"version\": \"2.0\",\n    }\n)\nprint(f\"Dataset Type Info set: {dataset_type.get_info()}\")\n\n# Check if Dataset Type exists\ndataset_type_exists = DatasetType.exists(dataset_type_name=\"Test Dataset Type\")\nprint(f\"Does Dataset Type exist? {dataset_type_exists}\")\n\n# Delete Dataset Type\ndataset_type.delete()\nprint(f\"Dataset Type deleted: {dataset_type}\")\n\n# Check if Dataset Type exists after deletion\ndataset_type_exists_after_deletion = DatasetType.exists(dataset_type_name=\"Test Dataset Type\")\nprint(f\"Does Dataset Type exist after deletion? {dataset_type_exists_after_deletion}\")\n</code></pre>"},{"location":"examples/dataset_type_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing dataset types using the Gemini API:</p> <ul> <li>Creating a dataset type: The <code>DatasetType.create()</code> method is used to create a new dataset type with a name and additional information (description, version).</li> <li>Getting a dataset type: The <code>DatasetType.get_by_id()</code> method retrieves a dataset type by its unique ID. The <code>DatasetType.get()</code> method retrieves a dataset type by its name.</li> <li>Getting all dataset types: The <code>DatasetType.get_all()</code> method retrieves all dataset types in the database.</li> <li>Searching for dataset types: The <code>DatasetType.search()</code> method finds dataset types based on specified criteria, such as the name.</li> <li>Updating a dataset type: The <code>DatasetType.update()</code> method updates the attributes of an existing dataset type.</li> <li>Setting dataset type information: The <code>DatasetType.set_info()</code> method updates the <code>dataset_type_info</code> field with new data.</li> <li>Checking for existence: The <code>DatasetType.exists()</code> method verifies if a dataset type with the given name exists.</li> <li>Deleting a dataset type: The <code>DatasetType.delete()</code> method removes the dataset type from the database.</li> </ul>"},{"location":"examples/experiment_api/","title":"Experiment API Example","text":"<p>This example demonstrates how to use the Experiment API in the Gemini framework.</p>"},{"location":"examples/experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_api.py</code>.</p>"},{"location":"examples/experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\n\n# Create a new Experiment\nnew_experiment = Experiment.create(\n    experiment_name=\"Experiment Test 1\",\n    experiment_info={\"test\": \"test\"},\n    experiment_start_date=\"2023-10-01\",\n    experiment_end_date=\"2023-12-31\"\n)\nprint(f\"Created Experiment: {new_experiment}\")\n\n# Get Experiment by name\nexperiment = Experiment.get(\"Experiment Test 1\")\nprint(f\"Got Experiment: {experiment}\")\n\n# Get Experiment by ID\nexperiment_by_id = Experiment.get_by_id(new_experiment.id)\nprint(f\"Got Experiment by ID: {experiment_by_id}\")\n\n# Get all experiments\nall_experiments = Experiment.get_all()\nprint(f\"All Experiments:\")\nfor exp in all_experiments:\n    print(exp)\n\n# Search for experiments\nsearched_experiments = Experiment.search(experiment_name=\"Experiment Test 1\")\nlength_searched_experiments = len(searched_experiments)\nprint(f\"Found {length_searched_experiments} experiments with name 'Experiment Test 1'\")\n\n# Update the experiment\nexperiment = experiment.update(\n    experiment_info={\"test\": \"updated test\"},\n    experiment_start_date=\"2023-10-02\",\n    experiment_end_date=\"2023-12-30\"\n)\nprint(f\"Updated Experiment: {experiment}\")\n\n# Set experiment info\nexperiment.set_info(\n    experiment_info={\"test\": \"new test\"}\n)\nprint(f\"Set Experiment Info: {experiment.get_info()}\")\n\n# Check if the experiment exists\nexperiment_exists = Experiment.exists(experiment_name=\"Experiment Test 1\")\nprint(f\"Does Experiment exist? {experiment_exists}\")\n\n# Delete the experiment\nexperiment.delete()\nprint(f\"Deleted Experiment: {experiment}\")\n\n# Check if the experiment exists after deletion\nexperiment_exists_after_deletion = Experiment.exists(experiment_name=\"Experiment Test 1\")\nprint(f\"Does Experiment exist after deletion? {experiment_exists_after_deletion}\")\n</code></pre>"},{"location":"examples/experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing experiments using the Gemini API:</p> <ul> <li>Creating an experiment: The <code>Experiment.create()</code> method is used to create a new experiment with a name, additional information, start date, and end date.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name. The <code>Experiment.get_by_id()</code> method retrieves an experiment by its unique ID.</li> <li>Getting all experiments: The <code>Experiment.get_all()</code> method retrieves all experiments in the database.</li> <li>Searching for experiments: The <code>Experiment.search()</code> method finds experiments based on specified criteria, such as the name.</li> <li>Updating an experiment: The <code>Experiment.update()</code> method updates the attributes of an existing experiment.</li> <li>Setting experiment information: The <code>Experiment.set_info()</code> method updates the <code>experiment_info</code> field with new data.</li> <li>Checking for existence: The <code>Experiment.exists()</code> method verifies if an experiment with the given name exists.</li> <li>Deleting an experiment: The <code>Experiment.delete()</code> method removes the experiment from the database.</li> </ul>"},{"location":"examples/experiment_cultivars_api/","title":"Experiment Cultivars API Example","text":"<p>This example demonstrates how to associate and unassociate cultivars with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_cultivars_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_cultivars_api.py</code>.</p>"},{"location":"examples/experiment_cultivars_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.cultivar import Cultivar\n\n# Create a new cultivar for Experiment A\nnew_cultivar = Cultivar.create(\n    cultivar_accession=\"New Cultivar\",\n    cultivar_population=\"New Population\",\n    cultivar_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new cultivar\nexperiment_b.associate_cultivar(\n    cultivar_accession=new_cultivar.cultivar_accession,\n    cultivar_population=new_cultivar.cultivar_population\n)\n\n# Get Associated Cultivars\nassociated_cultivars = experiment_b.get_associated_cultivars()\nfor cultivar in associated_cultivars:\n    print(f\"Associated Cultivar: {cultivar}\")\n\n# Check if the new cultivar is associated with Experiment B\nis_associated = experiment_b.belongs_to_cultivar(\n    cultivar_accession=new_cultivar.cultivar_accession,\n    cultivar_population=new_cultivar.cultivar_population\n)\nprint(f\"Is New Cultivar associated with Experiment B? {is_associated}\")\n\n# Unassociate the new cultivar from Experiment B\nexperiment_b.unassociate_cultivar(\n    cultivar_accession=new_cultivar.cultivar_accession,\n    cultivar_population=new_cultivar.cultivar_population\n)\n\n# Check if the new cultivar is still associated with Experiment B\nis_associated = experiment_b.belongs_to_cultivar(\n    cultivar_accession=new_cultivar.cultivar_accession,\n    cultivar_population=new_cultivar.cultivar_population\n)\nprint(f\"Is New Cultivar still associated with Experiment B? {is_associated}\")\n\n# Create a new cultivar for Experiment B\nexperiment_cultivar = experiment_b.create_new_cultivar(\n    cultivar_accession=\"Experiment B Cultivar\",\n    cultivar_population=\"Experiment B Population\",\n    cultivar_info={\"test\": \"test\"}\n)\nprint(f\"Created New Cultivar: {experiment_cultivar}\")\n</code></pre>"},{"location":"examples/experiment_cultivars_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between cultivars and experiments:</p> <ul> <li>Creating a cultivar: A new cultivar is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a cultivar: The <code>associate_cultivar()</code> method associates the experiment with the created cultivar.</li> <li>Getting associated cultivars: The <code>get_associated_cultivars()</code> method retrieves a list of cultivars associated with the experiment.</li> <li>Checking association: The <code>belongs_to_cultivar()</code> method verifies if the experiment is associated with a specific cultivar.</li> <li>Unassociating from a cultivar: The <code>unassociate_cultivar()</code> method removes the association between the experiment and the cultivar.</li> <li>Verifying unassociation: The <code>belongs_to_cultivar()</code> method is used again to confirm that the experiment is no longer associated with the cultivar.</li> <li>Creating a new cultivar for an experiment: The <code>create_new_cultivar()</code> method creates a new cultivar and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_datasets_api/","title":"Experiment Datasets API Example","text":"<p>This example demonstrates how to associate and unassociate datasets with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_datasets_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_datasets_api.py</code>.</p>"},{"location":"examples/experiment_datasets_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.dataset import Dataset\n\n# Create a new dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"New Dataset\",\n    dataset_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset: {new_dataset}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new dataset\nexperiment_b.associate_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Associated New Dataset with Experiment B: {experiment_b}\")\n\n# Get Associated Datasets\nassociated_datasets = experiment_b.get_associated_datasets()\nfor dataset in associated_datasets:\n    print(f\"Associated Dataset: {dataset}\")\n\n# Check if the new dataset is associated with Experiment B\nis_associated = experiment_b.belongs_to_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Is New Dataset associated with Experiment B? {is_associated}\")\n\n# Unassociate the new dataset from Experiment B\nexperiment_b.unassociate_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Unassociated New Dataset from Experiment B: {experiment_b}\")\n\n# Check if the new dataset is still associated with Experiment B\nis_associated = experiment_b.belongs_to_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Is New Dataset still associated with Experiment B? {is_associated}\")\n\n# Create a new dataset for Experiment B\nexperiment_dataset = experiment_b.create_new_dataset(\n    dataset_name=\"Experiment B Dataset\",\n    dataset_info={\"test\": \"test\"}\n)\nprint(f\"Created New Dataset: {experiment_dataset}\")\n</code></pre>"},{"location":"examples/experiment_datasets_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between datasets and experiments:</p> <ul> <li>Creating a dataset: A new dataset is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a dataset: The <code>associate_dataset()</code> method associates the experiment with the created dataset.</li> <li>Getting associated datasets: The <code>get_associated_datasets()</code> method retrieves a list of datasets associated with the experiment.</li> <li>Checking association: The <code>belongs_to_dataset()</code> method verifies if the experiment is associated with a specific dataset.</li> <li>Unassociating from a dataset: The <code>unassociate_dataset()</code> method removes the association between the experiment and the dataset.</li> <li>Verifying unassociation: The <code>belongs_to_dataset()</code> method is used again to confirm that the experiment is no longer associated with the dataset.</li> <li>Creating a new dataset for an experiment: The <code>create_new_dataset()</code> method creates a new dataset and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_model_api/","title":"Experiment Model API Example","text":"<p>This example demonstrates how to associate and unassociate models with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_model_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_model_api.py</code>.</p>"},{"location":"examples/experiment_model_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.model import Model\n\n# Create a new model for Experiment A\nnew_model = Model.create(\n    model_name=\"New Model\",\n    model_url=\"gs://gemini-models/new_model.pkl\",\n    model_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Model: {new_model}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new model\nexperiment_b.associate_model(model_name=new_model.model_name)\nprint(f\"Associated New Model with Experiment B: {experiment_b}\")\n\n# Get Associated Models\nassociated_models = experiment_b.get_associated_models()\nfor model in associated_models:\n    print(f\"Associated Model: {model}\")\n\n# Check if the new model is associated with Experiment B\nis_associated = experiment_b.belongs_to_model(model_name=new_model.model_name)\nprint(f\"Is New Model associated with Experiment B? {is_associated}\")\n\n# Unassociate the new model from Experiment B\nexperiment_b.unassociate_model(model_name=new_model.model_name)\nprint(f\"Unassociated New Model from Experiment B: {experiment_b}\")\n\n# Check if the new model is still associated with Experiment B\nis_associated = experiment_b.belongs_to_model(model_name=new_model.model_name)\nprint(f\"Is New Model still associated with Experiment B? {is_associated}\")\n\n# Create a new model for Experiment B\nexperiment_model = experiment_b.create_new_model(\n    model_name=\"Experiment B Model\",\n    model_url=\"gs://gemini-models/experiment_b_model.pkl\",\n    model_info={\"test\": \"test\"}\n)\nprint(f\"Created New Model: {experiment_model}\")\n</code></pre>"},{"location":"examples/experiment_model_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between models and experiments:</p> <ul> <li>Creating a model: A new model is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a model: The <code>associate_model()</code> method associates the experiment with the created model.</li> <li>Getting associated models: The <code>get_associated_models()</code> method retrieves a list of models associated with the experiment.</li> <li>Checking association: The <code>belongs_to_model()</code> method verifies if the experiment is associated with a specific model.</li> <li>Unassociating from a model: The <code>unassociate_model()</code> method removes the association between the experiment and the model.</li> <li>Verifying unassociation: The <code>belongs_to_model()</code> method is used again to confirm that the experiment is no longer associated with the model.</li> <li>Creating a new model for an experiment: The <code>create_new_model()</code> method creates a new model and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_plots_api/","title":"Experiment Plots API Example","text":"<p>This example demonstrates how to associate and unassociate plots with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_plots_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_plots_api.py</code>.</p>"},{"location":"examples/experiment_plots_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.plot import Plot\n\n# Create a new plot for Experiment A\nnew_plot = Plot.create(\n    plot_number=1000,\n    plot_row_number=1001,\n    plot_column_number=1001,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Created New Plot: {new_plot}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new plot\nexperiment_b.associate_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Associated New Plot with Experiment B: {experiment_b}\")\n\n# Get Associated Plots\nassociated_plots = experiment_b.get_associated_plots()\nfor plot in associated_plots:\n    print(f\"Associated Plot: {plot}\")\n\n# Check if the new plot is associated with Experiment B\nis_associated = experiment_b.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Is New Plot associated with Experiment B? {is_associated}\")\n\n# Unassociate the new plot from Experiment B\nexperiment_b.unassociate_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Unassociated New Plot from Experiment B: {experiment_b}\")\n\n# Check if the new plot is still associated with Experiment B\nis_associated = experiment_b.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    site_name=new_plot.site_name\n)\nprint(f\"Is New Plot still associated with Experiment B? {is_associated}\")\n\n# Create a new plot for Experiment B\nexperiment_plot = experiment_b.create_new_plot(\n    plot_number=2000,\n    plot_row_number=2001,\n    plot_column_number=2001,\n    season_name=\"Season 2B\",\n    site_name=\"Site B2\"\n)\nprint(f\"Created New Plot: {experiment_plot}\")\n</code></pre>"},{"location":"examples/experiment_plots_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between plots and experiments:</p> <ul> <li>Creating a plot: A new plot is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a plot: The <code>associate_plot()</code> method associates the experiment with the created plot.</li> <li>Getting associated plots: The <code>get_associated_plots()</code> method retrieves a list of plots associated with the experiment.</li> <li>Checking association: The <code>belongs_to_plot()</code> method verifies if the experiment is associated with a specific plot.</li> <li>Unassociating from a plot: The <code>unassociate_plot()</code> method removes the association between the experiment and the plot.</li> <li>Verifying unassociation: The <code>belongs_to_plot()</code> method is used again to confirm that the experiment is no longer associated with the plot.</li> <li>Creating a new plot for an experiment: The <code>create_new_plot()</code> method creates a new plot and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_procedure_api/","title":"Experiment Procedure API Example","text":"<p>This example demonstrates how to associate and unassociate procedures with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_procedure_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_procedure_api.py</code>.</p>"},{"location":"examples/experiment_procedure_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.procedure import Procedure\n\n# Create a new procedure for Experiment A\nnew_procedure = Procedure.create(\n    procedure_name=\"New Procedure\",\n    procedure_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Procedure: {new_procedure}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new procedure\nexperiment_b.associate_procedure(procedure_name=new_procedure.procedure_name)\nprint(f\"Associated New Procedure with Experiment B: {experiment_b}\")\n\n# Get Associated Procedures\nassociated_procedures = experiment_b.get_associated_procedures()\nfor procedure in associated_procedures:\n    print(f\"Associated Procedure: {procedure}\")\n\n# Check if the new procedure is associated with Experiment B\nis_associated = experiment_b.belongs_to_procedure(procedure_name=new_procedure.procedure_name)\nprint(f\"Is New Procedure associated with Experiment B? {is_associated}\")\n\n# Unassociate the new procedure from Experiment B\nexperiment_b.unassociate_procedure(procedure_name=new_procedure.procedure_name)\nprint(f\"Unassociated New Procedure from Experiment B: {experiment_b}\")\n\n# Check if the new procedure is still associated with Experiment B\nis_associated = experiment_b.belongs_to_procedure(procedure_name=new_procedure.procedure_name)\nprint(f\"Is New Procedure still associated with Experiment B? {is_associated}\")\n\n# Create a new procedure for Experiment B\nexperiment_procedure = experiment_b.create_new_procedure(\n    procedure_name=\"Experiment B Procedure\",\n    procedure_info={\"test\": \"test\"}\n)\nprint(f\"Created New Procedure: {experiment_procedure}\")\n</code></pre>"},{"location":"examples/experiment_procedure_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between procedures and experiments:</p> <ul> <li>Creating a procedure: A new procedure is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a procedure: The <code>associate_procedure()</code> method associates the experiment with the created procedure.</li> <li>Getting associated procedures: The <code>get_associated_procedures()</code> method retrieves a list of procedures associated with the experiment.</li> <li>Checking association: The <code>belongs_to_procedure()</code> method verifies if the experiment is associated with a specific procedure.</li> <li>Unassociating from a procedure: The <code>unassociate_procedure()</code> method removes the association between the experiment and the procedure.</li> <li>Verifying unassociation: The <code>belongs_to_procedure()</code> method is used again to confirm that the experiment is no longer associated with the procedure.</li> <li>Creating a new procedure for an experiment: The <code>create_new_procedure()</code> method creates a new procedure and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_script_api/","title":"Experiment Script API Example","text":"<p>This example demonstrates how to associate and unassociate scripts with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_script_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_script_api.py</code>.</p>"},{"location":"examples/experiment_script_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.script import Script\n\n# Create a new script for Experiment A\nnew_script = Script.create(\n    script_name=\"New Script\",\n    script_url=\"gs://gemini-scripts/new_script.py\",\n    script_extension=\"py\",\n    script_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Script: {new_script}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new script\nexperiment_b.associate_script(script_name=new_script.script_name)\nprint(f\"Associated New Script with Experiment B: {experiment_b}\")\n\n# Get Associated Scripts\nassociated_scripts = experiment_b.get_associated_scripts()\nfor script in associated_scripts:\n    print(f\"Associated Script: {script}\")\n\n# Check if the new script is associated with Experiment B\nis_associated = experiment_b.belongs_to_script(script_name=new_script.script_name)\nprint(f\"Is New Script associated with Experiment B? {is_associated}\")\n\n# Unassociate the new script from Experiment B\nexperiment_b.unassociate_script(script_name=new_script.script_name)\nprint(f\"Unassociated New Script from Experiment B: {experiment_b}\")\n\n# Check if the new script is still associated with Experiment B\nis_associated = experiment_b.belongs_to_script(script_name=new_script.script_name)\nprint(f\"Is New Script still associated with Experiment B? {is_associated}\")\n\n# Create a new script for Experiment B\nexperiment_script = experiment_b.create_new_script(\n    script_name=\"Experiment B Script\",\n    script_url=\"gs://gemini-scripts/experiment_b_script.py\",\n    script_extension=\"py\",\n    script_info={\"test\": \"test\"}\n)\nprint(f\"Created New Script: {experiment_script}\")\n</code></pre>"},{"location":"examples/experiment_script_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between scripts and experiments:</p> <ul> <li>Creating a script: A new script is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a script: The <code>associate_script()</code> method associates the experiment with the created script.</li> <li>Getting associated scripts: The <code>get_associated_scripts()</code> method retrieves a list of scripts associated with the experiment.</li> <li>Checking association: The <code>belongs_to_script()</code> method verifies if the experiment is associated with a specific script.</li> <li>Unassociating from a script: The <code>unassociate_script()</code> method removes the association between the experiment and the script.</li> <li>Verifying unassociation: The <code>belongs_to_script()</code> method is used again to confirm that the experiment is no longer associated with the script.</li> <li>Creating a new script for an experiment: The <code>create_new_script()</code> method creates a new script and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_season_api/","title":"Experiment Season API Example","text":"<p>This example demonstrates how to associate and create seasons with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_season_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_season_api.py</code>.</p>"},{"location":"examples/experiment_season_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\n\n# Get Experiment A\nexperiment_a = Experiment.get(\"Experiment A\")\nprint(f\"Got Experiment A: {experiment_a}\")\n\n# Get Associated Seasons\nassociated_seasons = experiment_a.get_associated_seasons()\nfor season in associated_seasons:\n    print(f\"Associated Season: {season}\")\n\n# Create a new season for Experiment A\nnew_experiment_season = experiment_a.create_new_season(\n    season_name=\"Experiment A Season 1\",\n    season_info={\"test\": \"test\"},\n    season_start_date=\"2023-10-01\",\n    season_end_date=\"2023-12-31\"\n)\nprint(f\"Created New Season: {new_experiment_season}\")\n\n# Get Associated Seasons for Experiment A\nassociated_seasons = experiment_a.get_associated_seasons()\nfor season in associated_seasons:\n    print(f\"Associated Season: {season}\")\n</code></pre>"},{"location":"examples/experiment_season_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between seasons and experiments:</p> <ul> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment A in this case).</li> <li>Getting associated seasons: The <code>get_associated_seasons()</code> method retrieves a list of seasons associated with the experiment.</li> <li>Creating a new season for an experiment: The <code>create_new_season()</code> method creates a new season and automatically associates it with the experiment.</li> <li>Getting associated seasons after creation: The <code>get_associated_seasons()</code> method is used again to confirm that the new season is associated with the experiment.</li> </ul>"},{"location":"examples/experiment_sensor_api/","title":"Experiment Sensor API Example","text":"<p>This example demonstrates how to associate and unassociate sensors with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_sensor_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_sensor_api.py</code>.</p>"},{"location":"examples/experiment_sensor_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.sensor import Sensor\n\n# Create a new sensor for Experiment A\nnew_sensor = Sensor.create(\n    sensor_name=\"New Sensor\",\n    sensor_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor: {new_sensor}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new sensor\nexperiment_b.associate_sensor(sensor_name=new_sensor.sensor_name)\nprint(f\"Associated New Sensor with Experiment B: {experiment_b}\")\n\n# Get Associated Sensors\nassociated_sensors = experiment_b.get_associated_sensors()\nfor sensor in associated_sensors:\n    print(f\"Associated Sensor: {sensor}\")\n\n# Check if the new sensor is associated with Experiment B\nis_associated = experiment_b.belongs_to_sensor(sensor_name=new_sensor.sensor_name)\nprint(f\"Is New Sensor associated with Experiment B? {is_associated}\")\n\n# Unassociate the new sensor from Experiment B\nexperiment_b.unassociate_sensor(sensor_name=new_sensor.sensor_name)\nprint(f\"Unassociated New Sensor from Experiment B: {experiment_b}\")\n\n# Check if the new sensor is still associated with Experiment B\nis_associated = experiment_b.belongs_to_sensor(sensor_name=new_sensor.sensor_name)\nprint(f\"Is New Sensor still associated with Experiment B? {is_associated}\")\n\n# Create a new sensor for Experiment B\nexperiment_sensor = experiment_b.create_new_sensor(\n    sensor_name=\"Experiment B Sensor\",\n    sensor_info={\"test\": \"test\"}\n)\nprint(f\"Created New Sensor: {experiment_sensor}\")\n</code></pre>"},{"location":"examples/experiment_sensor_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between sensors and experiments:</p> <ul> <li>Creating a sensor: A new sensor is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a sensor: The <code>associate_sensor()</code> method associates the experiment with the created sensor.</li> <li>Getting associated sensors: The <code>get_associated_sensors()</code> method retrieves a list of sensors associated with the experiment.</li> <li>Checking association: The <code>belongs_to_sensor()</code> method verifies if the experiment is associated with a specific sensor.</li> <li>Unassociating from a sensor: The <code>unassociate_sensor()</code> method removes the association between the experiment and the sensor.</li> <li>Verifying unassociation: The <code>belongs_to_sensor()</code> method is used again to confirm that the experiment is no longer associated with the sensor.</li> <li>Creating a new sensor for an experiment: The <code>create_new_sensor()</code> method creates a new sensor and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_sensor_platforms_api/","title":"Experiment Sensor Platforms API Example","text":"<p>This example demonstrates how to associate and unassociate sensor platforms with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_sensor_platforms_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_sensor_platforms_api.py</code>.</p>"},{"location":"examples/experiment_sensor_platforms_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.sensor_platform import SensorPlatform\n\n# Create a new sensor platform for Experiment A\nnew_sensor_platform = SensorPlatform.create(\n    sensor_platform_name=\"New Sensor Platform\",\n    sensor_platform_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor Platform: {new_sensor_platform}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new sensor platform\nexperiment_b.associate_sensor_platform(sensor_platform_name=new_sensor_platform.sensor_platform_name)\nprint(f\"Associated New Sensor Platform with Experiment B: {experiment_b}\")\n\n# Get Associated Sensor Platforms\nassociated_sensor_platforms = experiment_b.get_associated_sensor_platforms()\nfor sensor_platform in associated_sensor_platforms:\n    print(f\"Associated Sensor Platform: {sensor_platform}\")\n\n# Check if the new sensor platform is associated with Experiment B\nis_associated = experiment_b.belongs_to_sensor_platform(sensor_platform_name=new_sensor_platform.sensor_platform_name)\nprint(f\"Is New Sensor Platform associated with Experiment B? {is_associated}\")\n\n# Unassociate the new sensor platform from Experiment B\nexperiment_b.unassociate_sensor_platform(sensor_platform_name=new_sensor_platform.sensor_platform_name)\nprint(f\"Unassociated New Sensor Platform from Experiment B: {experiment_b}\")\n\n# Check if the new sensor platform is still associated with Experiment B\nis_associated = experiment_b.belongs_to_sensor_platform(sensor_platform_name=new_sensor_platform.sensor_platform_name)\nprint(f\"Is New Sensor Platform still associated with Experiment B? {is_associated}\")\n\n# Create a new sensor platform for Experiment B\nexperiment_sensor_platform = experiment_b.create_new_sensor_platform(\n    sensor_platform_name=\"Experiment B Sensor Platform\",\n    sensor_platform_info={\"test\": \"test\"}\n)\nprint(f\"Created New Sensor Platform: {experiment_sensor_platform}\")\n</code></pre>"},{"location":"examples/experiment_sensor_platforms_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between sensor platforms and experiments:</p> <ul> <li>Creating a sensor platform: A new sensor platform is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a sensor platform: The <code>associate_sensor_platform()</code> method associates the experiment with the created sensor platform.</li> <li>Getting associated sensor platforms: The <code>get_associated_sensor_platforms()</code> method retrieves a list of sensor platforms associated with the experiment.</li> <li>Checking association: The <code>belongs_to_sensor_platform()</code> method verifies if the experiment is associated with a specific sensor platform.</li> <li>Unassociating from a sensor platform: The <code>unassociate_sensor_platform()</code> method removes the association between the experiment and the sensor platform.</li> <li>Verifying unassociation: The <code>belongs_to_sensor_platform()</code> method is used again to confirm that the experiment is no longer associated with the sensor platform.</li> <li>Creating a new sensor platform for an experiment: The <code>create_new_sensor_platform()</code> method creates a new sensor platform and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_sites_api/","title":"Experiment Sites API Example","text":"<p>This example demonstrates how to associate and unassociate sites with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_sites_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_sites_api.py</code>.</p>"},{"location":"examples/experiment_sites_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.site import Site\n\n# Create a new site for Experiment A\nnew_site = Site.create(\n    site_name=\"New Site\",\n    site_city=\"New City\",\n    site_state=\"New State\",\n    site_country=\"New Country\",\n    site_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Site: {new_site}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new site\nexperiment_b.associate_site(site_name=new_site.site_name)\nprint(f\"Associated New Site with Experiment B: {experiment_b}\")\n\n# Get Associated Sites\nassociated_sites = experiment_b.get_associated_sites()\nfor site in associated_sites:\n    print(f\"Associated Site: {site}\")\n\n# Check if the new site is associated with Experiment B\nis_associated = experiment_b.belongs_to_site(site_name=new_site.site_name)\nprint(f\"Is New Site associated with Experiment B? {is_associated}\")\n\n# Unassociate the new site from Experiment B\nexperiment_b.unassociate_site(site_name=new_site.site_name)\nprint(f\"Unassociated New Site from Experiment B: {experiment_b}\")\n\n# Check if the new site is still associated with Experiment B\nis_associated = experiment_b.belongs_to_site(site_name=new_site.site_name)\nprint(f\"Is New Site still associated with Experiment B? {is_associated}\")\n\n# Create a new site for Experiment B\nexperiment_site = experiment_b.create_new_site(\n    site_name=\"Experiment B Site\",\n    site_city=\"Experiment B City\",\n    site_state=\"Experiment B State\",\n    site_country=\"Experiment B Country\",\n    site_info={\"test\": \"test\"}\n)\nprint(f\"Created New Site: {experiment_site}\")\n</code></pre>"},{"location":"examples/experiment_sites_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between sites and experiments:</p> <ul> <li>Creating a site: A new site is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a site: The <code>associate_site()</code> method associates the experiment with the created site.</li> <li>Getting associated sites: The <code>get_associated_sites()</code> method retrieves a list of sites associated with the experiment.</li> <li>Checking association: The <code>belongs_to_site()</code> method verifies if the experiment is associated with a specific site.</li> <li>Unassociating from a site: The <code>unassociate_site()</code> method removes the association between the experiment and the site.</li> <li>Verifying unassociation: The <code>belongs_to_site()</code> method is used again to confirm that the experiment is no longer associated with the site.</li> <li>Creating a new site for an experiment: The <code>create_new_site()</code> method creates a new site and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/experiment_traits_api/","title":"Experiment Traits API Example","text":"<p>This example demonstrates how to associate and unassociate traits with experiments using the Gemini framework.</p>"},{"location":"examples/experiment_traits_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/experiment_traits_api.py</code>.</p>"},{"location":"examples/experiment_traits_api/#code","title":"Code","text":"<pre><code>from gemini.api.experiment import Experiment\nfrom gemini.api.trait import Trait\n\n# Create a new trait for Experiment A\nnew_trait = Trait.create(\n    trait_name=\"New Trait\",\n    trait_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Trait: {new_trait}\")\n\n# Get Experiment B\nexperiment_b = Experiment.get(\"Experiment B\")\nprint(f\"Got Experiment B: {experiment_b}\")\n\n# Associate Experiment B with the new trait\nexperiment_b.associate_trait(trait_name=new_trait.trait_name)\nprint(f\"Associated New Trait with Experiment B: {experiment_b}\")\n\n# Get Associated Traits\nassociated_traits = experiment_b.get_associated_traits()\nfor trait in associated_traits:\n    print(f\"Associated Trait: {trait}\")\n\n# Check if the new trait is associated with Experiment B\nis_associated = experiment_b.belongs_to_trait(trait_name=new_trait.trait_name)\nprint(f\"Is New Trait associated with Experiment B? {is_associated}\")\n\n# Unassociate the new trait from Experiment B\nexperiment_b.unassociate_trait(trait_name=new_trait.trait_name)\nprint(f\"Unassociated New Trait from Experiment B: {experiment_b}\")\n\n# Check if the new trait is still associated with Experiment B\nis_associated = experiment_b.belongs_to_trait(trait_name=new_trait.trait_name)\nprint(f\"Is New Trait still associated with Experiment B? {is_associated}\")\n\n# Create a new trait for Experiment B\nexperiment_trait = experiment_b.create_new_trait(\n    trait_name=\"Experiment B Trait\",\n    trait_info={\"test\": \"test\"}\n)\nprint(f\"Created New Trait: {experiment_trait}\")\n</code></pre>"},{"location":"examples/experiment_traits_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between traits and experiments:</p> <ul> <li>Creating a trait: A new trait is created and associated with Experiment A.</li> <li>Getting an experiment: The <code>Experiment.get()</code> method retrieves an experiment by its name (Experiment B in this case).</li> <li>Associating with a trait: The <code>associate_trait()</code> method associates the experiment with the created trait.</li> <li>Getting associated traits: The <code>get_associated_traits()</code> method retrieves a list of traits associated with the experiment.</li> <li>Checking association: The <code>belongs_to_trait()</code> method verifies if the experiment is associated with a specific trait.</li> <li>Unassociating from a trait: The <code>unassociate_trait()</code> method removes the association between the experiment and the trait.</li> <li>Verifying unassociation: The <code>belongs_to_trait()</code> method is used again to confirm that the experiment is no longer associated with the trait.</li> <li>Creating a new trait for an experiment: The <code>create_new_trait()</code> method creates a new trait and automatically associates it with the experiment.</li> </ul>"},{"location":"examples/model_api/","title":"Model API Example","text":"<p>This example demonstrates how to use the Model API in the Gemini framework.</p>"},{"location":"examples/model_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/model_api.py</code>.</p>"},{"location":"examples/model_api/#code","title":"Code","text":"<pre><code>from gemini.api.model import Model\n\n# Create a new model for Experiment A\nnew_model = Model.create(\n    model_name=\"Model A\",\n    model_url=\"https://example.com/model_a\",\n    model_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Model: {new_model}\")\n\n# Get Model by ID\nmodel_from_id = Model.get(new_model.id)\nprint(f\"Got Model from ID: {model_from_id}\")\n\n# Get Model by Name\nmodel_from_name = Model.get(model_name=\"Model A\")\nprint(f\"Got Model from Name: {model_from_name}\")\n\n# Get all models\nall_models = Model.get_all()\nfor model in all_models:\n    print(f\"Model: {model}\")\n\n# Search for models by name\nsearch_results = Model.search(model_name=\"Model A\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Model\nmodel_from_name.update(\n    model_url=\"https://example.com/updated_model_a\",\n    model_info={\"updated\": \"info\"}\n)\nprint(f\"Updated Model: {model_from_name}\")\n\n# Refresh Model\nmodel_from_name.refresh()\nprint(f\"Refreshed Model: {model_from_name}\")\n\n# Set Model Info\nmodel_from_name.set_info(\n    model_info={\"new\": \"info\"}\n)\nprint(f\"Set Model Info: {model_from_name.get_info()}\")\n\n# Check if Model Exists\nexists = Model.exists(model_name=\"Model A\")\nprint(f\"Does Model Exist? {exists}\")\n\n# Delete Model\nis_deleted = model_from_name.delete()\nprint(f\"Deleted Model: {is_deleted}\")\n\n# Check if Model Exists after Deletion\nexists = Model.exists(model_name=\"Model A\")\nprint(f\"Does Model Exist after Deletion? {exists}\")\n</code></pre>"},{"location":"examples/model_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing models using the Gemini API:</p> <ul> <li>Creating a model: The <code>Model.create()</code> method is used to create a new model with a name, URL, additional information, and associated experiment.</li> <li>Getting a model: The <code>Model.get()</code> method retrieves a model by its ID or name.</li> <li>Getting all models: The <code>Model.get_all()</code> method retrieves all models in the database.</li> <li>Searching for models: The <code>Model.search()</code> method finds models based on specified criteria, such as the name.</li> <li>Updating a model: The <code>Model.update()</code> method updates the attributes of an existing model.</li> <li>Refreshing a model: The <code>Model.refresh()</code> method updates the model object with the latest data from the database.</li> <li>Setting model information: The <code>Model.set_info()</code> method updates the <code>model_info</code> field with new data.</li> <li>Checking for existence: The <code>Model.exists()</code> method verifies if a model with the given name exists.</li> <li>Deleting a model: The <code>Model.delete()</code> method removes the model from the database.</li> </ul>"},{"location":"examples/model_dataset_api/","title":"Model Dataset API Example","text":"<p>This example demonstrates how to use the Model and Dataset APIs to associate datasets with models in the Gemini framework.</p>"},{"location":"examples/model_dataset_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/model_dataset_api.py</code>.</p>"},{"location":"examples/model_dataset_api/#code","title":"Code","text":"<pre><code>from gemini.api.model import Model\nfrom gemini.api.dataset import Dataset, GEMINIDatasetType\n\n# Create a new model for Experiment A\nnew_model = Model.create(\n    model_name=\"Model Test 1\",\n    model_url=\"https://example.com/model_test_1\",\n    model_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Model: {new_model}\")\n\n# Create a new Dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"Dataset Test 1\",\n    dataset_type=GEMINIDatasetType.Model,\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset: {new_dataset}\")\n\n# Create a new Dataset for New Model directly\nnew_model_dataset = new_model.create_new_dataset(\n    dataset_name=\"Model Test 1 Dataset\",\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset for New Model: {new_model_dataset}\")\n\n# Associate the new dataset with the new model\nnew_model.associate_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Associated New Dataset with New Model: {new_model}\")\n\n# Print the associated datasets\nassociated_datasets = new_model.get_associated_datasets()\nfor dataset in associated_datasets:\n    print(f\"Associated Dataset: {dataset}\")\n</code></pre>"},{"location":"examples/model_dataset_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between datasets and models:</p> <ul> <li>Creating a model: The <code>Model.create()</code> method is used to create a new model with a name, URL, additional information, and associated experiment.</li> <li>Creating a dataset: The <code>Dataset.create()</code> method is used to create a new dataset with a name, type, additional information, collection date, and associated experiment.</li> <li>Creating a dataset for a model: The <code>Model.create_new_dataset()</code> method is used to create a new dataset and automatically associate it with the model.</li> <li>Associating with a dataset: The <code>associate_dataset()</code> method associates the model with the created dataset.</li> <li>Getting associated datasets: The <code>get_associated_datasets()</code> method retrieves a list of datasets associated with the model.</li> </ul>"},{"location":"examples/model_experiment_api/","title":"Model Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with models using the Gemini framework.</p>"},{"location":"examples/model_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/model_experiment_api.py</code>.</p>"},{"location":"examples/model_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.model import Model\n\n# Create a new model for Experiment A\nnew_model = Model.create(\n    model_name=\"Model Test 1\",\n    model_url=\"https://example.com/model_test_1\",\n    model_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Model: {new_model}\")\n\n# Get associated experiments\nassociated_experiments = new_model.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the model with Experiment B\nnew_model.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Model with Experiment B\")\n\n# Check if the model is associated with Experiment B\nis_associated = new_model.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Model associated with Experiment B? {is_associated}\")\n\n# Unassociate the model from Experiment B\nnew_model.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Model from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_model.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Model still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/model_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and models:</p> <ul> <li>Creating a model: The <code>Model.create()</code> method is used to create a new model with a name, URL, additional information, and associated experiment.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the model.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the model with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the model is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the model and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the model is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/model_model_run_api/","title":"Model Model Run API Example","text":"<p>This example demonstrates how to use the Model and ModelRun APIs to associate model runs with models in the Gemini framework.</p>"},{"location":"examples/model_model_run_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/model_model_run_api.py</code>.</p>"},{"location":"examples/model_model_run_api/#code","title":"Code","text":"<pre><code>from gemini.api.model import Model\n\n# Get Model A\nmodel_a = Model.get(\"Model A\")\nprint(f\"Got Model A: {model_a}\")\n\n# Create a new model run for Model A\nnew_model_a_run = model_a.create_new_run(\n    model_run_info={\"test\": \"test\"}\n)\n\n# Get Associated Model Runs\nassociated_model_runs = model_a.get_associated_runs()\nfor model_run in associated_model_runs:\n    print(f\"Associated Model Run: {model_run}\")\n</code></pre>"},{"location":"examples/model_model_run_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between model runs and models:</p> <ul> <li>Getting a model: The <code>Model.get()</code> method retrieves a model by its name (Model A in this case).</li> <li>Creating a new model run: The <code>create_new_run()</code> method creates a new model run and automatically associates it with the model.</li> <li>Getting associated model runs: The <code>get_associated_runs()</code> method retrieves a list of model runs associated with the model.</li> </ul>"},{"location":"examples/model_run_api/","title":"Model Run API Example","text":"<p>This example demonstrates how to use the ModelRun API in the Gemini framework.</p>"},{"location":"examples/model_run_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/model_run_api.py</code>.</p>"},{"location":"examples/model_run_api/#code","title":"Code","text":"<pre><code>from gemini.api.model_run import ModelRun\nfrom gemini.api.model import Model\n\n# Create a new model run for Model A\nnew_model_run = ModelRun.create(\n    model_run_info={\"test\": \"test\"},\n    model_name=\"Model A\"\n)\nprint(f\"Created New Model Run: {new_model_run}\")\n\n# Get Model Run by ID\nmodel_run_b = ModelRun.get(new_model_run.id)\nprint(f\"Got Model Run B: {model_run_b}\")\n\n# Get Model Run by Model Name and Model Info\nmodel_run_b = ModelRun.get(\n    model_name=\"Model A\",\n    model_run_info={\"test\": \"test\"}\n)\nprint(f\"Got Model Run B: {model_run_b}\")\n\n# Get all model runs\nall_model_runs = ModelRun.get_all()\nprint(f\"All Model Runs: {all_model_runs}\")\n\n# Search for model runs by name\nsearch_results = ModelRun.search(model_name=\"Model A\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Model Run\nmodel_run_b.update(model_run_info={\"updated\": \"info\"})\nprint(f\"Updated Model Run B: {model_run_b}\")\n\n# Set Model Run Info\nmodel_run_b.set_info(\n    model_run_info={\"new\": \"info\"}\n)\nprint(f\"Set Model Run Info: {model_run_b.get_info()}\")\n\n# Refresh Model Run\nmodel_run_b.refresh()\nprint(f\"Refreshed Model Run B: {model_run_b}\")\n\n# Check if Model Run Exists\nexists = ModelRun.exists(\n    model_name=\"Model A\",\n    model_run_info={\"new\": \"info\"}\n)\nprint(f\"Does Model Run Exist? {exists}\")\n\n# Delete Model Run\nis_deleted = model_run_b.delete()\nprint(f\"Deleted Model Run B: {is_deleted}\")\n\n# Check if Model Run Exists after Deletion\nexists = ModelRun.exists(\n    model_name=\"Model A\",\n    model_run_info={\"new\": \"info\"}\n)\nprint(f\"Does Model Run Exist after Deletion? {exists}\")\n</code></pre>"},{"location":"examples/model_run_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing model runs using the Gemini API:</p> <ul> <li>Creating a model run: The <code>ModelRun.create()</code> method is used to create a new model run with additional information and associated model.</li> <li>Getting a model run: The <code>ModelRun.get()</code> method retrieves a model run by its ID or model name and model run info.</li> <li>Getting all model runs: The <code>ModelRun.get_all()</code> method retrieves all model runs in the database.</li> <li>Searching for model runs: The <code>ModelRun.search()</code> method finds model runs based on specified criteria, such as the model name.</li> <li>Updating a model run: The <code>ModelRun.update()</code> method updates the attributes of an existing model run.</li> <li>Setting model run information: The <code>ModelRun.set_info()</code> method updates the <code>model_run_info</code> field with new data.</li> <li>Refreshing a model run: The <code>ModelRun.refresh()</code> method updates the model run object with the latest data from the database.</li> <li>Checking for existence: The <code>ModelRun.exists()</code> method verifies if a model run with the given attributes exists.</li> <li>Deleting a model run: The <code>ModelRun.delete()</code> method removes the model run from the database.</li> </ul>"},{"location":"examples/model_run_model_api/","title":"Model Run Model API Example","text":"<p>This example demonstrates how to associate and unassociate models with model runs using the Gemini framework.</p>"},{"location":"examples/model_run_model_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/model_run_model_api.py</code>.</p>"},{"location":"examples/model_run_model_api/#code","title":"Code","text":"<pre><code>from gemini.api.model_run import ModelRun\nfrom gemini.api.model import Model\n\n# Create a new model run for Model A\nnew_model_run = ModelRun.create(\n    model_run_info={\"test\": \"test\"},\n    model_name=\"Model A\"\n)\nprint(f\"Created New Model Run: {new_model_run}\")\n\n# Create a new model for Experiment A\nnew_model = Model.create(\n    model_name=\"Model  X\",\n    model_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Model: {new_model}\")\n\n# Get associated model of the new model run\nassociated_model = new_model_run.get_associated_model()\nprint(f\"Associated Model: {associated_model}\")\n\n# Associate the new model run with the new model\nnew_model_run.associate_model(model_name=new_model.model_name)\nprint(f\"Associated New Model Run with New Model: {new_model_run}\")\n\n# Check if the new model run is associated with the new model\nis_associated = new_model_run.belongs_to_model(model_name=new_model.model_name)\nprint(f\"Is New Model Run associated with New Model? {is_associated}\")\n\n# Unassociate the new model run from the new model\nnew_model_run.unassociate_model()\nprint(f\"Unassociated New Model Run from New Model: {new_model_run}\")\n\n# Check if the new model run is still associated with the new model\nis_associated = new_model_run.belongs_to_model(model_name=new_model.model_name)\nprint(f\"Is New Model Run still associated with New Model? {is_associated}\")\n</code></pre>"},{"location":"examples/model_run_model_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between models and model runs:</p> <ul> <li>Creating a model run: The <code>ModelRun.create()</code> method is used to create a new model run with additional information and associated model.</li> <li>Creating a model: The <code>Model.create()</code> method is used to create a new model.</li> <li>Getting associated model: The <code>get_associated_model()</code> method retrieves the model associated with the model run.</li> <li>Associating with a model: The <code>associate_model()</code> method associates the model run with the created model.</li> <li>Checking association: The <code>belongs_to_model()</code> method verifies if the model run is associated with a specific model.</li> <li>Unassociating from a model: The <code>unassociate_model()</code> method removes the association between the model run and the model.</li> <li>Verifying unassociation: The <code>belongs_to_model()</code> method is used again to confirm that the model run is no longer associated with the model.</li> </ul>"},{"location":"examples/overview/","title":"API Examples Overview","text":"<p>This page provides an overview of the available API examples. Each example demonstrates how to use a specific API in the Gemini framework.</p>"},{"location":"examples/overview/#cultivar","title":"Cultivar","text":"<ul> <li>Cultivar API</li> <li>Cultivar Experiment API</li> <li>Cultivar Plot API</li> </ul>"},{"location":"examples/overview/#data-format","title":"Data Format","text":"<ul> <li>Data Format API</li> <li>Data Format Types API</li> </ul>"},{"location":"examples/overview/#data-type","title":"Data Type","text":"<ul> <li>Data Type API</li> </ul>"},{"location":"examples/overview/#dataset","title":"Dataset","text":"<ul> <li>Dataset API</li> <li>Dataset Experiment API</li> <li>Dataset Record API</li> <li>Dataset Record Files API</li> <li>Dataset Type API</li> </ul>"},{"location":"examples/overview/#experiment","title":"Experiment","text":"<ul> <li>Experiment API</li> <li>Experiment Cultivars API</li> <li>Experiment Datasets API</li> <li>Experiment Model API</li> <li>Experiment Plots API</li> <li>Experiment Procedure API</li> <li>Experiment Script API</li> <li>Experiment Season API</li> <li>Experiment Sensor API</li> <li>Experiment Sensor Platforms API</li> <li>Experiment Sites API</li> <li>Experiment Traits API</li> </ul>"},{"location":"examples/overview/#model","title":"Model","text":"<ul> <li>Model API</li> <li>Model Dataset API</li> <li>Model Experiment API</li> <li>Model Model Run API</li> <li>Model Run API</li> </ul>"},{"location":"examples/overview/#plant","title":"Plant","text":"<ul> <li>Plant API</li> <li>Plant Cultivar API</li> <li>Plant Plot API</li> </ul>"},{"location":"examples/overview/#plot","title":"Plot","text":"<ul> <li>Plot API</li> <li>Plot Cultivar API</li> <li>Plot Experiment API</li> <li>Plot Site API</li> </ul>"},{"location":"examples/overview/#procedure","title":"Procedure","text":"<ul> <li>Procedure API</li> <li>Procedure Dataset API</li> <li>Procedure Experiment API</li> <li>Procedure Procedure Run API</li> <li>Procedure Record API</li> <li>Procedure Record Files API</li> <li>Procedure Run API</li> </ul>"},{"location":"examples/overview/#script","title":"Script","text":"<ul> <li>Script API</li> <li>Script Dataset API</li> <li>Script Experiment API</li> <li>Script Record API</li> <li>Script Record Files API</li> <li>Script Run API</li> <li>Script Script Run API</li> </ul>"},{"location":"examples/overview/#sensor","title":"Sensor","text":"<ul> <li>Sensor API</li> <li>Sensor Dataset API</li> <li>Sensor Experiment API</li> <li>Sensor Platform API</li> <li>Sensor Platform Experiment API</li> <li>Sensor Platform Sensor API</li> <li>Sensor Record API</li> <li>Sensor Record Files API</li> <li>Sensor Type API</li> </ul>"},{"location":"examples/overview/#site","title":"Site","text":"<ul> <li>Site API</li> <li>Site Experiment API</li> <li>Site Plots API</li> </ul>"},{"location":"examples/overview/#trait","title":"Trait","text":"<ul> <li>Trait API</li> <li>Trait Dataset API</li> <li>Trait Experiment API</li> <li>Trait Level API</li> <li>Trait Record API</li> </ul>"},{"location":"examples/plant_api/","title":"Plant API Example","text":"<p>This example demonstrates how to use the Plant API in the Gemini framework.</p>"},{"location":"examples/plant_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/plant_api.py</code>.</p>"},{"location":"examples/plant_api/#code","title":"Code","text":"<pre><code>from gemini.api.plant import Plant\n\n# Create a new plant\nnew_plant = Plant.create(\n    plant_number=1000,\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1,\n    plant_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\",\n    cultivar_accession=\"Accession A1\",\n    cultivar_population=\"Population A\"\n)\nprint(f\"Created New Plant: {new_plant}\")\n\n# Get Plant by ID\nplant_by_id = Plant.get_by_id(new_plant.id)\nprint(f\"Got Plant by ID: {plant_by_id}\")\n\n# Get Plant\nplant = Plant.get(\n    plant_number=new_plant.plant_number,\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Got Plant: {plant}\")\n\n# Get all plants\nall_plants = Plant.get_all()\nprint(f\"All Plants:\")\nfor p in all_plants[:10]:  # Limit to first 10 plants for display\n    print(p)\n\n# Search for plants in Experiment A\nsearched_plants = Plant.search(experiment_name=\"Experiment A\")\nlength_searched_plants = len(searched_plants)\nprint(f\"Found {length_searched_plants} plants in Experiment A\")\n\n# Refresh the plant\nnew_plant.refresh()\nprint(f\"Refreshed Plant: {new_plant}\")\n\n# Update the plant\nnew_plant.update(\n    plant_number=2000,\n    plant_info={\"updated\": \"info\"},\n)\nprint(f\"Updated Plant: {new_plant}\")\n\n# Set Plant Info\nnew_plant.set_info(plant_info={\"new\": \"info\"})\nprint(f\"Set Plant Info: {new_plant.get_info()}\")\n\n# Check if the plant exists\nexists = Plant.exists(\n    plant_number=new_plant.plant_number,\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Does the plant exist? {exists}\")\n\n# Delete the plant\nis_deleted = new_plant.delete()\nprint(f\"Deleted Plant: {is_deleted}\")\n\n# Check if the plant was deleted\nexists_after_deletion = Plant.exists(\n    plant_number=2000,\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Does the plant exist after deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/plant_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing plants using the Gemini API:</p> <ul> <li>Creating a plant: The <code>Plant.create()</code> method is used to create a new plant with a plant number, plot information, additional information, and associated experiment, season, site, and cultivar.</li> <li>Getting a plant: The <code>Plant.get_by_id()</code> method retrieves a plant by its unique ID. The <code>Plant.get()</code> method retrieves a plant by its plant number, plot information, and associated experiment, season, and site.</li> <li>Getting all plants: The <code>Plant.get_all()</code> method retrieves all plants in the database.</li> <li>Searching for plants: The <code>Plant.search()</code> method finds plants based on specified criteria, such as the experiment name.</li> <li>Refreshing a plant: The <code>Plant.refresh()</code> method updates the plant object with the latest data from the database.</li> <li>Updating a plant: The <code>Plant.update()</code> method updates the attributes of an existing plant.</li> <li>Setting plant information: The <code>Plant.set_info()</code> method updates the <code>plant_info</code> field with new data.</li> <li>Checking for existence: The <code>Plant.exists()</code> method verifies if a plant with the given attributes exists.</li> <li>Deleting a plant: The <code>Plant.delete()</code> method removes the plant from the database.</li> </ul>"},{"location":"examples/plant_cultivar_api/","title":"Plant Cultivar API Example","text":"<p>This example demonstrates how to associate and unassociate cultivars with plants using the Gemini framework.</p>"},{"location":"examples/plant_cultivar_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/plant_cultivar_api.py</code>.</p>"},{"location":"examples/plant_cultivar_api/#code","title":"Code","text":"<pre><code>from gemini.api.plant import Plant\nfrom gemini.api.cultivar import Cultivar\n\n# Create a new Plant\nnew_plant = Plant.create(\n    plant_number=4444,\n    plant_info={\n        \"test\": \"test\"\n    }\n)\nprint(f\"Created New Plant: {new_plant}\")\n\n# Create a new Cultivar\nnew_cultivar = Cultivar.create(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\",\n    cultivar_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Cultivar: {new_cultivar}\")\n\n# Associate the plant with the cultivar\nnew_plant.associate_cultivar(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\"\n)\nprint(f\"Associated Plant with Cultivar: {new_plant}\")\n\n# Check if the plant is associated with the cultivar\nis_associated_cultivar = new_plant.belongs_to_cultivar(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\"\n)\nprint(f\"Is Plant associated with Cultivar: {is_associated_cultivar}\")\n\n# Unassociate the plant from the cultivar\nnew_plant.unassociate_cultivar()\nprint(f\"Unassociated Plant from Cultivar: {new_plant}\")\n\n# Check if the plant is unassociated from the cultivar\nis_unassociated_cultivar = new_plant.belongs_to_cultivar(\n    cultivar_population=\"Cultivar Test 1\",\n    cultivar_accession=\"Accession A\"\n)\nprint(f\"Is Plant associated with cultivar: {is_unassociated_cultivar}\")\n</code></pre>"},{"location":"examples/plant_cultivar_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between cultivars and plants:</p> <ul> <li>Creating a plant: The <code>Plant.create()</code> method is used to create a new plant with a plant number and additional information.</li> <li>Creating a cultivar: The <code>Cultivar.create()</code> method is used to create a new cultivar with a population, accession, additional information, and associated experiment.</li> <li>Associating with a cultivar: The <code>associate_cultivar()</code> method associates the plant with the created cultivar.</li> <li>Checking association: The <code>belongs_to_cultivar()</code> method verifies if the plant is associated with a specific cultivar.</li> <li>Unassociating from a cultivar: The <code>unassociate_cultivar()</code> method removes the association between the plant and the cultivar.</li> <li>Verifying unassociation: The <code>belongs_to_cultivar()</code> method is used again to confirm that the plant is no longer associated with the cultivar.</li> </ul>"},{"location":"examples/plant_plot_api/","title":"Plant Plot API Example","text":"<p>This example demonstrates how to associate and unassociate plots with plants using the Gemini framework.</p>"},{"location":"examples/plant_plot_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/plant_plot_api.py</code>.</p>"},{"location":"examples/plant_plot_api/#code","title":"Code","text":"<pre><code>from gemini.api.plant import Plant\nfrom gemini.api.plot import Plot\n\nnew_plant = Plant.create(\n    plant_number=7777,\n    plant_info={\n        \"test\": \"test\"\n    },\n)\nprint(f\"Created New Plant: {new_plant}\")\n\n# Create a new Plot\nnew_plot = Plot.create(\n    plot_number=1000,\n    plot_row_number=1,\n    plot_column_number=1,\n    plot_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\",\n    cultivar_accession=\"Accession A1\",\n    cultivar_population=\"Population A\"\n)\nprint(f\"Created New Plot: {new_plot}\")\n\n# Associate the plant with the plot\nnew_plant.associate_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Associated Plant with Plot: {new_plant}\")\n\n# Check if the plant is associated with the plot\nis_associated_plot = new_plant.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Is Plant associated with Plot: {is_associated_plot}\")\n\n# Unassociate the plant from the plot\nnew_plant.unassociate_plot()\nprint(f\"Unassociated Plant from Plot: {new_plant}\")\n\n# Check if the plant is unassociated from the plot\nis_unassociated_plot = new_plant.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Is Plant unassociated from Plot: {is_unassociated_plot}\")\n</code></pre>"},{"location":"examples/plant_plot_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between plots and plants:</p> <ul> <li>Creating a plant: The <code>Plant.create()</code> method is used to create a new plant with a plant number and additional information.</li> <li>Creating a plot: The <code>Plot.create()</code> method is used to create a new plot with plot information, additional information, and associated experiment, season, site, and cultivar.</li> <li>Associating with a plot: The <code>associate_plot()</code> method associates the plant with the created plot.</li> <li>Checking association: The <code>belongs_to_plot()</code> method verifies if the plant is associated with a specific plot.</li> <li>Unassociating from a plot: The <code>unassociate_plot()</code> method removes the association between the plant and the plot.</li> <li>Verifying unassociation: The <code>belongs_to_plot()</code> method is used again to confirm that the plant is no longer associated with the plot.</li> </ul>"},{"location":"examples/plot_api/","title":"Plot API Example","text":"<p>This example demonstrates how to use the Plot API in the Gemini framework.</p>"},{"location":"examples/plot_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/plot_api.py</code>.</p>"},{"location":"examples/plot_api/#code","title":"Code","text":"<pre><code>from gemini.api.plot import Plot\n\n# Create a new plot\nnew_plot = Plot.create(\n    plot_number=1000,\n    plot_row_number=1,\n    plot_column_number=1,\n    plot_info={\"test\": \"test\"},\n    plot_geometry_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\",\n    cultivar_accession=\"Accession A1\",\n    cultivar_population=\"Population A\"\n)\nprint(f\"Created New Plot: {new_plot}\")\n\n# Get Plot by ID\nplot_by_id = Plot.get_by_id(new_plot.id)\nprint(f\"Got Plot by ID: {plot_by_id}\")\n\n# Get Plot\nplot = Plot.get(\n    plot_number=new_plot.plot_number,\n    plot_row_number=1,\n    plot_column_number=1,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Got Plot: {plot}\")\n\n# Get all plots\nall_plots = Plot.get_all()\nprint(f\"All Plots:\")\nfor p in all_plots[:10]:  # Limit to first 10 plots for display\n    print(p)\n\n# Search for plots in Experiment A\nsearched_plots = Plot.search(experiment_name=\"Experiment A\")\nlength_searched_plots = len(searched_plots)\nprint(f\"Found {length_searched_plots} plots in Experiment A\")\n\n# Refresh the plot\nplot.refresh()\nprint(f\"Refreshed Plot: {plot}\")\n\n# Update the plot\nplot.update(\n    plot_number=2000,\n    plot_row_number=2,\n    plot_column_number=2,\n    plot_info={\"updated\": \"info\"},\n    plot_geometry_info={\"updated\": \"info\"}\n)\nprint(f\"Updated Plot: {plot}\")\n\n# Set Plot Info\nplot.set_info(plot_info={\"new\": \"info\"})\nprint(f\"Set Plot Info: {plot.get_info()}\")\n\n# Check if the plot exists\nexists = Plot.exists(\n    plot_number=2000,\n    plot_row_number=2,\n    plot_column_number=2,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Plot exists: {exists}\")\n\n# Delete the created plot\nis_deleted = new_plot.delete()\nprint(f\"Deleted Plot: {is_deleted}\")\n\n# Check if the plot exists after deletion\nexists_after_deletion = Plot.exists(\n    plot_number=2000,\n    plot_row_number=2,\n    plot_column_number=2,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Plot exists after deletion: {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/plot_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing plots using the Gemini API:</p> <ul> <li>Creating a plot: The <code>Plot.create()</code> method is used to create a new plot with a plot number, row number, column number, additional information, geometry information, and associated experiment, season, site, and cultivar.</li> <li>Getting a plot: The <code>Plot.get_by_id()</code> method retrieves a plot by its unique ID. The <code>Plot.get()</code> method retrieves a plot by its plot number, row number, column number, and associated experiment, season, and site.</li> <li>Getting all plots: The <code>Plot.get_all()</code> method retrieves all plots in the database.</li> <li>Searching for plots: The <code>Plot.search()</code> method finds plots based on specified criteria, such as the experiment name.</li> <li>Refreshing a plot: The <code>Plot.refresh()</code> method updates the plot object with the latest data from the database.</li> <li>Updating a plot: The <code>Plot.update()</code> method updates the attributes of an existing plot.</li> <li>Setting plot information: The <code>Plot.set_info()</code> method updates the <code>plot_info</code> field with new data.</li> <li>Checking for existence: The <code>Plot.exists()</code> method verifies if a plot with the given attributes exists.</li> <li>Deleting a plot: The <code>Plot.delete()</code> method removes the plot from the database.</li> </ul>"},{"location":"examples/plot_cultivar_api/","title":"Plot Cultivar API Example","text":"<p>This example demonstrates how to associate and unassociate cultivars with plots using the Gemini framework.</p>"},{"location":"examples/plot_cultivar_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/plot_cultivar_api.py</code>.</p>"},{"location":"examples/plot_cultivar_api/#code","title":"Code","text":"<pre><code>from gemini.api.plot import Plot\nfrom gemini.api.cultivar import Cultivar\n\ntry:\n    # Create a new Plot for Experiment A\n    new_plot = Plot.create(\n        plot_number=2000,\n        plot_row_number=101,\n        plot_column_number=101,\n        experiment_name=\"Experiment A\",\n        season_name=\"Season 1A\",\n        site_name=\"Site A1\",\n        plot_info={\"test\": \"test\"},\n    )\n    print(f\"Created Plot: {new_plot}\")\n\n    # Create a new Cultivar for Experiment A\n    new_cultivar = Cultivar.create(\n        cultivar_population=\"Cultivar Test 1\",\n        cultivar_accession=\"Accession A\",\n        cultivar_info={\"test\": \"test\"},\n        experiment_name=\"Experiment A\"\n    )\n    print(f\"Created Cultivar: {new_cultivar}\")\n\n    # Associate the plot with the cultivar\n    new_plot.associate_cultivar(\n        cultivar_population=\"Cultivar Test 1\",\n        cultivar_accession=\"Accession A\"\n    )\n    print(f\"Associated Plot with Cultivar: {new_plot}\")\n\n    # Check if the plot is associated with the cultivar\n    is_associated_cultivar = new_plot.belongs_to_cultivar(\n        cultivar_population=\"Cultivar Test 1\",\n        cultivar_accession=\"Accession A\"\n    )\n    print(f\"Is Plot associated with Cultivar: {is_associated_cultivar}\")\n\n    # Unassociate the plot from the cultivar\n    new_plot.unassociate_cultivar(\n        cultivar_population=\"Cultivar Test 1\",\n        cultivar_accession=\"Accession A\"\n    )\n    print(f\"Unassociated Plot from Cultivar: {new_plot}\")\n\n    # Check if the plot is unassociated from the cultivar\n    is_unassociated_cultivar = new_plot.belongs_to_cultivar(\n        cultivar_population=\"Cultivar Test 1\",\n        cultivar_accession=\"Accession A\"\n    )\n    print(f\"Is Plot unassociated from Cultivar: {is_unassociated_cultivar}\")\n\n\nfinally:\n    # Clean up: Delete the created plot and cultivar\n    if new_plot:\n        new_plot.delete()\n        print(f\"Deleted Plot: {new_plot}\")\n\n    if new_cultivar:\n        new_cultivar.delete()\n        print(f\"Deleted Cultivar: {new_cultivar}\")\n</code></pre>"},{"location":"examples/plot_cultivar_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between cultivars and plots:</p> <ul> <li>Creating a plot: The <code>Plot.create()</code> method is used to create a new plot with plot information, additional information, and associated experiment, season, and site.</li> <li>Creating a cultivar: The <code>Cultivar.create()</code> method is used to create a new cultivar with a population, accession, additional information, and associated experiment.</li> <li>Associating with a cultivar: The <code>associate_cultivar()</code> method associates the plot with the created cultivar.</li> <li>Checking association: The <code>belongs_to_cultivar()</code> method verifies if the plot is associated with a specific cultivar.</li> <li>Unassociating from a cultivar: The <code>unassociate_cultivar()</code> method removes the association between the plot and the cultivar.</li> <li>Verifying unassociation: The <code>belongs_to_cultivar()</code> method is used again to confirm that the plot is no longer associated with the cultivar.</li> <li>Cleaning up: The <code>delete()</code> method is used to delete the created plot and cultivar.</li> </ul>"},{"location":"examples/plot_experiment_api/","title":"Plot Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with plots using the Gemini framework.</p>"},{"location":"examples/plot_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/plot_experiment_api.py</code>.</p>"},{"location":"examples/plot_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.plot import Plot\nfrom gemini.api.experiment import Experiment\n\ntry:\n    # Create a new Plot for Experiment A\n    new_plot = Plot.create(\n        plot_number=1000,\n        plot_row_number=101,\n        plot_column_number=101,\n        experiment_name=\"Experiment A\",\n        season_name=\"Season 1A\",\n        site_name=\"Site A1\",\n        plot_info={\"test\": \"test\"},\n    )\n    print(f\"Created Plot: {new_plot}\")\n\n    # Get current Experiment\n    current_experiment = new_plot.get_associated_experiment()\n    print(f\"Current Experiment: {current_experiment}\")\n\n    # Get current Season\n    current_season = new_plot.get_associated_season()\n    print(f\"Current Season: {current_season}\")\n\n    # Create a new experiment Experiment X\n    new_experiment = Experiment.create(\n        experiment_name=\"Experiment X\",\n        experiment_info={\"test\": \"test\"},\n        experiment_end_date=\"2024-12-31\",\n        experiment_start_date=\"2024-01-01\",\n    )\n    print(f\"Created New Experiment: {new_experiment}\")\n\n    # For this experiment create a new season\n    new_season = new_experiment.create_new_season(\n        season_name=\"Season X\",\n        season_info={\"test\": \"test\"},\n        season_start_date=\"2024-01-01\",\n        season_end_date=\"2024-12-31\",\n    )\n    print(f\"Created New Season: {new_season}\")\n\n    # For the new plot, associate it with the new experiment and season\n    new_plot.associate_experiment(experiment_name=\"Experiment X\")\n    new_plot.associate_season(season_name=\"Season X\", experiment_name=\"Experiment X\")\n\n    # Check if the plot is associated with the new experiment and season\n    is_associated_experiment = new_plot.belongs_to_experiment(\"Experiment X\")\n    is_associated_season = new_plot.belongs_to_season(\"Season X\", \"Experiment X\")\n\n    print(f\"Is Plot associated with Experiment X: {is_associated_experiment}\")\n    print(f\"Is Plot associated with Season X: {is_associated_season}\")\n\n    # Now unassociate the plot from the new experiment and season\n    new_plot.unassociate_experiment()\n    new_plot.unassociate_season()\n\n    # Check if the plot is unassociated from the new experiment and season\n    is_unassociated_experiment = new_plot.belongs_to_experiment(\"Experiment X\")\n    is_unassociated_season = new_plot.belongs_to_season(\"Season X\", \"Experiment X\")\n    print(f\"Is Plot unassociated from Experiment X: {is_unassociated_experiment}\")\n    print(f\"Is Plot unassociated from Season X: {is_unassociated_season}\")\n\nfinally:\n    delete_plot = new_plot.delete()\n    print(f\"Deleted Plot: {delete_plot}\")\n</code></pre>"},{"location":"examples/plot_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and plots:</p> <ul> <li>Creating a plot: The <code>Plot.create()</code> method is used to create a new plot with plot information, additional information, and associated experiment, season, and site.</li> <li>Getting associated experiment and season: The <code>get_associated_experiment()</code> and <code>get_associated_season()</code> methods retrieve the associated experiment and season for the plot.</li> <li>Creating a new experiment and season: The <code>Experiment.create()</code> and <code>Experiment.create_new_season()</code> methods are used to create a new experiment and season.</li> <li>Associating with a new experiment and season: The <code>associate_experiment()</code> and <code>associate_season()</code> methods associate the plot with the new experiment and season.</li> <li>Checking association: The <code>belongs_to_experiment()</code> and <code>belongs_to_season()</code> methods verify if the plot is associated with the new experiment and season.</li> <li>Unassociating from the new experiment and season: The <code>unassociate_experiment()</code> and <code>unassociate_season()</code> methods remove the association between the plot and the new experiment and season.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> and <code>belongs_to_season()</code> methods are used again to confirm that the plot is no longer associated with the new experiment and season.</li> <li>Cleaning up: The <code>delete()</code> method is used to delete the created plot.</li> </ul>"},{"location":"examples/procedure_api/","title":"Procedure API Example","text":"<p>This example demonstrates how to use the Procedure API in the Gemini framework.</p>"},{"location":"examples/procedure_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_api.py</code>.</p>"},{"location":"examples/procedure_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure import Procedure\n\n# Create a new procedure\nprocedure = Procedure.create(\n    procedure_name=\"Procedure Test 1\",\n    procedure_info={\"test\": \"test\"},\n)\nprint(f\"Created Procedure: {procedure}\")\n\n# Get Procedure with procedure_name\nprocedure = Procedure.get(\n    procedure_name=procedure.procedure_name,\n)\nprint(f\"Got Procedure: {procedure}\")\n\n# Get Procedure by ID\nprocedure_by_id = Procedure.get_by_id(procedure.id)\nprint(f\"Got Procedure by ID: {procedure_by_id}\")\n\n# Get all procedures\nall_procedures = Procedure.get_all()\nprint(f\"All Procedures:\")\nfor proc in all_procedures:\n    print(proc)\n\n# Search for procedures\nsearched_procedures = Procedure.search(procedure_name=\"Procedure Test 1\")\nlength_searched_procedures = len(searched_procedures)\nprint(f\"Found {length_searched_procedures} procedures with procedure_name 'Procedure Test 1'\")\n\n\n# Refresh the procedure\nprocedure.refresh()\nprint(f\"Refreshed Procedure: {procedure}\")\n\n# Update the procedure\nprocedure.update(\n    procedure_info={\"test\": \"test_updated\"},\n)\nprint(f\"Updated Procedure: {procedure}\")\n\n# Set Procedure Info\nprocedure.set_info(\n    procedure_info={\"test\": \"test_set\"},\n)\nprint(f\"Set Procedure Info: {procedure.get_info()}\")\n\n# Check if procedure exists before deletion\nexists = Procedure.exists(\n    procedure_name=\"Procedure Test 1\",\n)\nprint(f\"Procedure exists: {exists}\")\n\n# Delete the created procedure\nis_deleted = procedure.delete()\nprint(f\"Deleted Procedure: {is_deleted}\")\n\n# Check if procedure exists after deletion\nexists_after_deletion = Procedure.exists(\n    procedure_name=\"Procedure Test 1\",\n)\nprint(f\"Procedure exists after deletion: {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/procedure_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing procedures using the Gemini API:</p> <ul> <li>Creating a procedure: The <code>Procedure.create()</code> method is used to create a new procedure with a name and additional information.</li> <li>Getting a procedure: The <code>Procedure.get()</code> method retrieves a procedure by its name. The <code>Procedure.get_by_id()</code> method retrieves a procedure by its unique ID.</li> <li>Getting all procedures: The <code>Procedure.get_all()</code> method retrieves all procedures in the database.</li> <li>Searching for procedures: The <code>Procedure.search()</code> method finds procedures based on specified criteria, such as the name.</li> <li>Refreshing a procedure: The <code>Procedure.refresh()</code> method updates the procedure object with the latest data from the database.</li> <li>Updating a procedure: The <code>Procedure.update()</code> method updates the attributes of an existing procedure.</li> <li>Setting procedure information: The <code>Procedure.set_info()</code> method updates the <code>procedure_info</code> field with new data.</li> <li>Checking for existence: The <code>Procedure.exists()</code> method verifies if a procedure with the given name exists.</li> <li>Deleting a procedure: The <code>Procedure.delete()</code> method removes the procedure from the database.</li> </ul>"},{"location":"examples/procedure_dataset_api/","title":"Procedure Dataset API Example","text":"<p>This example demonstrates how to use the Procedure and Dataset APIs to associate datasets with procedures in the Gemini framework.</p>"},{"location":"examples/procedure_dataset_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_dataset_api.py</code>.</p>"},{"location":"examples/procedure_dataset_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure import Procedure\nfrom gemini.api.dataset import Dataset, GEMINIDatasetType\n\n# Create a new procedure for Experiment A\nnew_procedure = Procedure.create(\n    procedure_name=\"Procedure Test 1\",\n    procedure_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Procedure: {new_procedure}\")\n\n# Create a new Dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"Dataset Test 1\",\n    dataset_type=GEMINIDatasetType.Procedure,\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset: {new_dataset}\")\n\n# Create a new Dataset for New Procedure directly\nnew_procedure_dataset = new_procedure.create_new_dataset(\n    dataset_name=\"Procedure Test 1 Dataset\",\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset for New Procedure: {new_procedure_dataset}\")\n\n# Associate the new dataset with the new procedure\nnew_procedure.associate_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Associated New Dataset with New Procedure: {new_procedure}\")\n\n# Print the associated datasets\nassociated_datasets = new_procedure.get_associated_datasets()\nfor dataset in associated_datasets:\n    print(f\"Associated Dataset: {dataset}\")\n</code></pre>"},{"location":"examples/procedure_dataset_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between datasets and procedures:</p> <ul> <li>Creating a procedure: The <code>Procedure.create()</code> method is used to create a new procedure with a name and additional information.</li> <li>Creating a dataset: The <code>Dataset.create()</code> method is used to create a new dataset with a name, type, additional information, collection date, and associated experiment.</li> <li>Creating a dataset for a procedure: The <code>Procedure.create_new_dataset()</code> method is used to create a new dataset and automatically associate it with the procedure.</li> <li>Associating with a dataset: The <code>associate_dataset()</code> method associates the procedure with the created dataset.</li> <li>Getting associated datasets: The <code>get_associated_datasets()</code> method retrieves a list of datasets associated with the procedure.</li> </ul>"},{"location":"examples/procedure_experiment_api/","title":"Procedure Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with procedures using the Gemini framework.</p>"},{"location":"examples/procedure_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_experiment_api.py</code>.</p>"},{"location":"examples/procedure_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure import Procedure\n\n# Create a new procedure for Experiment A\nnew_procedure = Procedure.create(\n    procedure_name=\"Procedure Test 1\",\n    procedure_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Procedure: {new_procedure}\")\n\n# Get associated experiments\nassociated_experiments = new_procedure.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the procedure with Experiment B\nnew_procedure.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Procedure with Experiment B\")\n\n# Check if the procedure is associated with Experiment B\nis_associated = new_procedure.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Procedure associated with Experiment B? {is_associated}\")\n\n# Unassociate the procedure from Experiment B\nnew_procedure.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Procedure from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_procedure.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Procedure still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/procedure_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and procedures:</p> <ul> <li>Creating a procedure: The <code>Procedure.create()</code> method is used to create a new procedure with a name and additional information.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the procedure.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the procedure with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the procedure is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the procedure and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the procedure is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/procedure_procedure_run_api/","title":"Procedure Procedure Run API Example","text":"<p>This example demonstrates how to associate and create procedure runs with procedures using the Gemini framework.</p>"},{"location":"examples/procedure_procedure_run_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_procedure_run_api.py</code>.</p>"},{"location":"examples/procedure_procedure_run_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure import Procedure\n\n# Get Procedure A\nprocedure_a = Procedure.get(\"Procedure A\")\nprint(f\"Got Procedure A: {procedure_a}\")\n\n# Create a new procedure run for Procedure A\nnew_procedure_a_run = procedure_a.create_new_run(\n    procedure_run_info={\"test\": \"test\"}\n)\nprint(f\"Created New Procedure Run: {new_procedure_a_run}\")\n\n# Get Associated Procedure Runs\nassociated_procedure_runs = procedure_a.get_associated_runs()\nfor procedure_run in associated_procedure_runs:\n    print(f\"Associated Procedure Run: {procedure_run}\")\n</code></pre>"},{"location":"examples/procedure_procedure_run_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between procedure runs and procedures:</p> <ul> <li>Getting a procedure: The <code>Procedure.get()</code> method retrieves a procedure by its name (Procedure A in this case).</li> <li>Creating a new procedure run: The <code>create_new_run()</code> method creates a new procedure run and automatically associates it with the procedure.</li> <li>Getting associated procedure runs: The <code>get_associated_runs()</code> method retrieves a list of procedure runs associated with the procedure.</li> </ul>"},{"location":"examples/procedure_record_api/","title":"Procedure Record API Example","text":"<p>This example demonstrates how to use the ProcedureRecord API in the Gemini framework.</p>"},{"location":"examples/procedure_record_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_record_api.py</code>.</p>"},{"location":"examples/procedure_record_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure_record import ProcedureRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\n\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Create a new Procedure Record for Procedure A, with Experiment A, Site A1 and Season 1A\nnew_procedure_record = ProcedureRecord.create(\n    timestamp=timestamp,\n    collection_date=timestamp.date(),\n    procedure_name=\"Procedure A\",\n    dataset_name=\"Procedure A Dataset\",\n    procedure_data={\"key\": \"value\"},\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    record_info={\"test\": \"test\"},\n    insert_on_create=True\n)\nprint(f\"Created Procedure Record: {new_procedure_record}\")\n\n# Get Procedure Record by ID\nprocedure_record_by_id = ProcedureRecord.get_by_id(new_procedure_record.id)\nprint(f\"Procedure Record by ID: {procedure_record_by_id}\")\n\n# Get Procedure Record\nprocedure_record_by_name = ProcedureRecord.get(\n    timestamp=new_procedure_record.timestamp,\n    procedure_name=\"Procedure A\",\n    dataset_name=\"Procedure A Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Procedure Record by Name: {procedure_record_by_name}\")\n\n# Get all Procedure Records limit by 10\nprocedure_records = ProcedureRecord.get_all(limit=10)\nprint(f\"Procedure Records (limit 10):\")\nfor record in procedure_records:\n    print(record)\n\n# Search Procedure Records\nsearched_records = ProcedureRecord.search(\n    experiment_name=\"Experiment A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\nprint(f\"Found {len(searched_records)} records in Experiment A:\")\n\n# Update the newly created Procedure Record\nupdated_record = new_procedure_record.update(\n    procedure_data={\"key\": \"new_value\"},\n    record_info={\"test\": \"test_updated\"}\n)\nprint(f\"Updated Procedure Record: {updated_record}\")\n\n# Set Procedure Record Info\nupdated_record.set_info(\n    record_info={\"test\": \"test_set_info\"}\n)\nprint(f\"Procedure Record Info set: {updated_record.get_info()}\")\n\n# Check if Procedure Record exists\nexists = ProcedureRecord.exists(\n    timestamp=new_procedure_record.timestamp,\n    procedure_name=\"Procedure A\",\n    dataset_name=\"Procedure A Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Does Procedure Record exist? {exists}\")\n\n# Delete Procedure Record\nis_deleted = updated_record.delete()\nprint(f\"Procedure Record deleted: {is_deleted}\")\n\n# Check if Procedure Record exists after deletion\nexists = ProcedureRecord.exists(\n    timestamp=new_procedure_record.timestamp,\n    procedure_name=\"Procedure A\",\n    dataset_name=\"Procedure A Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Does Procedure Record exist after deletion? {exists}\")\n</code></pre>"},{"location":"examples/procedure_record_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing procedure records using the Gemini API:</p> <ul> <li>Creating a procedure record: The <code>ProcedureRecord.create()</code> method is used to create a new procedure record with a timestamp, collection date, associated procedure, dataset, additional data, and associated experiment, site, and season.</li> <li>Getting a procedure record: The <code>ProcedureRecord.get_by_id()</code> method retrieves a procedure record by its unique ID. The <code>ProcedureRecord.get()</code> method retrieves a procedure record by its timestamp, procedure name, dataset name, and associated experiment, site, and season.</li> <li>Getting all procedure records: The <code>ProcedureRecord.get_all()</code> method retrieves all procedure records, with an optional limit.</li> <li>Searching for procedure records: The <code>ProcedureRecord.search()</code> method finds procedure records based on specified criteria, such as the experiment name.</li> <li>Updating a procedure record: The <code>ProcedureRecord.update()</code> method updates the attributes of an existing procedure record.</li> <li>Setting procedure record information: The <code>ProcedureRecord.set_info()</code> method updates the <code>record_info</code> field with new data.</li> <li>Checking for existence: The <code>ProcedureRecord.exists()</code> method verifies if a procedure record with the given attributes exists.</li> <li>Deleting a procedure record: The <code>ProcedureRecord.delete()</code> method removes the procedure record from the database.</li> </ul>"},{"location":"examples/procedure_record_files_api/","title":"Procedure Record Files API Example","text":"<p>This example demonstrates how to use the ProcedureRecord API to associate files with procedure records in the Gemini framework.</p>"},{"location":"examples/procedure_record_files_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_record_files_api.py</code>.</p>"},{"location":"examples/procedure_record_files_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure_record import ProcedureRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport os\n\n# Create Timestamp\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Get Sample Image Folder\nscript_folder = os.path.dirname(os.path.abspath(__file__))\nsample_image_folder = os.path.join(script_folder, \"sample_images\")\nsample_image_files = [\n    os.path.join(sample_image_folder, f) for f in os.listdir(sample_image_folder)\n    if os.path.isfile(os.path.join(sample_image_folder, f))\n]\nprint(f\"Sample Image Files: {sample_image_files}\")\n\n# Creating Records to add to ProcedureRecord\nrecords_to_add = []\nfor image_file in sample_image_files:\n    timestamp = timestamp + timedelta(minutes=randint(1, 60))  # Increment timestamp for each file\n    collection_date = timestamp.date()  # Use the date part of the timestamp\n    record = ProcedureRecord.create(\n        timestamp=timestamp,\n        collection_date=collection_date,\n        procedure_name=\"Procedure A\",\n        dataset_name=\"Procedure A Images Dataset\",\n        procedure_data={\"key\": \"value\"},\n        experiment_name=\"Experiment A\",\n        site_name=\"Site A1\",\n        season_name=\"Season 1A\",\n        record_file=image_file,\n        record_info={\"test\": \"test\"},\n        insert_on_create=False\n    )\n    records_to_add.append(record)\n\nProcedureRecord.insert(records_to_add)\n\n# Search the Procedure Records\nsearched_records = ProcedureRecord.search(\n    collection_date=timestamp.date(),\n    dataset_name=\"Procedure A Images Dataset\",\n    procedure_name=\"Procedure A\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\n# Print the searched records\nprint(f\"Found {len(searched_records)} records in Procedure A, Experiment A, Site A1, Season 1A:\")\nfor record in searched_records:\n    print(record)\n</code></pre>"},{"location":"examples/procedure_record_files_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to associate files with procedure records using the Gemini API:</p> <ul> <li>Creating procedure records with files: The <code>ProcedureRecord.create()</code> method is used to create new procedure records, each associated with a file from the <code>sample_images</code> directory. The <code>insert_on_create</code> parameter is set to <code>False</code> to allow batch insertion.</li> <li>Inserting procedure records: The <code>ProcedureRecord.insert()</code> method is used to efficiently insert multiple procedure records into the database.</li> <li>Searching for procedure records: The <code>ProcedureRecord.search()</code> method is used to find procedure records based on specified criteria.</li> </ul>"},{"location":"examples/procedure_run_api/","title":"Procedure Run API Example","text":"<p>This example demonstrates how to use the ProcedureRun API in the Gemini framework.</p>"},{"location":"examples/procedure_run_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_run_api.py</code>.</p>"},{"location":"examples/procedure_run_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure_run import ProcedureRun\n\n# Create a new procedure run\nnew_procedure_run = ProcedureRun.create(\n    procedure_run_info={\"test\": \"test\"}\n)\nprint(f\"Created Procedure Run: {new_procedure_run}\")\n\n# Get ProcedureRun with procedure_run_info\nprocedure_run = ProcedureRun.get(\n    procedure_run_info=new_procedure_run.procedure_run_info\n)\nprint(f\"Got Procedure Run: {procedure_run}\")\n\n# Get ProcedureRun by ID\nprocedure_run_by_id = ProcedureRun.get_by_id(new_procedure_run.id)\nprint(f\"Got Procedure Run by ID: {procedure_run_by_id}\")\n\n# Get all procedure runs\nall_procedure_runs = ProcedureRun.get_all()\nprint(f\"All Procedure Runs:\")\nfor proc_run in all_procedure_runs[:10]:\n    print(proc_run)\n\n# Search for procedure runs\nsearched_procedure_runs = ProcedureRun.search(\n    procedure_run_info={\"test\": \"test\"}\n)\nlength_searched_procedure_runs = len(searched_procedure_runs)\nprint(f\"Found {length_searched_procedure_runs} procedure runs with procedure_run_info 'test': 'test'\")\n\n# Refresh the procedure run\nprocedure_run.refresh()\nprint(f\"Refreshed Procedure Run: {procedure_run}\")\n\n# Update the procedure run\nprocedure_run.update(\n    procedure_run_info={\"test\": \"test_updated\"}\n)\nprint(f\"Updated Procedure Run: {procedure_run}\")\n\n# Set Procedure Run Info\nprocedure_run.set_info(\n    procedure_run_info={\"test\": \"test_set\"}\n)\nprint(f\"Set Procedure Run Info: {procedure_run.get_info()}\")\n\n# Check if procedure run exists before deletion\nexists = ProcedureRun.exists(\n    procedure_run_info={\"test\": \"test\"}\n)\nprint(f\"Procedure Run exists: {exists}\")\n\n# Delete the created procedure run\nis_deleted = new_procedure_run.delete()\nprint(f\"Deleted Procedure Run: {is_deleted}\")\n\n# Check if procedure run exists after deletion\nexists = ProcedureRun.exists(\n    procedure_run_info={\"test\": \"test\"}\n)\nprint(f\"Procedure Run exists after deletion: {exists}\")\n</code></pre>"},{"location":"examples/procedure_run_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing procedure runs using the Gemini API:</p> <ul> <li>Creating a procedure run: The <code>ProcedureRun.create()</code> method is used to create a new procedure run with additional information.</li> <li>Getting a procedure run: The <code>ProcedureRun.get()</code> method retrieves a procedure run by its additional information. The <code>ProcedureRun.get_by_id()</code> method retrieves a procedure run by its unique ID.</li> <li>Getting all procedure runs: The <code>ProcedureRun.get_all()</code> method retrieves all procedure runs in the database.</li> <li>Searching for procedure runs: The <code>ProcedureRun.search()</code> method finds procedure runs based on specified criteria, such as the additional information.</li> <li>Refreshing a procedure run: The <code>ProcedureRun.refresh()</code> method updates the procedure run object with the latest data from the database.</li> <li>Updating a procedure run: The <code>ProcedureRun.update()</code> method updates the attributes of an existing procedure run.</li> <li>Setting procedure run information: The <code>ProcedureRun.set_info()</code> method updates the <code>procedure_run_info</code> field with new data.</li> <li>Checking for existence: The <code>ProcedureRun.exists()</code> method verifies if a procedure run with the given attributes exists.</li> <li>Deleting a procedure run: The <code>ProcedureRun.delete()</code> method removes the procedure run from the database.</li> </ul>"},{"location":"examples/procedure_run_procedure_api/","title":"Procedure Run Procedure API Example","text":"<p>This example demonstrates how to associate and unassociate procedures with procedure runs using the Gemini framework.</p>"},{"location":"examples/procedure_run_procedure_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/procedure_run_procedure_api.py</code>.</p>"},{"location":"examples/procedure_run_procedure_api/#code","title":"Code","text":"<pre><code>from gemini.api.procedure import Procedure\nfrom gemini.api.procedure_run import ProcedureRun\n\n# Create a new procedure run for Procedure A\nnew_procedure_run = ProcedureRun.create(\n    procedure_run_info={\"test\": \"test\"},\n    procedure_name=\"Procedure A\"\n)\nprint(f\"Created New Procedure Run: {new_procedure_run}\")\n\n# Create a new procedure for Experiment A\nnew_procedure = Procedure.create(\n    procedure_name=\"Procedure X\",\n    procedure_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Procedure: {new_procedure}\")\n\n# Get associated procedure of the new procedure run\nassociated_procedure = new_procedure_run.get_associated_procedure()\nprint(f\"Associated Procedure: {associated_procedure}\")\n\n# Associate the new procedure run with the new procedure\nnew_procedure_run.associate_procedure(procedure_name=new_procedure.procedure_name)\nprint(f\"Associated New Procedure Run with New Procedure: {new_procedure_run}\")\n\n# Check if the new procedure run is associated with the new procedure\nis_associated = new_procedure_run.belongs_to_procedure(procedure_name=new_procedure.procedure_name)\nprint(f\"Is New Procedure Run associated with New Procedure? {is_associated}\")\n\n# Unassociate the new procedure run from the new procedure\nnew_procedure_run.unassociate_procedure()\nprint(f\"Unassociated New Procedure Run from New Procedure: {new_procedure_run}\")\n\n# Check if the new procedure run is still associated with the new procedure\nis_associated = new_procedure_run.belongs_to_procedure(procedure_name=new_procedure.procedure_name)\nprint(f\"Is New Procedure Run still associated with New Procedure? {is_associated}\")\n</code></pre>"},{"location":"examples/procedure_run_procedure_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between procedures and procedure runs:</p> <ul> <li>Creating a procedure run: The <code>ProcedureRun.create()</code> method is used to create a new procedure run with additional information and associated procedure.</li> <li>Creating a procedure: The <code>Procedure.create()</code> method is used to create a new procedure.</li> <li>Getting associated procedure: The <code>get_associated_procedure()</code> method retrieves the procedure associated with the procedure run.</li> <li>Associating with a procedure: The <code>associate_procedure()</code> method associates the procedure run with the created procedure.</li> <li>Checking association: The <code>belongs_to_procedure()</code> method verifies if the procedure run is associated with a specific procedure.</li> <li>Unassociating from a procedure: The <code>unassociate_procedure()</code> method removes the association between the procedure run and the procedure.</li> <li>Verifying unassociation: The <code>belongs_to_procedure()</code> method is used again to confirm that the procedure run is no longer associated with the procedure.</li> </ul>"},{"location":"examples/script_api/","title":"Script API Example","text":"<p>This example demonstrates how to use the Script API in the Gemini framework.</p>"},{"location":"examples/script_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_api.py</code>.</p>"},{"location":"examples/script_api/#code","title":"Code","text":"<pre><code>from gemini.api.script import Script\n\n# Create a new script for Experiment A\nnew_script = Script.create(\n    script_name=\"Script Test 1\",\n    script_url=\"https://example.com/script_test_1\",\n    script_extension=\"py\",\n    script_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Script: {new_script}\")\n\n# Get Script by ID\nscript_from_id = Script.get(new_script.id)\nprint(f\"Got Script from ID: {script_from_id}\")\n\n# Get Script by Name\nscript_from_name = Script.get(script_name=\"Script Test 1\")\nprint(f\"Got Script from Name: {script_from_name}\")\n\n# Get all scripts\nall_scripts = Script.get_all()\nfor script in all_scripts:\n    print(f\"Script: {script}\")\n\n# Search for scripts by name\nsearch_results = Script.search(script_name=\"Script Test 1\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Script\nscript_from_name.update(\n    script_url=\"https://example.com/updated_script_test_1\",\n    script_info={\"updated\": \"info\"}\n)\nprint(f\"Updated Script: {script_from_name}\")\n\n# Refresh Script\nscript_from_name.refresh()\nprint(f\"Refreshed Script: {script_from_name}\")\n\n# Set Script Info\nscript_from_name.set_info(\n    script_info={\"new\": \"info\"}\n)\nprint(f\"Set Script Info: {script_from_name.get_info()}\")\n\n# Check if Script Exists\nexists = Script.exists(script_name=\"Script Test 1\")\nprint(f\"Does Script Exist? {exists}\")\n\n# Delete Script\nis_deleted = script_from_name.delete()\nprint(f\"Deleted Script: {is_deleted}\")\n\n# Check if Script Exists after Deletion\nexists_after_deletion = Script.exists(script_name=\"Script Test 1\")\nprint(f\"Does Script Exist after Deletion? {exists_after_deletion}\")\n\n# Delete Script\nis_deleted = new_script.delete()\nprint(f\"Deleted Script: {is_deleted}\")\n\n# Check if Script Exists after Deletion\nexists_after_deletion = Script.exists(script_name=\"Script Test 1\")\nprint(f\"Does Script Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/script_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing scripts using the Gemini API:</p> <ul> <li>Creating a script: The <code>Script.create()</code> method is used to create a new script with a name, URL, extension, additional information, and associated experiment.</li> <li>Getting a script: The <code>Script.get()</code> method retrieves a script by its ID or name.</li> <li>Getting all scripts: The <code>Script.get_all()</code> method retrieves all scripts in the database.</li> <li>Searching for scripts: The <code>Script.search()</code> method finds scripts based on specified criteria, such as the name.</li> <li>Updating a script: The <code>Script.update()</code> method updates the attributes of an existing script.</li> <li>Refreshing a script: The <code>Script.refresh()</code> method updates the script object with the latest data from the database.</li> <li>Setting script information: The <code>Script.set_info()</code> method updates the <code>script_info</code> field with new data.</li> <li>Checking for existence: The <code>Script.exists()</code> method verifies if a script with the given name exists.</li> <li>Deleting a script: The <code>Script.delete()</code> method removes the script from the database.</li> </ul>"},{"location":"examples/script_dataset_api/","title":"Script Dataset API Example","text":"<p>This example demonstrates how to use the Script and Dataset APIs to associate datasets with scripts in the Gemini framework.</p>"},{"location":"examples/script_dataset_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_dataset_api.py</code>.</p>"},{"location":"examples/script_dataset_api/#code","title":"Code","text":"<pre><code>from gemini.api.script import Script\nfrom gemini.api.dataset import Dataset, GEMINIDatasetType\n\n# Create a new script for Experiment A\nnew_script = Script.create(\n    script_name=\"Script Test 1\",\n    script_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Script: {new_script}\")\n\n# Create a new Dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"Dataset Test X\",\n    dataset_type=GEMINIDatasetType.Script,\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset: {new_dataset}\")\n\n# Create a new Dataset for New Script directly\nnew_script_dataset = new_script.create_new_dataset(\n    dataset_name=\"Script Test 1 Dataset\",\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset for New Script: {new_script_dataset}\")\n\n# Associate the new dataset with the new script\nnew_script.associate_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Associated New Dataset with New Script: {new_script}\")\n\n# Print the associated datasets\nassociated_datasets = new_script.get_associated_datasets()\nfor dataset in associated_datasets:\n    print(f\"Associated Dataset: {dataset}\")\n</code></pre>"},{"location":"examples/script_dataset_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between datasets and scripts:</p> <ul> <li>Creating a script: The <code>Script.create()</code> method is used to create a new script with a name, additional information, and associated experiment.</li> <li>Creating a dataset: The <code>Dataset.create()</code> method is used to create a new dataset with a name, type, additional information, collection date, and associated experiment.</li> <li>Creating a dataset for a script: The <code>Script.create_new_dataset()</code> method is used to create a new dataset and automatically associate it with the script.</li> <li>Associating with a dataset: The <code>associate_dataset()</code> method associates the script with the created dataset.</li> <li>Getting associated datasets: The <code>get_associated_datasets()</code> method retrieves a list of datasets associated with the script.</li> </ul>"},{"location":"examples/script_experiment_api/","title":"Script Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with scripts using the Gemini framework.</p>"},{"location":"examples/script_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_experiment_api.py</code>.</p>"},{"location":"examples/script_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.script import Script\n\n# Create a new script for Experiment A\nnew_script = Script.create(\n    script_name=\"Script Test 1\",\n    script_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Script: {new_script}\")\n\n# Get associated experiments\nassociated_experiments = new_script.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the script with Experiment B\nnew_script.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Script with Experiment B\")\n\n# Check if the script is associated with Experiment B\nis_associated = new_script.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Script associated with Experiment B? {is_associated}\")\n\n# Unassociate the script from Experiment B\nnew_script.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Script from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_script.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Script still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/script_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and scripts:</p> <ul> <li>Creating a script: The <code>Script.create()</code> method is used to create a new script with a name, additional information, and associated experiment.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the script.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the script with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the script is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the script and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the script is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/script_record_api/","title":"Script Record API Example","text":"<p>This example demonstrates how to use the ScriptRecord API in the Gemini framework.</p>"},{"location":"examples/script_record_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_record_api.py</code>.</p>"},{"location":"examples/script_record_api/#code","title":"Code","text":"<pre><code>from gemini.api.script import ScriptRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\n\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Create a new Script Record for Script A, with Experiment A, Site A1 and Season 1A\nnew_script_record = ScriptRecord.create(\n    timestamp=timestamp,\n    collection_date=timestamp.date(),\n    script_name=\"Script A\",\n    dataset_name=\"Script A Dataset\",\n    script_data={\"key\": \"value\"},\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    record_info={\"test\": \"test\"},\n    insert_on_create=True\n)\nprint(f\"Created Script Record: {new_script_record}\")\n\n# Get Script Record by ID\nscript_record_by_id = ScriptRecord.get_by_id(new_script_record.id)\nprint(f\"Script Record by ID: {script_record_by_id}\")\n\n# Get Script Record\nscript_record_by_name = ScriptRecord.get(\n    timestamp=new_script_record.timestamp,\n    script_name=\"Script A\",\n    dataset_name=\"Script A Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Script Record by Name: {script_record_by_name}\")\n\n# Get all Script Records limit by 10\nscript_records = ScriptRecord.get_all(limit=10)\nprint(f\"Script Records (limit 10):\")\nfor record in script_records:\n    print(record)\n\n# Search Script Records\nsearched_records = ScriptRecord.search(\n    experiment_name=\"Experiment A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\nprint(f\"Found {len(searched_records)} records in Experiment A:\")\n\n# Update the newly created Script Record\nupdated_record = new_script_record.update(\n    script_data={\"key\": \"new_value\"},\n    record_info={\"test\": \"test_updated\"}\n)\nprint(f\"Updated Script Record: {updated_record}\")\n\n# Set Script Record Info\nupdated_record.set_info(\n    record_info={\"test\": \"test_set_info\"}\n)\nprint(f\"Script Record Info set: {updated_record.get_info()}\")\n\n# Check if Script Record exists\nexists = ScriptRecord.exists(\n    timestamp=new_script_record.timestamp,\n    script_name=\"Script A\",\n    dataset_name=\"Script A Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Does Script Record Exist? {exists}\")\n\n# Delete Script Record\nis_deleted = updated_record.delete()\nprint(f\"Deleted Script Record: {is_deleted}\")\n\n# Check if Script Record exists after deletion\nexists_after_deletion = ScriptRecord.exists(\n    timestamp=new_script_record.timestamp,\n    script_name=\"Script A\",\n    dataset_name=\"Script A Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nprint(f\"Does Script Record Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/script_record_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing script records using the Gemini API:</p> <ul> <li>Creating a script record: The <code>ScriptRecord.create()</code> method is used to create a new script record with a timestamp, collection date, associated script, dataset, additional data, and associated experiment, site, and season.</li> <li>Getting a script record: The <code>ScriptRecord.get_by_id()</code> method retrieves a script record by its unique ID. The <code>ScriptRecord.get()</code> method retrieves a script record by its timestamp, script name, dataset name, and associated experiment, site, and season.</li> <li>Getting all script records: The <code>ScriptRecord.get_all()</code> method retrieves all script records, with an optional limit.</li> <li>Searching for script records: The <code>ScriptRecord.search()</code> method finds script records based on specified criteria, such as the experiment name.</li> <li>Updating a script record: The <code>ScriptRecord.update()</code> method updates the attributes of an existing script record.</li> <li>Setting script record information: The <code>ScriptRecord.set_info()</code> method updates the <code>record_info</code> field with new data.</li> <li>Checking for existence: The <code>ScriptRecord.exists()</code> method verifies if a script record with the given attributes exists.</li> <li>Deleting a script record: The <code>ScriptRecord.delete()</code> method removes the script record from the database.</li> </ul>"},{"location":"examples/script_record_files_api/","title":"Script Record Files API Example","text":"<p>This example demonstrates how to use the ScriptRecord API to associate files with script records in the Gemini framework.</p>"},{"location":"examples/script_record_files_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_record_files_api.py</code>.</p>"},{"location":"examples/script_record_files_api/#code","title":"Code","text":"<pre><code>from gemini.api.script_record import ScriptRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\nimport os\n\n# Create Timestamp\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Get Sample Image Folder\nscript_folder = os.path.dirname(os.path.abspath(__file__))\nsample_image_folder = os.path.join(script_folder, \"sample_images\")\nsample_image_files = [\n    os.path.join(sample_image_folder, f) for f in os.listdir(sample_image_folder)\n    if os.path.isfile(os.path.join(sample_image_folder, f))\n]\nprint(f\"Sample Image Files: {sample_image_files}\")\n\n# Creating Records to add to ScriptRecord\nrecords_to_add = []\nfor image_file in sample_image_files:\n    timestamp = timestamp + timedelta(minutes=randint(1, 60))  # Increment timestamp for each file\n    collection_date = timestamp.date()  # Use the date part of the timestamp\n    record = ScriptRecord.create(\n        timestamp=timestamp,\n        collection_date=collection_date,\n        script_name=\"Script A\",\n        dataset_name=\"Script A Images Dataset\",\n        script_data={\"key\": \"value\"},\n        experiment_name=\"Experiment A\",\n        site_name=\"Site A1\",\n        season_name=\"Season 1A\",\n        record_file=image_file,\n        record_info={\"test\": \"test\"},\n        insert_on_create=False\n    )\n    records_to_add.append(record)\n\nScriptRecord.insert(records_to_add)\n\n# Search the Script Records\nsearched_records = ScriptRecord.search(\n    collection_date=timestamp.date(),\n    script_name=\"Script A\",\n    dataset_name=\"Script A Images Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\n\n# Print the searched records\nprint(f\"Found {len(searched_records)} records in Script A, Experiment A, Site A1, Season 1A:\")\nfor record in searched_records:\n    print(record)\n</code></pre>"},{"location":"examples/script_record_files_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to associate files with script records using the Gemini API:</p> <ul> <li>Creating script records with files: The <code>ScriptRecord.create()</code> method is used to create new script records, each associated with a file from the <code>sample_images</code> directory. The <code>insert_on_create</code> parameter is set to <code>False</code> to allow batch insertion.</li> <li>Inserting script records: The <code>ScriptRecord.insert()</code> method is used to efficiently insert multiple script records into the database.</li> <li>Searching for script records: The <code>ScriptRecord.search()</code> method is used to find script records based on specified criteria.</li> </ul>"},{"location":"examples/script_run_api/","title":"Script Run API Example","text":"<p>This example demonstrates how to use the ScriptRun API in the Gemini framework.</p>"},{"location":"examples/script_run_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_run_api.py</code>.</p>"},{"location":"examples/script_run_api/#code","title":"Code","text":"<pre><code>from gemini.api.script import Script\nfrom gemini.api.script_run import ScriptRun\n\n# Get script by name\nscript = Script.get(\"Script A\")\nprint(f\"Got Script: {script}\")\n\n# Create a new script run\nscript_run = ScriptRun.create(\n    script_run_info={\"test\": \"test\"},\n    script_name=script.script_name\n)\nprint(f\"Created Script Run: {script_run}\")\n\n# Get ScriptRun with script_run_info that does exist\nscript_run = ScriptRun.get(\n    script_run_info={\"test\": \"test\"},\n    script_name=script.script_name\n)\nprint(f\"Got ScriptRun: {script_run}\")\n\n# Get ScriptRun by ID\nscript_run = ScriptRun.get_by_id(script_run.id)\nprint(f\"Got ScriptRun by ID: {script_run}\")\n\n# Get all script runs\nall_script_runs = ScriptRun.get_all()\nprint(f\"All Script Runs:\")\nfor script_run in all_script_runs:\n    print(script_run)\n\n# Search for script runs\nsearched_script_runs = ScriptRun.search(script_name=script.script_name)\nlength_searched_script_runs = len(searched_script_runs)\nprint(f\"Found {length_searched_script_runs} script runs\")\n\n# Refresh the script run\nscript_run.refresh()\nprint(f\"Refreshed Script Run: {script_run}\")\n\n# Update the script run\nscript_run.update(\n    script_run_info={\"test\": \"test_updated\"},\n)\nprint(f\"Updated Script Run: {script_run}\")\n\n# Set ScriptRun Info\nscript_run.set_info(\n    script_run_info={\"test\": \"test_set\"},\n)\nprint(f\"Set ScriptRun Info: {script_run.get_info()}\")\n\n# Check if ScriptRun exists before deletion\nexists = ScriptRun.exists(script_run_info={\"test\": \"test_set\"}, script_name=script.script_name)\nprint(f\"ScriptRun exists before deletion: {exists}\")\n\n# Delete the script run\nis_deleted = script_run.delete()\nprint(f\"Deleted Script Run: {is_deleted}\")\n\n# Check if ScriptRun exists after deletion\nexists = ScriptRun.exists(script_run_info={\"test\": \"test_set\"}, script_name=script.script_name)\nprint(f\"ScriptRun exists after deletion: {exists}\")\n</code></pre>"},{"location":"examples/script_run_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing script runs using the Gemini API:</p> <ul> <li>Getting a script: The <code>Script.get()</code> method retrieves a script by its name.</li> <li>Creating a script run: The <code>ScriptRun.create()</code> method is used to create a new script run with additional information and associated script.</li> <li>Getting a script run: The <code>ScriptRun.get()</code> method retrieves a script run by its additional information and script name. The <code>ScriptRun.get_by_id()</code> method retrieves a script run by its unique ID.</li> <li>Getting all script runs: The <code>ScriptRun.get_all()</code> method retrieves all script runs in the database.</li> <li>Searching for script runs: The <code>ScriptRun.search()</code> method finds script runs based on specified criteria, such as the script name.</li> <li>Refreshing a script run: The <code>ScriptRun.refresh()</code> method updates the script run object with the latest data from the database.</li> <li>Updating a script run: The <code>ScriptRun.update()</code> method updates the attributes of an existing script run.</li> <li>Setting script run information: The <code>ScriptRun.set_info()</code> method updates the <code>script_run_info</code> field with new data.</li> <li>Checking for existence: The <code>ScriptRun.exists()</code> method verifies if a script run with the given attributes exists.</li> <li>Deleting a script run: The <code>ScriptRun.delete()</code> method removes the script run from the database.</li> </ul>"},{"location":"examples/script_run_script_api/","title":"Script Run Script API Example","text":"<p>This example demonstrates how to associate and unassociate scripts with script runs using the Gemini framework.</p>"},{"location":"examples/script_run_script_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_run_script_api.py</code>.</p>"},{"location":"examples/script_run_script_api/#code","title":"Code","text":"<pre><code>from gemini.api.script import Script\nfrom gemini.api.script_run import ScriptRun\n\n# Create a new script run for Script A\nnew_script_run = ScriptRun.create(\n    script_run_info={\"test\": \"test\"},\n    script_name=\"Script A\"\n)\nprint(f\"Created New Script Run: {new_script_run}\")\n\n# Create a new script for Experiment A\nnew_script = Script.create(\n    script_name=\"Script  X\",\n    script_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Script: {new_script}\")\n\n# Get associated script of the new script run\nassociated_script = new_script_run.get_associated_script()\nprint(f\"Associated Script: {associated_script}\")\n\n# Associate the new script run with the new script\nnew_script_run.associate_script(script_name=new_script.script_name)\nprint(f\"Associated New Script Run with New Script: {new_script_run}\")\n\n# Check if the new script run is associated with the new script\nis_associated = new_script_run.belongs_to_script(script_name=new_script.script_name)\nprint(f\"Is New Script Run associated with New Script? {is_associated}\")\n\n# Unassociate the new script run from the new script\nnew_script_run.unassociate_script()\nprint(f\"Unassociated New Script Run from New Script: {new_script_run}\")\n\n# Check if the new script run is still associated with the new script\nis_associated = new_script_run.belongs_to_script(script_name=new_script.script_name)\nprint(f\"Is New Script Run still associated with New Script? {is_associated}\")\n</code></pre>"},{"location":"examples/script_run_script_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between scripts and script runs:</p> <ul> <li>Creating a script run: The <code>ScriptRun.create()</code> method is used to create a new script run with additional information and associated script.</li> <li>Creating a script: The <code>Script.create()</code> method is used to create a new script.</li> <li>Getting associated script: The <code>get_associated_script()</code> method retrieves the script associated with the script run.</li> <li>Associating with a script: The <code>associate_script()</code> method associates the script run with the created script.</li> <li>Checking association: The <code>belongs_to_script()</code> method verifies if the script run is associated with a specific script.</li> <li>Unassociating from a script: The <code>unassociate_script()</code> method removes the association between the script run and the script.</li> <li>Verifying unassociation: The <code>belongs_to_script()</code> method is used again to confirm that the script run is no longer associated with the script.</li> </ul>"},{"location":"examples/script_script_run_api/","title":"Script Script Run API Example","text":"<p>This example demonstrates how to associate and create script runs with scripts using the Gemini framework.</p>"},{"location":"examples/script_script_run_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/script_script_run_api.py</code>.</p>"},{"location":"examples/script_script_run_api/#code","title":"Code","text":"<pre><code>from gemini.api.script import Script\n\n# Get Script A\nscript_a = Script.get(\"Script A\")\nprint(f\"Got Script A: {script_a}\")\n\n# Create a new script run for Script A\nnew_script_a_run = script_a.create_new_run(\n    script_run_info={\"test\": \"test\"}\n)\nprint(f\"Created New Script Run: {new_script_a_run}\")\n\n# Get Associated Script Runs\nassociated_script_runs = script_a.get_associated_runs()\nfor script_run in associated_script_runs:\n    print(f\"Associated Script Run: {script_run}\")\n</code></pre>"},{"location":"examples/script_script_run_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between script runs and scripts:</p> <ul> <li>Getting a script: The <code>Script.get()</code> method retrieves a script by its name (Script A in this case).</li> <li>Creating a new script run: The <code>create_new_run()</code> method creates a new script run and automatically associates it with the script.</li> <li>Getting associated script runs: The <code>get_associated_runs()</code> method retrieves a list of script runs associated with the script.</li> </ul>"},{"location":"examples/season_api/","title":"Season API Example","text":"<p>This example demonstrates how to use the Season API in the Gemini framework.</p>"},{"location":"examples/season_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/season_api.py</code>.</p>"},{"location":"examples/season_api/#code","title":"Code","text":"<pre><code>from gemini.api.season import Season\n\n# Create a new Season for Experiment A\nnew_season = Season.create(\n    season_name=\"Season 1A\",\n    season_year=2024,\n    season_info={\"notes\": \"First season of Experiment A\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Season: {new_season}\")\n\n# Get Season by ID\nseason_by_id = Season.get_by_id(new_season.id)\nprint(f\"Got Season by ID: {season_by_id}\")\n\n# Get Season by Name\nseason_by_name = Season.get(season_name=\"Season 1A\")\nprint(f\"Got Season by Name: {season_by_name}\")\n\n# Get all Seasons\nall_seasons = Season.get_all()\nfor season in all_seasons:\n    print(f\"Season: {season}\")\n\n# Search for Seasons by Name\nsearch_results = Season.search(season_name=\"Season 1A\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Season\nseason_by_name.update(\n    season_year=2025\n)\nprint(f\"Updated Season: {season_by_name}\")\n\n# Refresh Season\nseason_by_name.refresh()\nprint(f\"Refreshed Season: {season_by_name}\")\n\n# Set Season Info\nseason_by_name.set_info(\n    season_info={\"notes\": \"Updated notes for Season 1A\"}\n)\nprint(f\"Set Season Info: {season_by_name.get_info()}\")\n\n# Check if Season Exists\nexists = Season.exists(season_name=\"Season 1A\")\nprint(f\"Does Season Exist? {exists}\")\n\n# Delete Season\nis_deleted = season_by_name.delete()\nprint(f\"Deleted Season: {is_deleted}\")\n\n# Check if Season Exists after Deletion\nexists_after_deletion = Season.exists(season_name=\"Season 1A\")\nprint(f\"Does Season Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/season_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing seasons using the Gemini API:</p> <ul> <li>Creating a season: The <code>Season.create()</code> method is used to create a new season with a name, year, additional information, and associated experiment.</li> <li>Getting a season: The <code>Season.get_by_id()</code> method retrieves a season by its unique ID. The <code>Season.get()</code> method retrieves a season by its name.</li> <li>Getting all seasons: The <code>Season.get_all()</code> method retrieves all seasons in the database.</li> <li>Searching for seasons: The <code>Season.search()</code> method finds seasons based on specified criteria, such as the name.</li> <li>Updating a season: The <code>Season.update()</code> method updates the attributes of an existing season.</li> <li>Refreshing a season: The <code>Season.refresh()</code> method updates the season object with the latest data from the database.</li> <li>Setting season information: The <code>Season.set_info()</code> method updates the <code>season_info</code> field with new data.</li> <li>Checking for existence: The <code>Season.exists()</code> method verifies if a season with the given name exists.</li> <li>Deleting a season: The <code>Season.delete()</code> method removes the season from the database.</li> </ul>"},{"location":"examples/sensor_api/","title":"Sensor API Example","text":"<p>This example demonstrates how to use the Sensor API in the Gemini framework.</p>"},{"location":"examples/sensor_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_api.py</code>.</p>"},{"location":"examples/sensor_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor import Sensor\nfrom gemini.api.sensor import GEMINISensorType, GEMINIDataType, GEMINIDataFormat\n\n# Create a new Sensor for Experiment A\nnew_sensor = Sensor.create(\n    sensor_name=\"Sensor A\",\n    sensor_type=GEMINISensorType.Calibration,\n    sensor_data_format=GEMINIDataFormat.CSV,\n    sensor_data_type=GEMINIDataType.Text,\n    sensor_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\",\n    sensor_platform_name=\"Platform A\"\n)\nprint(f\"Created New Sensor: {new_sensor}\")\n\n# Get Sensor by ID\nsensor_by_id = Sensor.get_by_id(new_sensor.id)\nprint(f\"Got Sensor by ID: {sensor_by_id}\")\n\n# Get Sensor by Name\nsensor_by_name = Sensor.get(sensor_name=\"Sensor A\")\nprint(f\"Got Sensor by Name: {sensor_by_name}\")\n\n# Get all Sensors\nall_sensors = Sensor.get_all()\nfor sensor in all_sensors:\n    print(f\"Sensor: {sensor}\")\n\n# Search for Sensors by Name\nsearch_results = Sensor.search(sensor_name=\"Sensor A\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Sensor\nsensor_by_name.update(\n    sensor_data_format=GEMINIDataFormat.JSON,\n    sensor_info={\"updated\": \"info\"}\n)\nprint(f\"Updated Sensor: {sensor_by_name}\")\n\n# Refresh Sensor\nsensor_by_name.refresh()\nprint(f\"Refreshed Sensor: {sensor_by_name}\")\n\n# Set Sensor Info\nsensor_by_name.set_info(\n    sensor_info={\"new\": \"info\"}\n)\nprint(f\"Set Sensor Info: {sensor_by_name.get_info()}\")\n\n# Check if Sensor Exists\nexists = Sensor.exists(sensor_name=\"Sensor A\")\nprint(f\"Does Sensor Exist? {exists}\")\n\n# Delete Sensor\nis_deleted = sensor_by_name.delete()\nprint(f\"Deleted Sensor: {is_deleted}\")\n\n# Check if Sensor Exists after Deletion\nexists_after_deletion = Sensor.exists(sensor_name=\"Sensor A\")\nprint(f\"Does Sensor Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/sensor_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing sensors using the Gemini API:</p> <ul> <li>Creating a sensor: The <code>Sensor.create()</code> method is used to create a new sensor with a name, type, data format, data type, additional information, and associated experiment and sensor platform.</li> <li>Getting a sensor: The <code>Sensor.get_by_id()</code> method retrieves a sensor by its unique ID. The <code>Sensor.get()</code> method retrieves a sensor by its name.</li> <li>Getting all sensors: The <code>Sensor.get_all()</code> method retrieves all sensors in the database.</li> <li>Searching for sensors: The <code>Sensor.search()</code> method finds sensors based on specified criteria, such as the name.</li> <li>Updating a sensor: The <code>Sensor.update()</code> method updates the attributes of an existing sensor.</li> <li>Refreshing a sensor: The <code>Sensor.refresh()</code> method updates the sensor object with the latest data from the database.</li> <li>Setting sensor information: The <code>Sensor.set_info()</code> method updates the <code>sensor_info</code> field with new data.</li> <li>Checking for existence: The <code>Sensor.exists()</code> method verifies if a sensor with the given name exists.</li> <li>Deleting a sensor: The <code>Sensor.delete()</code> method removes the sensor from the database.</li> </ul>"},{"location":"examples/sensor_dataset_api/","title":"Sensor Dataset API Example","text":"<p>This example demonstrates how to use the Sensor and Dataset APIs to associate datasets with sensors in the Gemini framework.</p>"},{"location":"examples/sensor_dataset_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_dataset_api.py</code>.</p>"},{"location":"examples/sensor_dataset_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor import Sensor\nfrom gemini.api.dataset import Dataset, GEMINIDatasetType\n\n# Create a new Sensor for Experiment A\nnew_sensor = Sensor.create(\n    sensor_name=\"Sensor Test 1\",\n    sensor_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor: {new_sensor}\")\n\n# Create a new Dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"Dataset Test 1\",\n    dataset_type=GEMINIDatasetType.Sensor,\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset: {new_dataset}\")\n\n# Create a new Dataset for New Sensor directly\nnew_sensor_dataset = new_sensor.create_new_dataset(\n    dataset_name=\"Sensor Test 1 Dataset\",\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset for New Sensor: {new_sensor_dataset}\")\n\n# Associate the new dataset with the new sensor\nnew_sensor.associate_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Associated New Dataset with New Sensor: {new_sensor}\")\n\n# Print the associated datasets\nassociated_datasets = new_sensor.get_associated_datasets()\nfor dataset in associated_datasets:\n    print(f\"Associated Dataset: {dataset}\")\n</code></pre>"},{"location":"examples/sensor_dataset_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between datasets and sensors:</p> <ul> <li>Creating a sensor: The <code>Sensor.create()</code> method is used to create a new sensor with a name and additional information.</li> <li>Creating a dataset: The <code>Dataset.create()</code> method is used to create a new dataset with a name, type, additional information, collection date, and associated experiment.</li> <li>Creating a dataset for a sensor: The <code>Sensor.create_new_dataset()</code> method is used to create a new dataset and automatically associate it with the sensor.</li> <li>Associating with a dataset: The <code>associate_dataset()</code> method associates the sensor with the created dataset.</li> <li>Getting associated datasets: The <code>get_associated_datasets()</code> method retrieves a list of datasets associated with the sensor.</li> </ul>"},{"location":"examples/sensor_experiment_api/","title":"Sensor Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with sensors using the Gemini framework.</p>"},{"location":"examples/sensor_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_experiment_api.py</code>.</p>"},{"location":"examples/sensor_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor import Sensor\n\n# Create a new Sensor for Experiment A\nnew_sensor = Sensor.create(\n    sensor_name=\"Sensor X\",\n    sensor_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor: {new_sensor}\")\n\n# Get Associated Experiments\nassociated_experiments = new_sensor.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the new sensor with Experiment B\nnew_sensor.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Sensor with Experiment B\")\n\n# Check if the new sensor is associated with Experiment B\nis_associated = new_sensor.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Sensor associated with Experiment B? {is_associated}\")\n\n# Unassociate the new sensor from Experiment B\nnew_sensor.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Sensor from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_sensor.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Sensor still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/sensor_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and sensors:</p> <ul> <li>Creating a sensor: The <code>Sensor.create()</code> method is used to create a new sensor with a name and additional information.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the sensor.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the sensor with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the sensor is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the sensor and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the sensor is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/sensor_platform_api/","title":"Sensor Platform API Example","text":"<p>This example demonstrates how to use the SensorPlatform API in the Gemini framework.</p>"},{"location":"examples/sensor_platform_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_platform_api.py</code>.</p>"},{"location":"examples/sensor_platform_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor_platform import SensorPlatform\n\n# Create a new Sensor Platform for Experiment A\nnew_sensor_platform = SensorPlatform.create(\n    sensor_platform_name=\"Platform XYZ\",\n    sensor_platform_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor Platform: {new_sensor_platform}\")\n\n# Get Sensor Platform with sensor_platform_name\nsensor_platform = SensorPlatform.get(\n    sensor_platform_name=new_sensor_platform.sensor_platform_name\n)\nprint(f\"Retrieved Sensor Platform: {sensor_platform}\")\n\n# Get Sensor Platform with sensor_platform_id\nsensor_platform = SensorPlatform.get_by_id(\n    id=new_sensor_platform.id\n)\nprint(f\"Retrieved Sensor Platform by ID: {sensor_platform}\")\n\n# Get all Sensor Platforms\nsensor_platforms = SensorPlatform.get_all()\nfor platform in sensor_platforms:\n    print(f\"Sensor Platform: {platform}\")\n\n# Search for Sensor Platforms\nsensor_platforms = SensorPlatform.search(\n    sensor_platform_name=\"Platform XYZ\"\n)\nfor platform in sensor_platforms:\n    print(f\"Search Result: {platform}\")\n\n# Refresh Sensor Platform\nsensor_platform.refresh()\nprint(f\"Refreshed Sensor Platform: {sensor_platform}\")\n\n# Update Sensor Platform\nsensor_platform.update(\n    sensor_platform_info={\"test\": \"test_updated\"}\n)\nprint(f\"Updated Sensor Platform: {sensor_platform}\")\n\n# Set Sensor Platform Info\nsensor_platform.set_info(\n    sensor_platform_info={\"test\": \"test_set\"}\n)\nprint(f\"Set Sensor Platform Info: {sensor_platform.get_info()}\")\n\n# Check if Sensor Platform Exists before deletion\nexists = SensorPlatform.exists(\n    sensor_platform_name=\"Platform XYZ\"\n)\nprint(f\"Sensor Platform exists: {exists}\")\n\n# Delete Sensor Platform\nis_deleted = sensor_platform.delete()\nprint(f\"Deleted Sensor Platform: {is_deleted}\")\n\n# Check if Sensor Platform Exists after deletion\nexists_after_deletion = SensorPlatform.exists(\n    sensor_platform_name=\"Platform XYZ\"\n)\nprint(f\"Sensor Platform exists after deletion: {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/sensor_platform_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing sensor platforms using the Gemini API:</p> <ul> <li>Creating a sensor platform: The <code>SensorPlatform.create()</code> method is used to create a new sensor platform with a name, additional information, and associated experiment.</li> <li>Getting a sensor platform: The <code>SensorPlatform.get()</code> method retrieves a sensor platform by its name. The <code>SensorPlatform.get_by_id()</code> method retrieves a sensor platform by its unique ID.</li> <li>Getting all sensor platforms: The <code>SensorPlatform.get_all()</code> method retrieves all sensor platforms in the database.</li> <li>Searching for sensor platforms: The <code>SensorPlatform.search()</code> method finds sensor platforms based on specified criteria, such as the name.</li> <li>Refreshing a sensor platform: The <code>SensorPlatform.refresh()</code> method updates the sensor platform object with the latest data from the database.</li> <li>Updating a sensor platform: The <code>SensorPlatform.update()</code> method updates the attributes of an existing sensor platform.</li> <li>Setting sensor platform information: The <code>SensorPlatform.set_info()</code> method updates the <code>sensor_platform_info</code> field with new data.</li> <li>Checking for existence: The <code>SensorPlatform.exists()</code> method verifies if a sensor platform with the given name exists.</li> <li>Deleting a sensor platform: The <code>SensorPlatform.delete()</code> method removes the sensor platform from the database.</li> </ul>"},{"location":"examples/sensor_platform_experiment_api/","title":"Sensor Platform Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with sensor platforms using the Gemini framework.</p>"},{"location":"examples/sensor_platform_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_platform_experiment_api.py</code>.</p>"},{"location":"examples/sensor_platform_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor_platform import SensorPlatform\n\n# Create a new Sensor Platform for Experiment A\nnew_sensor_platform = SensorPlatform.create(\n    sensor_platform_name=\"Platform Test 1\",\n    sensor_platform_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor Platform: {new_sensor_platform}\")\n\n# Get Associated Experiments\nassociated_experiments = new_sensor_platform.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the new sensor platform with Experiment B\nnew_sensor_platform.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Sensor Platform with Experiment B\")\n\n# Check if the new sensor platform is associated with Experiment B\nis_associated = new_sensor_platform.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Sensor Platform associated with Experiment B? {is_associated}\")\n\n# Unassociate the new sensor platform from Experiment B\nnew_sensor_platform.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Sensor Platform from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_sensor_platform.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Sensor Platform still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/sensor_platform_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and sensor platforms:</p> <ul> <li>Creating a sensor platform: The <code>SensorPlatform.create()</code> method is used to create a new sensor platform with a name, additional information, and associated experiment.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the sensor platform.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the sensor platform with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the sensor platform is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the sensor platform and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the sensor platform is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/sensor_platform_sensor_api/","title":"Sensor Platform Sensor API Example","text":"<p>This example demonstrates how to associate and unassociate sensors with sensor platforms using the Gemini framework.</p>"},{"location":"examples/sensor_platform_sensor_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_platform_sensor_api.py</code>.</p>"},{"location":"examples/sensor_platform_sensor_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor_platform import SensorPlatform\nfrom gemini.api.sensor import Sensor\n\n# Create a new Sensor Platform for Experiment A\nnew_sensor_platform = SensorPlatform.create(\n    sensor_platform_name=\"Platform Test 1\",\n    sensor_platform_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor Platform: {new_sensor_platform}\")\n\n# Create a new Sensor for Experiment A and Platform Test 1\nnew_sensor = Sensor.create(\n    sensor_name=\"Sensor Test 1\",\n    sensor_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\",\n    sensor_platform_name=\"Platform Test 1\"\n)\nprint(f\"Created New Sensor: {new_sensor}\")\n\n# Create a new sensor directly\nnew_sensor_direct = Sensor.create(\n    sensor_name=\"Sensor Test 2\",\n    sensor_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Sensor Directly: {new_sensor_direct}\")\n\n# List Associated Sensor Platforms\nassociated_sensors = new_sensor_platform.get_associated_sensors()\nfor sensor in associated_sensors:\n    print(f\"Associated Sensor: {sensor}\")\n\n# Check if the new sensor is associated with Platform Test 1\nis_associated = new_sensor_platform.belongs_to_sensor(sensor_name=\"Sensor Test 1\")\nprint(f\"Is Sensor Test 1 associated with Platform Test 1? {is_associated}\")\n\n# Unassociate the new sensor from Platform Test 1\nnew_sensor_platform.unassociate_sensor(sensor_name=\"Sensor Test 1\")\nprint(f\"Unassociated Sensor Test 1 from Platform Test 1\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_sensor_platform.belongs_to_sensor(sensor_name=\"Sensor Test 1\")\nprint(f\"Is Sensor Test 1 still associated with Platform Test 1? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/sensor_platform_sensor_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between sensors and sensor platforms:</p> <ul> <li>Creating a sensor platform: The <code>SensorPlatform.create()</code> method is used to create a new sensor platform with a name and additional information.</li> <li>Creating a sensor: The <code>Sensor.create()</code> method is used to create a new sensor with a name and additional information, and associated experiment and sensor platform.</li> <li>Creating a sensor directly: The <code>Sensor.create()</code> method is used to create a new sensor without associating it with a sensor platform.</li> <li>Getting associated sensors: The <code>get_associated_sensors()</code> method retrieves a list of sensors associated with the sensor platform.</li> <li>Checking association: The <code>belongs_to_sensor()</code> method verifies if the sensor platform is associated with a specific sensor.</li> <li>Unassociating from a sensor: The <code>unassociate_sensor()</code> method removes the association between the sensor platform and the sensor.</li> <li>Verifying unassociation: The <code>belongs_to_sensor()</code> method is used again to confirm that the sensor platform is no longer associated with the sensor.</li> </ul>"},{"location":"examples/sensor_record_api/","title":"Sensor Record API Example","text":"<p>This example demonstrates how to use the SensorRecord API in the Gemini framework.</p>"},{"location":"examples/sensor_record_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_record_api.py</code>.</p>"},{"location":"examples/sensor_record_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor_record import SensorRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\n\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Create a new Sensor Record for Sensor A, with Experiment A, Site A1 and Season 1A\nnew_sensor_record = SensorRecord.create(\n    timestamp=timestamp,\n    collection_date=timestamp.date(),\n    sensor_name=\"Sensor A1\",\n    dataset_name=\"Sensor A1 Dataset\",\n    sensor_data={\"key\": \"value\"},\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    record_info={\"test\": \"test\"},\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1,\n    insert_on_create=True\n)\nprint(f\"Created Sensor Record: {new_sensor_record}\")\n\n# Get Sensor Record by ID\nsensor_record_by_id = SensorRecord.get_by_id(new_sensor_record.id)\nprint(f\"Sensor Record by ID: {sensor_record_by_id}\")\n\n# Get Sensor Record\nsensor_record_by_name = SensorRecord.get(\n    timestamp=new_sensor_record.timestamp,\n    sensor_name=\"Sensor A1\",\n    dataset_name=\"Sensor A1 Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1\n)\nprint(f\"Sensor Record by Name: {sensor_record_by_name}\")\n\n# Get all Sensor Records limit by 10\nsensor_records = SensorRecord.get_all(limit=10)\nprint(f\"Sensor Records (limit 10):\")\nfor record in sensor_records:\n    print(record)\n\n# Search Sensor Records\nsearched_records = SensorRecord.search(\n    experiment_name=\"Experiment A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\nprint(f\"Found {len(searched_records)} records in Experiment A:\")\n\n# Update the newly created Sensor Record\nupdated_record = new_sensor_record.update(\n    sensor_data={\"key\": \"new_value\"},\n    record_info={\"test\": \"test_updated\"}\n)\nprint(f\"Updated Sensor Record: {updated_record}\")\n\n# Set Sensor Record Info\nupdated_record.set_info(\n    record_info={\"test\": \"test_set_info\"}\n)\nprint(f\"Set Sensor Record Info: {updated_record.get_info()}\")\n\n# Check if Sensor Record Exists\nexists = SensorRecord.exists(\n    timestamp=new_sensor_record.timestamp,\n    sensor_name=\"Sensor A1\",\n    dataset_name=\"Sensor A1 Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1\n)\nprint(f\"Does Sensor Record Exist? {exists}\")\n\n# Delete Sensor Record\nis_deleted = new_sensor_record.delete()\nprint(f\"Deleted Sensor Record: {is_deleted}\")\n\n# Check if Sensor Record Exists after Deletion\nexists_after_deletion = SensorRecord.exists(\n    timestamp=new_sensor_record.timestamp,\n    sensor_name=\"Sensor A1\",\n    dataset_name=\"Sensor A1 Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1\n)\nprint(f\"Does Sensor Record Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/sensor_record_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing sensor records using the Gemini API:</p> <ul> <li>Creating a sensor record: The <code>SensorRecord.create()</code> method is used to create a new sensor record with a timestamp, collection date, associated sensor, dataset, additional data, and associated experiment, site, season, and plot.</li> <li>Getting a sensor record: The <code>SensorRecord.get_by_id()</code> method retrieves a sensor record by its unique ID. The <code>SensorRecord.get()</code> method retrieves a sensor record by its timestamp, sensor name, dataset name, and associated experiment, site, season, and plot.</li> <li>Getting all sensor records: The <code>SensorRecord.get_all()</code> method retrieves all sensor records, with an optional limit.</li> <li>Searching for sensor records: The <code>SensorRecord.search()</code> method finds sensor records based on specified criteria, such as the experiment name.</li> <li>Updating a sensor record: The <code>SensorRecord.update()</code> method updates the attributes of an existing sensor record.</li> <li>Setting sensor record information: The <code>SensorRecord.set_info()</code> method updates the <code>record_info</code> field with new data.</li> <li>Checking for existence: The <code>SensorRecord.exists()</code> method verifies if a sensor record with the given attributes exists.</li> <li>Deleting a sensor record: The <code>SensorRecord.delete()</code> method removes the sensor record from the database.</li> </ul>"},{"location":"examples/sensor_record_files_api/","title":"Sensor Record Files API Example","text":"<p>This example demonstrates how to use the SensorRecord API to associate files with sensor records in the Gemini framework.</p>"},{"location":"examples/sensor_record_files_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_record_files_api.py</code>.</p>"},{"location":"examples/sensor_record_files_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor_record import SensorRecord\nfrom datetime import datetime, timedelta\nfrom random import randint, uniform\nimport os\n\n# Create Timestamp\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\n# Get Sample Image Folder\nscript_folder = os.path.dirname(os.path.abspath(__file__))\nsample_image_folder = os.path.join(script_folder, \"sample_images\")\nsample_image_files = [\n    os.path.join(sample_image_folder, f) for f in os.listdir(sample_image_folder)\n    if os.path.isfile(os.path.join(sample_image_folder, f))\n]\nprint(f\"Sample Image Files: {sample_image_files}\")\n\n# Creating Records to add to SensorRecord\nrecords_to_add = []\nfor image_file in sample_image_files:\n    timestamp = timestamp + timedelta(minutes=randint(1, 60))  # Increment timestamp for each file\n    collection_date = timestamp.date()  # Use the date part of the timestamp\n    record = SensorRecord.create(\n        timestamp=timestamp,\n        collection_date=collection_date,\n        sensor_name=\"Sensor A\",\n        dataset_name=\"Sensor A Images Dataset\",\n        sensor_data={\"value\": uniform(0, 100)},\n        experiment_name=\"Experiment A\",\n        site_name=\"Site A1\",\n        season_name=\"Season 1A\",\n        record_file=image_file,\n        record_info={\"test\": \"test\"},\n        insert_on_create=False\n    )\n    records_to_add.append(record)\n\nSensorRecord.insert(records_to_add)\n\n# Search the Sensor Records\nsearched_records = SensorRecord.search(\n    collection_date=timestamp.date(),\n    sensor_name=\"Sensor A\",\n    dataset_name=\"Sensor A Images Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\n\n# Print the searched records\nprint(f\"Found {len(searched_records)} records in Sensor A, Experiment A, Site A1, Season 1A:\")\nfor record in searched_records:\n    print(record)\n</code></pre>"},{"location":"examples/sensor_record_files_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to associate files with sensor records using the Gemini API:</p> <ul> <li>Creating sensor records with files: The <code>SensorRecord.create()</code> method is used to create new sensor records, each associated with a file from the <code>sample_images</code> directory. The <code>insert_on_create</code> parameter is set to <code>False</code> to allow batch insertion.</li> <li>Inserting sensor records: The <code>SensorRecord.insert()</code> method is used to efficiently insert multiple sensor records into the database.</li> <li>Searching for sensor records: The <code>SensorRecord.search()</code> method is used to find sensor records based on specified criteria.</li> </ul>"},{"location":"examples/sensor_type_api/","title":"Sensor Type API Example","text":"<p>This example demonstrates how to use the SensorType API in the Gemini framework.</p>"},{"location":"examples/sensor_type_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/sensor_type_api.py</code>.</p>"},{"location":"examples/sensor_type_api/#code","title":"Code","text":"<pre><code>from gemini.api.sensor_type import SensorType\n\n# Create a new Sensor Type\nnew_sensor_type = SensorType.create(\n    name=\"Temperature\",\n    description=\"Measures temperature\",\n    info={\"units\": \"Celsius\"}\n)\nprint(f\"Created New Sensor Type: {new_sensor_type}\")\n\n# Get Sensor Type by ID\nsensor_type_by_id = SensorType.get_by_id(new_sensor_type.id)\nprint(f\"Got Sensor Type by ID: {sensor_type_by_id}\")\n\n# Get Sensor Type by Name\nsensor_type_by_name = SensorType.get(name=\"Temperature\")\nprint(f\"Got Sensor Type by Name: {sensor_type_by_name}\")\n\n# Get all Sensor Types\nall_sensor_types = SensorType.get_all()\nfor sensor_type in all_sensor_types:\n    print(f\"Sensor Type: {sensor_type}\")\n\n# Search for Sensor Types by Name\nsearch_results = SensorType.search(name=\"Temperature\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Sensor Type\nsensor_type_by_name.update(\n    description=\"Measures temperature in Celsius\"\n)\nprint(f\"Updated Sensor Type: {sensor_type_by_name}\")\n\n# Refresh Sensor Type\nsensor_type_by_name.refresh()\nprint(f\"Refreshed Sensor Type: {sensor_type_by_name}\")\n\n# Set Sensor Type Info\nsensor_type_by_name.set_info(\n    info={\"units\": \"Fahrenheit\"}\n)\nprint(f\"Set Sensor Type Info: {sensor_type_by_name.get_info()}\")\n\n# Check if Sensor Type Exists\nexists = SensorType.exists(name=\"Temperature\")\nprint(f\"Does Sensor Type Exist? {exists}\")\n\n# Delete Sensor Type\nis_deleted = sensor_type_by_name.delete()\nprint(f\"Deleted Sensor Type: {is_deleted}\")\n\n# Check if Sensor Type Exists after Deletion\nexists_after_deletion = SensorType.exists(name=\"Temperature\")\nprint(f\"Does Sensor Type Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/sensor_type_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing sensor types using the Gemini API:</p> <ul> <li>Creating a sensor type: The <code>SensorType.create()</code> method is used to create a new sensor type with a name, description, and additional information.</li> <li>Getting a sensor type: The <code>SensorType.get_by_id()</code> method retrieves a sensor type by its unique ID. The <code>SensorType.get()</code> method retrieves a sensor type by its name.</li> <li>Getting all sensor types: The <code>SensorType.get_all()</code> method retrieves all sensor types in the database.</li> <li>Searching for sensor types: The <code>SensorType.search()</code> method finds sensor types based on specified criteria, such as the name.</li> <li>Updating a sensor type: The <code>SensorType.update()</code> method updates the attributes of an existing sensor type.</li> <li>Refreshing a sensor type: The <code>SensorType.refresh()</code> method updates the sensor type object with the latest data from the database.</li> <li>Setting sensor type information: The <code>SensorType.set_info()</code> method updates the <code>info</code> field with new data.</li> <li>Checking for existence: The <code>SensorType.exists()</code> method verifies if a sensor type with the given name exists.</li> <li>Deleting a sensor type: The <code>SensorType.delete()</code> method removes the sensor type from the database.</li> </ul>"},{"location":"examples/site_api/","title":"Site API Example","text":"<p>This example demonstrates how to use the Site API in the Gemini framework.</p>"},{"location":"examples/site_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/site_api.py</code>.</p>"},{"location":"examples/site_api/#code","title":"Code","text":"<pre><code>from gemini.api.site import Site\n\n# Create a new Site for Experiment A\nnew_site = Site.create(\n    site_name=\"Site A\",\n    site_info={\"location\": \"Field 1\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Site: {new_site}\")\n\n# Get Site by ID\nsite_by_id = Site.get_by_id(new_site.id)\nprint(f\"Got Site by ID: {site_by_id}\")\n\n# Get Site by Name\nsite_by_name = Site.get(site_name=\"Site A\")\nprint(f\"Got Site by Name: {site_by_name}\")\n\n# Get all Sites\nall_sites = Site.get_all()\nfor site in all_sites:\n    print(f\"Site: {site}\")\n\n# Search for Sites by Name\nsearch_results = Site.search(site_name=\"Site A\")\nfor result in search_results:\n    print(f\"Search Result: {result}\")\n\n# Update Site\nsite_by_name.update(\n    site_info={\"location\": \"Field 2\"}\n)\nprint(f\"Updated Site: {site_by_name}\")\n\n# Refresh Site\nsite_by_name.refresh()\nprint(f\"Refreshed Site: {site_by_name}\")\n\n# Set Site Info\nsite_by_name.set_info(\n    site_info={\"new_location\": \"Field 3\"}\n)\nprint(f\"Set Site Info: {site_by_name.get_info()}\")\n\n# Check if Site Exists\nexists = Site.exists(site_name=\"Site A\")\nprint(f\"Does Site Exist? {exists}\")\n\n# Delete Site\nis_deleted = site_by_name.delete()\nprint(f\"Deleted Site: {is_deleted}\")\n\n# Check if Site Exists after Deletion\nexists_after_deletion = Site.exists(site_name=\"Site A\")\nprint(f\"Does Site Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/site_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing sites using the Gemini API:</p> <ul> <li>Creating a site: The <code>Site.create()</code> method is used to create a new site with a name, additional information, and associated experiment.</li> <li>Getting a site: The <code>Site.get_by_id()</code> method retrieves a site by its unique ID. The <code>Site.get()</code> method retrieves a site by its name.</li> <li>Getting all sites: The <code>Site.get_all()</code> method retrieves all sites in the database.</li> <li>Searching for sites: The <code>Site.search()</code> method finds sites based on specified criteria, such as the name.</li> <li>Updating a site: The <code>Site.update()</code> method updates the attributes of an existing site.</li> <li>Refreshing a site: The <code>Site.refresh()</code> method updates the site object with the latest data from the database.</li> <li>Setting site information: The <code>Site.set_info()</code> method updates the <code>site_info</code> field with new data.</li> <li>Checking for existence: The <code>Site.exists()</code> method verifies if a site with the given name exists.</li> <li>Deleting a site: The <code>Site.delete()</code> method removes the site from the database.</li> </ul>"},{"location":"examples/site_experiment_api/","title":"Site Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with sites using the Gemini framework.</p>"},{"location":"examples/site_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/site_experiment_api.py</code>.</p>"},{"location":"examples/site_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.site import Site\n\n# Create a new Site for Experiment A\nnew_site = Site.create(\n    site_name=\"Site Test 1\",\n    site_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Site: {new_site}\")\n\n# Get associated experiments\nassociated_experiments = new_site.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the new site with Experiment B\nnew_site.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Site with Experiment B\")\n\n# Check if the new site is associated with Experiment B\nis_associated = new_site.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Site associated with Experiment B? {is_associated}\")\n\n# Unassociate the new site from Experiment B\nnew_site.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Site from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_site.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Site still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/site_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and sites:</p> <ul> <li>Creating a site: The <code>Site.create()</code> method is used to create a new site with a name, additional information, and associated experiment.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the site.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the site with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the site is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the site and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the site is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/site_plots_api/","title":"Site Plots API Example","text":"<p>This example demonstrates how to associate and unassociate plots with sites using the Gemini framework.</p>"},{"location":"examples/site_plots_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/site_plots_api.py</code>.</p>"},{"location":"examples/site_plots_api/#code","title":"Code","text":"<pre><code>from gemini.api.site import Site\nfrom gemini.api.experiment import Experiment\nfrom gemini.api.plot import Plot\n\n# Create a new Plot for Experiment A and Site A1\nnew_plot = Plot.create(\n    plot_number=1011,\n    plot_row_number=1011,\n    plot_column_number=1011,\n    experiment_name=\"Experiment A\",\n    season_name=\"Season 1A\",\n    site_name=\"Site A1\"\n)\nprint(f\"Created New Plot: {new_plot}\")\n\n# Get Site A2\nsite_a2 = Site.get(\"Site A2\")\nprint(f\"Got Site A2: {site_a2}\")\n\n# Create a new plot for Site A2 explicitly\nsite_a2.create_new_plot(\n    plot_number=2022,\n    plot_row_number=2022,\n    plot_column_number=2022,\n    season_name=\"Season 1A\",\n    experiment_name=\"Experiment A\"\n)\n\n# Associate Site A2 with the new plot\nsite_a2.associate_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    experiment_name=new_plot.experiment_name\n)\nprint(f\"Associated New Plot with Site A2: {site_a2}\")\n\n# Get Associated Plots\nassociated_plots = site_a2.get_associated_plots()\nfor plot in associated_plots:\n    print(f\"Associated Plot: {plot}\")\n\n# Check if the new plot is associated with Site A2\nis_associated = site_a2.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    experiment_name=new_plot.experiment_name\n)\nprint(f\"Is New Plot associated with Site A2? {is_associated}\")\n\n# Unassociate the new plot from Site A2\nsite_a2.unassociate_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    experiment_name=new_plot.experiment_name\n)\nprint(f\"Unassociated New Plot from Site A2: {site_a2}\")\n\n# Check if the new plot is still associated with Site A2\nis_associated = site_a2.belongs_to_plot(\n    plot_number=new_plot.plot_number,\n    plot_row_number=new_plot.plot_row_number,\n    plot_column_number=new_plot.plot_column_number,\n    season_name=new_plot.season_name,\n    experiment_name=new_plot.experiment_name\n)\nprint(f\"Is New Plot still associated with Site A2? {is_associated}\")\n</code></pre>"},{"location":"examples/site_plots_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between plots and sites:</p> <ul> <li>Creating a plot: The <code>Plot.create()</code> method is used to create a new plot with plot information, additional information, and associated experiment, season, and site.</li> <li>Getting a site: The <code>Site.get()</code> method retrieves a site by its name.</li> <li>Creating a new plot for a site: The <code>create_new_plot()</code> method creates a new plot and automatically associates it with the site.</li> <li>Associating with a plot: The <code>associate_plot()</code> method associates the site with the created plot.</li> <li>Getting associated plots: The <code>get_associated_plots()</code> method retrieves a list of plots associated with the site.</li> <li>Checking association: The <code>belongs_to_plot()</code> method verifies if the site is associated with a specific plot.</li> <li>Unassociating from a plot: The <code>unassociate_plot()</code> method removes the association between the site and the plot.</li> <li>Verifying unassociation: The <code>belongs_to_plot()</code> method is used again to confirm that the site is no longer associated with the plot.</li> </ul>"},{"location":"examples/trait_api/","title":"Trait API Example","text":"<p>This example demonstrates how to use the Trait API in the Gemini framework.</p>"},{"location":"examples/trait_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/trait_api.py</code>.</p>"},{"location":"examples/trait_api/#code","title":"Code","text":"<pre><code>from gemini.api.trait import Trait, GEMINITraitLevel\n\n\n# Create a new trait\nnew_trait = Trait.create(\n    trait_name=\"Trait Test 1\",\n    trait_level=GEMINITraitLevel.Plant,\n    trait_metrics={\"test\": \"test\"},\n    trait_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Trait: {new_trait}\")\n\n# Get Trait by ID\ntrait_by_id = Trait.get_by_id(id=new_trait.id)\nprint(f\"Trait by ID: {trait_by_id}\")\n\n# Get Trait by Name\ntrait_by_name = Trait.get(trait_name=new_trait.trait_name)\nprint(f\"Trait by Name: {trait_by_name}\")\n\n# Get all Traits\nall_traits = Trait.get_all()\nfor trait in all_traits:\n    print(f\"All Traits: {trait}\")\n\n# Search for Traits\nsearched_traits = Trait.search(trait_name=\"Trait Test 1\")\nfor trait in searched_traits:\n    print(f\"Searched Trait: {trait}\")\n\n# Update the trait\ntrait_by_name.update(\n    trait_level=GEMINITraitLevel.Plot,\n    trait_metrics={\"test\": \"test_updated\"},\n    trait_info={\"test\": \"test_updated\"},\n)\nprint(f\"Updated Trait: {trait_by_name}\")\n\n# Set Trait Info\ntrait_by_name.set_info(\n    trait_info={\"test\": \"test_set\"},\n)\nprint(f\"Set Trait Info: {trait_by_name.get_info()}\")\n\n# Refresh Trait\ntrait_by_name.refresh()\nprint(f\"Refreshed Trait: {trait_by_name}\")\n\n# Check if Trait Exists\nexists = Trait.exists(trait_name=\"Trait Test 1\")\nprint(f\"Trait exists: {exists}\")\n\n# Delete the created trait\nis_deleted = trait_by_name.delete()\nprint(f\"Deleted Trait: {is_deleted}\")\n\n# Check if Trait Exists after deletion\nexists_after_deletion = Trait.exists(trait_name=\"Trait Test 1\")\nprint(f\"Trait exists after deletion: {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/trait_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing traits using the Gemini API:</p> <ul> <li>Creating a trait: The <code>Trait.create()</code> method is used to create a new trait with a name, level, metrics, additional information, and associated experiment.</li> <li>Getting a trait: The <code>Trait.get_by_id()</code> method retrieves a trait by its unique ID. The <code>Trait.get()</code> method retrieves a trait by its name.</li> <li>Getting all traits: The <code>Trait.get_all()</code> method retrieves all traits in the database.</li> <li>Searching for traits: The <code>Trait.search()</code> method finds traits based on specified criteria, such as the name.</li> <li>Updating a trait: The <code>Trait.update()</code> method updates the attributes of an existing trait.</li> <li>Setting trait information: The <code>Trait.set_info()</code> method updates the <code>trait_info</code> field with new data.</li> <li>Refreshing a trait: The <code>Trait.refresh()</code> method updates the trait object with the latest data from the database.</li> <li>Checking for existence: The <code>Trait.exists()</code> method verifies if a trait with the given name exists.</li> <li>Deleting a trait: The <code>Trait.delete()</code> method removes the trait from the database.</li> </ul>"},{"location":"examples/trait_dataset_api/","title":"Trait Dataset API Example","text":"<p>This example demonstrates how to use the Trait and Dataset APIs to associate datasets with traits in the Gemini framework.</p>"},{"location":"examples/trait_dataset_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/trait_dataset_api.py</code>.</p>"},{"location":"examples/trait_dataset_api/#code","title":"Code","text":"<pre><code>from gemini.api.trait import Trait\nfrom gemini.api.dataset import Dataset, GEMINIDatasetType\n\n# Create a new trait for Experiment A\nnew_trait = Trait.create(\n    trait_name=\"Trait Test 1\",\n    trait_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Trait: {new_trait}\")\n\n# Create a new dataset for Experiment A\nnew_dataset = Dataset.create(\n    dataset_name=\"Dataset Trait Test 1\",\n    dataset_type=GEMINIDatasetType.Trait,\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset: {new_dataset}\")\n\n# Create a new Dataset for New Trait directly\nnew_trait_dataset = new_trait.create_new_dataset(\n    dataset_name=\"Trait Test 1 Dataset\",\n    dataset_info={\"test\": \"test\"},\n    collection_date=\"2023-10-01\",\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Dataset for New Trait: {new_trait_dataset}\")\n\n# Associate the new dataset with the new trait\nnew_trait.associate_dataset(dataset_name=new_dataset.dataset_name)\nprint(f\"Associated New Dataset with New Trait: {new_trait}\")\n\n# Print the associated datasets\nassociated_datasets = new_trait.get_associated_datasets()\nfor dataset in associated_datasets:\n    print(f\"Associated Dataset: {dataset}\")\n</code></pre>"},{"location":"examples/trait_dataset_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between datasets and traits:</p> <ul> <li>Creating a trait: The <code>Trait.create()</code> method is used to create a new trait with a name, additional information, and associated experiment.</li> <li>Creating a dataset: The <code>Dataset.create()</code> method is used to create a new dataset with a name, type, additional information, collection date, and associated experiment.</li> <li>Creating a dataset for a trait: The <code>Trait.create_new_dataset()</code> method is used to create a new dataset and automatically associate it with the trait.</li> <li>Associating with a dataset: The <code>associate_dataset()</code> method associates the trait with the created dataset.</li> <li>Getting associated datasets: The <code>get_associated_datasets()</code> method retrieves a list of datasets associated with the trait.</li> </ul>"},{"location":"examples/trait_experiment_api/","title":"Trait Experiment API Example","text":"<p>This example demonstrates how to associate and unassociate experiments with traits using the Gemini framework.</p>"},{"location":"examples/trait_experiment_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/trait_experiment_api.py</code>.</p>"},{"location":"examples/trait_experiment_api/#code","title":"Code","text":"<pre><code>from gemini.api.trait import Trait\n\n# Create a new Trait for Experiment A\nnew_trait = Trait.create(\n    trait_name=\"Trait X\",\n    trait_info={\"test\": \"test\"},\n    experiment_name=\"Experiment A\"\n)\nprint(f\"Created New Trait: {new_trait}\")\n\n# Get Associated Experiments\nassociated_experiments = new_trait.get_associated_experiments()\nfor experiment in associated_experiments:\n    print(f\"Associated Experiment: {experiment}\")\n\n# Associate the new trait with Experiment B\nnew_trait.associate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Associated Trait with Experiment B\")\n\n# Check if the new trait is associated with Experiment B\nis_associated = new_trait.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Trait associated with Experiment B? {is_associated}\")\n\n# Unassociate the new trait from Experiment B\nnew_trait.unassociate_experiment(experiment_name=\"Experiment B\")\nprint(f\"Unassociated Trait from Experiment B\")\n\n# Verify the unassociation\nis_associated_after_unassociation = new_trait.belongs_to_experiment(experiment_name=\"Experiment B\")\nprint(f\"Is Trait still associated with Experiment B? {is_associated_after_unassociation}\")\n</code></pre>"},{"location":"examples/trait_experiment_api/#explanation","title":"Explanation","text":"<p>This example demonstrates how to manage the association between experiments and traits:</p> <ul> <li>Creating a trait: The <code>Trait.create()</code> method is used to create a new trait with a name and additional information.</li> <li>Getting associated experiments: The <code>get_associated_experiments()</code> method retrieves a list of experiments associated with the trait.</li> <li>Associating with an experiment: The <code>associate_experiment()</code> method associates the trait with another experiment (Experiment B in this case).</li> <li>Checking association: The <code>belongs_to_experiment()</code> method verifies if the trait is associated with a specific experiment.</li> <li>Unassociating from an experiment: The <code>unassociate_experiment()</code> method removes the association between the trait and Experiment B.</li> <li>Verifying unassociation: The <code>belongs_to_experiment()</code> method is used again to confirm that the trait is no longer associated with Experiment B.</li> </ul>"},{"location":"examples/trait_level_api/","title":"Trait Level API Example","text":"<p>This example demonstrates how to use the TraitLevel API in the Gemini framework.</p>"},{"location":"examples/trait_level_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/trait_level_api.py</code>.</p>"},{"location":"examples/trait_level_api/#code","title":"Code","text":"<pre><code>from gemini.api.trait_level import TraitLevel\n\n# Create a new trait leve\nnew_trait_level = TraitLevel.create(\n    trait_level_name=\"Trait Level Test 1\",\n    trait_level_info={\"test\": \"test\"},\n)\nprint(f\"Created New Trait Level: {new_trait_level}\")\n\n# Get the trait level by name\ntrait_level = TraitLevel.get(trait_level_name=\"Trait Level Test 1\")\nprint(f\"Retrieved Trait Level: {trait_level}\")\n\n# Get the trait level by ID\ntrait_level_by_id = TraitLevel.get_by_id(id=new_trait_level.id)\nprint(f\"Retrieved Trait Level by ID: {trait_level_by_id}\")\n\n# Get all trait levels\nall_trait_levels = TraitLevel.get_all()\nfor trait_level in all_trait_levels:\n    print(f\"Trait Level: {trait_level}\")\n\n# Search Trait Levels\nsearched_trait_levels = TraitLevel.search(trait_level_name=\"Trait Level Test 1\")\nlength_searched_trait_levels = len(searched_trait_levels)\nprint(f\"Found {length_searched_trait_levels} trait levels with name 'Trait Level Test 1'\")\n\n\n# Update the trait level\ntrait_level.update(\n    trait_level_info={\"test\": \"test_updated\"},\n)\nprint(f\"Updated Trait Level: {trait_level}\")\n\n# Set trait level info\ntrait_level.set_info(\n    trait_level_info={\"test\": \"test_set\"},\n)\nprint(f\"Set Trait Level Info: {trait_level.get_info()}\")\n\n# Check if trait level exists before deletion\nexists = TraitLevel.exists(\n    trait_level_name=\"Trait Level Test 1\",\n)\nprint(f\"Trait Level exists: {exists}\")\n\n# Delete the created trait level\nis_deleted = trait_level.delete()\nprint(f\"Deleted Trait Level: {is_deleted}\")\n\n# Check if trait level exists after deletion\nexists_after_deletion = TraitLevel.exists(\n    trait_level_name=\"Trait Level Test 1\",\n)\nprint(f\"Trait Level exists after deletion: {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/trait_level_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing trait levels using the Gemini API:</p> <ul> <li>Creating a trait level: The <code>TraitLevel.create()</code> method is used to create a new trait level with a name and additional information.</li> <li>Getting a trait level: The <code>TraitLevel.get()</code> method retrieves a trait level by its name. The <code>TraitLevel.get_by_id()</code> method retrieves a trait level by its unique ID.</li> <li>Getting all trait levels: The <code>TraitLevel.get_all()</code> method retrieves all trait levels in the database.</li> <li>Searching for trait levels: The <code>TraitLevel.search()</code> method finds trait levels based on specified criteria, such as the name.</li> <li>Updating a trait level: The <code>TraitLevel.update()</code> method updates the attributes of an existing trait level.</li> <li>Setting trait level information: The <code>TraitLevel.set_info()</code> method updates the <code>trait_level_info</code> field with new data.</li> <li>Checking for existence: The <code>TraitLevel.exists()</code> method verifies if a trait level with the given name exists.</li> <li>Deleting a trait level: The <code>TraitLevel.delete()</code> method removes the trait level from the database.</li> </ul>"},{"location":"examples/trait_record_api/","title":"Trait Record API Example","text":"<p>This example demonstrates how to use the TraitRecord API in the Gemini framework.</p>"},{"location":"examples/trait_record_api/#source-file-location","title":"Source File Location","text":"<p>The original Python script is located at <code>gemini/examples/api/trait_record_api.py</code>.</p>"},{"location":"examples/trait_record_api/#code","title":"Code","text":"<pre><code>from gemini.api.trait_record import TraitRecord\nfrom datetime import datetime, timedelta\nfrom random import randint\n\ntimestamp = datetime(1994, 10, 1, 12, 0, 0)  # Fixed timestamp for consistency\ntimestamp = timestamp + timedelta(hours=randint(0, 23), minutes=randint(0, 59))  # Randomize time within the day\n\nnew_trait_record = TraitRecord.create(\n    timestamp=timestamp,\n    collection_date=timestamp.date(),\n    trait_name=\"Trait A1\",\n    dataset_name=\"Trait A1 Dataset\",\n    trait_value=42.0,\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    record_info={\"test\": \"test\"},\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1,\n    insert_on_create=True\n)\nprint(f\"Created Trait Record: {new_trait_record}\")\n\n# Get Trait Record by ID\ntrait_record_by_id = TraitRecord.get_by_id(new_trait_record.id)\nprint(f\"Trait Record by ID: {trait_record_by_id}\")\n\n# Get Trait Record\ntrait_record_by_name = TraitRecord.get(\n    timestamp=new_trait_record.timestamp,\n    trait_name=\"Trait A1\",\n    dataset_name=\"Trait A1 Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1\n)\nprint(f\"Trait Record by Name: {trait_record_by_name}\")\n\n# Get all Trait Records limit by 10\ntrait_records = TraitRecord.get_all(limit=10)\nprint(f\"Trait Records (limit 10):\")\nfor record in trait_records:\n    print(record)\n\n# Search Trait Records\nsearched_records = TraitRecord.search(\n    experiment_name=\"Experiment A\"\n)\nsearched_records = list(searched_records)  # Convert to list to evaluate the generator\nprint(f\"Found {len(searched_records)} records in Experiment A:\")\n\n# Update the newly created Trait Record\nupdated_record = new_trait_record.update(\n    trait_value=43.0,\n    record_info={\"test\": \"test_updated\"}\n)\nprint(f\"Updated Trait Record: {updated_record}\")\n\n# Set Trait Record Info\nupdated_record.set_info(\n    record_info={\"test\": \"test_set_info\"}\n)\nprint(f\"Set Trait Record Info: {updated_record.get_info()}\")\n\n# Check if Trait Record exists\nexists = TraitRecord.exists(\n    timestamp=new_trait_record.timestamp,\n    trait_name=\"Trait A1\",\n    dataset_name=\"Trait A1 Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1\n)\nprint(f\"Does Trait Record Exist? {exists}\")\n\n# Delete Trait Record\ndeleted_record = new_trait_record.delete()\nprint(f\"Trait Record deleted: {deleted_record}\")\n\n# Check if Trait Record exists after deletion\nexists_after_deletion = TraitRecord.exists(\n    timestamp=new_trait_record.timestamp,\n    trait_name=\"Trait A1\",\n    dataset_name=\"Trait A1 Dataset\",\n    experiment_name=\"Experiment A\",\n    site_name=\"Site A1\",\n    season_name=\"Season 1A\",\n    plot_number=1,\n    plot_row_number=1,\n    plot_column_number=1\n)\nprint(f\"Does Trait Record Exist after Deletion? {exists_after_deletion}\")\n</code></pre>"},{"location":"examples/trait_record_api/#explanation","title":"Explanation","text":"<p>This example demonstrates the basic operations for managing trait records using the Gemini API:</p> <ul> <li>Creating a trait record: The <code>TraitRecord.create()</code> method is used to create a new trait record with a timestamp, collection date, associated trait, dataset, trait value, and associated experiment, site, season, and plot.</li> <li>Getting a trait record: The <code>TraitRecord.get_by_id()</code> method retrieves a trait record by its unique ID. The <code>TraitRecord.get()</code> method retrieves a trait record by its timestamp, trait name, dataset name, and associated experiment, site, season, and plot.</li> <li>Getting all trait records: The <code>TraitRecord.get_all()</code> method retrieves all trait records, with an optional limit.</li> <li>Searching for trait records: The <code>TraitRecord.search()</code> method finds trait records based on specified criteria, such as the experiment name.</li> <li>Updating a trait record: The <code>TraitRecord.update()</code> method updates the attributes of an existing trait record.</li> <li>Setting trait record information: The <code>TraitRecord.set_info()</code> method updates the <code>record_info</code> field with new data.</li> <li>Checking for existence: The <code>TraitRecord.exists()</code> method verifies if a trait record with the given attributes exists.</li> <li>Deleting a trait record: The <code>TraitRecord.delete()</code> method removes the trait record from the database.</li> </ul>"},{"location":"pipeline/overview/","title":"GEMINI Pipeline","text":"<p>The GEMINI Pipeline is constructed from a set of modular Docker containers that interact to perform various tasks. You can find the definitions for these containers in the <code>pipeline/docker-compose.yaml</code> file within the repository. Pipeline configuration parameters are specified in the accompanying <code>.env</code> file located in the same directory.</p> <p></p> <p>Overview of the GEMINI Pipeline</p>"},{"location":"pipeline/overview/#pipeline-components","title":"Pipeline Components","text":""},{"location":"pipeline/overview/#gemini-data-storage","title":"GEMINI Data Storage","text":""},{"location":"pipeline/overview/#postgresql-db-container","title":"PostgreSQL DB Container","text":"<p>The PostgreSQL container provides a relational database management system for storing structured data, such as metadata about experiments, datasets, and models.</p>"},{"location":"pipeline/overview/#minio-s3-object-storage-container","title":"Minio S3 Object Storage Container","text":"<p>The Minio container provides object storage for unstructured data, such as images, videos, and other large files. It is compatible with the Amazon S3 API.</p>"},{"location":"pipeline/overview/#gemini-access-layer","title":"GEMINI Access Layer","text":""},{"location":"pipeline/overview/#python-api","title":"Python API","text":"<p>The Python API container provides a Python interface for interacting with the GEMINI system. It allows users to programmatically access and manage data, run models, and automate tasks.</p>"},{"location":"pipeline/overview/#rest-api","title":"REST API","text":"<p>The REST API container provides a web-based interface for accessing and managing GEMINI data and functionality. It is built using Python and Flask.</p>"},{"location":"pipeline/overview/#command-line-interface","title":"Command-Line Interface","text":"<p>The Command-Line Interface (CLI) container provides a command-line tool for interacting with the GEMINI system. It allows users to perform tasks such as importing data, running models, and managing experiments.</p>"},{"location":"rest_api/cultivars/","title":"Cultivars API","text":"<p>The Cultivars API provides endpoints for managing and retrieving cultivar data.</p>"},{"location":"rest_api/cultivars/#get-all-cultivars","title":"Get All Cultivars","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all cultivars in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of cultivar objects.</li> <li><code>404 Not Found</code>: If no cultivars are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/cultivars/#search-for-cultivars","title":"Search for Cultivars","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for cultivars based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>cultivar_population</code> (optional): The population of the cultivar.</li> <li><code>cultivar_accession</code> (optional): The accession number of the cultivar.</li> <li><code>cultivar_info</code> (optional): Additional information about the cultivar in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching cultivar objects.</li> <li><code>404 Not Found</code>: If no cultivars match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/cultivars/#get-cultivar-by-id","title":"Get Cultivar by ID","text":"<ul> <li>Endpoint: <code>/id/{cultivar_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific cultivar by its unique ID.</li> <li>Path Parameter:</li> <li><code>cultivar_id</code>: The ID of the cultivar to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested cultivar object.</li> <li><code>404 Not Found</code>: If the cultivar with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/cultivars/#create-a-new-cultivar","title":"Create a New Cultivar","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new cultivar in the database.</li> <li>Request Body:</li> <li><code>cultivar_population</code>: The population of the cultivar.</li> <li><code>cultivar_accession</code>: The accession number of the cultivar.</li> <li><code>cultivar_info</code>: Additional information about the cultivar.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created cultivar object.</li> <li><code>500 Internal Server Error</code>: If the cultivar cannot be created.</li> </ul>"},{"location":"rest_api/cultivars/#update-an-existing-cultivar","title":"Update an Existing Cultivar","text":"<ul> <li>Endpoint: <code>/id/{cultivar_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing cultivar's information.</li> <li>Path Parameter:</li> <li><code>cultivar_id</code>: The ID of the cultivar to update.</li> <li>Request Body:</li> <li><code>cultivar_population</code> (optional): The new population of the cultivar.</li> <li><code>cultivar_accession</code> (optional): The new accession number of the cultivar.</li> <li><code>cultivar_info</code> (optional): New information about the cultivar.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated cultivar object.</li> <li><code>404 Not Found</code>: If the cultivar with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the cultivar cannot be updated.</li> </ul>"},{"location":"rest_api/cultivars/#delete-a-cultivar","title":"Delete a Cultivar","text":"<ul> <li>Endpoint: <code>/id/{cultivar_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a cultivar from the database.</li> <li>Path Parameter:</li> <li><code>cultivar_id</code>: The ID of the cultivar to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the cultivar is successfully deleted.</li> <li><code>404 Not Found</code>: If the cultivar with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the cultivar cannot be deleted.</li> </ul>"},{"location":"rest_api/cultivars/#get-associated-experiments","title":"Get Associated Experiments","text":"<ul> <li>Endpoint: <code>/id/{cultivar_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific cultivar.</li> <li>Path Parameter:</li> <li><code>cultivar_id</code>: The ID of the cultivar.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment objects.</li> <li><code>404 Not Found</code>: If the cultivar is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/cultivars/#get-associated-plots","title":"Get Associated Plots","text":"<ul> <li>Endpoint: <code>/id/{cultivar_id}/plots</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all plots associated with a specific cultivar.</li> <li>Path Parameter:</li> <li><code>cultivar_id</code>: The ID of the cultivar.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated plot objects.</li> <li><code>404 Not Found</code>: If the cultivar is not found or has no associated plots.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/cultivars/#get-associated-plants","title":"Get Associated Plants","text":"<ul> <li>Endpoint: <code>/id/{cultivar_id}/plants</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all plants associated with a specific cultivar.</li> <li>Path Parameter:</li> <li><code>cultivar_id</code>: The ID of the cultivar.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated plant objects.</li> <li><code>404 Not Found</code>: If the cultivar is not found or has no associated plants.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_formats/","title":"Data Formats API","text":"<p>The Data Formats API allows you to manage and retrieve data format information.</p>"},{"location":"rest_api/data_formats/#get-all-data-formats","title":"Get All Data Formats","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all data formats available in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of data format objects.</li> <li><code>404 Not Found</code>: If no data formats are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_formats/#search-for-data-formats","title":"Search for Data Formats","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for data formats based on specified criteria.</li> <li>Query Parameters:</li> <li><code>data_format_name</code> (optional): The name of the data format.</li> <li><code>data_format_mime_type</code> (optional): The MIME type of the data format.</li> <li><code>data_format_info</code> (optional): Additional information in JSON format.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching data format objects.</li> <li><code>404 Not Found</code>: If no data formats match the criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_formats/#get-data-format-by-id","title":"Get Data Format by ID","text":"<ul> <li>Endpoint: <code>/id/{data_format_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific data format by its unique ID.</li> <li>Path Parameter:</li> <li><code>data_format_id</code>: The ID of the data format to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested data format object.</li> <li><code>404 Not Found</code>: If the data format with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_formats/#create-a-new-data-format","title":"Create a New Data Format","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new data format in the database.</li> <li>Request Body:</li> <li><code>data_format_name</code>: The name of the data format.</li> <li><code>data_format_mime_type</code>: The MIME type of the data format.</li> <li><code>data_format_info</code>: Additional information about the data format.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created data format object.</li> <li><code>500 Internal Server Error</code>: If the data format cannot be created.</li> </ul>"},{"location":"rest_api/data_formats/#update-an-existing-data-format","title":"Update an Existing Data Format","text":"<ul> <li>Endpoint: <code>/id/{data_format_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing data format's information.</li> <li>Path Parameter:</li> <li><code>data_format_id</code>: The ID of the data format to update.</li> <li>Request Body:</li> <li><code>data_format_name</code> (optional): The new name of the data format.</li> <li><code>data_format_mime_type</code> (optional): The new MIME type.</li> <li><code>data_format_info</code> (optional): New information about the data format.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated data format object.</li> <li><code>404 Not Found</code>: If the data format with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the data format cannot be updated.</li> </ul>"},{"location":"rest_api/data_formats/#delete-a-data-format","title":"Delete a Data Format","text":"<ul> <li>Endpoint: <code>/id/{data_format_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a data format from the database.</li> <li>Path Parameter:</li> <li><code>data_format_id</code>: The ID of the data format to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the data format is successfully deleted.</li> <li><code>404 Not Found</code>: If the data format with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the data format cannot be deleted.</li> </ul>"},{"location":"rest_api/data_formats/#get-associated-data-types","title":"Get Associated Data Types","text":"<ul> <li>Endpoint: <code>/id/{data_format_id}/data_types</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all data types associated with a specific data format.</li> <li>Path Parameter:</li> <li><code>data_format_id</code>: The ID of the data format.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated data type objects.</li> <li><code>404 Not Found</code>: If the data format is not found or has no associated data types.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_types/","title":"Data Types API","text":"<p>The Data Types API is used for managing and retrieving data types.</p>"},{"location":"rest_api/data_types/#get-all-data-types","title":"Get All Data Types","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all data types from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of data type objects.</li> <li><code>404 Not Found</code>: If no data types are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_types/#search-for-data-types","title":"Search for Data Types","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for data types based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>data_type_name</code> (optional): The name of the data type.</li> <li><code>data_type_info</code> (optional): Additional information in JSON format.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching data type objects.</li> <li><code>404 Not Found</code>: If no data types match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_types/#get-data-type-by-id","title":"Get Data Type by ID","text":"<ul> <li>Endpoint: <code>/id/{data_type_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific data type by its unique ID.</li> <li>Path Parameter:</li> <li><code>data_type_id</code>: The ID of the data type to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested data type object.</li> <li><code>404 Not Found</code>: If the data type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/data_types/#create-a-new-data-type","title":"Create a New Data Type","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new data type in the database.</li> <li>Request Body:</li> <li><code>data_type_name</code>: The name of the data type.</li> <li><code>data_type_info</code>: Additional information about the data type.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created data type object.</li> <li><code>500 Internal Server Error</code>: If the data type cannot be created.</li> </ul>"},{"location":"rest_api/data_types/#update-an-existing-data-type","title":"Update an Existing Data Type","text":"<ul> <li>Endpoint: <code>/id/{data_type_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing data type's information.</li> <li>Path Parameter:</li> <li><code>data_type_id</code>: The ID of the data type to update.</li> <li>Request Body:</li> <li><code>data_type_name</code> (optional): The new name of the data type.</li> <li><code>data_type_info</code> (optional): New information about the data type.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated data type object.</li> <li><code>404 Not Found</code>: If the data type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the data type cannot be updated.</li> </ul>"},{"location":"rest_api/data_types/#delete-a-data-type","title":"Delete a Data Type","text":"<ul> <li>Endpoint: <code>/id/{data_type_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a data type from the database.</li> <li>Path Parameter:</li> <li><code>data_type_id</code>: The ID of the data type to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the data type is successfully deleted.</li> <li><code>404 Not Found</code>: If the data type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the data type cannot be deleted.</li> </ul>"},{"location":"rest_api/data_types/#get-associated-data-formats","title":"Get Associated Data Formats","text":"<ul> <li>Endpoint: <code>/id/{data_type_id}/data_formats</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all data formats associated with a specific data type.</li> <li>Path Parameter:</li> <li><code>data_type_id</code>: The ID of the data type.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated data format objects.</li> <li><code>404 Not Found</code>: If the data type is not found or has no associated data formats.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/dataset_types/","title":"Dataset Types API","text":"<p>The Dataset Types API is used for managing and retrieving dataset type information.</p>"},{"location":"rest_api/dataset_types/#get-all-dataset-types","title":"Get All Dataset Types","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all dataset types from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of dataset type objects.</li> <li><code>404 Not Found</code>: If no dataset types are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/dataset_types/#search-for-dataset-types","title":"Search for Dataset Types","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for dataset types based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>dataset_type_name</code> (optional): The name of the dataset type.</li> <li><code>dataset_type_info</code> (optional): Additional information in JSON format.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching dataset type objects.</li> <li><code>404 Not Found</code>: If no dataset types match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/dataset_types/#get-dataset-type-by-id","title":"Get Dataset Type by ID","text":"<ul> <li>Endpoint: <code>/id/{dataset_type_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific dataset type by its unique ID.</li> <li>Path Parameter:</li> <li><code>dataset_type_id</code>: The ID of the dataset type to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested dataset type object.</li> <li><code>404 Not Found</code>: If the dataset type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/dataset_types/#create-a-new-dataset-type","title":"Create a New Dataset Type","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new dataset type in the database.</li> <li>Request Body:</li> <li><code>dataset_type_name</code>: The name of the dataset type.</li> <li><code>dataset_type_info</code>: Additional information about the dataset type.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created dataset type object.</li> <li><code>500 Internal Server Error</code>: If the dataset type cannot be created.</li> </ul>"},{"location":"rest_api/dataset_types/#update-an-existing-dataset-type","title":"Update an Existing Dataset Type","text":"<ul> <li>Endpoint: <code>/id/{dataset_type_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing dataset type's information.</li> <li>Path Parameter:</li> <li><code>dataset_type_id</code>: The ID of the dataset type to update.</li> <li>Request Body:</li> <li><code>dataset_type_name</code> (optional): The new name of the dataset type.</li> <li><code>dataset_type_info</code> (optional): New information about the dataset type.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated dataset type object.</li> <li><code>404 Not Found</code>: If the dataset type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the dataset type cannot be updated.</li> </ul>"},{"location":"rest_api/dataset_types/#delete-a-dataset-type","title":"Delete a Dataset Type","text":"<ul> <li>Endpoint: <code>/id/{dataset_type_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a dataset type from the database.</li> <li>Path Parameter:</li> <li><code>dataset_type_id</code>: The ID of the dataset type to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the dataset type is successfully deleted.</li> <li><code>404 Not Found</code>: If the dataset type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the dataset type cannot be deleted.</li> </ul>"},{"location":"rest_api/datasets/","title":"Datasets API","text":"<p>The Datasets API provides endpoints for managing and retrieving dataset information and records.</p>"},{"location":"rest_api/datasets/#get-all-datasets","title":"Get All Datasets","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all datasets from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of dataset objects.</li> <li><code>404 Not Found</code>: If no datasets are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#search-for-datasets","title":"Search for Datasets","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for datasets based on specified criteria.</li> <li>Query Parameters:</li> <li><code>dataset_name</code> (optional): The name of the dataset.</li> <li><code>dataset_info</code> (optional): Additional information in JSON format.</li> <li><code>dataset_type_id</code> (optional): The ID of the dataset type.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li><code>collection_date</code> (optional): The date when the data was collected.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching dataset objects.</li> <li><code>404 Not Found</code>: If no datasets match the criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#get-dataset-by-id","title":"Get Dataset by ID","text":"<ul> <li>Endpoint: <code>/id/{dataset_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific dataset by its unique ID.</li> <li>Path Parameter:</li> <li><code>dataset_id</code>: The ID of the dataset to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested dataset object.</li> <li><code>404 Not Found</code>: If the dataset with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#create-a-new-dataset","title":"Create a New Dataset","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new dataset in the database.</li> <li>Request Body:</li> <li><code>collection_date</code>: The date when the data was collected.</li> <li><code>dataset_name</code>: The name of the dataset.</li> <li><code>dataset_info</code>: Additional information about the dataset.</li> <li><code>dataset_type_id</code>: The ID of the dataset type.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created dataset object.</li> <li><code>500 Internal Server Error</code>: If the dataset cannot be created.</li> </ul>"},{"location":"rest_api/datasets/#update-an-existing-dataset","title":"Update an Existing Dataset","text":"<ul> <li>Endpoint: <code>/id/{dataset_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing dataset's information.</li> <li>Path Parameter:</li> <li><code>dataset_id</code>: The ID of the dataset to update.</li> <li>Request Body:</li> <li><code>collection_date</code> (optional): The new collection date.</li> <li><code>dataset_name</code> (optional): The new name of the dataset.</li> <li><code>dataset_info</code> (optional): New information about the dataset.</li> <li><code>dataset_type_id</code> (optional): The new dataset type ID.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated dataset object.</li> <li><code>404 Not Found</code>: If the dataset with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the dataset cannot be updated.</li> </ul>"},{"location":"rest_api/datasets/#delete-a-dataset","title":"Delete a Dataset","text":"<ul> <li>Endpoint: <code>/id/{dataset_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a dataset from the database.</li> <li>Path Parameter:</li> <li><code>dataset_id</code>: The ID of the dataset to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the dataset is successfully deleted.</li> <li><code>404 Not Found</code>: If the dataset with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the dataset cannot be deleted.</li> </ul>"},{"location":"rest_api/datasets/#get-associated-experiments","title":"Get Associated Experiments","text":"<ul> <li>Endpoint: <code>/id/{dataset_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific dataset.</li> <li>Path Parameter:</li> <li><code>dataset_id</code>: The ID of the dataset.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment objects.</li> <li><code>404 Not Found</code>: If the dataset is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#add-a-dataset-record","title":"Add a Dataset Record","text":"<ul> <li>Endpoint: <code>/id/{dataset_id}/records</code></li> <li>Method: <code>POST</code></li> <li>Description: Adds a new record to a specific dataset.</li> <li>Path Parameter:</li> <li><code>dataset_id</code>: The ID of the dataset.</li> <li>Request Body (multipart/form-data):</li> <li><code>timestamp</code>: The timestamp of the record.</li> <li><code>collection_date</code>: The date of data collection.</li> <li><code>dataset_data</code>: The data for the record.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>record_file</code> (optional): A file associated with the record.</li> <li><code>record_info</code> (optional): Additional information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly added dataset record object.</li> <li><code>404 Not Found</code>: If the dataset is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be added.</li> </ul>"},{"location":"rest_api/datasets/#search-dataset-records","title":"Search Dataset Records","text":"<ul> <li>Endpoint: <code>/id/{dataset_id}/records</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for records within a specific dataset.</li> <li>Path Parameter:</li> <li><code>dataset_id</code>: The ID of the dataset.</li> <li>Query Parameters:</li> <li><code>experiment_name</code> (optional): The name of the experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>collection_date</code> (optional): The collection date.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of dataset record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the dataset is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#filter-dataset-records","title":"Filter Dataset Records","text":"<ul> <li>Endpoint: <code>/id/{dataset_id}/records/filter</code></li> <li>Method: <code>GET</code></li> <li>Description: Filters records within a dataset based on a set of criteria.</li> <li>Path Parameter:</li> <li><code>dataset_id</code>: The ID of the dataset.</li> <li>Query Parameters:</li> <li><code>start_timestamp</code> (optional): The start of the time range.</li> <li><code>end_timestamp</code> (optional): The end of the time range.</li> <li><code>experiment_names</code> (optional): A list of experiment names.</li> <li><code>season_names</code> (optional): A list of season names.</li> <li><code>site_names</code> (optional): A list of site names.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of filtered dataset record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the dataset is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#get-dataset-record-by-id","title":"Get Dataset Record by ID","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific dataset record by its unique ID.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the dataset record.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested dataset record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#download-dataset-record-file","title":"Download Dataset Record File","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}/download</code></li> <li>Method: <code>GET</code></li> <li>Description: Downloads the file associated with a specific dataset record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the dataset record.</li> <li>Responses:</li> <li><code>307 Temporary Redirect</code>: Redirects to the file download URL.</li> <li><code>404 Not Found</code>: If the record or its associated file is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/datasets/#update-dataset-record","title":"Update Dataset Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing dataset record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the dataset record to update.</li> <li>Request Body:</li> <li><code>dataset_data</code> (optional): The new data for the record.</li> <li><code>record_info</code> (optional): New information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated dataset record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be updated.</li> </ul>"},{"location":"rest_api/datasets/#delete-dataset-record","title":"Delete Dataset Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a dataset record from the database.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the dataset record to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the record is successfully deleted.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be deleted.</li> </ul>"},{"location":"rest_api/experiments/","title":"Experiments API","text":"<p>The Experiments API provides endpoints for managing and retrieving experiment data and their associated entities.</p>"},{"location":"rest_api/experiments/#get-all-experiments","title":"Get All Experiments","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all experiments in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of experiment objects.</li> <li><code>404 Not Found</code>: If no experiments are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#search-for-experiments","title":"Search for Experiments","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for experiments based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>experiment_name</code> (optional): The name of the experiment.</li> <li><code>experiment_info</code> (optional): Additional information about the experiment in JSON format.</li> <li><code>experiment_start_date</code> (optional): The start date of the experiment.</li> <li><code>experiment_end_date</code> (optional): The end date of the experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching experiment objects.</li> <li><code>404 Not Found</code>: If no experiments match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-by-id","title":"Get Experiment by ID","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific experiment by its unique ID.</li> <li>Path Parameter:</li> <li><code>experiment_id</code>: The ID of the experiment to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested experiment object.</li> <li><code>404 Not Found</code>: If the experiment with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-a-new-experiment","title":"Create a New Experiment","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new experiment in the database.</li> <li>Request Body:</li> <li><code>experiment_name</code>: The name of the experiment.</li> <li><code>experiment_info</code>: Additional information about the experiment.</li> <li><code>experiment_start_date</code>: The start date of the experiment.</li> <li><code>experiment_end_date</code>: The end date of the experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created experiment object.</li> <li><code>500 Internal Server Error</code>: If the experiment cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#update-an-existing-experiment","title":"Update an Existing Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing experiment's information.</li> <li>Path Parameter:</li> <li><code>experiment_id</code>: The ID of the experiment to update.</li> <li>Request Body:</li> <li><code>experiment_name</code> (optional): The new name of the experiment.</li> <li><code>experiment_info</code> (optional): New information about the experiment.</li> <li><code>experiment_start_date</code> (optional): The new start date of the experiment.</li> <li><code>experiment_end_date</code> (optional): The new end date of the experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated experiment object.</li> <li><code>404 Not Found</code>: If the experiment with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the experiment cannot be updated.</li> </ul>"},{"location":"rest_api/experiments/#delete-an-experiment","title":"Delete an Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes an experiment from the database.</li> <li>Path Parameter:</li> <li><code>experiment_id</code>: The ID of the experiment to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the experiment is successfully deleted.</li> <li><code>404 Not Found</code>: If the experiment with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the experiment cannot be deleted.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-seasons","title":"Get Experiment Seasons","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/seasons</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all seasons associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated season objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated seasons.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-season-for-experiment","title":"Create Season for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/seasons</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new season for a specific experiment.</li> <li>Request Body:</li> <li><code>season_name</code>: The name of the season.</li> <li><code>season_info</code>: Additional information about the season.</li> <li><code>season_start_date</code>: The start date of the season.</li> <li><code>season_end_date</code>: The end date of the season.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created season object.</li> <li><code>500 Internal Server Error</code>: If the season cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-sites","title":"Get Experiment Sites","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/sites</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all sites associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated site objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated sites.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-site-for-experiment","title":"Create Site for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/sites</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new site for a specific experiment.</li> <li>Request Body:</li> <li><code>site_name</code>: The name of the site.</li> <li><code>site_info</code>: Additional information about the site.</li> <li><code>site_city</code>: The city where the site is located.</li> <li><code>site_state</code>: The state where the site is located.</li> <li><code>site_country</code>: The country where the site is located.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created site object.</li> <li><code>500 Internal Server Error</code>: If the site cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-cultivars","title":"Get Experiment Cultivars","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/cultivars</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all cultivars associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated cultivar objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated cultivars.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-cultivar-for-experiment","title":"Create Cultivar for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/cultivars</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new cultivar for a specific experiment.</li> <li>Request Body:</li> <li><code>cultivar_population</code>: The population of the cultivar.</li> <li><code>cultivar_accession</code>: The accession number of the cultivar.</li> <li><code>cultivar_info</code>: Additional information about the cultivar.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created cultivar object.</li> <li><code>500 Internal Server Error</code>: If the cultivar cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-sensor-platforms","title":"Get Experiment Sensor Platforms","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/sensor_platforms</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all sensor platforms associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated sensor platform objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated sensor platforms.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-sensor-platform-for-experiment","title":"Create Sensor Platform for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/sensor_platforms</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new sensor platform for a specific experiment.</li> <li>Request Body:</li> <li><code>sensor_platform_name</code>: The name of the sensor platform.</li> <li><code>sensor_platform_info</code>: Additional information about the sensor platform.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created sensor platform object.</li> <li><code>500 Internal Server Error</code>: If the sensor platform cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-traits","title":"Get Experiment Traits","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/traits</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all traits associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated trait objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated traits.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-trait-for-experiment","title":"Create Trait for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/traits</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new trait for a specific experiment.</li> <li>Request Body:</li> <li><code>trait_name</code>: The name of the trait.</li> <li><code>trait_units</code>: The units of the trait.</li> <li><code>trait_level_id</code>: The ID of the trait level.</li> <li><code>trait_info</code>: Additional information about the trait.</li> <li><code>trait_metrics</code>: Metrics associated with the trait.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created trait object.</li> <li><code>500 Internal Server Error</code>: If the trait cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-sensors","title":"Get Experiment Sensors","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/sensors</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all sensors associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated sensor objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated sensors.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-sensor-for-experiment","title":"Create Sensor for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/sensors</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new sensor for a specific experiment.</li> <li>Request Body:</li> <li><code>sensor_name</code>: The name of the sensor.</li> <li><code>sensor_data_type_id</code>: The ID of the sensor data type.</li> <li><code>sensor_data_format_id</code>: The ID of the sensor data format.</li> <li><code>sensor_type_id</code>: The ID of the sensor type.</li> <li><code>sensor_info</code>: Additional information about the sensor.</li> <li><code>sensor_platform_name</code>: The name of the associated sensor platform.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created sensor object.</li> <li><code>500 Internal Server Error</code>: If the sensor cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-scripts","title":"Get Experiment Scripts","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/scripts</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all scripts associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated script objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated scripts.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-script-for-experiment","title":"Create Script for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/scripts</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new script for a specific experiment.</li> <li>Request Body:</li> <li><code>script_name</code>: The name of the script.</li> <li><code>script_extension</code>: The extension of the script file.</li> <li><code>script_url</code>: The URL of the script.</li> <li><code>script_info</code>: Additional information about the script.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created script object.</li> <li><code>500 Internal Server Error</code>: If the script cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-procedures","title":"Get Experiment Procedures","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/procedures</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all procedures associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated procedure objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated procedures.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-procedure-for-experiment","title":"Create Procedure for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/procedures</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new procedure for a specific experiment.</li> <li>Request Body:</li> <li><code>procedure_name</code>: The name of the procedure.</li> <li><code>procedure_info</code>: Additional information about the procedure.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created procedure object.</li> <li><code>500 Internal Server Error</code>: If the procedure cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-models","title":"Get Experiment Models","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/models</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all models associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated model objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated models.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-model-for-experiment","title":"Create Model for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/models</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new model for a specific experiment.</li> <li>Request Body:</li> <li><code>model_name</code>: The name of the model.</li> <li><code>model_url</code>: The URL of the model.</li> <li><code>model_info</code>: Additional information about the model.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created model object.</li> <li><code>500 Internal Server Error</code>: If the model cannot be created.</li> </ul>"},{"location":"rest_api/experiments/#get-experiment-datasets","title":"Get Experiment Datasets","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/datasets</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all datasets associated with a specific experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated dataset objects.</li> <li><code>404 Not Found</code>: If the experiment is not found or has no associated datasets.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/experiments/#create-dataset-for-experiment","title":"Create Dataset for Experiment","text":"<ul> <li>Endpoint: <code>/id/{experiment_id}/datasets</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new dataset for a specific experiment.</li> <li>Request Body:</li> <li><code>dataset_name</code>: The name of the dataset.</li> <li><code>dataset_info</code>: Additional information about the dataset.</li> <li><code>dataset_type_id</code>: The ID of the dataset type.</li> <li><code>collection_date</code>: The date when the data was collected.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created dataset object.</li> <li><code>500 Internal Server Error</code>: If the dataset cannot be created.</li> </ul>"},{"location":"rest_api/files/","title":"Files API","text":"<p>The Files API provides endpoints for managing and interacting with files stored in a Minio storage bucket.</p>"},{"location":"rest_api/files/#get-file-metadata","title":"Get File Metadata","text":"<ul> <li>Endpoint: <code>/metadata/{file_path}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves metadata for a specific file.</li> <li>Path Parameter:</li> <li><code>file_path</code>: The full path to the file, including the bucket name (e.g., <code>my-bucket/my-folder/my-file.txt</code>).</li> <li>Responses:</li> <li><code>200 OK</code>: A <code>FileMetadata</code> object containing the file's details.</li> <li><code>404 Not Found</code>: If the bucket or file does not exist.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/files/#list-files","title":"List Files","text":"<ul> <li>Endpoint: <code>/list/{file_path}</code></li> <li>Method: <code>GET</code></li> <li>Description: Lists all files within a specified path.</li> <li>Path Parameter:</li> <li><code>file_path</code>: The path to list files from, including the bucket name (e.g., <code>my-bucket/my-folder/</code>).</li> <li>Responses:</li> <li><code>200 OK</code>: A list of <code>FileMetadata</code> objects for each file in the path.</li> <li><code>404 Not Found</code>: If the bucket does not exist.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/files/#download-a-file","title":"Download a File","text":"<ul> <li>Endpoint: <code>/download/{file_path}</code></li> <li>Method: <code>GET</code></li> <li>Description: Downloads a specific file from the storage.</li> <li>Path Parameter:</li> <li><code>file_path</code>: The full path to the file to download.</li> <li>Responses:</li> <li><code>200 OK</code>: A file stream for downloading.</li> <li><code>404 Not Found</code>: If the bucket or file does not exist.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/files/#upload-a-file","title":"Upload a File","text":"<ul> <li>Endpoint: <code>/upload</code></li> <li>Method: <code>POST</code></li> <li>Description: Uploads a new file to the specified bucket and path.</li> <li>Request Body (multipart/form-data):</li> <li><code>bucket_name</code>: The name of the bucket to upload to.</li> <li><code>object_name</code>: The full path and name for the new file.</li> <li><code>file</code>: The file to upload.</li> <li>Responses:</li> <li><code>200 OK</code>: A <code>FileMetadata</code> object for the newly uploaded file.</li> <li><code>404 Not Found</code>: If the bucket does not exist.</li> <li><code>500 Internal Server Error</code>: If the file cannot be uploaded.</li> </ul>"},{"location":"rest_api/files/#delete-a-file","title":"Delete a File","text":"<ul> <li>Endpoint: <code>/delete/{file_path}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a file from the storage.</li> <li>Path Parameter:</li> <li><code>file_path</code>: The full path to the file to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the file is successfully deleted.</li> <li><code>404 Not Found</code>: If the bucket or file does not exist.</li> <li><code>500 Internal Server Error</code>: If the file cannot be deleted.</li> </ul>"},{"location":"rest_api/models/","title":"Models API","text":"<p>The Models API provides endpoints for managing and retrieving machine learning models and their associated data.</p>"},{"location":"rest_api/models/#get-all-models","title":"Get All Models","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all models from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of model objects.</li> <li><code>404 Not Found</code>: If no models are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#search-for-models","title":"Search for Models","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for models based on specified criteria.</li> <li>Query Parameters:</li> <li><code>model_name</code> (optional): The name of the model.</li> <li><code>model_url</code> (optional): The URL where the model is stored.</li> <li><code>model_info</code> (optional): Additional information in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching model objects.</li> <li><code>404 Not Found</code>: If no models match the criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#get-model-by-id","title":"Get Model by ID","text":"<ul> <li>Endpoint: <code>/id/{model_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific model by its unique ID.</li> <li>Path Parameter:</li> <li><code>model_id</code>: The ID of the model to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested model object.</li> <li><code>404 Not Found</code>: If the model with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#create-a-new-model","title":"Create a New Model","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new model in the database.</li> <li>Request Body:</li> <li><code>model_name</code>: The name of the model.</li> <li><code>model_url</code>: The URL where the model is stored.</li> <li><code>model_info</code>: Additional information about the model.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created model object.</li> <li><code>500 Internal Server Error</code>: If the model cannot be created.</li> </ul>"},{"location":"rest_api/models/#update-an-existing-model","title":"Update an Existing Model","text":"<ul> <li>Endpoint: <code>/id/{model_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing model's information.</li> <li>Path Parameter:</li> <li><code>model_id</code>: The ID of the model to update.</li> <li>Request Body:</li> <li><code>model_name</code> (optional): The new name of the model.</li> <li><code>model_url</code> (optional): The new URL for the model.</li> <li><code>model_info</code> (optional): New information about the model.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated model object.</li> <li><code>404 Not Found</code>: If the model with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the model cannot be updated.</li> </ul>"},{"location":"rest_api/models/#delete-a-model","title":"Delete a Model","text":"<ul> <li>Endpoint: <code>/id/{model_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a model from the database.</li> <li>Path Parameter:</li> <li><code>model_id</code>: The ID of the model to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the model is successfully deleted.</li> <li><code>404 Not Found</code>: If the model with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the model cannot be deleted.</li> </ul>"},{"location":"rest_api/models/#get-model-experiments","title":"Get Model Experiments","text":"<ul> <li>Endpoint: <code>/id/{model_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific model.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment names.</li> <li><code>404 Not Found</code>: If the model is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#get-model-runs","title":"Get Model Runs","text":"<ul> <li>Endpoint: <code>/id/{model_id}/runs</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all runs associated with a specific model.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated model run objects.</li> <li><code>404 Not Found</code>: If the model is not found or has no associated runs.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#get-model-datasets","title":"Get Model Datasets","text":"<ul> <li>Endpoint: <code>/id/{model_id}/datasets</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all datasets associated with a specific model.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated dataset objects.</li> <li><code>404 Not Found</code>: If the model is not found or has no associated datasets.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#create-model-run","title":"Create Model Run","text":"<ul> <li>Endpoint: <code>/id/{model_id}/runs</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new run for a specific model.</li> <li>Request Body:</li> <li><code>model_run_info</code>: Additional information about the model run.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created model run object.</li> <li><code>500 Internal Server Error</code>: If the model run cannot be created.</li> </ul>"},{"location":"rest_api/models/#create-model-dataset","title":"Create Model Dataset","text":"<ul> <li>Endpoint: <code>/id/{model_id}/datasets</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new dataset for a specific model.</li> <li>Request Body:</li> <li><code>dataset_name</code>: The name of the dataset.</li> <li><code>dataset_info</code>: Additional information about the dataset.</li> <li><code>collection_date</code>: The date when the data was collected.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created dataset object.</li> <li><code>500 Internal Server Error</code>: If the dataset cannot be created.</li> </ul>"},{"location":"rest_api/models/#add-a-model-record","title":"Add a Model Record","text":"<ul> <li>Endpoint: <code>/id/{model_id}/records</code></li> <li>Method: <code>POST</code></li> <li>Description: Adds a new record to a specific model.</li> <li>Request Body (multipart/form-data):</li> <li><code>timestamp</code>: The timestamp of the record.</li> <li><code>collection_date</code>: The date of data collection.</li> <li><code>model_data</code>: The data for the record.</li> <li><code>dataset_name</code>: The name of the associated dataset.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>record_file</code> (optional): A file associated with the record.</li> <li><code>record_info</code> (optional): Additional information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly added model record object.</li> <li><code>404 Not Found</code>: If the model is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be added.</li> </ul>"},{"location":"rest_api/models/#search-model-records","title":"Search Model Records","text":"<ul> <li>Endpoint: <code>/id/{model_id}/records</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for records within a specific model.</li> <li>Query Parameters:</li> <li><code>experiment_name</code> (optional): The name of the experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>collection_date</code> (optional): The collection date.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of model record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the model is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#filter-model-records","title":"Filter Model Records","text":"<ul> <li>Endpoint: <code>/id/{model_id}/records/filter</code></li> <li>Method: <code>GET</code></li> <li>Description: Filters records within a model based on a set of criteria.</li> <li>Query Parameters:</li> <li><code>start_timestamp</code> (optional): The start of the time range.</li> <li><code>end_timestamp</code> (optional): The end of the time range.</li> <li><code>dataset_names</code> (optional): A list of dataset names.</li> <li><code>experiment_names</code> (optional): A list of experiment names.</li> <li><code>season_names</code> (optional): A list of season names.</li> <li><code>site_names</code> (optional): A list of site names.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of filtered model record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the model is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#get-model-record-by-id","title":"Get Model Record by ID","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific model record by its unique ID.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the model record.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested model record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#download-model-record-file","title":"Download Model Record File","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}/download</code></li> <li>Method: <code>GET</code></li> <li>Description: Downloads the file associated with a specific model record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the model record.</li> <li>Responses:</li> <li><code>307 Temporary Redirect</code>: Redirects to the file download URL.</li> <li><code>404 Not Found</code>: If the record or its associated file is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/models/#update-model-record","title":"Update Model Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing model record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the model record to update.</li> <li>Request Body:</li> <li><code>model_data</code> (optional): The new data for the record.</li> <li><code>record_info</code> (optional): New information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated model record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be updated.</li> </ul>"},{"location":"rest_api/models/#delete-model-record","title":"Delete Model Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a model record from the database.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the model record to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the record is successfully deleted.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be deleted.</li> </ul>"},{"location":"rest_api/overview/","title":"REST API Overview","text":"<p>Welcome to the Gemini REST API documentation. This API provides a comprehensive set of endpoints to interact with the Gemini database, allowing you to manage and retrieve data for various resources.</p>"},{"location":"rest_api/overview/#available-endpoints","title":"Available Endpoints","text":"<p>Below is a list of the available API endpoints, each with its own dedicated documentation page:</p> <ul> <li>Cultivars</li> <li>Data Formats</li> <li>Data Types</li> <li>Datasets</li> <li>Dataset Types</li> <li>Experiments</li> <li>Files</li> <li>Models</li> <li>Plants</li> <li>Plots</li> <li>Procedures</li> <li>Scripts</li> <li>Seasons</li> <li>Sensors</li> <li>Sites</li> <li>Sensor Types</li> <li>Sensor Platforms</li> <li>Traits</li> </ul>"},{"location":"rest_api/plants/","title":"Plants API","text":"<p>The Plants API provides endpoints for managing and retrieving plant data.</p>"},{"location":"rest_api/plants/#get-all-plants","title":"Get All Plants","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all plants in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of plant objects.</li> <li><code>404 Not Found</code>: If no plants are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plants/#search-for-plants","title":"Search for Plants","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for plants based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>plant_number</code> (optional): The number of the plant.</li> <li><code>plot_number</code> (optional): The number of the plot.</li> <li><code>plot_row_number</code> (optional): The row number of the plot.</li> <li><code>plot_column_number</code> (optional): The column number of the plot.</li> <li><code>cultivar_accession</code> (optional): The accession number of the cultivar.</li> <li><code>cultivar_population</code> (optional): The population of the cultivar.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>plant_info</code> (optional): Additional information about the plant in JSON format.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching plant objects.</li> <li><code>404 Not Found</code>: If no plants match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plants/#get-plant-by-id","title":"Get Plant by ID","text":"<ul> <li>Endpoint: <code>/id/{plant_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific plant by its unique ID.</li> <li>Path Parameter:</li> <li><code>plant_id</code>: The ID of the plant to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested plant object.</li> <li><code>404 Not Found</code>: If the plant with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plants/#create-a-new-plant","title":"Create a New Plant","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new plant in the database.</li> <li>Request Body:</li> <li><code>plant_number</code>: The number of the plant.</li> <li><code>plant_info</code>: Additional information about the plant.</li> <li><code>cultivar_accession</code>: The accession number of the cultivar.</li> <li><code>cultivar_population</code>: The population of the cultivar.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>plot_number</code>: The number of the plot.</li> <li><code>plot_row_number</code>: The row number of the plot.</li> <li><code>plot_column_number</code>: The column number of the plot.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created plant object.</li> <li><code>500 Internal Server Error</code>: If the plant cannot be created.</li> </ul>"},{"location":"rest_api/plants/#update-an-existing-plant","title":"Update an Existing Plant","text":"<ul> <li>Endpoint: <code>/id/{plant_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing plant's information.</li> <li>Path Parameter:</li> <li><code>plant_id</code>: The ID of the plant to update.</li> <li>Request Body:</li> <li><code>plant_number</code> (optional): The new number of the plant.</li> <li><code>plant_info</code> (optional): New information about the plant.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated plant object.</li> <li><code>404 Not Found</code>: If the plant with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the plant cannot be updated.</li> </ul>"},{"location":"rest_api/plants/#delete-a-plant","title":"Delete a Plant","text":"<ul> <li>Endpoint: <code>/id/{plant_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a plant from the database.</li> <li>Path Parameter:</li> <li><code>plant_id</code>: The ID of the plant to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the plant is successfully deleted.</li> <li><code>404 Not Found</code>: If the plant with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the plant cannot be deleted.</li> </ul>"},{"location":"rest_api/plants/#get-plant-cultivar","title":"Get Plant Cultivar","text":"<ul> <li>Endpoint: <code>/id/{plant_id}/cultivar</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves the cultivar associated with a specific plant.</li> <li>Responses:</li> <li><code>200 OK</code>: The associated cultivar object.</li> <li><code>404 Not Found</code>: If the plant or its associated cultivar is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plants/#get-associated-plot","title":"Get Associated Plot","text":"<ul> <li>Endpoint: <code>/id/{plant_id}/plot</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves the plot associated with a specific plant.</li> <li>Responses:</li> <li><code>200 OK</code>: The associated plot object.</li> <li><code>404 Not Found</code>: If the plant or its associated plot is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plots/","title":"Plots API","text":"<p>The Plots API provides endpoints for managing and retrieving plot data and their associations.</p>"},{"location":"rest_api/plots/#get-all-plots","title":"Get All Plots","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all plots in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of plot objects.</li> <li><code>404 Not Found</code>: If no plots are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plots/#search-for-plots","title":"Search for Plots","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for plots based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>plot_number</code> (optional): The number of the plot.</li> <li><code>plot_row_number</code> (optional): The row number of the plot.</li> <li><code>plot_column_number</code> (optional): The column number of the plot.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching plot objects.</li> <li><code>404 Not Found</code>: If no plots match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plots/#get-plot-by-id","title":"Get Plot by ID","text":"<ul> <li>Endpoint: <code>/id/{plot_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific plot by its unique ID.</li> <li>Path Parameter:</li> <li><code>plot_id</code>: The ID of the plot to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested plot object.</li> <li><code>404 Not Found</code>: If the plot with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plots/#create-a-new-plot","title":"Create a New Plot","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new plot in the database.</li> <li>Request Body:</li> <li><code>plot_number</code>: The number of the plot.</li> <li><code>plot_row_number</code>: The row number of the plot.</li> <li><code>plot_column_number</code>: The column number of the plot.</li> <li><code>plot_info</code>: Additional information about the plot.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>cultivar_accession</code>: The accession number of the associated cultivar.</li> <li><code>cultivar_population</code>: The population of the associated cultivar.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created plot object.</li> <li><code>500 Internal Server Error</code>: If the plot cannot be created.</li> </ul>"},{"location":"rest_api/plots/#update-an-existing-plot","title":"Update an Existing Plot","text":"<ul> <li>Endpoint: <code>/id/{plot_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing plot's information.</li> <li>Path Parameter:</li> <li><code>plot_id</code>: The ID of the plot to update.</li> <li>Request Body:</li> <li><code>plot_number</code> (optional): The new number of the plot.</li> <li><code>plot_row_number</code> (optional): The new row number of the plot.</li> <li><code>plot_column_number</code> (optional): The new column number of the plot.</li> <li><code>plot_info</code> (optional): New information about the plot.</li> <li><code>plot_geometry_info</code> (optional): New geometry information for the plot.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated plot object.</li> <li><code>404 Not Found</code>: If the plot with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the plot cannot be updated.</li> </ul>"},{"location":"rest_api/plots/#delete-a-plot","title":"Delete a Plot","text":"<ul> <li>Endpoint: <code>/id/{plot_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a plot from the database.</li> <li>Path Parameter:</li> <li><code>plot_id</code>: The ID of the plot to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the plot is successfully deleted.</li> <li><code>404 Not Found</code>: If the plot with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the plot cannot be deleted.</li> </ul>"},{"location":"rest_api/plots/#get-plot-cultivars","title":"Get Plot Cultivars","text":"<ul> <li>Endpoint: <code>/id/{plot_id}/cultivars</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all cultivars associated with a specific plot.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated cultivar objects.</li> <li><code>404 Not Found</code>: If the plot is not found or has no associated cultivars.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plots/#get-plot-experiment","title":"Get Plot Experiment","text":"<ul> <li>Endpoint: <code>/id/{plot_id}/experiment</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves the experiment associated with a specific plot.</li> <li>Responses:</li> <li><code>200 OK</code>: The associated experiment object.</li> <li><code>404 Not Found</code>: If the plot or its associated experiment is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plots/#get-plot-season","title":"Get Plot Season","text":"<ul> <li>Endpoint: <code>/id/{plot_id}/season</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves the season associated with a specific plot.</li> <li>Responses:</li> <li><code>200 OK</code>: The associated season object.</li> <li><code>404 Not Found</code>: If the plot or its associated season is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/plots/#get-plot-site","title":"Get Plot Site","text":"<ul> <li>Endpoint: <code>/id/{plot_id}/site</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves the site associated with a specific plot.</li> <li>Responses:</li> <li><code>200 OK</code>: The associated site object.</li> <li><code>404 Not Found</code>: If the plot or its associated site is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/","title":"Procedures API","text":"<p>The Procedures API provides endpoints for managing and retrieving procedural data, including their runs, datasets, and records.</p>"},{"location":"rest_api/procedures/#get-all-procedures","title":"Get All Procedures","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all procedures from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of procedure objects.</li> <li><code>404 Not Found</code>: If no procedures are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#search-for-procedures","title":"Search for Procedures","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for procedures based on specified criteria.</li> <li>Query Parameters:</li> <li><code>procedure_name</code> (optional): The name of the procedure.</li> <li><code>procedure_info</code> (optional): Additional information in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching procedure objects.</li> <li><code>404 Not Found</code>: If no procedures match the criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#get-procedure-by-id","title":"Get Procedure by ID","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific procedure by its unique ID.</li> <li>Path Parameter:</li> <li><code>procedure_id</code>: The ID of the procedure to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested procedure object.</li> <li><code>404 Not Found</code>: If the procedure with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#create-a-new-procedure","title":"Create a New Procedure","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new procedure in the database.</li> <li>Request Body:</li> <li><code>procedure_name</code>: The name of the procedure.</li> <li><code>procedure_info</code>: Additional information about the procedure.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created procedure object.</li> <li><code>500 Internal Server Error</code>: If the procedure cannot be created.</li> </ul>"},{"location":"rest_api/procedures/#update-an-existing-procedure","title":"Update an Existing Procedure","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing procedure's information.</li> <li>Path Parameter:</li> <li><code>procedure_id</code>: The ID of the procedure to update.</li> <li>Request Body:</li> <li><code>procedure_name</code> (optional): The new name of the procedure.</li> <li><code>procedure_info</code> (optional): New information about the procedure.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated procedure object.</li> <li><code>404 Not Found</code>: If the procedure with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the procedure cannot be updated.</li> </ul>"},{"location":"rest_api/procedures/#delete-a-procedure","title":"Delete a Procedure","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a procedure from the database.</li> <li>Path Parameter:</li> <li><code>procedure_id</code>: The ID of the procedure to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the procedure is successfully deleted.</li> <li><code>404 Not Found</code>: If the procedure with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the procedure cannot be deleted.</li> </ul>"},{"location":"rest_api/procedures/#get-procedure-runs","title":"Get Procedure Runs","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/runs</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all runs associated with a specific procedure.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated procedure run objects.</li> <li><code>404 Not Found</code>: If the procedure is not found or has no associated runs.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#get-procedure-experiments","title":"Get Procedure Experiments","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific procedure.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment names.</li> <li><code>404 Not Found</code>: If the procedure is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#get-procedure-datasets","title":"Get Procedure Datasets","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/datasets</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all datasets associated with a specific procedure.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated dataset objects.</li> <li><code>404 Not Found</code>: If the procedure is not found or has no associated datasets.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#create-procedure-run","title":"Create Procedure Run","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/runs</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new run for a specific procedure.</li> <li>Request Body:</li> <li><code>procedure_run_info</code>: Additional information about the procedure run.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created procedure run object.</li> <li><code>500 Internal Server Error</code>: If the run cannot be created.</li> </ul>"},{"location":"rest_api/procedures/#create-procedure-dataset","title":"Create Procedure Dataset","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/datasets</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new dataset for a specific procedure.</li> <li>Request Body:</li> <li><code>dataset_name</code>: The name of the dataset.</li> <li><code>dataset_info</code>: Additional information about the dataset.</li> <li><code>collection_date</code>: The date when the data was collected.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created dataset object.</li> <li><code>500 Internal Server Error</code>: If the dataset cannot be created.</li> </ul>"},{"location":"rest_api/procedures/#add-a-procedure-record","title":"Add a Procedure Record","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/records</code></li> <li>Method: <code>POST</code></li> <li>Description: Adds a new record to a specific procedure.</li> <li>Request Body (multipart/form-data):</li> <li><code>timestamp</code>: The timestamp of the record.</li> <li><code>collection_date</code>: The date of data collection.</li> <li><code>procedure_data</code>: The data for the record.</li> <li><code>dataset_name</code>: The name of the associated dataset.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>record_file</code> (optional): A file associated with the record.</li> <li><code>record_info</code> (optional): Additional information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly added procedure record object.</li> <li><code>404 Not Found</code>: If the procedure is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be added.</li> </ul>"},{"location":"rest_api/procedures/#search-procedure-records","title":"Search Procedure Records","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/records</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for records within a specific procedure.</li> <li>Query Parameters:</li> <li><code>experiment_name</code> (optional): The name of the experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>collection_date</code> (optional): The collection date.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of procedure record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the procedure is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#filter-procedure-records","title":"Filter Procedure Records","text":"<ul> <li>Endpoint: <code>/id/{procedure_id}/records/filter</code></li> <li>Method: <code>GET</code></li> <li>Description: Filters records within a procedure based on a set of criteria.</li> <li>Query Parameters:</li> <li><code>start_timestamp</code> (optional): The start of the time range.</li> <li><code>end_timestamp</code> (optional): The end of the time range.</li> <li><code>dataset_names</code> (optional): A list of dataset names.</li> <li><code>experiment_names</code> (optional): A list of experiment names.</li> <li><code>season_names</code> (optional): A list of season names.</li> <li><code>site_names</code> (optional): A list of site names.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of filtered procedure record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the procedure is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#get-procedure-record-by-id","title":"Get Procedure Record by ID","text":"<ul> <li>Endpoint: <code>/records/id/{procedure_record_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific procedure record by its unique ID.</li> <li>Path Parameter:</li> <li><code>procedure_record_id</code>: The ID of the procedure record.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested procedure record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#download-procedure-record-file","title":"Download Procedure Record File","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}/download</code></li> <li>Method: <code>GET</code></li> <li>Description: Downloads the file associated with a specific procedure record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the procedure record.</li> <li>Responses:</li> <li><code>307 Temporary Redirect</code>: Redirects to the file download URL.</li> <li><code>404 Not Found</code>: If the record or its associated file is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/procedures/#update-procedure-record","title":"Update Procedure Record","text":"<ul> <li>Endpoint: <code>/records/id/{procedure_record_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing procedure record.</li> <li>Path Parameter:</li> <li><code>procedure_record_id</code>: The ID of the procedure record to update.</li> <li>Request Body:</li> <li><code>procedure_data</code> (optional): The new data for the record.</li> <li><code>record_info</code> (optional): New information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated procedure record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be updated.</li> </ul>"},{"location":"rest_api/procedures/#delete-procedure-record","title":"Delete Procedure Record","text":"<ul> <li>Endpoint: <code>/records/id/{procedure_record_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a procedure record from the database.</li> <li>Path Parameter:</li> <li><code>procedure_record_id</code>: The ID of the procedure record to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the record is successfully deleted.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be deleted.</li> </ul>"},{"location":"rest_api/scripts/","title":"Scripts API","text":"<p>The Scripts API provides endpoints for managing and retrieving scripts and their associated data, including runs, datasets, and records.</p>"},{"location":"rest_api/scripts/#get-all-scripts","title":"Get All Scripts","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all scripts from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of script objects.</li> <li><code>404 Not Found</code>: If no scripts are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#search-for-scripts","title":"Search for Scripts","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for scripts based on specified criteria.</li> <li>Query Parameters:</li> <li><code>script_name</code> (optional): The name of the script.</li> <li><code>script_url</code> (optional): The URL where the script is stored.</li> <li><code>script_extension</code> (optional): The file extension of the script.</li> <li><code>script_info</code> (optional): Additional information in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching script objects.</li> <li><code>404 Not Found</code>: If no scripts match the criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#get-script-by-id","title":"Get Script by ID","text":"<ul> <li>Endpoint: <code>/id/{script_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific script by its unique ID.</li> <li>Path Parameter:</li> <li><code>script_id</code>: The ID of the script to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested script object.</li> <li><code>404 Not Found</code>: If the script with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#create-a-new-script","title":"Create a New Script","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new script in the database.</li> <li>Request Body:</li> <li><code>script_name</code>: The name of the script.</li> <li><code>script_url</code>: The URL where the script is stored.</li> <li><code>script_extension</code>: The file extension of the script.</li> <li><code>script_info</code>: Additional information about the script.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created script object.</li> <li><code>500 Internal Server Error</code>: If the script cannot be created.</li> </ul>"},{"location":"rest_api/scripts/#update-an-existing-script","title":"Update an Existing Script","text":"<ul> <li>Endpoint: <code>/id/{script_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing script's information.</li> <li>Path Parameter:</li> <li><code>script_id</code>: The ID of the script to update.</li> <li>Request Body:</li> <li><code>script_name</code> (optional): The new name of the script.</li> <li><code>script_url</code> (optional): The new URL for the script.</li> <li><code>script_extension</code> (optional): The new file extension.</li> <li><code>script_info</code> (optional): New information about the script.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated script object.</li> <li><code>404 Not Found</code>: If the script with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the script cannot be updated.</li> </ul>"},{"location":"rest_api/scripts/#delete-a-script","title":"Delete a Script","text":"<ul> <li>Endpoint: <code>/id/{script_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a script from the database.</li> <li>Path Parameter:</li> <li><code>script_id</code>: The ID of the script to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the script is successfully deleted.</li> <li><code>404 Not Found</code>: If the script with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the script cannot be deleted.</li> </ul>"},{"location":"rest_api/scripts/#get-associated-experiments","title":"Get Associated Experiments","text":"<ul> <li>Endpoint: <code>/id/{script_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific script.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment objects.</li> <li><code>404 Not Found</code>: If the script is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#get-script-runs","title":"Get Script Runs","text":"<ul> <li>Endpoint: <code>/id/{script_id}/runs</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all runs associated with a specific script.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated script run objects.</li> <li><code>404 Not Found</code>: If the script is not found or has no associated runs.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#get-script-datasets","title":"Get Script Datasets","text":"<ul> <li>Endpoint: <code>/id/{script_id}/datasets</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all datasets associated with a specific script.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated dataset objects.</li> <li><code>404 Not Found</code>: If the script is not found or has no associated datasets.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#create-script-run","title":"Create Script Run","text":"<ul> <li>Endpoint: <code>/id/{script_id}/runs</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new run for a specific script.</li> <li>Request Body:</li> <li><code>script_run_info</code>: Additional information about the script run.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created script run object.</li> <li><code>500 Internal Server Error</code>: If the run cannot be created.</li> </ul>"},{"location":"rest_api/scripts/#create-script-dataset","title":"Create Script Dataset","text":"<ul> <li>Endpoint: <code>/id/{script_id}/datasets</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new dataset for a specific script.</li> <li>Request Body:</li> <li><code>dataset_name</code>: The name of the dataset.</li> <li><code>dataset_info</code>: Additional information about the dataset.</li> <li><code>collection_date</code>: The date when the data was collected.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created dataset object.</li> <li><code>500 Internal Server Error</code>: If the dataset cannot be created.</li> </ul>"},{"location":"rest_api/scripts/#add-a-script-record","title":"Add a Script Record","text":"<ul> <li>Endpoint: <code>/id/{script_id}/records</code></li> <li>Method: <code>POST</code></li> <li>Description: Adds a new record to a specific script.</li> <li>Request Body (multipart/form-data):</li> <li><code>timestamp</code>: The timestamp of the record.</li> <li><code>collection_date</code>: The date of data collection.</li> <li><code>script_data</code>: The data for the record.</li> <li><code>dataset_name</code>: The name of the associated dataset.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>record_file</code> (optional): A file associated with the record.</li> <li><code>record_info</code> (optional): Additional information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly added script record object.</li> <li><code>404 Not Found</code>: If the script is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be added.</li> </ul>"},{"location":"rest_api/scripts/#search-script-records","title":"Search Script Records","text":"<ul> <li>Endpoint: <code>/id/{script_id}/records</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for records within a specific script.</li> <li>Query Parameters:</li> <li><code>experiment_name</code> (optional): The name of the experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>collection_date</code> (optional): The collection date.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of script record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the script is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#filter-script-records","title":"Filter Script Records","text":"<ul> <li>Endpoint: <code>/id/{script_id}/records/filter</code></li> <li>Method: <code>GET</code></li> <li>Description: Filters records within a script based on a set of criteria.</li> <li>Query Parameters:</li> <li><code>start_timestamp</code> (optional): The start of the time range.</li> <li><code>end_timestamp</code> (optional): The end of the time range.</li> <li><code>dataset_names</code> (optional): A list of dataset names.</li> <li><code>experiment_names</code> (optional): A list of experiment names.</li> <li><code>season_names</code> (optional): A list of season names.</li> <li><code>site_names</code> (optional): A list of site names.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of filtered script record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the script is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#get-script-record-by-id","title":"Get Script Record by ID","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific script record by its unique ID.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the script record.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested script record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#download-script-record-file","title":"Download Script Record File","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}/download</code></li> <li>Method: <code>GET</code></li> <li>Description: Downloads the file associated with a specific script record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the script record.</li> <li>Responses:</li> <li><code>307 Temporary Redirect</code>: Redirects to the file download URL.</li> <li><code>404 Not Found</code>: If the record or its associated file is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/scripts/#update-script-record","title":"Update Script Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing script record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the script record to update.</li> <li>Request Body:</li> <li><code>script_data</code> (optional): The new data for the record.</li> <li><code>record_info</code> (optional): New information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated script record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be updated.</li> </ul>"},{"location":"rest_api/scripts/#delete-script-record","title":"Delete Script Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a script record from the database.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the script record to delete.</li> <li>Responses:</li> <li><code>200 OK</code>: If the record is successfully deleted.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be deleted.</li> </ul>"},{"location":"rest_api/seasons/","title":"Seasons API","text":"<p>The Seasons API provides endpoints for managing and retrieving season data and their associations.</p>"},{"location":"rest_api/seasons/#get-all-seasons","title":"Get All Seasons","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all seasons in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of season objects.</li> <li><code>404 Not Found</code>: If no seasons are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/seasons/#search-for-seasons","title":"Search for Seasons","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for seasons based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>season_info</code> (optional): Additional information about the season in JSON format.</li> <li><code>season_start_date</code> (optional): The start date of the season.</li> <li><code>season_end_date</code> (optional): The end date of the season.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching season objects.</li> <li><code>404 Not Found</code>: If no seasons match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/seasons/#get-season-by-id","title":"Get Season by ID","text":"<ul> <li>Endpoint: <code>/id/{season_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific season by its unique ID.</li> <li>Path Parameter:</li> <li><code>season_id</code>: The ID of the season to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested season object.</li> <li><code>404 Not Found</code>: If the season with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/seasons/#create-a-new-season","title":"Create a New Season","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new season in the database.</li> <li>Request Body:</li> <li><code>season_name</code>: The name of the season.</li> <li><code>season_info</code>: Additional information about the season.</li> <li><code>season_start_date</code>: The start date of the season.</li> <li><code>season_end_date</code>: The end date of the season.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created season object.</li> <li><code>500 Internal Server Error</code>: If the season cannot be created.</li> </ul>"},{"location":"rest_api/seasons/#update-an-existing-season","title":"Update an Existing Season","text":"<ul> <li>Endpoint: <code>/id/{season_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing season's information.</li> <li>Path Parameter:</li> <li><code>season_id</code>: The ID of the season to update.</li> <li>Request Body:</li> <li><code>season_name</code> (optional): The new name of the season.</li> <li><code>season_info</code> (optional): New information about the season.</li> <li><code>season_start_date</code> (optional): The new start date of the season.</li> <li><code>season_end_date</code> (optional): The new end date of the season.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated season object.</li> <li><code>404 Not Found</code>: If the season with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the season cannot be updated.</li> </ul>"},{"location":"rest_api/seasons/#delete-a-season","title":"Delete a Season","text":"<ul> <li>Endpoint: <code>/id/{season_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a season from the database.</li> <li>Path Parameter:</li> <li><code>season_id</code>: The ID of the season to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the season is successfully deleted.</li> <li><code>404 Not Found</code>: If the season with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the season cannot be deleted.</li> </ul>"},{"location":"rest_api/seasons/#get-associated-experiment","title":"Get Associated Experiment","text":"<ul> <li>Endpoint: <code>/id/{season_id}/experiment</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves the experiment associated with a specific season.</li> <li>Responses:</li> <li><code>200 OK</code>: The associated experiment object.</li> <li><code>404 Not Found</code>: If the season or its associated experiment is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_platforms/","title":"Sensor Platforms API","text":"<p>The Sensor Platforms API provides endpoints for managing and retrieving sensor platform data and their associations.</p>"},{"location":"rest_api/sensor_platforms/#get-all-sensor-platforms","title":"Get All Sensor Platforms","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all sensor platforms in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of sensor platform objects.</li> <li><code>404 Not Found</code>: If no sensor platforms are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_platforms/#search-for-sensor-platforms","title":"Search for Sensor Platforms","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for sensor platforms based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>sensor_platform_name</code> (optional): The name of the sensor platform.</li> <li><code>sensor_platform_info</code> (optional): Additional information about the sensor platform in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching sensor platform objects.</li> <li><code>404 Not Found</code>: If no sensor platforms match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_platforms/#get-sensor-platform-by-id","title":"Get Sensor Platform by ID","text":"<ul> <li>Endpoint: <code>/id/{sensor_platform_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific sensor platform by its unique ID.</li> <li>Path Parameter:</li> <li><code>sensor_platform_id</code>: The ID of the sensor platform to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested sensor platform object.</li> <li><code>404 Not Found</code>: If the sensor platform with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_platforms/#create-a-new-sensor-platform","title":"Create a New Sensor Platform","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new sensor platform in the database.</li> <li>Request Body:</li> <li><code>sensor_platform_name</code>: The name of the sensor platform.</li> <li><code>sensor_platform_info</code>: Additional information about the sensor platform.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created sensor platform object.</li> <li><code>500 Internal Server Error</code>: If the sensor platform cannot be created.</li> </ul>"},{"location":"rest_api/sensor_platforms/#update-an-existing-sensor-platform","title":"Update an Existing Sensor Platform","text":"<ul> <li>Endpoint: <code>/id/{sensor_platform_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing sensor platform's information.</li> <li>Path Parameter:</li> <li><code>sensor_platform_id</code>: The ID of the sensor platform to update.</li> <li>Request Body:</li> <li><code>sensor_platform_name</code> (optional): The new name of the sensor platform.</li> <li><code>sensor_platform_info</code> (optional): New information about the sensor platform.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated sensor platform object.</li> <li><code>404 Not Found</code>: If the sensor platform with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the sensor platform cannot be updated.</li> </ul>"},{"location":"rest_api/sensor_platforms/#delete-a-sensor-platform","title":"Delete a Sensor Platform","text":"<ul> <li>Endpoint: <code>/id/{sensor_platform_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a sensor platform from the database.</li> <li>Path Parameter:</li> <li><code>sensor_platform_id</code>: The ID of the sensor platform to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the sensor platform is successfully deleted.</li> <li><code>404 Not Found</code>: If the sensor platform with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the sensor platform cannot be deleted.</li> </ul>"},{"location":"rest_api/sensor_platforms/#get-experiments-for-sensor-platform","title":"Get Experiments for Sensor Platform","text":"<ul> <li>Endpoint: <code>/id/{sensor_platform_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific sensor platform.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment objects.</li> <li><code>404 Not Found</code>: If the sensor platform is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_platforms/#get-sensors-for-sensor-platform","title":"Get Sensors for Sensor Platform","text":"<ul> <li>Endpoint: <code>/id/{sensor_platform_id}/sensors</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all sensors associated with a specific sensor platform.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated sensor objects.</li> <li><code>404 Not Found</code>: If the sensor platform is not found or has no associated sensors.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_types/","title":"Sensor Types API","text":"<p>The Sensor Types API provides endpoints for managing and retrieving sensor type data.</p>"},{"location":"rest_api/sensor_types/#get-all-sensor-types","title":"Get All Sensor Types","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all sensor types in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of sensor type objects.</li> <li><code>404 Not Found</code>: If no sensor types are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_types/#search-for-sensor-types","title":"Search for Sensor Types","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for sensor types based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>sensor_type_name</code> (optional): The name of the sensor type.</li> <li><code>sensor_type_info</code> (optional): Additional information about the sensor type in JSON format.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching sensor type objects.</li> <li><code>404 Not Found</code>: If no sensor types match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_types/#get-sensor-type-by-id","title":"Get Sensor Type by ID","text":"<ul> <li>Endpoint: <code>/id/{sensor_type_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific sensor type by its unique ID.</li> <li>Path Parameter:</li> <li><code>sensor_type_id</code>: The ID of the sensor type to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested sensor type object.</li> <li><code>404 Not Found</code>: If the sensor type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensor_types/#create-a-new-sensor-type","title":"Create a New Sensor Type","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new sensor type in the database.</li> <li>Request Body:</li> <li><code>sensor_type_name</code>: The name of the sensor type.</li> <li><code>sensor_type_info</code>: Additional information about the sensor type.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created sensor type object.</li> <li><code>500 Internal Server Error</code>: If the sensor type cannot be created.</li> </ul>"},{"location":"rest_api/sensor_types/#update-an-existing-sensor-type","title":"Update an Existing Sensor Type","text":"<ul> <li>Endpoint: <code>/id/{sensor_type_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing sensor type's information.</li> <li>Path Parameter:</li> <li><code>sensor_type_id</code>: The ID of the sensor type to update.</li> <li>Request Body:</li> <li><code>sensor_type_name</code> (optional): The new name of the sensor type.</li> <li><code>sensor_type_info</code> (optional): New information about the sensor type.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated sensor type object.</li> <li><code>404 Not Found</code>: If the sensor type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the sensor type cannot be updated.</li> </ul>"},{"location":"rest_api/sensor_types/#delete-a-sensor-type","title":"Delete a Sensor Type","text":"<ul> <li>Endpoint: <code>/id/{sensor_type_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a sensor type from the database.</li> <li>Path Parameter:</li> <li><code>sensor_type_id</code>: The ID of the sensor type to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the sensor type is successfully deleted.</li> <li><code>404 Not Found</code>: If the sensor type with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the sensor type cannot be deleted.</li> </ul>"},{"location":"rest_api/sensors/","title":"Sensors API","text":"<p>The Sensors API provides endpoints for managing and retrieving sensor data, including their records, experiments, and associated platforms.</p>"},{"location":"rest_api/sensors/#get-all-sensors","title":"Get All Sensors","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all sensors from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of sensor objects.</li> <li><code>404 Not Found</code>: If no sensors are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#search-for-sensors","title":"Search for Sensors","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for sensors based on specified criteria.</li> <li>Query Parameters:</li> <li><code>sensor_name</code> (optional): The name of the sensor.</li> <li><code>sensor_type_id</code> (optional): The ID of the sensor type.</li> <li><code>sensor_data_type_id</code> (optional): The ID of the sensor's data type.</li> <li><code>sensor_data_format_id</code> (optional): The ID of the sensor's data format.</li> <li><code>sensor_info</code> (optional): Additional information in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching sensor objects.</li> <li><code>404 Not Found</code>: If no sensors match the criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#get-sensor-by-id","title":"Get Sensor by ID","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific sensor by its unique ID.</li> <li>Path Parameter:</li> <li><code>sensor_id</code>: The ID of the sensor to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested sensor object.</li> <li><code>404 Not Found</code>: If the sensor with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#create-a-new-sensor","title":"Create a New Sensor","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new sensor in the database.</li> <li>Request Body:</li> <li><code>sensor_name</code>: The name of the sensor.</li> <li><code>sensor_type_id</code>: The ID of the sensor type.</li> <li><code>sensor_data_type_id</code>: The ID of the sensor's data type.</li> <li><code>sensor_data_format_id</code>: The ID of the sensor's data format.</li> <li><code>sensor_info</code>: Additional information about the sensor.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created sensor object.</li> <li><code>500 Internal Server Error</code>: If the sensor cannot be created.</li> </ul>"},{"location":"rest_api/sensors/#update-an-existing-sensor","title":"Update an Existing Sensor","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing sensor's information.</li> <li>Path Parameter:</li> <li><code>sensor_id</code>: The ID of the sensor to update.</li> <li>Request Body:</li> <li><code>sensor_name</code> (optional): The new name of the sensor.</li> <li><code>sensor_type_id</code> (optional): The new ID of the sensor type.</li> <li><code>sensor_data_type_id</code> (optional): The new ID of the sensor's data type.</li> <li><code>sensor_data_format_id</code> (optional): The new ID of the sensor's data format.</li> <li><code>sensor_info</code> (optional): New information about the sensor.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated sensor object.</li> <li><code>404 Not Found</code>: If the sensor with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the sensor cannot be updated.</li> </ul>"},{"location":"rest_api/sensors/#delete-a-sensor","title":"Delete a Sensor","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a sensor from the database.</li> <li>Path Parameter:</li> <li><code>sensor_id</code>: The ID of the sensor to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the sensor is successfully deleted.</li> <li><code>404 Not Found</code>: If the sensor with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the sensor cannot be deleted.</li> </ul>"},{"location":"rest_api/sensors/#get-sensor-experiments","title":"Get Sensor Experiments","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific sensor.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment objects.</li> <li><code>404 Not Found</code>: If the sensor is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#get-sensor-platforms","title":"Get Sensor Platforms","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}/sensor_platforms</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all sensor platforms associated with a specific sensor.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated sensor platform objects.</li> <li><code>404 Not Found</code>: If the sensor is not found or has no associated platforms.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#get-sensor-datasets","title":"Get Sensor Datasets","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}/datasets</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all datasets associated with a specific sensor.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated dataset objects.</li> <li><code>404 Not Found</code>: If the sensor is not found or has no associated datasets.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#add-a-sensor-record","title":"Add a Sensor Record","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}/records</code></li> <li>Method: <code>POST</code></li> <li>Description: Adds a new record to a specific sensor.</li> <li>Request Body (multipart/form-data):</li> <li><code>timestamp</code>: The timestamp of the record.</li> <li><code>collection_date</code>: The date of data collection.</li> <li><code>sensor_data</code>: The data for the record.</li> <li><code>dataset_name</code>: The name of the associated dataset.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>plot_number</code>: The number of the plot.</li> <li><code>plot_row_number</code>: The row number of the plot.</li> <li><code>plot_column_number</code>: The column number of the plot.</li> <li><code>record_file</code> (optional): A file associated with the record.</li> <li><code>record_info</code> (optional): Additional information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly added sensor record object.</li> <li><code>404 Not Found</code>: If the sensor is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be added.</li> </ul>"},{"location":"rest_api/sensors/#search-sensor-records","title":"Search Sensor Records","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}/records</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for records within a specific sensor.</li> <li>Query Parameters:</li> <li><code>experiment_name</code> (optional): The name of the experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>plot_number</code> (optional): The number of the plot.</li> <li><code>plot_row_number</code> (optional): The row number of the plot.</li> <li><code>plot_column_number</code> (optional): The column number of the plot.</li> <li><code>collection_date</code> (optional): The collection date.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of sensor record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the sensor is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#filter-sensor-records","title":"Filter Sensor Records","text":"<ul> <li>Endpoint: <code>/id/{sensor_id}/records/filter</code></li> <li>Method: <code>GET</code></li> <li>Description: Filters records within a sensor based on a set of criteria.</li> <li>Query Parameters:</li> <li><code>start_timestamp</code> (optional): The start of the time range.</li> <li><code>end_timestamp</code> (optional): The end of the time range.</li> <li><code>dataset_names</code> (optional): A list of dataset names.</li> <li><code>experiment_names</code> (optional): A list of experiment names.</li> <li><code>season_names</code> (optional): A list of season names.</li> <li><code>site_names</code> (optional): A list of site names.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of filtered sensor record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the sensor is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#get-sensor-record-by-id","title":"Get Sensor Record by ID","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific sensor record by its unique ID.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the sensor record.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested sensor record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#download-sensor-record-file","title":"Download Sensor Record File","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}/download</code></li> <li>Method: <code>GET</code></li> <li>Description: Downloads the file associated with a specific sensor record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the sensor record.</li> <li>Responses:</li> <li><code>307 Temporary Redirect</code>: Redirects to the file download URL.</li> <li><code>404 Not Found</code>: If the record or its associated file is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sensors/#update-sensor-record","title":"Update Sensor Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing sensor record.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the sensor record to update.</li> <li>Request Body:</li> <li><code>sensor_data</code> (optional): The new data for the record.</li> <li><code>record_info</code> (optional): New information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated sensor record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be updated.</li> </ul>"},{"location":"rest_api/sensors/#delete-sensor-record","title":"Delete Sensor Record","text":"<ul> <li>Endpoint: <code>/records/id/{record_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a sensor record from the database.</li> <li>Path Parameter:</li> <li><code>record_id</code>: The ID of the sensor record to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the record is successfully deleted.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be deleted.</li> </ul>"},{"location":"rest_api/sites/","title":"Sites API","text":"<p>The Sites API provides endpoints for managing and retrieving site data and their associations.</p>"},{"location":"rest_api/sites/#get-all-sites","title":"Get All Sites","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all sites in the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of site objects.</li> <li><code>404 Not Found</code>: If no sites are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sites/#search-for-sites","title":"Search for Sites","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for sites based on the provided criteria.</li> <li>Query Parameters:</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>site_city</code> (optional): The city where the site is located.</li> <li><code>site_state</code> (optional): The state where the site is located.</li> <li><code>site_country</code> (optional): The country where the site is located.</li> <li><code>site_info</code> (optional): Additional information about the site in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching site objects.</li> <li><code>404 Not Found</code>: If no sites match the search criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sites/#get-site-by-id","title":"Get Site by ID","text":"<ul> <li>Endpoint: <code>/id/{site_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific site by its unique ID.</li> <li>Path Parameter:</li> <li><code>site_id</code>: The ID of the site to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested site object.</li> <li><code>404 Not Found</code>: If the site with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sites/#create-a-new-site","title":"Create a New Site","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new site in the database.</li> <li>Request Body:</li> <li><code>site_name</code>: The name of the site.</li> <li><code>site_city</code>: The city where the site is located.</li> <li><code>site_state</code>: The state where the site is located.</li> <li><code>site_country</code>: The country where the site is located.</li> <li><code>site_info</code>: Additional information about the site.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created site object.</li> <li><code>500 Internal Server Error</code>: If the site cannot be created.</li> </ul>"},{"location":"rest_api/sites/#update-an-existing-site","title":"Update an Existing Site","text":"<ul> <li>Endpoint: <code>/id/{site_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing site's information.</li> <li>Path Parameter:</li> <li><code>site_id</code>: The ID of the site to update.</li> <li>Request Body:</li> <li><code>site_name</code> (optional): The new name of the site.</li> <li><code>site_city</code> (optional): The new city for the site.</li> <li><code>site_state</code> (optional): The new state for the site.</li> <li><code>site_country</code> (optional): The new country for the site.</li> <li><code>site_info</code> (optional): New information about the site.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated site object.</li> <li><code>404 Not Found</code>: If the site with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the site cannot be updated.</li> </ul>"},{"location":"rest_api/sites/#delete-a-site","title":"Delete a Site","text":"<ul> <li>Endpoint: <code>/id/{site_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a site from the database.</li> <li>Path Parameter:</li> <li><code>site_id</code>: The ID of the site to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the site is successfully deleted.</li> <li><code>404 Not Found</code>: If the site with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the site cannot be deleted.</li> </ul>"},{"location":"rest_api/sites/#get-associated-experiments","title":"Get Associated Experiments","text":"<ul> <li>Endpoint: <code>/id/{site_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific site.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment objects.</li> <li><code>404 Not Found</code>: If the site is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/sites/#get-associated-plots","title":"Get Associated Plots","text":"<ul> <li>Endpoint: <code>/id/{site_id}/plots</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all plots associated with a specific site.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated plot objects.</li> <li><code>404 Not Found</code>: If the site is not found or has no associated plots.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/","title":"Traits API","text":"<p>The Traits API provides endpoints for managing and retrieving trait data, including their records, experiments, and associated datasets.</p>"},{"location":"rest_api/traits/#get-all-traits","title":"Get All Traits","text":"<ul> <li>Endpoint: <code>/all</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a list of all traits from the database.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of trait objects.</li> <li><code>404 Not Found</code>: If no traits are found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#search-for-traits","title":"Search for Traits","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for traits based on specified criteria.</li> <li>Query Parameters:</li> <li><code>trait_name</code> (optional): The name of the trait.</li> <li><code>trait_units</code> (optional): The units of the trait.</li> <li><code>trait_level_id</code> (optional): The ID of the trait level.</li> <li><code>trait_info</code> (optional): Additional information in JSON format.</li> <li><code>trait_metrics</code> (optional): Metrics associated with the trait in JSON format.</li> <li><code>experiment_name</code> (optional): The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of matching trait objects.</li> <li><code>404 Not Found</code>: If no traits match the criteria.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#get-trait-by-id","title":"Get Trait by ID","text":"<ul> <li>Endpoint: <code>/id/{trait_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific trait by its unique ID.</li> <li>Path Parameter:</li> <li><code>trait_id</code>: The ID of the trait to retrieve.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested trait object.</li> <li><code>404 Not Found</code>: If the trait with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#create-a-new-trait","title":"Create a New Trait","text":"<ul> <li>Endpoint: <code>/</code></li> <li>Method: <code>POST</code></li> <li>Description: Creates a new trait in the database.</li> <li>Request Body:</li> <li><code>trait_name</code>: The name of the trait.</li> <li><code>trait_units</code>: The units of the trait.</li> <li><code>trait_level_id</code>: The ID of the trait level.</li> <li><code>trait_info</code>: Additional information about the trait.</li> <li><code>trait_metrics</code>: Metrics associated with the trait.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly created trait object.</li> <li><code>500 Internal Server Error</code>: If the trait cannot be created.</li> </ul>"},{"location":"rest_api/traits/#update-an-existing-trait","title":"Update an Existing Trait","text":"<ul> <li>Endpoint: <code>/id/{trait_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing trait's information.</li> <li>Path Parameter:</li> <li><code>trait_id</code>: The ID of the trait to update.</li> <li>Request Body:</li> <li><code>trait_name</code> (optional): The new name of the trait.</li> <li><code>trait_units</code> (optional): The new units for the trait.</li> <li><code>trait_level_id</code> (optional): The new ID of the trait level.</li> <li><code>trait_info</code> (optional): New information about the trait.</li> <li><code>trait_metrics</code> (optional): New metrics for the trait.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated trait object.</li> <li><code>404 Not Found</code>: If the trait with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the trait cannot be updated.</li> </ul>"},{"location":"rest_api/traits/#delete-a-trait","title":"Delete a Trait","text":"<ul> <li>Endpoint: <code>/id/{trait_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a trait from the database.</li> <li>Path Parameter:</li> <li><code>trait_id</code>: The ID of the trait to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the trait is successfully deleted.</li> <li><code>404 Not Found</code>: If the trait with the given ID is not found.</li> <li><code>500 Internal Server Error</code>: If the trait cannot be deleted.</li> </ul>"},{"location":"rest_api/traits/#get-trait-experiments","title":"Get Trait Experiments","text":"<ul> <li>Endpoint: <code>/id/{trait_id}/experiments</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all experiments associated with a specific trait.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated experiment names.</li> <li><code>404 Not Found</code>: If the trait is not found or has no associated experiments.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#get-trait-datasets","title":"Get Trait Datasets","text":"<ul> <li>Endpoint: <code>/id/{trait_id}/datasets</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves all datasets associated with a specific trait.</li> <li>Responses:</li> <li><code>200 OK</code>: A list of associated dataset objects.</li> <li><code>404 Not Found</code>: If the trait is not found or has no associated datasets.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#add-a-trait-record","title":"Add a Trait Record","text":"<ul> <li>Endpoint: <code>/id/{trait_id}/records</code></li> <li>Method: <code>POST</code></li> <li>Description: Adds a new record to a specific trait.</li> <li>Request Body (multipart/form-data):</li> <li><code>timestamp</code>: The timestamp of the record.</li> <li><code>collection_date</code>: The date of data collection.</li> <li><code>trait_value</code>: The value of the trait for the record.</li> <li><code>dataset_name</code>: The name of the associated dataset.</li> <li><code>experiment_name</code>: The name of the associated experiment.</li> <li><code>season_name</code>: The name of the season.</li> <li><code>site_name</code>: The name of the site.</li> <li><code>plot_number</code>: The number of the plot.</li> <li><code>plot_row_number</code>: The row number of the plot.</li> <li><code>plot_column_number</code>: The column number of the plot.</li> <li><code>record_info</code> (optional): Additional information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The newly added trait record object.</li> <li><code>404 Not Found</code>: If the trait is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be added.</li> </ul>"},{"location":"rest_api/traits/#search-trait-records","title":"Search Trait Records","text":"<ul> <li>Endpoint: <code>/id/{trait_id}/records</code></li> <li>Method: <code>GET</code></li> <li>Description: Searches for records within a specific trait.</li> <li>Query Parameters:</li> <li><code>experiment_name</code> (optional): The name of the experiment.</li> <li><code>season_name</code> (optional): The name of the season.</li> <li><code>site_name</code> (optional): The name of the site.</li> <li><code>plot_number</code> (optional): The number of the plot.</li> <li><code>plot_row_number</code> (optional): The row number of the plot.</li> <li><code>plot_column_number</code> (optional): The column number of the plot.</li> <li><code>collection_date</code> (optional): The collection date.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of trait record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the trait is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#filter-trait-records","title":"Filter Trait Records","text":"<ul> <li>Endpoint: <code>/id/{trait_id}/records/filter</code></li> <li>Method: <code>GET</code></li> <li>Description: Filters records within a trait based on a set of criteria.</li> <li>Query Parameters:</li> <li><code>start_timestamp</code> (optional): The start of the time range.</li> <li><code>end_timestamp</code> (optional): The end of the time range.</li> <li><code>dataset_names</code> (optional): A list of dataset names.</li> <li><code>experiment_names</code> (optional): A list of experiment names.</li> <li><code>season_names</code> (optional): A list of season names.</li> <li><code>site_names</code> (optional): A list of site names.</li> <li>Responses:</li> <li><code>200 OK</code>: A stream of filtered trait record objects in NDJSON format.</li> <li><code>404 Not Found</code>: If the trait is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#get-trait-record-by-id","title":"Get Trait Record by ID","text":"<ul> <li>Endpoint: <code>/records/id/{trait_record_id}</code></li> <li>Method: <code>GET</code></li> <li>Description: Retrieves a specific trait record by its unique ID.</li> <li>Path Parameter:</li> <li><code>trait_record_id</code>: The ID of the trait record.</li> <li>Responses:</li> <li><code>200 OK</code>: The requested trait record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If an error occurs during the process.</li> </ul>"},{"location":"rest_api/traits/#update-trait-record","title":"Update Trait Record","text":"<ul> <li>Endpoint: <code>/records/id/{trait_record_id}</code></li> <li>Method: <code>PATCH</code></li> <li>Description: Updates an existing trait record.</li> <li>Path Parameter:</li> <li><code>trait_record_id</code>: The ID of the trait record to update.</li> <li>Request Body:</li> <li><code>trait_value</code> (optional): The new value for the trait.</li> <li><code>record_info</code> (optional): New information about the record.</li> <li>Responses:</li> <li><code>200 OK</code>: The updated trait record object.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be updated.</li> </ul>"},{"location":"rest_api/traits/#delete-trait-record","title":"Delete Trait Record","text":"<ul> <li>Endpoint: <code>/records/id/{trait_record_id}</code></li> <li>Method: <code>DELETE</code></li> <li>Description: Deletes a trait record from the database.</li> <li>Path Parameter:</li> <li><code>trait_record_id</code>: The ID of the trait record to delete.</li> <li>Responses:</li> <li><code>204 No Content</code>: If the record is successfully deleted.</li> <li><code>404 Not Found</code>: If the record is not found.</li> <li><code>500 Internal Server Error</code>: If the record cannot be deleted.</li> </ul>"}]}