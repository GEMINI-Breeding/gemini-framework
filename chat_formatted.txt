<document>
<source>docker-compose-old.yml</source>
<mime_type>text/plain</mime_type>
<document_content>

services:
  db:
    container_name: ${GEMINI_DB_HOSTNAME}
    hostname: ${GEMINI_DB_HOSTNAME}
    restart: always
    build:
      context: .
      dockerfile: ./gemini/server/database/Dockerfile
    image: ${GEMINI_DOCKER_USER}/db:latest
    ports:
      - "${GEMINI_DB_PORT}:5432"
    environment:
      - "POSTGRES_USER=${GEMINI_DB_USER}"
      - "POSTGRES_PASSWORD=${GEMINI_DB_PASSWORD}"
      - "POSTGRES_DB=${GEMINI_DB_NAME}"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./gemini/db/init_sql:/docker-entrypoint-initdb.d
      - ./
    networks:
      - gemini_network
    depends_on:
      - logger

  file-store:
    container_name: ${GEMINI_FILE_STORE_HOSTNAME}
    hostname: ${GEMINI_FILE_STORE_HOSTNAME}
    restart: always
    build:
      context: .
      dockerfile: ./gemini/server/file_server/Dockerfile
    image: ${GEMINI_DOCKER_USER}/file-store:latest
    ports:
      - "${GEMINI_FILE_STORE_PORT}:9000"
      - "${GEMINI_FILE_STORE_API_PORT}:9001"
    environment:
      - "MINIO_ROOT_USER=${GEMINI_FILE_STORE_ROOT_USER}"
      - "MINIO_ROOT_PASSWORD=${GEMINI_FILE_STORE_ROOT_PASSWORD}"
      - "MINIO_STORE_ACCESS_KEY=${GEMINI_FILE_STORE_ACCESS_KEY}"
      - "MINIO_STORE_SECRET_KEY=${GEMINI_FILE_STORE_SECRET_KEY}"
      - "MINIO_DEFAULT_BUCKETS=${GEMINI_FILE_STORE_BUCKET_NAME}"
      - "MC_HOST_local=http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@localhost:9000"
    networks:
      - gemini_network
    depends_on:
      - db

  logger:
    container_name: ${GEMINI_LOGGER_HOSTNAME}
    hostname: ${GEMINI_LOGGER_HOSTNAME}
    restart: always
    build:
      context: .
      dockerfile: ./gemini/server/logger/Dockerfile
    image: ${GEMINI_DOCKER_USER}/logger:latest
    ports:
      - "${GEMINI_LOGGER_PORT}:6379"
    environment:
      - "REDIS_PASSWORD=${GEMINI_LOGGER_PASSWORD}"
      - "REDIS_PORT=${GEMINI_LOGGER_PORT}"
    networks:
      - gemini_network

  rest-api:
    container_name: ${GEMINI_API_HOSTNAME}
    hostname: ${GEMINI_API_HOSTNAME}
    restart: always
    build:
      context: .
      dockerfile: ./gemini/server/rest_api/Dockerfile
    image: ${GEMINI_DOCKER_USER}/rest-api:latest
    ports:
      - "${GEMINI_API_PORT}:7777"
    environment:
      - "GEMINI_API_PORT=${GEMINI_API_PORT}"
      - "GEMINI_API_USER=${GEMINI_API_USER}"
      - "GEMINI_API_PASSWORD=${GEMINI_API_PASSWORD}"
    networks:
      - "gemini_network"
    depends_on:
      - logger
      - db
      - file-store

  scheduler-db:
    container_name: ${GEMINI_SCHEDULER_DB_HOSTNAME}
    hostname: ${GEMINI_SCHEDULER_DB_HOSTNAME}
    restart: always
    build:
      context: .
      dockerfile: ./gemini/server/scheduler/db.Dockerfile
    image: ${GEMINI_DOCKER_USER}/scheduler-db:latest
    ports:
      - "${GEMINI_SCHEDULER_DB_PORT}:5432"
    environment:
      - "POSTGRES_USER=${GEMINI_SCHEDULER_DB_USER}"
      - "POSTGRES_PASSWORD=${GEMINI_SCHEDULER_DB_PASSWORD}"
      - "POSTGRES_DB=${GEMINI_SCHEDULER_DB_NAME}"
    networks:
      - gemini_network
    depends_on:
      - rest-api

  scheduler-server:
    container_name: ${GEMINI_SCHEDULER_SERVER_HOSTNAME}
    hostname: ${GEMINI_SCHEDULER_SERVER_HOSTNAME}
    restart: always
    build:
      context: .
      dockerfile: ./gemini/server/scheduler/Dockerfile
    image: ${GEMINI_DOCKER_USER}/scheduler:latest
    ports:
      - "${GEMINI_SCHEDULER_SERVER_PORT}:4200"
    environment:
      - "PREFECT_API_DATABASE_HOST=${GEMINI_SCHEDULER_DB_HOSTNAME}"
      - "PREFECT_API_DATABASE_PORT=${GEMINI_SCHEDULER_DB_PORT}"
      - "PREFECT_API_DATABASE_USER=${GEMINI_SCHEDULER_DB_USER}"
      - "PREFECT_API_DATABASE_PASSWORD=${GEMINI_SCHEDULER_DB_PASSWORD}"
      - "PREFECT_API_DATABASE_NAME=${GEMINI_SCHEDULER_DB_NAME}"
    networks:
      - gemini_network
    depends_on:
      - scheduler-db

networks:
  gemini_network:
    driver: bridge
</document_content>
</document>

<document>
<source>docker-compose.yaml</source>
<mime_type>text/plain</mime_type>
<document_content>
name: gemini

services:
  db:
    container_name: ${GEMINI_DB_HOSTNAME}
    hostname: ${GEMINI_DB_HOSTNAME}
    restart: always
    build:
      context: ./gemini/db
      dockerfile: Dockerfile
    image: gemini-db:latest
    ports:
      - "${GEMINI_DB_PORT}:5432"
    environment:
      - "POSTGRESQL_USERNAME=${GEMINI_DB_USER}"
      - "POSTGRESQL_PASSWORD=${GEMINI_DB_PASSWORD}"
      - "POSTGRESQL_INITSCRIPTS_USERNAME=${GEMINI_DB_USER}"
      - "POSTGRESQL_INITSCRIPTS_PASSWORD=${GEMINI_DB_PASSWORD}"
      - "POSTGRESQL_POSTGRES_PASSWORD=${GEMINI_DB_PASSWORD}"
      - "POSTGRESQL_DATABASE=${GEMINI_DB_NAME}"
      - "POSTGRESQL_REPLICATION_USER=${GEMINI_DB_USER}"
      - "POSTGRESQL_REPLICATION_PASSWORD=${GEMINI_DB_PASSWORD}"
      - "POSTGRESQL_REPLICATION_USE_PASSFILE=false"
    volumes:
      - gemini_db_data:/bitnami/postgresql
    networks:
      - gemini_network

  storage:
    container_name: ${GEMINI_STORAGE_HOSTNAME}
    hostname: ${GEMINI_STORAGE_HOSTNAME}
    restart: always
    build:
      context: ./gemini/storage
      dockerfile: Dockerfile
    image: gemini-storage:latest
    ports:
      - "${GEMINI_STORAGE_PORT}:9000"
      - "${GEMINI_STORAGE_API_PORT}:9001"
    environment:
      - "MINIO_ROOT_USER=${GEMINI_STORAGE_ROOT_USER}"
      - "MINIO_ROOT_PASSWORD=${GEMINI_STORAGE_ROOT_PASSWORD}"
      - "MINIO_SCHEME=http"
      - "BITNAMI_DEBUG=true"
      # - "MC_HOST_loca=http://${GEMINI_STORAGE_ROOT_USER}:${GEMINI_STORAGE_ROOT_PASSWORD}@localhost:9000"
    volumes:
      - gemini_storage_data:/bitnami/minio/data
      - ./gemini/storage/scripts/healthcheck.sh:/usr/local/bin/healthcheck.sh
    networks:
      - gemini_network
    depends_on:
      - db

  storage-init:
    image: bitnami/minio-client:2024
    networks:
      - gemini_network
    depends_on:
      - storage
    environment:
      - "MINIO_ACCESS_KEY=${GEMINI_STORAGE_ROOT_USER}"
      - "MINIO_SECRET_KEY=${GEMINI_STORAGE_ROOT_PASSWORD}"
      - "MINIO_SERVER_HOST=${GEMINI_STORAGE_HOSTNAME}"
      - "GEMINI_STORAGE_ACCESS_KEY=${GEMINI_STORAGE_ACCESS_KEY}"
      - "GEMINI_STORAGE_SECRET_KEY=${GEMINI_STORAGE_SECRET_KEY}"
      - "GEMINI_STORAGE_BUCKET_NAME=${GEMINI_STORAGE_BUCKET_NAME}"
    volumes:
      - ./gemini/storage/scripts/init_minio.sh:/usr/local/bin/init_minio.sh
    entrypoint: >
      /bin/sh -c "sleep 10 && /usr/local/bin/init_minio.sh"

  logger:
    container_name: ${GEMINI_LOGGER_HOSTNAME}
    hostname: ${GEMINI_LOGGER_HOSTNAME}
    restart: always
    build:
      context: ./gemini/logger
      dockerfile: Dockerfile
    image: gemini-logger:latest
    ports:
      - "${GEMINI_LOGGER_PORT}:6379"
    environment:
      - "REDIS_PASSWORD=${GEMINI_LOGGER_PASSWORD}"
      - "REDIS_PORT=${GEMINI_LOGGER_PORT}"
      - "REDIS_MAX_MEMORY=${GEMINI_LOGGER_MAX_MEMORY:-256mb}"
    volumes:
      - gemini_logger_data:/data
      - ./gemini/logger/redis.conf:/usr/local/etc/redis/redis.conf
    command: >
      redis-server /usr/local/etc/redis/redis.conf
      --requirepass "${GEMINI_LOGGER_PASSWORD}"
      --port ${GEMINI_LOGGER_PORT}
      --maxmemory ${GEMINI_LOGGER_MAX_MEMORY:-256mb}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - gemini_network
  

    





  # db:
  #   container_name: ${GEMINI_DB_HOSTNAME}
  #   hostname: ${GEMINI_DB_HOSTNAME}
  #   restart: always
  #   image: ghcr.io/hydradatabase/hydra:15
  #   ports:
  #     - "${GEMINI_DB_PORT}:5432"
  #   environment:
  #     - "POSTGRES_USER=${GEMINI_DB_USER}"
  #     - "POSTGRES_PASSWORD=${GEMINI_DB_PASSWORD}"
  #     - "POSTGRES_DB=${GEMINI_DB_NAME}"
  #   volumes:
  #     - gemini_db_data:/var/lib/postgresql/data
  #     - ./gemini/db/init_sql:/docker-entrypoint-initdb.d
  #     - ./gemini/db/postgresql.conf:/etc/postgresql/postgresql.conf
  #   networks:
  #     - gemini_network

  # logger:
  #   container_name: ${GEMINI_LOGGER_HOSTNAME}
  #   hostname: ${GEMINI_LOGGER_HOSTNAME}
  #   restart: always
  #   image: redis:7.2-alpine
  #   ports:
  #     - "${GEMINI_LOGGER_PORT}:6379"
  #   environment:
  #     - "REDIS_PASSWORD=${GEMINI_LOGGER_PASSWORD}"
  #     - "REDIS_PORT=${GEMINI_LOGGER_PORT}"
  #     - "REDIS_MAX_MEMORY=${GEMINI_LOGGER_MAX_MEMORY:-256mb}"
  #   volumes:
  #     - gemini_logger_data:/data
  #     - ./gemini/logger/redis.conf:/usr/local/etc/redis/redis.conf
  #   command: >
  #     redis-server /usr/local/etc/redis/redis.conf
  #     --requirepass "${GEMINI_LOGGER_PASSWORD}"
  #     --port ${GEMINI_LOGGER_PORT}
  #     --maxmemory ${GEMINI_LOGGER_MAX_MEMORY:-256mb}
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--raw", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 3
  #   networks:
  #     - gemini_network

  # storage:
  #   container_name: ${GEMINI_STORAGE_HOSTNAME}
  #   hostname: ${GEMINI_STORAGE_HOSTNAME}
  #   restart: always
  #   image: minio/minio:RELEASE.2024-07-29T22-14-52Z
  #   ports:
  #     - "${GEMINI_STORAGE_PORT}:9000"
  #     - "${GEMINI_STORAGE_API_PORT}:9001"
  #   environment:
  #     - "MINIO_ROOT_USER=${GEMINI_STORAGE_ROOT_USER}"
  #     - "MINIO_ROOT_PASSWORD=${GEMINI_STORAGE_ROOT_PASSWORD}"
  #     - "GEMINI_STORAGE_ACCESS_KEY=${GEMINI_STORAGE_ACCESS_KEY}"
  #     - "GEMINI_STORAGE_SECRET_KEY=${GEMINI_STORAGE_SECRET_KEY}"
  #     - "GEMINI_STORAGE_BUCKET_NAME=${GEMINI_STORAGE_BUCKET_NAME}"
  #     - "MC_HOST_local=http://${GEMINI_STORAGE_ROOT_USER}:${GEMINI_STORAGE_ROOT_PASSWORD}@localhost:9000"
  #   volumes:
  #     - gemini_storage_data:/data
  #     - ./gemini/storage/scripts:/usr/local/bin/
  #   command: >
  #     server /data
  #   healthcheck:
  #     test: ["CMD", "/usr/local/bin/healthcheck.sh"]
  #     interval: 30s
  #     timeout: 5s
  #     start_period: 30s
  #     retries: 3         
  #   networks:
  #     - gemini_network
  #   depends_on:
  #     - db

  # storage-init:
  #   image: minio/mc:RELEASE.2024-07-31T15-58-33Z
  #   depends_on:
  #     - storage
  #   environment:
  #     - "MINIO_ACCESS_KEY=${GEMINI_STORAGE_ROOT_USER}"
  #     - "MINIO_SECRET_KEY=${GEMINI_STORAGE_ROOT_PASSWORD}"
  #     - "GEMINI_STORAGE_HOSTNAME=${GEMINI_STORAGE_HOSTNAME}"
  #   volumes:
  #     - ./gemini/storage/scripts:/usr/local/bin/
  #   entrypoint: >
  #     /bin/sh -c "sleep 10 && /usr/local/bin/init_minio.sh"
  #   networks:
  #     - gemini_network


  # storage:
  #   container_name: ${GEMINI_STORAGE_HOSTNAME}
  #   hostname: ${GEMINI_STORAGE_HOSTNAME}
  #   user: 1001:1001
  #   restart: always
  #   image: bitnami/minio:latest
    # ports:
    #   - "${GEMINI_STORAGE_PORT}:9000"
    #   - "${GEMINI_STORAGE_API_PORT}:9001"
    # environment:
    #   - "MINIO_ROOT_USER=${GEMINI_STORAGE_ROOT_USER}"
    #   - "MINIO_ROOT_PASSWORD=${GEMINI_STORAGE_ROOT_PASSWORD}"
    #   - "GEMINI_STORAGE_ACCESS_KEY=${GEMINI_STORAGE_ACCESS_KEY}"
    #   - "GEMINI_STORAGE_SECRET_KEY=${GEMINI_STORAGE_SECRET_KEY}"
    #   - "GEMINI_STORAGE_BUCKET_NAME=${GEMINI_STORAGE_BUCKET_NAME}"
    #   - "MC_HOST_local=http://${GEMINI_STORAGE_ROOT_USER}:${GEMINI_STORAGE_ROOT_PASSWORD}@localhost:9000"
    # volumes:
    #   - gemini_storage_data:/bitnami/minio/data
    #   - ./gemini/storage/scripts/init_minio.sh:/usr/local/bin/init_minio.sh
    # command: ["executable", "arg"]
    # command: >
    #   sh -c "minio server /data --console-address :9001 --address :9000 &
    #   until mc admin info local >/dev/null 2>&1; do
    #     echo 'Waiting for MinIO to be ready...';
    #     sleep 1;
    #   done && /usr/local/bin/init_minio.sh"
    # healthcheck:
    #   test: ["CMD", "/usr/local/bin/healthcheck.sh"]
    #   interval: 30s
    #   timeout: 5s
    #   start_period: 30s
    #   retries: 3         
    # healthcheck:
    #   test: ["CMD", "mc", "admin", "info", "local"]
    #   interval: 1s
    #   timeout: 3s
    #   retries: 3
    # networks:
    #   - gemini_network
    # depends_on:
    #   - db
  

  
networks:
  gemini_network:
    driver: bridge

volumes:
  gemini_db_data:
  gemini_logger_data:
  gemini_storage_data:</document_content>
</document>

<document>
<source>gemini/api/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/api/base.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
import os

# minio_config = MinioStorageConfig(
#     base_path='data',
#     endpoint='localhost:9000',
#     access_key='gemini',
#     secret_key='gemini',
#     bucket_name='gemini',
#     secure=False
# )

# print(f"Minio config: {minio_config}")

# local_config = LocalStorageConfig(
#     base_path='~/gemini_data',
#     root_directory='~/gemini_data',
#     create_directory=True
# )

# print(f"Local config: {local_config}")

# minio_provider = StorageFactory.create_provider(minio_config)
# local_provider = StorageFactory.create_provider(local_config)


from pydantic import BaseModel
from pydantic import ConfigDict
from pydantic import model_validator
from typing import Any, Optional, Union, ClassVar
from uuid import UUID
from gemini.api.types import ID
from gemini.storage.config.storage_config import MinioStorageConfig
from gemini.storage.factory.storage_factory import StorageFactory
# from gemini.server.file_server.handler import MinioFileHandler
# from gemini.server.database.models import BaseModel as DBBaseModel
# from gemini.server.database.models.columnar.columnar_base_model import ColumnarBaseModel
# from gemini.server.database.models.views.view_base import ViewBaseModel

from gemini.db.core.base import BaseModel as DBBaseModel
from gemini.db.core.base import ColumnarBaseModel
from gemini.db.core.base import ViewBaseModel

class APIBase(BaseModel):
    """
    Base class for all API classes

    Attributes:
    - db_model (ClassVar[DBBaseModel]): The database model associated with the API class.
    - minio_client (ClassVar[Minio]): The Minio client for the API class.
    - model_config (ConfigDict): Configuration for the model, including attribute handling and namespaces.
    - id (Optional[Union[UUID, str, int]]): The ID of the instance (optional).

    Methods:
    - check_db_model(cls, data: Any) -> Any: Checks if the given data is an instance of the database model.
    - create(cls, **kwargs) -> APIBase: Creates a new instance of the class and adds it to the database.
    - get_by_id(cls, id: Union[UUID, int, str]) -> APIBase: Retrieves an instance of the class by ID.
    - all(cls) -> List[APIBase]: Retrieves all instances of the class from the database.
    - search(cls, **search_parameters) -> List[APIBase]: Searches for instances of the class in the database.

    - update(self, **kwargs) -> APIBase: Updates the instance in the database.
    - delete(self) -> bool: Deletes the instance from the database.
    - refresh(self) -> APIBase: Refreshes the instance from the database.
    """

    db_model: ClassVar[DBBaseModel] = None

    model_config = ConfigDict(
        from_attributes=True,
        arbitrary_types_allowed=True,
        protected_namespaces=(),
        extra="allow"
    )

    id: Optional[ID] = None

    @model_validator(mode="before")
    @classmethod
    def check_db_model(cls, data: Any) -> Any:
        if isinstance(data, (DBBaseModel, ColumnarBaseModel, ViewBaseModel)):
            return data

        db_instance = cls.db_model.get_or_create(**data)
        return db_instance

    @classmethod
    def create(cls, **kwargs):
        """
        Creates a new instance of the class and adds it to the database.

        Args:
        - **kwargs: The fields of the instance.

        Returns:
        - APIBase: The created instance.

        Raises:
        - Exception: If an error occurs during creation.
        """
        try:
            db_instance = cls.db_model.get_or_create(**kwargs)
            instance = cls.model_validate(db_instance)
            return instance
        except Exception as e:
            raise e

    @classmethod
    def get_by_id(cls, id: Union[UUID, int, str]) -> "APIBase":
        """
        Retrieves an instance of the class by ID.

        Args:
        - id (Union[UUID, int, str]): The ID of the instance.

        Returns:
        - APIBase: The instance with the given ID.

        Raises:
        - Exception: If an error occurs during retrieval.
        """
        try:
            instance_from_db = cls.db_model.get_by_id(id)
            instance = cls.model_validate(instance_from_db)
            return instance
        except Exception as e:
            raise e

    @classmethod
    def all(cls):
        """
        Retrieves all instances of the class from the database.

        Returns:
        - List[APIBase]: A list of all the instances of the class.

        Raises:
        - Exception: If an error occurs during retrieval.
        """
        try:
            db_instances = cls.db_model.get_all()
            instances = [cls.model_validate(instance) for instance in db_instances]
            return instances
        except Exception as e:
            raise e

    @classmethod
    def search(cls, **search_parameters):
        """
        Searches for instances of the class in the database.

        Args:
        - **search_parameters: The search parameters.

        Returns:
        - List[APIBase]: A list of the instances that match the search parameters.

        Raises:
        - Exception: If an error occurs during the search.
        """
        try:
            db_instances = cls.db_model.search(**search_parameters)
            instances = [cls.model_validate(instance) for instance in db_instances]
            return instances
        except Exception as e:
            raise e

    def update(self, **kwargs):
        """
        Updates the instance in the database.

        Args:
        - **kwargs: The fields to update.

        Returns:
        - APIBase: The updated instance.

        Raises:
        - Exception: If an error occurs during the update.
        """
        try:
            db_instance = self.db_model.get_by_id(self.id)
            db_instance = self.db_model.update(db_instance, **kwargs)
            instance = self.model_validate(db_instance)
            self.refresh()
            return instance
        except Exception as e:
            raise e

    def delete(self):
        """
        Deletes the instance from the database.

        Returns:
        - bool: True if the instance was deleted, False otherwise.

        Raises:
        - Exception: If an error occurs during the deletion.
        """
        try:
            db_instance = self.db_model.get_by_id(self.id)
            is_deleted = self.db_model.delete(db_instance)
            if not is_deleted:
                raise Exception("Failed to delete the instance from the database")
            return is_deleted
        except Exception as e:
            raise e

    def refresh(self):
        """
        Refreshes the instance from the database.

        Returns:
        - APIBase: The refreshed instance.

        Raises:
        - Exception: If an error occurs during the refresh.
        """
        try:
            db_instance = self.db_model.get_by_id(self.id)
            instance = self.model_validate(db_instance)
            for key, value in instance.model_dump().items():
                if hasattr(self, key) and key != "id":
                    actual_value = getattr(instance, key)
                    setattr(self, key, actual_value)
            return self
        except Exception as e:
            raise e

class FileHandlerMixin(BaseModel):

    file_handler: ClassVar[MinioFileHandler] = MinioFileHandler()

    @classmethod
    def _preprocess_record(cls, record: dict) -> dict:
        """
        Preprocesses the record before inserting it into the database.

        Args:
        - record (dict): The record to preprocess.

        Returns:
        - dict: The preprocessed record.
        """
        record_data = None
        record_type = None

        for key, value in record.items():
            if key.endswith("_data"):
                record_data = value
                record_type = key.split("_")[0]
                break
        
        if not record_data:
            return record
        
        # Get Source Name
        source_name = record.get(f"{record_type}_name")

        if not source_name:
            raise ValueError(f"Source name not found for record {record}")
        
        file_path = record_data.get("file_path")
        if not file_path:
            return record
        
        # Collection Date
        collection_date = record.get("collection_date")
        collection_date = collection_date.strftime("%Y-%m-%d") 

        
        file_key = cls._get_file_uri(file_path, collection_date, record_type, source_name)
        if file_path:
            cls._upload_file(file_key=file_key, absolute_file_path=file_path)
            record_data = {
                "file_key": file_key,
                **record_data
            }
            record_data.pop("file_path")

        # Change the record_data field in record with the record_data
        record[f"{record_type}_data"] = record_data

        return record
    

    @classmethod
    def _postprocess_record(cls, record: dict) -> dict:
        """
        Postprocesses the record after retrieving it from the database.

        Args:
        - record (dict): The record to postprocess.

        Returns:
        - dict: The postprocessed record.
        """
        record_data = None
        record_type = None

        for key, value in record.items():
            if key.endswith("_data"):
                record_data = value
                record_type = key.split("_")[0]
                break

        if not record_data:
            return record
        
        # Get Source Name
        source_name = record.get(f"{record_type}_name")

        if not source_name:
            raise ValueError(f"Source name not found for record {record}")
        
        file_key = record_data.get("file_key")

        if file_key:
            file_url = cls._get_file_download_url(file_key)
            record_data = {
                "file_url": file_url,
                **record_data
            }
            record_data.pop("file_key")

        # Change the record_data field in record with the record_data
        record[f"{record_type}_data"] = record_data
        return record


    @classmethod
    def _upload_file(cls, file_key: str, absolute_file_path: str) -> str:
        """
        Uploads a file to the Minio server.

        Args:
        - absolute_file_path (str): The absolute path of the file to upload.

        Returns:
        - str: The URL of the uploaded file.
        """
        try:

            with open(absolute_file_path, "rb") as file:
                file_url = cls.file_handler.upload_file(
                    object_name=file_key,
                    data_stream=file
                )
                return file_url
    
        except Exception as e:
            raise e
        
    @classmethod
    def _download_file(cls, file_url: str, save_path: str) -> str:
        """
        Downloads a file from the Minio server.

        Args:
        - file_url (str): The URL of the file to download.
        - save_path (str): The path to save the downloaded file.

        Returns:
        - str: The path of the downloaded file.
        """
        try:
            file_path = cls.file_handler.download_file(file_url, save_path)
            return file_path
        except Exception as e:
            raise e
        
    
    @classmethod
    def _get_file_download_url(cls, file_key: str) -> str:
        """
        Gets the download URL for a file.

        Args:
        - file_key (str): The key of the file.

        Returns:
        - str: The download URL of the file.
        """
        try:
            file_url = cls.file_handler.get_download_url(file_key)
            return file_url
        except Exception as e:
            raise e
        
        
    
    @classmethod
    def _get_file_uri(cls, absolute_file_path: str, collection_date: str, record_type: str, source_name: str) -> str:
        """
        Generates the file URI for a given file path.

        Args:
        - absolute_file_path (str): The absolute path of the file.
        - record (dict): The record associated with the file.

        Returns:
        - str: The file URI.
        """

        if not os.path.exists(absolute_file_path):
            raise FileNotFoundError(f"File not found at path {absolute_file_path}")
        
        file_name = os.path.basename(absolute_file_path)

        record_type_case = {
            "sensor": f"sensor_data/{collection_date}/{source_name}/{file_name}",
            "trait": f"trait_data/{collection_date}/{source_name}/{file_name}",
            "model": f"model_data/{collection_date}/{source_name}/{file_name}"
        }

        file_uri = record_type_case.get(record_type)
        return file_uri

</document_content>
</document>

<document>
<source>gemini/api/data_type.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/api/types.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from uuid import UUID
from typing import Any, Optional, Union

# ID Type
ID = Union[UUID, int, str]</document_content>
</document>

<document>
<source>gemini/config/__init__.py</source>
<mime_type>text/plain</mime_type>
<document_content>
"""
GEMINI Framework Configuration Module

This module provides centralized configuration management for the GEMINI framework,
integrating configurations from all services (database, logger, storage).

Example usage:
    from gemini.config import settings
    
    # Get service configs
    db_config = settings.get_database_config()
    logger_config = settings.get_logger_config()
    storage_config = settings.get_storage_config()
"""

from gemini.config.manager import Settings

# Create singleton settings instance
settings = Settings()

# Export manager for CLI tool
from gemini.config.manager import EnvManager

__all__ = ['settings', 'EnvManager']
</document_content>
</document>

<document>
<source>gemini/config/cli.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
#!/usr/bin/env python3

"""
GEMINI Environment Configuration CLI

This script provides a command-line interface for managing GEMINI environment 
configuration (.env file).

Usage examples:
    # Generate default .env file
    python -m gemini.config.cli

    # Display current configuration
    python -m gemini.config.cli --display

    # Use local logger instead of Redis
    python -m gemini.config.cli --logger-provider local

    # Use S3 storage instead of MinIO
    python -m gemini.config.cli --storage-provider s3

    # Set custom values
    python -m gemini.config.cli --set STORAGE_ACCESS_KEY my_key
"""

import sys
from pathlib import Path
import argparse
from gemini.config.env import EnvManager


def main():
    parser = argparse.ArgumentParser(
        description="GEMINI Environment Configuration Manager",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Generate default .env file
  gemini-env

  # Use local logger instead of Redis
  gemini-env --logger-provider local

  # Use S3 storage instead of MinIO
  gemini-env --storage-provider s3

  # Set custom values
  gemini-env --set STORAGE_ACCESS_KEY my_key --set STORAGE_SECRET_KEY my_secret

  # Display current configuration
  gemini-env --display
        """
    )
    
    parser.add_argument('--env-file', default='.env',
                       help='Path to .env file (default: .env)')
    parser.add_argument('--display', action='store_true',
                       help='Display current environment values')
    parser.add_argument('--no-backup', action='store_true',
                       help='Do not create backup of existing .env file')
    parser.add_argument('--set', nargs=2, action='append', metavar=('KEY', 'VALUE'),
                       help='Set custom value for environment variable')
    
    # Provider selection arguments
    parser.add_argument('--logger-provider', choices=['redis', 'local'],
                       help='Set the logger provider type')
    parser.add_argument('--storage-provider', choices=['minio', 'local', 's3'],
                       help='Set the storage provider type')

    args = parser.parse_args()

    try:
        env_manager = EnvManager(args.env_file)

        if args.display:
            env_manager.display_current_values()
            return

        # Prepare custom values
        custom_values = {}
        if args.set:
            custom_values.update(dict(args.set))

        # Add provider selections to custom values
        if args.logger_provider:
            custom_values['LOGGER_PROVIDER'] = args.logger_provider
        if args.storage_provider:
            custom_values['STORAGE_PROVIDER'] = args.storage_provider

        # Write the .env file
        env_manager.write_env_file(
            custom_values=custom_values,
            backup=not args.no_backup
        )

    except Exception as e:
        print(f"Error: {str(e)}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main()</document_content>
</document>

<document>
<source>gemini/config/env.py</source>
<mime_type>text/plain</mime_type>
<document_content>
"""
GEMINI Framework Environment Manager

This module provides tools for managing the .env file and environment variables.
"""

import os
import secrets
import string
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Dict, Any, Type, Optional

from gemini.db.config import DatabaseConfig
from gemini.logger.config.logger_config import LoggerConfig, RedisLoggerConfig
from gemini.storage.config.storage_config import StorageConfig, MinioStorageConfig


def generate_secure_string(length: int = 12) -> str:
    """Generate a secure random string."""
    alphabet = string.ascii_letters + string.digits + string.punctuation
    return ''.join(secrets.choice(alphabet) for _ in range(length))


class ConfigSection(ABC):
    """Base class for configuration sections."""

    @abstractmethod
    def get_default_values(self) -> Dict[str, Any]:
        """Get default values for this configuration section."""
        pass

    @abstractmethod
    def get_config_class(self) -> Type:
        """Get the configuration class this section manages."""
        pass

    @abstractmethod
    def get_section_name(self) -> str:
        """Get the section name for the configuration."""
        pass

    def validate_values(self, values: Dict[str, Any]) -> Dict[str, Any]:
        """Validate configuration values using the config class."""
        config_class = self.get_config_class()
        try:
            instance = config_class(**values)
            return instance.model_dump()
        except Exception as e:
            raise ValueError(f"Invalid configuration for {self.get_section_name()}: {str(e)}")


class DatabaseSection(ConfigSection):
    """Handler for database configuration."""

    def get_default_values(self) -> Dict[str, Any]:
        return {
            "username": "gemini",
            "password": "gemini",
            "hostname": "gemini-db",
            "database": "gemini",
            "port": 5432
        }

    def get_config_class(self) -> Type:
        return DatabaseConfig

    def get_section_name(self) -> str:
        return "Database Configuration"


class LoggerSection(ConfigSection):
    """Handler for logger configuration."""

    def get_default_values(self) -> Dict[str, Any]:
        return {
            "provider": "redis",
            "host": "gemini-logger",
            "port": 6379,
            "password": generate_secure_string(),
            "key_prefix": "gemini:"
        }

    def get_config_class(self) -> Type:
        return RedisLoggerConfig

    def get_section_name(self) -> str:
        return "Logger Configuration"


class StorageSection(ConfigSection):
    """Handler for storage configuration."""

    def get_default_values(self) -> Dict[str, Any]:
        return {
            "provider": "minio",
            "hostname": "gemini-storage",
            "port": 9000,
            "api_port": 9001,
            "root_user": "gemini_root",
            "root_password": generate_secure_string(),
            "access_key": "gemini_storage_user",
            "secret_key": generate_secure_string(),
            "bucket_name": "gemini"
        }

    def get_config_class(self) -> Type:
        return MinioStorageConfig

    def get_section_name(self) -> str:
        return "Storage Configuration"


class EnvManager:
    """Manages .env file for the GEMINI framework."""

    def __init__(self, env_path: str = ".env"):
        self.env_path = Path(env_path)
        self.current_values: Dict[str, Dict[str, Any]] = {}
        self.sections = {
            "database": DatabaseSection(),
            "logger": LoggerSection(),
            "storage": StorageSection()
        }
        self.load_current_values()

    def load_current_values(self) -> None:
        """Load values from existing .env file if it exists."""
        if not self.env_path.exists():
            return

        with open(self.env_path, 'r') as f:
            current_section = None
            for line in f:
                line = line.strip()
                if not line or line.startswith('#'):
                    if line.startswith('# '):
                        section_name = line[2:].lower()
                        for section_key, section in self.sections.items():
                            if section.get_section_name().lower() in section_name:
                                current_section = section_key
                                self.current_values[current_section] = {}
                    continue

                if '=' not in line:
                    continue

                key, value = line.split('=', 1)
                key = key.strip()
                value = value.strip().strip('"\'')

                if current_section:
                    self.current_values[current_section][key] = value

    def get_section_values(self, section: str, custom_values: Dict[str, Any]) -> Dict[str, Any]:
        """Get configuration values for a section."""
        section_handler = self.sections[section]
        
        # Start with default values
        values = section_handler.get_default_values()
        
        # Update with current values if they exist
        if section in self.current_values:
            values.update(self.current_values[section])
        
        # Update with custom values
        if custom_values:
            section_customs = {
                k.replace(f"{section.upper()}_", ""): v 
                for k, v in custom_values.items() 
                if k.startswith(f"{section.upper()}_")
            }
            values.update(section_customs)

        # Validate values
        return section_handler.validate_values(values)

    def generate_env_content(self, custom_values: Optional[Dict[str, Any]] = None) -> str:
        """Generate content for .env file."""
        custom_values = custom_values or {}
        content = []

        for section_key, section in self.sections.items():
            content.append(f"# {section.get_section_name()}")
            values = self.get_section_values(section_key, custom_values)
            
            for key, value in values.items():
                if value is not None:  # Skip None values
                    content.append(f"GEMINI_{section_key.upper()}_{key.upper()}={value}")
            
            content.append("")  # Add blank line between sections

        return "\n".join(content)

    def write_env_file(self, custom_values: Optional[Dict[str, Any]] = None, backup: bool = True) -> None:
        """Write the .env file with provided or default values."""
        if self.env_path.exists() and backup:
            backup_path = self.env_path.with_suffix('.env.backup')
            self.env_path.rename(backup_path)
            print(f"Backed up existing .env file to {backup_path}")

        content = self.generate_env_content(custom_values)
        
        with open(self.env_path, 'w') as f:
            f.write(content)
        
        print(f"Created new .env file at {self.env_path}")

    def display_current_values(self) -> None:
        """Display current environment values."""
        if not self.current_values:
            print("No existing .env file found.")
            return

        print("\nCurrent Environment Values:")
        print("-" * 50)
        
        for section_key, section in self.sections.items():
            print(f"\n{section.get_section_name()}:")
            values = self.get_section_values(section_key, {})
            
            for key, value in values.items():
                # Mask sensitive values
                if any(sensitive in key.lower() for sensitive in ['password', 'secret', 'key']):
                    display_value = '*' * 8
                else:
                    display_value = value
                print(f"GEMINI_{section_key.upper()}_{key.upper()}: {display_value}")</document_content>
</document>

<document>
<source>gemini/config/settings.py</source>
<mime_type>text/plain</mime_type>
<document_content>
"""
GEMINI Framework Settings Manager

This module handles loading and managing configuration settings from environment
variables and .env files.
"""

from typing import Optional
from pydantic_settings import BaseSettings, SettingsConfigDict

from gemini.db.config import DatabaseConfig
from gemini.logger.config.logger_config import RedisLoggerConfig
from gemini.storage.config.storage_config import MinioStorageConfig


class Settings(BaseSettings):
    """
    Central configuration class for the GEMINI Framework.
    Loads settings from environment variables and/or .env file.
    """

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=True
    )

    # Database settings
    GEMINI_DB_USER: str = "gemini"
    GEMINI_DB_PASSWORD: str = "gemini"
    GEMINI_DB_HOSTNAME: str = "gemini-db"
    GEMINI_DB_NAME: str = "gemini"
    GEMINI_DB_PORT: int = 5432

    # Logger settings
    GEMINI_LOGGER_HOSTNAME: str = "gemini-logger"
    GEMINI_LOGGER_PORT: int = 6379
    GEMINI_LOGGER_PASSWORD: str = "gemini"

    # Storage settings
    GEMINI_STORAGE_HOSTNAME: str = "gemini-storage"
    GEMINI_STORAGE_PORT: int = 9000
    GEMINI_STORAGE_API_PORT: int = 9001
    GEMINI_STORAGE_ROOT_USER: str = "gemini_root"
    GEMINI_STORAGE_ROOT_PASSWORD: str = "gemini_root"
    GEMINI_STORAGE_ACCESS_KEY: str = "gemini_storage_user"
    GEMINI_STORAGE_SECRET_KEY: str = "gemini_secret"
    GEMINI_STORAGE_BUCKET_NAME: str = "gemini"

    def get_database_config(self) -> DatabaseConfig:
        """Get database configuration."""
        return DatabaseConfig(
            database_url=f"postgresql://{self.GEMINI_DB_USER}:{self.GEMINI_DB_PASSWORD}@{self.GEMINI_DB_HOSTNAME}:{self.GEMINI_DB_PORT}/{self.GEMINI_DB_NAME}"
        )

    def get_logger_config(self) -> RedisLoggerConfig:
        """Get logger configuration."""
        return RedisLoggerConfig(
            provider="redis",
            host=self.GEMINI_LOGGER_HOSTNAME,
            port=self.GEMINI_LOGGER_PORT,
            password=self.GEMINI_LOGGER_PASSWORD,
            key_prefix="gemini:"
        )

    def get_storage_config(self) -> MinioStorageConfig:
        """Get storage configuration."""
        return MinioStorageConfig(
            provider="minio",
            endpoint=f"{self.GEMINI_STORAGE_HOSTNAME}:{self.GEMINI_STORAGE_PORT}",
            access_key=self.GEMINI_STORAGE_ACCESS_KEY,
            secret_key=self.GEMINI_STORAGE_SECRET_KEY,
            bucket_name=self.GEMINI_STORAGE_BUCKET_NAME,
            secure=False  # TODO: Make configurable if needed
        )</document_content>
</document>

<document>
<source>gemini/db/init_sql/1_init_db.sh</source>
<mime_type>text/x-shellscript</mime_type>
<document_content>
#!/bin/bash

# Exit on error
set -e

# Check if POSTGRES_DB environment variable is set
if [ -z "${POSTGRESQL_DATABASE}" ]; then
    echo "Error: POSTGRES_DB environment variable is not set"
    exit 1
fi

echo "Database created successfully"

# Check if POSTGRESQL_USERNAME environment variable is set
if [ -z "${POSTGRESQL_USERNAME}" ]; then
    echo "Error: POSTGRESQL_USERNAME environment variable is not set"
    exit 1
fi

# Check if POSTGRESQL_PASSWORD environment variable is set
if [ -z "${POSTGRESQL_PASSWORD}" ]; then
    echo "Error: POSTGRESQL_PASSWORD environment variable is not set"
    exit 1
fi

# Check if POSTGRESQL_DATABASE environment variable is set
if [ -z "${POSTGRESQL_DATABASE}" ]; then
    echo "Error: POSTGRESQL_DATABASE environment variable is not set"
    exit 1
fi

# Set password for authentication
export POSTGRES_CONNECTION_STRING="postgresql://postgres:${POSTGRESQL_PASSWORD}@localhost:5432/${POSTGRESQL_DATABASE}"

# Wait for PostgreSQL to be ready
echo "Waiting for PostgreSQL to be ready..."
until psql "${POSTGRES_CONNECTION_STRING}" -c '\q' &>/dev/null; do
    echo "PostgreSQL not ready yet, retrying in 5 seconds..."
    sleep 5
done

# Execute SQL with password authentication
psql "${POSTGRES_CONNECTION_STRING}" <<EOSQL
    -- Create a schema for the GEMINI Database
    CREATE SCHEMA IF NOT EXISTS gemini;
    
    -- Initialize Extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp"; -- Used for generating UUIDs
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";  -- Used for generating passwords
    CREATE EXTENSION IF NOT EXISTS columnar;    -- Used for columnar storage
    CREATE EXTENSION IF NOT EXISTS pg_ivm;
    
    -- Set default table access method
    ALTER DATABASE $POSTGRESQL_DATABASE SET default_table_access_method = 'heap';

    -- Grant Permissions
    GRANT ALL PRIVILEGES ON SCHEMA gemini TO $POSTGRESQL_USERNAME;
    GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA gemini TO $POSTGRESQL_USERNAME;    
    GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA gemini TO $POSTGRESQL_USERNAME;
    GRANT ALL PRIVILEGES ON ALL FUNCTIONS IN SCHEMA gemini TO $POSTGRESQL_USERNAME;
    GRANT ALL PRIVILEGES ON DATABASE $POSTGRESQL_DATABASE TO $POSTGRESQL_USERNAME;

EOSQL


echo "Database initialization completed successfully"

export POSTGRES_CONNECTION_STRING="postgresql://${POSTGRESQL_USERNAME}:${POSTGRESQL_PASSWORD}@localhost:5432/${POSTGRESQL_DATABASE}"

# Run all the sql scripts that are in the /docker-entrypoint-initdb.d directory
for f in /docker-entrypoint-initdb.d/scripts/*.sql; do
    echo "Running $f"
    psql "${POSTGRES_CONNECTION_STRING}" -f "$f"
done</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/2_init_schema.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
-------------------------------------------------------------------------------
-- Table Definitions
-------------------------------------------------------------------------------

-- Experiments Table
-- Stores information about the experiments, including for GEMINI
CREATE TABLE IF NOT EXISTS gemini.experiments (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    experiment_name varchar(255) NOT NULL,
    experiment_info JSONB DEFAULT '{}',
    experiment_start_date DATE DEFAULT NOW(),
    experiment_end_date DATE, -- Value might be replaced by a trigger
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_experiments_info ON gemini.experiments USING GIN (experiment_info);

ALTER TABLE gemini.experiments ADD CONSTRAINT experiment_unique UNIQUE (experiment_name);
ALTER TABLE gemini.experiments ADD CONSTRAINT experiment_start_date_check CHECK (experiment_start_date <= experiment_end_date);
ALTER TABLE gemini.experiments ADD CONSTRAINT experiment_end_date_check CHECK (experiment_end_date >= experiment_start_date);

-------------------------------------------------------------------------------
-- Seasons Table
-- Each experiment can have multiple seasons
CREATE TABLE IF NOT EXISTS gemini.seasons (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    experiment_id uuid REFERENCES gemini.experiments(id),
    season_name VARCHAR(255) NOT NULL,
    season_info JSONB DEFAULT '{}',
    season_start_date DATE DEFAULT NOW(),
    season_end_date DATE, -- Value might be replaced by a trigger
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_seasons_info ON gemini.seasons USING GIN (season_info);

ALTER TABLE gemini.seasons ADD CONSTRAINT season_unique UNIQUE (experiment_id, season_name);
ALTER TABLE gemini.seasons ADD CONSTRAINT season_start_date_check CHECK (season_start_date <= season_end_date);
ALTER TABLE gemini.seasons ADD CONSTRAINT season_end_date_check CHECK (season_end_date >= season_start_date);

-------------------------------------------------------------------------------
-- Sites Table
-- Each experiment can have multiple sites
CREATE TABLE IF NOT EXISTS gemini.sites (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    site_name varchar(255) NOT NULL,
    site_city varchar(255) DEFAULT '',
    site_state varchar(255) DEFAULT '',
    site_country varchar(255) DEFAULT '',
    site_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_sites_info ON gemini.sites USING GIN (site_info);

ALTER TABLE gemini.sites ADD CONSTRAINT site_unique UNIQUE (site_name, site_city, site_state, site_country);

-------------------------------------------------------------------------------
-- Cultivars Table
-- Each experiment can have multiple cultivars, and they are a combination of accession and population
CREATE TABLE IF NOT EXISTS gemini.cultivars (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    cultivar_accession VARCHAR(255) NOT NULL,
    cultivar_population VARCHAR(255) NOT NULL,
    cultivar_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_cultivars_info ON gemini.cultivars USING GIN (cultivar_info);

ALTER TABLE gemini.cultivars ADD CONSTRAINT cultivar_unique UNIQUE (cultivar_accession, cultivar_population);

-------------------------------------------------------------------------------
-- Plots Table
-- This is where all the plot information is stored
CREATE TABLE IF NOT EXISTS gemini.plots (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    experiment_id uuid REFERENCES gemini.experiments(id),
    season_id uuid REFERENCES gemini.seasons(id),
    site_id uuid REFERENCES gemini.sites(id),
    plot_number INTEGER,
    plot_row_number INTEGER,
    plot_column_number INTEGER,
    plot_geometry_info JSONB DEFAULT '{}',
    plot_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
    

CREATE INDEX IF NOT EXISTS idx_plots_info ON gemini.plots USING GIN (plot_info);

ALTER TABLE gemini.plots ADD CONSTRAINT plot_unique UNIQUE (experiment_id, season_id, site_id, plot_number, plot_row_number, plot_column_number);

-------------------------------------------------------------------------------
-- Plants Table
-- This is where all the plant information is stored
CREATE TABLE IF NOT EXISTS gemini.plants (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    plot_id uuid REFERENCES gemini.plots(id),
    plant_number INTEGER,
    plant_info JSONB DEFAULT '{}',
    cultivar_id uuid REFERENCES gemini.cultivars(id),
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_plants_info ON gemini.plants USING GIN (plant_info);

ALTER TABLE gemini.plants ADD CONSTRAINT plant_unique UNIQUE (plot_id, plant_number);


-------------------------------------------------------------------------------
-- Data Types Table
-- This is where we will store all possible Data Types that are compatible with GEMINI
-- Acts like a global enumeration for data types
CREATE TABLE IF NOT EXISTS gemini.data_types (
    id INTEGER PRIMARY KEY,
    data_type_name VARCHAR(255) NOT NULL,
    data_type_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_data_types_info ON gemini.data_types USING GIN (data_type_info);

ALTER TABLE gemini.data_types ADD CONSTRAINT data_type_unique UNIQUE NULLS NOT DISTINCT (data_type_name);

-------------------------------------------------------------------------------
-- Data Formats Table
-- This is where we will store all possible Data Formats that are compatible with GEMINI
-- Stores File Formats
CREATE TABLE IF NOT EXISTS gemini.data_formats (
    id INTEGER PRIMARY KEY,
    data_format_name VARCHAR(255) NOT NULL,
    data_format_mime_type VARCHAR(255) DEFAULT 'application/octet-stream',
    data_format_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_data_formats_info ON gemini.data_formats USING GIN (data_format_info);

ALTER TABLE gemini.data_formats ADD CONSTRAINT data_format_unique UNIQUE NULLS NOT DISTINCT (data_format_name);

-------------------------------------------------------------------------------
-- Trait Levels Table
-- This is where we will store all possible Trait Levels that are compatible with GEMINI
-- Acts like a global enumeration for trait levels
CREATE TABLE IF NOT EXISTS gemini.trait_levels (
    id INTEGER PRIMARY KEY,
    trait_level_name VARCHAR(255) NOT NULL,
    trait_level_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_trait_levels_info ON gemini.trait_levels USING GIN (trait_level_info);

ALTER TABLE gemini.trait_levels ADD CONSTRAINT trait_level_unique UNIQUE NULLS NOT DISTINCT (trait_level_name);

-------------------------------------------------------------------------------
-- Traits Table
-- This is where all the trait information is stored
CREATE TABLE IF NOT EXISTS gemini.traits (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    trait_name VARCHAR(255) NOT NULL,
    trait_units VARCHAR(255) DEFAULT 'units',
    trait_level_id INTEGER REFERENCES gemini.trait_levels(id) DEFAULT 0,
    trait_metrics JSONB DEFAULT '{}',
    trait_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);


CREATE INDEX IF NOT EXISTS idx_traits_info ON gemini.traits USING GIN (trait_info);

ALTER TABLE gemini.traits ADD CONSTRAINT trait_unique UNIQUE NULLS NOT DISTINCT (trait_name);

-------------------------------------------------------------------------------
-- Sensor Types Table
-- This is where we will store all possible Sensor Types that are compatible with GEMINI
-- Acts like a global enumeration for sensor types
CREATE TABLE IF NOT EXISTS gemini.sensor_types (
    id INTEGER PRIMARY KEY,
    sensor_type_name VARCHAR(255) NOT NULL,
    sensor_type_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_sensor_types_info ON gemini.sensor_types USING GIN (sensor_type_info);

ALTER TABLE gemini.sensor_types ADD CONSTRAINT sensor_type_unique UNIQUE NULLS NOT DISTINCT (sensor_type_name);

-------------------------------------------------------------------------------
-- Platforms Table
-- This is where all the platform information is stored
-- A platform is a collection of sensors

CREATE TABLE IF NOT EXISTS gemini.sensor_platforms (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    sensor_platform_name VARCHAR(255) NOT NULL,
    sensor_platform_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_sensor_platforms_info ON gemini.sensor_platforms USING GIN (sensor_platform_info);

ALTER TABLE gemini.sensor_platforms ADD CONSTRAINT sensor_platform_unique UNIQUE NULLS NOT DISTINCT (sensor_platform_name);

-------------------------------------------------------------------------------
-- Sensors Table
-- This is where all the sensor information is stored
CREATE TABLE IF NOT EXISTS gemini.sensors (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    sensor_name VARCHAR(255) NOT NULL,
    sensor_type_id INTEGER REFERENCES gemini.sensor_types(id) DEFAULT 0,
    sensor_data_type_id INTEGER REFERENCES gemini.data_types(id) DEFAULT 0,
    sensor_data_format_id INTEGER REFERENCES gemini.data_formats(id) DEFAULT 0,
    sensor_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_sensors_info ON gemini.sensors USING GIN (sensor_info);

ALTER TABLE gemini.sensors ADD CONSTRAINT sensor_unique UNIQUE NULLS NOT DISTINCT (sensor_name);


-------------------------------------------------------------------------------
-- Resources Table
-- This is where all the resource information is stored, you can add a resource
CREATE TABLE IF NOT EXISTS gemini.resources (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    resource_uri VARCHAR(255),
    resource_file_name VARCHAR(255),
    is_external BOOLEAN DEFAULT FALSE,
    resource_experiment_id UUID REFERENCES gemini.experiments(id) DEFAULT NULL,
    resource_data_format_id INTEGER REFERENCES gemini.data_formats(id) DEFAULT 0,
    resource_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_resources_info ON gemini.resources USING GIN (resource_info);

ALTER TABLE gemini.resources ADD CONSTRAINT resource_unique UNIQUE NULLS NOT DISTINCT (resource_uri, resource_file_name);

-------------------------------------------------------------------------------
-- Scripts Table
-- This is where all the script information is stored, you can add a script
CREATE TABLE IF NOT EXISTS gemini.scripts (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    script_name VARCHAR(255),
    script_url VARCHAR(255),
    script_extension VARCHAR(255),
    script_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_scripts_info ON gemini.scripts USING GIN (script_info);

ALTER TABLE gemini.scripts ADD CONSTRAINT script_unique UNIQUE NULLS NOT DISTINCT (script_name, script_url);

-------------------------------------------------------------------------------
-- Script Runs Table
-- This is where all the script run information is stored, you can add a script run
CREATE TABLE IF NOT EXISTS gemini.script_runs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    script_id UUID REFERENCES gemini.scripts(id) ON DELETE CASCADE,
    script_run_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_script_runs_info ON gemini.script_runs USING GIN (script_run_info);

ALTER TABLE gemini.script_runs ADD CONSTRAINT script_run_unique UNIQUE NULLS NOT DISTINCT (script_id, script_run_info);

-------------------------------------------------------------------------------
-- Models Table
-- This is where all the model information is stored, you can add a model
CREATE TABLE IF NOT EXISTS gemini.models (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    model_name VARCHAR(255),
    model_url VARCHAR(255),
    model_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_models_info ON gemini.models USING GIN (model_info);

ALTER TABLE gemini.models ADD CONSTRAINT model_unique UNIQUE NULLS NOT DISTINCT (model_name, model_url);

-------------------------------------------------------------------------------
-- Model Runs Table
-- This is where all the model run information is stored, you can add a model run
CREATE TABLE IF NOT EXISTS gemini.model_runs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    model_id UUID REFERENCES gemini.models(id) ON DELETE CASCADE,
    model_run_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_model_runs_info ON gemini.model_runs USING GIN (model_run_info);

ALTER TABLE gemini.model_runs ADD CONSTRAINT model_run_unique UNIQUE NULLS NOT DISTINCT (model_id, model_run_info);

-------------------------------------------------------------------------------
-- Procedures Table
-- This is where all the procedure information is stored, you can add a procedure
CREATE TABLE IF NOT EXISTS gemini.procedures (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    procedure_name VARCHAR(255),
    procedure_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_procedures_info ON gemini.procedures USING GIN (procedure_info);

ALTER TABLE gemini.procedures ADD CONSTRAINT procedure_unique UNIQUE NULLS NOT DISTINCT (procedure_name);

-------------------------------------------------------------------------------
-- Procedure Runs Table
-- This is where all the procedure run information is stored, you can add a procedure run
CREATE TABLE IF NOT EXISTS gemini.procedure_runs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    procedure_id UUID REFERENCES gemini.procedures(id) ON DELETE CASCADE,
    procedure_run_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_procedure_runs_info ON gemini.procedure_runs USING GIN (procedure_run_info);

ALTER TABLE gemini.procedure_runs ADD CONSTRAINT procedure_run_unique UNIQUE NULLS NOT DISTINCT (procedure_id, procedure_run_info);

-------------------------------------------------------------------------------
-- Dataset Types Table
-- This is where all the dataset type information is stored
CREATE TABLE IF NOT EXISTS gemini.dataset_types (
    id INTEGER PRIMARY KEY,
    dataset_type_name VARCHAR(255) NOT NULL,
    dataset_type_info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_dataset_types_info ON gemini.dataset_types USING GIN (dataset_type_info);

ALTER TABLE gemini.dataset_types ADD CONSTRAINT dataset_type_unique UNIQUE NULLS NOT DISTINCT (dataset_type_name);

-------------------------------------------------------------------------------
-- Datasets Table
-- This is where all the dataset information is stored
CREATE TABLE IF NOT EXISTS gemini.datasets(
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    collection_date DATE DEFAULT NOW(),
    dataset_name VARCHAR(255),
    dataset_info JSONB DEFAULT '{}',
    dataset_type_id INTEGER REFERENCES gemini.dataset_types(id) DEFAULT 0,
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_datasets_info ON gemini.datasets USING GIN (dataset_info);

ALTER TABLE gemini.datasets ADD CONSTRAINT dataset_name_unique UNIQUE NULLS NOT DISTINCT (dataset_name);


</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/3_init_relationships.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
-------------------------------------------------------------------------------
-- Relationships
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- DataType Formats Table
-- This is where all the data type format information is stored
-- Each data type can have multiple formats
CREATE TABLE IF NOT EXISTS gemini.data_type_formats (
    data_type_id INTEGER REFERENCES gemini.data_types(id) ON DELETE CASCADE,
    data_format_id INTEGER REFERENCES gemini.data_formats(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (data_type_id, data_format_id)
);

-------------------------------------------------------------------------------
-- Experiment Sites Table

CREATE TABLE IF NOT EXISTS gemini.experiment_sites (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    site_id UUID REFERENCES gemini.sites(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, site_id)
);

-------------------------------------------------------------------------------
-- Experiment Sensors Table

CREATE TABLE IF NOT EXISTS gemini.experiment_sensors (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    sensor_id UUID REFERENCES gemini.sensors(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, sensor_id)
);

-------------------------------------------------------------------------------
-- Experiment Sensor Platforms Table

CREATE TABLE IF NOT EXISTS gemini.experiment_sensor_platforms (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    sensor_platform_id UUID REFERENCES gemini.sensor_platforms(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, sensor_platform_id)
);


-------------------------------------------------------------------------------
-- Experiment Traits Table

CREATE TABLE IF NOT EXISTS gemini.experiment_traits (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    trait_id UUID REFERENCES gemini.traits(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, trait_id)
);

-------------------------------------------------------------------------------
-- Experiment Cultivars Table

CREATE TABLE IF NOT EXISTS gemini.experiment_cultivars (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    cultivar_id UUID REFERENCES gemini.cultivars(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, cultivar_id)
);


-------------------------------------------------------------------------------
-- Experiment Datasets Table

CREATE TABLE IF NOT EXISTS gemini.experiment_datasets (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    dataset_id UUID REFERENCES gemini.datasets(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, dataset_id)
);

-------------------------------------------------------------------------------
-- Experiment Models Table

CREATE TABLE IF NOT EXISTS gemini.experiment_models (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    model_id UUID REFERENCES gemini.models(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, model_id)
);

-------------------------------------------------------------------------------
-- Experiment Procedures Table

CREATE TABLE IF NOT EXISTS gemini.experiment_procedures (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    procedure_id UUID REFERENCES gemini.procedures(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, procedure_id)
);

-------------------------------------------------------------------------------
-- Experiment Scripts Table

CREATE TABLE IF NOT EXISTS gemini.experiment_scripts (
    experiment_id UUID REFERENCES gemini.experiments(id) ON DELETE CASCADE,
    script_id UUID REFERENCES gemini.scripts(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    PRIMARY KEY (experiment_id, script_id)
);

-------------------------------------------------------------------------------
-- Plot Cultivars Table

CREATE TABLE IF NOT EXISTS gemini.plot_cultivars (
    plot_id UUID REFERENCES gemini.plots(id) ON DELETE CASCADE,
    cultivar_id UUID REFERENCES gemini.cultivars(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (plot_id, cultivar_id)
);

-------------------------------------------------------------------------------
-- Trait Sensors Table

CREATE TABLE IF NOT EXISTS gemini.trait_sensors (
    trait_id UUID REFERENCES gemini.traits(id) ON DELETE CASCADE,
    sensor_id UUID REFERENCES gemini.sensors(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (trait_id, sensor_id)
);

-------------------------------------------------------------------------------
-- Sensor Platforms Sensors Table

CREATE TABLE IF NOT EXISTS gemini.sensor_platform_sensors (
    sensor_platform_id UUID REFERENCES gemini.sensor_platforms(id) ON DELETE CASCADE,
    sensor_id UUID REFERENCES gemini.sensors(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (sensor_platform_id, sensor_id)
);

-------------------------------------------------------------------------------
-- Sensor Datasets Table

CREATE TABLE IF NOT EXISTS gemini.sensor_datasets (
    sensor_id UUID REFERENCES gemini.sensors(id) ON DELETE CASCADE,
    dataset_id UUID REFERENCES gemini.datasets(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (sensor_id, dataset_id)
);

-------------------------------------------------------------------------------
-- Trait Datasets Table

CREATE TABLE IF NOT EXISTS gemini.trait_datasets (
    trait_id UUID REFERENCES gemini.traits(id) ON DELETE CASCADE,
    dataset_id UUID REFERENCES gemini.datasets(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (trait_id, dataset_id)
);

-------------------------------------------------------------------------------
-- Model Datasets Table

CREATE TABLE IF NOT EXISTS gemini.model_datasets (
    model_id UUID REFERENCES gemini.models(id) ON DELETE CASCADE,
    dataset_id UUID REFERENCES gemini.datasets(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (model_id, dataset_id)
);

-------------------------------------------------------------------------------
-- Script Datasets Table

CREATE TABLE IF NOT EXISTS gemini.script_datasets (
    script_id UUID REFERENCES gemini.scripts(id) ON DELETE CASCADE,
    dataset_id UUID REFERENCES gemini.datasets(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (script_id, dataset_id)
);

-------------------------------------------------------------------------------
-- Procedure Datasets Table

CREATE TABLE IF NOT EXISTS gemini.procedure_datasets (
    procedure_id UUID REFERENCES gemini.procedures(id) ON DELETE CASCADE,
    dataset_id UUID REFERENCES gemini.datasets(id) ON DELETE CASCADE,
    info JSONB DEFAULT '{}',
    created_at TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
    PRIMARY KEY (procedure_id, dataset_id)
);

</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/4_init_columnar.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
-- ------------------------------------------------------------------------------
-- -- Columnar Tables (using Hydra)
-- ------------------------------------------------------------------------------

------------------------------------------------------------------------------
-- Dataset Records Table
------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS gemini.dataset_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
    collection_date DATE NOT NULL DEFAULT CURRENT_DATE,
    dataset_id UUID,
    dataset_name TEXT,
    dataset_data JSONB NOT NULL DEFAULT '{}',
    record_info JSONB NOT NULL DEFAULT '{}'
) USING columnar;


ALTER TABLE gemini.dataset_records ADD CONSTRAINT dataset_records_unique UNIQUE NULLS DISTINCT (timestamp, collection_date, dataset_id, dataset_name, record_info);

CREATE INDEX dataset_records_record_info_idx ON gemini.dataset_records USING GIN (record_info);
------------------------------------------------------------------------------
-- Sensor Records Table
------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS gemini.sensor_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
    collection_date DATE NOT NULL DEFAULT CURRENT_DATE,
    dataset_id UUID,
    dataset_name TEXT,
    sensor_id UUID,
    sensor_name TEXT,
    sensor_data JSONB NOT NULL DEFAULT '{}',
    record_info JSONB NOT NULL DEFAULT '{}'
);

ALTER TABLE gemini.sensor_records ADD CONSTRAINT sensor_records_unique UNIQUE NULLS DISTINCT (timestamp, collection_date, dataset_id, dataset_name, sensor_id, sensor_name, record_info);

CREATE INDEX sensor_records_record_info_idx ON gemini.sensor_records USING GIN (record_info);

------------------------------------------------------------------------------
-- Trait Records Table
------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS gemini.trait_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
    collection_date DATE NOT NULL DEFAULT CURRENT_DATE,
    dataset_id UUID,
    dataset_name TEXT,
    trait_id UUID,
    trait_name TEXT,
    trait_value REAL NOT NULL DEFAULT 0.0,
    record_info JSONB NOT NULL DEFAULT '{}'
) USING columnar;

ALTER TABLE gemini.trait_records ADD CONSTRAINT trait_records_unique UNIQUE NULLS DISTINCT (timestamp, collection_date, dataset_id, dataset_name, trait_id, trait_name, record_info);

CREATE INDEX trait_records_record_info_idx ON gemini.trait_records USING GIN (record_info);

------------------------------------------------------------------------------
-- Procedure Records Table
------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS gemini.procedure_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
    collection_date DATE NOT NULL DEFAULT CURRENT_DATE,
    dataset_id UUID,
    dataset_name TEXT,
    procedure_id UUID,
    procedure_name TEXT,
    procedure_data JSONB NOT NULL DEFAULT '{}',
    record_info JSONB NOT NULL DEFAULT '{}'
) USING columnar;

ALTER TABLE gemini.procedure_records ADD CONSTRAINT procedure_records_unique UNIQUE NULLS DISTINCT (timestamp, collection_date, dataset_id, dataset_name, procedure_id, procedure_name, record_info);

CREATE INDEX procedure_records_record_info_idx ON gemini.procedure_records USING GIN (record_info);

------------------------------------------------------------------------------
-- Script Records Table
------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS gemini.script_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
    collection_date DATE NOT NULL DEFAULT CURRENT_DATE,
    dataset_id UUID,
    dataset_name TEXT,
    script_id UUID,
    script_name TEXT,
    script_data JSONB NOT NULL DEFAULT '{}',
    record_info JSONB NOT NULL DEFAULT '{}'
) USING columnar;

ALTER TABLE gemini.script_records ADD CONSTRAINT script_records_unique UNIQUE NULLS DISTINCT (timestamp, collection_date, dataset_id, dataset_name, script_id, script_name, record_info);

CREATE INDEX script_records_record_info_idx ON gemini.script_records USING GIN (record_info);
------------------------------------------------------------------------------
-- Model Records Table
------------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS gemini.model_records (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    timestamp TIMESTAMP NOT NULL DEFAULT NOW(),
    collection_date DATE NOT NULL DEFAULT CURRENT_DATE,
    dataset_id UUID,
    dataset_name TEXT,
    model_id UUID,
    model_name TEXT,
    model_data JSONB NOT NULL DEFAULT '{}',
    record_info JSONB NOT NULL DEFAULT '{}'
) USING columnar;

ALTER TABLE gemini.model_records ADD CONSTRAINT model_records_unique UNIQUE NULLS DISTINCT (timestamp, collection_date, dataset_id, dataset_name, model_id, model_name, record_info);

CREATE INDEX model_records_record_info_idx ON gemini.model_records USING GIN (record_info);</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/5_init_views.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
-------------------------------------------------------------------------------
-- Views and Materialized Views
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-- Materialized View for Plot Information

CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.plot_view
USING columnar
AS
SELECT
    p.id AS plot_id,
    e.id AS experiment_id,
    e.experiment_name,
    s.id AS season_id,
    s.season_name,
    si.id AS site_id,
    si.site_name,
    p.plot_number,
    p.plot_row_number,
    p.plot_column_number,
    p.plot_geometry_info,
    p.plot_info
FROM
    gemini.plots p
    JOIN gemini.experiments e ON p.experiment_id = e.id
    JOIN gemini.seasons s ON p.season_id = s.id
    JOIN gemini.sites si ON p.site_id = si.id;

-------------------------------------------------------------------------------
-- Materialized view that shows plot cultivar information

CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.plot_cultivar_view
USING columnar
AS
SELECT
    p.id AS plot_id,
    p.plot_number AS plot_number,
    p.plot_row_number AS plot_row_number,
    p.plot_column_number AS plot_column_number,
    p.plot_info AS plot_info,
    c.id AS cultivar_id,
    c.cultivar_accession,
    c.cultivar_population
FROM
    gemini.plots p
    JOIN gemini.plot_cultivars pc ON p.id = pc.plot_id
    JOIN gemini.cultivars c ON pc.cultivar_id = c.id;

-------------------------------------------------------------------------------
-- Materialized View to show Experiment Sites
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_sites_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    s.id AS site_id,
    s.site_name AS site_name,
    s.site_city AS site_city,
    s.site_state AS site_state,
    s.site_country AS site_country,
    s.site_info AS site_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_sites es ON e.id = es.experiment_id
    JOIN gemini.sites s ON es.site_id = s.id;

-------------------------------------------------------------------------------
-- Materialized View to show Experiment Seasons
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_traits_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    t.id AS trait_id,
    t.trait_name AS trait_name,
    t.trait_units AS trait_units,
    t.trait_metrics AS trait_metrics,
    t.trait_info AS trait_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_traits et ON e.id = et.experiment_id
    JOIN gemini.traits t ON et.trait_id = t.id;

-------------------------------------------------------------------------------
-- Materialized View to show Experiment Sensors
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_sensors_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    s.id AS sensor_id,
    s.sensor_name AS sensor_name,
    s.sensor_type_id AS sensor_type_id,
    s.sensor_data_type_id AS sensor_data_type_id,
    s.sensor_data_format_id AS sensor_data_format_id,
    s.sensor_info AS sensor_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_sensors es ON e.id = es.experiment_id
    JOIN gemini.sensors s ON es.sensor_id = s.id;

-------------------------------------------------------------------------------
-- Materialized View to show Experiment Cultivars
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_cultivars_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    c.id AS cultivar_id,
    c.cultivar_accession AS cultivar_accession,
    c.cultivar_population AS cultivar_population,
    c.cultivar_info AS cultivar_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_cultivars ec ON e.id = ec.experiment_id
    JOIN gemini.cultivars c ON ec.cultivar_id = c.id;


-------------------------------------------------------------------------------
-- Materialized View to show Experiment Procedures
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_procedures_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    p.id AS procedure_id,
    p.procedure_name AS procedure_name,
    p.procedure_info AS procedure_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_procedures ep ON e.id = ep.experiment_id
    JOIN gemini.procedures p ON ep.procedure_id = p.id;


-------------------------------------------------------------------------------
-- Materialized View to show Experiment Scripts
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_scripts_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    s.id AS script_id,
    s.script_name AS script_name,
    s.script_url AS script_url,
    s.script_extension AS script_extension,
    s.script_info AS script_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_scripts es ON e.id = es.experiment_id
    JOIN gemini.scripts s ON es.script_id = s.id;

-------------------------------------------------------------------------------
-- Materialized View to show Experiment Models
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_models_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    m.id AS model_id,
    m.model_name AS model_name,
    m.model_url AS model_url,
    m.model_info AS model_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_models em ON e.id = em.experiment_id
    JOIN gemini.models m ON em.model_id = m.id;

-------------------------------------------------------------------------------
-- Materialized View to show Experiment Datasets
CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.experiment_datasets_view
USING columnar
AS
SELECT
    e.id AS experiment_id,
    e.experiment_name AS experiment_name,
    d.id AS dataset_id,
    d.collection_date AS collection_date,
    d.dataset_name AS dataset_name,
    d.dataset_type_id AS dataset_type_id,
    d.dataset_info AS dataset_info
FROM
    gemini.experiments e
    JOIN gemini.experiment_datasets ed ON e.id = ed.experiment_id
    JOIN gemini.datasets d ON ed.dataset_id = d.id;


-------------------------------------------------------------------------------
-- Sensor Datasets View

CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.sensor_datasets_view
AS
SELECT
    sd.sensor_id,
    s.sensor_name AS sensor_name,
    sd.dataset_id,
    d.dataset_name AS dataset_name,
    sd.info AS sensor_dataset_info
FROM
    gemini.sensor_datasets sd
    JOIN gemini.sensors s ON sd.sensor_id = s.id
    JOIN gemini.datasets d ON sd.dataset_id = d.id;

-------------------------------------------------------------------------------
-- Trait Datasets View

CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.trait_datasets_view
AS
SELECT
    td.trait_id,
    t.trait_name AS trait_name,
    td.dataset_id,
    d.dataset_name AS dataset_name,
    td.info AS trait_dataset_info
FROM
    gemini.trait_datasets td
    JOIN gemini.traits t ON td.trait_id = t.id
    JOIN gemini.datasets d ON td.dataset_id = d.id;


-------------------------------------------------------------------------------
-- Procedure Datasets View

CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.procedure_datasets_view
AS
SELECT
    pd.procedure_id,
    p.procedure_name AS procedure_name,
    pd.dataset_id,
    d.dataset_name AS dataset_name,
    pd.info AS procedure_dataset_info
FROM
    gemini.procedure_datasets pd
    JOIN gemini.procedures p ON pd.procedure_id = p.id
    JOIN gemini.datasets d ON pd.dataset_id = d.id;

-------------------------------------------------------------------------------
-- Script Datasets View

CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.script_datasets_view
AS
SELECT
    sd.script_id,
    s.script_name AS script_name,
    sd.dataset_id,
    d.dataset_name AS dataset_name,
    sd.info AS script_dataset_info
FROM
    gemini.script_datasets sd
    JOIN gemini.scripts s ON sd.script_id = s.id
    JOIN gemini.datasets d ON sd.dataset_id = d.id;


-------------------------------------------------------------------------------
-- Model Datasets View

CREATE MATERIALIZED VIEW IF NOT EXISTS gemini.model_datasets_view
AS
SELECT
    md.model_id,
    m.model_name AS model_name,
    md.dataset_id,
    d.dataset_name AS dataset_name,
    md.info AS model_dataset_info
FROM
    gemini.model_datasets md
    JOIN gemini.models m ON md.model_id = m.id
    JOIN gemini.datasets d ON md.dataset_id = d.id;

    
-------------------------------------------------------------------------------
-- IMMV
-------------------------------------------------------------------------------

SET default_table_access_method = 'columnar';
SET max_parallel_workers = 1;

-------------------------------------------------------------------------------
-- Sensor Records IMMV
-------------------------------------------------------------------------------
SELECT create_immv('gemini.sensor_records_immv', 'select * from gemini.sensor_records');

-------------------------------------------------------------------------------
-- Trait Records IMMV
-------------------------------------------------------------------------------
SELECT create_immv('gemini.trait_records_immv', 'select * from gemini.trait_records');


SET max_parallel_workers = DEFAULT;
SET default_table_access_method = 'heap';</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/6_init_functions.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
------------------------------------------------------------------------------
-- Database Functions and Procedures
------------------------------------------------------------------------------

------------------------------------------------------------------------------
-- Function: get_plots
--
-- Description:
-- Returns a list of plots for a given experiment, season and site

CREATE OR REPLACE FUNCTION gemini.get_plots(
    experiment_name TEXT,
    season_name TEXT,
    site_name TEXT
) RETURNS SETOF gemini.plot_view AS
$$
BEGIN
    RETURN QUERY
    SELECT * FROM gemini.plot_view
    WHERE
        experiment_name = experiment_name AND
        season_name = season_name AND
        site_name = site_name;
END;
$$ LANGUAGE plpgsql;

</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/7_init_data.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
------------------------------------------------------------
-- Create the initial data for the database
------------------------------------------------------------

-- Insert Data Types
INSERT INTO gemini.data_types (id, data_type_name, data_type_info)
VALUES
    (0, 'Default', '{"description": "Default Data Type"}'), -- just values
    (1, 'Text', '{"description": "Text Data Type"}'),
    (2, 'Web', '{"description": "HTML Data Type"}'),
    (3, 'Document', '{"description": "Represents PDF, DOCX, DOC etc"}'),
    (4, 'Image', '{"description": "Image Data Type"}'),
    (5, 'Audio', '{"description": "Audio Data Type"}'),
    (6, 'Video', '{"description": "Video Data Type"}'),
    (7, 'Binary', '{"description": "Binary Data Type"}'),
    (8, 'Other', '{"description": "Other Data Type"}');

-- Insert Data Formats
INSERT INTO gemini.data_formats (id, data_format_name, data_format_mime_type, data_format_info)
VALUES
    (0, 'Default', 'application/octet-stream', '{"description": "Default Data Format"}'),
    (1, 'TXT', 'text/plain', '{"description": "Text Data Format"}'),
    (2, 'JSON', 'application/json', '{"description": "JSON Data Format"}'),
    (3, 'CSV', 'text/csv', '{"description": "CSV Data Format"}'),
    (4, 'TSV', 'text/tab-separated-values', '{"description": "TSV Data Format"}'),
    (5, 'XML', 'application/xml', '{"description": "XML Data Format"}'),
    (6, 'HTML', 'text/html', '{"description": "HTML Data Format"}'),
    (7, 'PDF', 'application/pdf', '{"description": "PDF Data Format"}'),
    (8, 'JPEG', 'image/jpeg', '{"description": "JPEG Data Format"}'),
    (9, 'PNG', 'image/png', '{"description": "PNG Data Format"}'),
    (10, 'GIF', 'image/gif', '{"description": "GIF Data Format"}'),
    (11, 'BMP', 'image/bmp', '{"description": "BMP Data Format"}'),
    (12, 'TIFF', 'image/tiff', '{"description": "TIFF Data Format"}'),
    (13, 'WAV', 'audio/wav', '{"description": "WAV Data Format"}'),
    (14, 'MP3', 'audio/mpeg', '{"description": "MP3 Data Format"}'),
    (15, 'MPEG', 'video/mpeg', '{"description": "MPEG Data Format"}'),
    (16, 'AVI', 'video/x-msvideo', '{"description": "AVI Data Format"}'),
    (17, 'MP4', 'video/mp4', '{"description": "MP4 Data Format"}'),
    (18, 'OGG', 'video/ogg', '{"description": "OGG Data Format"}'),
    (19, 'WEBM', 'video/webm', '{"description": "WEBM Data Format"}'),
    (20, 'NPY', 'application/octet-stream', '{"description": "Numpy Data Format"}');

-- Create Datatype Formats associations
INSERT INTO gemini.data_type_formats (data_type_id, data_format_id)
VALUES
    (0, 0), -- Default
    (1, 1), -- Text
    (1, 2), -- JSON
    (1, 3), -- CSV
    (1, 4), -- TSV
    (1, 5), -- XML
    (2, 6), -- HTML
    (3, 7), -- PDF
    (4, 8), -- JPEG
    (4, 9), -- PNG
    (4, 10), -- GIF
    (4, 11), -- BMP
    (4, 12), -- TIFF
    (5, 13), -- WAV
    (5, 14), -- MP3
    (6, 15), -- MPEG
    (6, 16), -- AVI
    (6, 17), -- MP4
    (6, 18), -- OGG
    (6, 19), -- WEBM
    (8, 20); -- Other

-- Insert Trait Levels
INSERT INTO gemini.trait_levels (id, trait_level_name, trait_level_info)
VALUES
    (0, 'Default', '{"description": "Default Trait Level"}'),
    (1, 'Plot', '{"description": "Default Plot Level"}'),
    (2, 'Plant', '{"description": "Default Plant Level"}');


-- Insert Predefined Sensor Types
INSERT INTO gemini.sensor_types (id, sensor_type_name, sensor_type_info)
VALUES
    (0, 'Default', '{"description": "Default Sensor Type"}'),
    (1, 'RGB', '{"description": "RGB Sensor"}'),
    (2, 'NIR', '{"description": "NIR Sensor"}'),
    (3, 'Thermal', '{"description": "Thermal Sensor"}'),
    (4, 'Multispectral', '{"description": "Multispectral Sensor"}'),
    (5, 'Weather', '{"description": "Weather Sensor"}'),
    (6, 'GPS', '{"description": "GPS Sensor"}'),
    (7, 'Calibration', '{"description": "Calibration Sensor"}'),
    (8, 'Depth', '{"description": "Depth Sensor"}'),
    (9, 'IMU', '{"description": "IMU Sensor"}'),
    (10, 'Disparity', '{"description": "Disparity Maps Source"}');


-- Insert Dataset Types
INSERT INTO gemini.dataset_types (id, dataset_type_name, dataset_type_info)
VALUES
    (0, 'Default', '{"description": "Default Dataset Type"}'),
    (1, 'Sensor', '{"description": "Sensor Dataset Type"}'),
    (2, 'Trait', '{"description": "Trait Dataset Type"}'),
    (3, 'Procedure', '{"description": "Procedure Dataset Type"}'),
    (4, 'Script', '{"description": "Script Dataset Type"}'),
    (5, 'Model', '{"description": "Model Dataset Type"}'),
    (6, 'Other', '{"description": "Other Dataset Type"}');

------------------------------------------------------------
--- Dummy Data
------------------------------------------------------------

-- Insert Generic Experiment
INSERT INTO gemini.experiments (experiment_name, experiment_info, experiment_start_date, experiment_end_date)
VALUES
    ('Default', '{"description": "Default Experiment"}', '2020-01-01', '2025-12-31');

-- Insert Generic Seasons for each year of the Generic Experiment
INSERT INTO gemini.seasons (season_name, season_start_date, season_end_date, experiment_id)
VALUES
    ('2020', '2020-01-01', '2020-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default')),
    ('2021', '2021-01-01', '2021-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default')),
    ('2022', '2022-01-01', '2022-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default')),
    ('2023', '2023-01-01', '2023-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default')),
    ('2024', '2024-01-01', '2024-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default')),
    ('2025', '2025-01-01', '2025-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'));

-- Insert Generic Sites
INSERT INTO gemini.sites (site_name, site_city, site_state, site_country, site_info)
VALUES
    ('Default', 'Default', 'Default', 'Default', '{"description": "Default Site"}');

INSERT INTO gemini.experiment_sites (experiment_id, site_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.sites WHERE site_name = 'Default'));

-- Insert Default Cultivar
INSERT INTO gemini.cultivars (cultivar_accession, cultivar_population, cultivar_info)
VALUES
    ('Default', 'Default', '{"description": "Default Cultivar"}');

INSERT INTO gemini.experiment_cultivars (experiment_id, cultivar_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.cultivars WHERE cultivar_accession = 'Default'));

-- Insert 100 Plots for Default Site and Default Experiment, each season with 50 plots all of Default Cultivar
DO $$
DECLARE
    ex_id UUID;
    se_id UUID;
    si_id UUID;
    cu_id UUID;
    plot_number INT;
    plot_row_number INT;
    plot_column_number INT;
BEGIN
    ex_id := (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default');
    si_id := (SELECT id FROM gemini.sites WHERE site_name = 'Default');
    cu_id := (SELECT id FROM gemini.cultivars WHERE cultivar_accession = 'Default' AND cultivar_population = 'Default');
    plot_number := 1;
    plot_row_number := 1;
    plot_column_number := 1;

    FOR se_id IN SELECT id FROM gemini.seasons WHERE experiment_id = ex_id
    LOOP
        FOR plot_number IN 1..50
        LOOP
            INSERT INTO gemini.plots (plot_number, plot_row_number, plot_column_number, experiment_id, site_id, season_id, plot_info)
            VALUES
                (plot_number, plot_row_number, plot_column_number, ex_id, si_id, se_id, '{"description": "Default Plot"}');
            plot_column_number := plot_column_number + 1;
            
            IF plot_column_number > 10 THEN
                plot_column_number := 1;
                plot_row_number := plot_row_number + 1;
            END IF;

            plot_row_number := plot_row_number + 1;

            IF plot_row_number > 10 THEN
                plot_row_number := 1;
            END IF;
        END LOOP;
    END LOOP;
END $$;

-- For each of the above plots, create a plot_cultivars entry that associates the plot with the default cultivar
INSERT INTO gemini.plot_cultivars (plot_id, cultivar_id)
SELECT p.id, (SELECT id FROM gemini.cultivars WHERE cultivar_accession = 'Default' AND cultivar_population = 'Default')
FROM gemini.plots p
WHERE p.experiment_id = (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default');

-- Insert Generic Models
INSERT INTO gemini.models (model_name, model_info)
VALUES
    ('Default', '{"description": "Default Model"}');

-- Insert Generic Model Runs
INSERT INTO gemini.model_runs (model_id, model_run_info)
VALUES
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), '{"description": "Default Model Run 1"}'),
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), '{"description": "Default Model Run 2"}'),
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), '{"description": "Default Model Run 3"}'),
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), '{"description": "Default Model Run 4"}'),
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), '{"description": "Default Model Run 5"}');

INSERT INTO gemini.experiment_models (experiment_id, model_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.models WHERE model_name = 'Default'));

-- Insert Generic Default Trait
INSERT INTO gemini.traits (trait_name, trait_info, trait_units, trait_level_id)
VALUES
    ('Default', '{"description": "Default Trait"}', 'Default Units', (SELECT id FROM gemini.trait_levels WHERE trait_level_name = 'Default'));

INSERT INTO gemini.experiment_traits (experiment_id, trait_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.traits WHERE trait_name = 'Default'));

-- Insert Default Sensor Platform
INSERT INTO gemini.sensor_platforms (sensor_platform_name, sensor_platform_info)
VALUES
    ('Default', '{"description": "Default Sensor Platform"}');

INSERT INTO gemini.experiment_sensor_platforms (experiment_id, sensor_platform_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Default'));

-- Insert Default Sensor
INSERT INTO gemini.sensors (sensor_name, sensor_info, sensor_type_id)
VALUES
    ('Default', '{"description": "Default Sensor"}', (SELECT id FROM gemini.sensor_types WHERE sensor_type_name = 'Default'));

INSERT INTO gemini.experiment_sensors (experiment_id, sensor_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Default'));

INSERT INTO gemini.sensor_platform_sensors (sensor_platform_id, sensor_id)
VALUES
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Default'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Default'));

-- Insert Default Resources
INSERT INTO gemini.resources (resource_uri, resource_file_name, is_external, resource_experiment_id, resource_data_format_id, resource_info)
VALUES
    ('https://www.google.com', 'google.html', TRUE, (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.data_formats WHERE data_format_name = 'HTML'), '{"description": "Default Resource"}');

-- Insert Default Script
INSERT INTO gemini.scripts (script_name, script_url, script_extension, script_info)
VALUES
    ('Default', 'https://www.google.com', 'html', '{"description": "Default Script"}');

-- Insert 5 Script Runs for this script
INSERT INTO gemini.script_runs (script_id, script_run_info)
VALUES
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), '{"description": "Default Script Run 1"}'),
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), '{"description": "Default Script Run 2"}'),
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), '{"description": "Default Script Run 3"}'),
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), '{"description": "Default Script Run 4"}'),
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), '{"description": "Default Script Run 5"}');

INSERT INTO gemini.experiment_scripts (experiment_id, script_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.scripts WHERE script_name = 'Default'));

-- Insert Default Procedure
INSERT INTO gemini.procedures (procedure_name, procedure_info)
VALUES
    ('Default', '{"description": "Default Procedure"}');

INSERT INTO gemini.experiment_procedures (experiment_id, procedure_id)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), (SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'));

-- Insert 5 Procedure Runs for this procedure
INSERT INTO gemini.procedure_runs (procedure_id, procedure_run_info)
VALUES
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), '{"description": "Default Procedure Run 1"}'),
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), '{"description": "Default Procedure Run 2"}'),
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), '{"description": "Default Procedure Run 3"}'),
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), '{"description": "Default Procedure Run 4"}'),
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), '{"description": "Default Procedure Run 5"}');

-- Create 3 Default Datasets
INSERT INTO gemini.datasets (dataset_name, collection_date, dataset_info, dataset_type_id)
VALUES
    ('Default Dataset 1', '2020-01-01', '{"description": "Default Dataset 1"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Other')),
    ('Default Dataset 2', '2021-01-01', '{"description": "Default Dataset 2"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Other')),
    ('Default Dataset 3', '2022-01-01', '{"description": "Default Dataset 3"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Other'));

-- Create 3 Datasets for Default Trait
INSERT INTO gemini.datasets (dataset_name, collection_date, dataset_info, dataset_type_id)
VALUES
    ('Default Trait Dataset 1', '2020-01-01', '{"description": "Default Dataset 1"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Trait')),
    ('Default Trait Dataset 2', '2021-01-01', '{"description": "Default Dataset 2"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Trait')),
    ('Default Trait Dataset 3', '2022-01-01', '{"description": "Default Dataset 3"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Trait'));

INSERT INTO gemini.trait_datasets (trait_id, dataset_id)
VALUES
    ((SELECT id FROM gemini.traits WHERE trait_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Trait Dataset 1')),
    ((SELECT id FROM gemini.traits WHERE trait_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Trait Dataset 2')),
    ((SELECT id FROM gemini.traits WHERE trait_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Trait Dataset 3'));

-- Create 3 Datasets for Default Sensor
INSERT INTO gemini.datasets (dataset_name, collection_date, dataset_info, dataset_type_id)
VALUES
    ('Default Sensor Dataset 1', '2020-01-01', '{"description": "Default Dataset 1"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Sensor')),
    ('Default Sensor Dataset 2', '2021-01-01', '{"description": "Default Dataset 2"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Sensor')),
    ('Default Sensor Dataset 3', '2022-01-01', '{"description": "Default Dataset 3"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Sensor'));

INSERT INTO gemini.sensor_datasets (sensor_id, dataset_id)
VALUES
    ((SELECT id FROM gemini.sensors WHERE sensor_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Sensor Dataset 1')),
    ((SELECT id FROM gemini.sensors WHERE sensor_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Sensor Dataset 2')),
    ((SELECT id FROM gemini.sensors WHERE sensor_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Sensor Dataset 3'));

-- Create 3 Datasets for Default Procedure
INSERT INTO gemini.datasets (dataset_name, collection_date, dataset_info, dataset_type_id)
VALUES
    ('Default Procedure Dataset 1', '2020-01-01', '{"description": "Default Dataset 1"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Procedure')),
    ('Default Procedure Dataset 2', '2021-01-01', '{"description": "Default Dataset 2"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Procedure')),
    ('Default Procedure Dataset 3', '2022-01-01', '{"description": "Default Dataset 3"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Procedure'));

INSERT INTO gemini.procedure_datasets (procedure_id, dataset_id)
VALUES
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Procedure Dataset 1')),
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Procedure Dataset 2')),
    ((SELECT id FROM gemini.procedures WHERE procedure_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Procedure Dataset 3'));

-- Create 3 Datasets for Default Script
INSERT INTO gemini.datasets (dataset_name, collection_date, dataset_info, dataset_type_id)
VALUES
    ('Default Script Dataset 1', '2020-01-01', '{"description": "Default Dataset 1"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Script')),
    ('Default Script Dataset 2', '2021-01-01', '{"description": "Default Dataset 2"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Script')),
    ('Default Script Dataset 3', '2022-01-01', '{"description": "Default Dataset 3"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Script'));

INSERT INTO gemini.script_datasets (script_id, dataset_id)
VALUES
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Script Dataset 1')),
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Script Dataset 2')),
    ((SELECT id FROM gemini.scripts WHERE script_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Script Dataset 3'));

-- Create 3 Datasets for Default Model
INSERT INTO gemini.datasets (dataset_name, collection_date, dataset_info, dataset_type_id)
VALUES
    ('Default Model Dataset 1', '2020-01-01', '{"description": "Default Dataset 1"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Model')),
    ('Default Model Dataset 2', '2021-01-01', '{"description": "Default Dataset 2"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Model')),
    ('Default Model Dataset 3', '2022-01-01', '{"description": "Default Dataset 3"}', (SELECT id FROM gemini.dataset_types WHERE dataset_type_name = 'Model'));

INSERT INTO gemini.model_datasets (model_id, dataset_id)
VALUES
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Model Dataset 1')),
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Model Dataset 2')),
    ((SELECT id FROM gemini.models WHERE model_name = 'Default'), (SELECT id FROM gemini.datasets WHERE dataset_name = 'Default Model Dataset 3'));

--- Assign all datasets to Experiment 'Default'
INSERT INTO gemini.experiment_datasets (experiment_id, dataset_id)
SELECT (SELECT id FROM gemini.experiments WHERE experiment_name = 'Default'), id
FROM gemini.datasets;


-- Insert Test Sensor Records
DO $$
DECLARE
    i INTEGER := 0;
BEGIN
    WHILE i < 1000 LOOP
        INSERT INTO gemini.sensor_records (
            timestamp,
            sensor_id,
            sensor_name,
            sensor_data,
            record_info
        ) VALUES (
            NOW() + (i || ' seconds')::INTERVAL,
            (SELECT id FROM gemini.sensors WHERE sensor_name = 'Default'),
            'Default',
            json_build_object('value', random()),
            '{"experiment": "Default", "site": "Default", "season": "Default"}'
        );
        i := i + 1;
    END LOOP;
END $$;

-- Insert Test Trait Records
DO $$
DECLARE
    i INTEGER := 0;
BEGIN
    WHILE i < 1000 LOOP
        INSERT INTO gemini.trait_records (
            timestamp,
            trait_name,
            trait_value,
            record_info
        ) VALUES (
            NOW() + (i || ' seconds')::INTERVAL,
            'Default',
            random(),
            '{"experiment": "Default", "site": "Default", "season": "Default"}'
        );
        i := i + 1;
    END LOOP;
END $$;

-- Insert Test Dataset Records
DO $$
DECLARE
    i INTEGER := 0;
BEGIN
    WHILE i < 1000 LOOP
        INSERT INTO gemini.dataset_records (
            timestamp,
            dataset_name,
            dataset_data,
            record_info
        ) VALUES (
            NOW() + (i || ' seconds')::INTERVAL,
            'Default',
            json_build_object('value', random()),
            '{"experiment": "Default", "site": "Default", "season": "Default"}'
        );
        i := i + 1;
    END LOOP;
END $$;

-- Insert Test Model Records
DO $$
DECLARE
    i INTEGER := 0;
BEGIN
    WHILE i < 1000 LOOP
        INSERT INTO gemini.model_records (
            timestamp,
            model_name,
            model_data,
            record_info
        ) VALUES (
            NOW() + (i || ' seconds')::INTERVAL,
            'Default',
            json_build_object('value', random()),
            '{"experiment": "Default", "site": "Default", "season": "Default"}'
        );
        i := i + 1;
    END LOOP;
END $$;

-- Insert Test Procedure Records
DO $$
DECLARE
    i INTEGER := 0;
BEGIN
    WHILE i < 1000 LOOP
        INSERT INTO gemini.procedure_records (
            timestamp,
            procedure_name,
            procedure_data,
            record_info
        ) VALUES (
            NOW() + (i || ' seconds')::INTERVAL,
            'Default',
            json_build_object('value', random()),
            '{"experiment": "Default", "site": "Default", "season": "Default"}'
        );
        i := i + 1;
    END LOOP;
END $$;

-- Insert Test Script Records
DO $$
DECLARE
    i INTEGER := 0;
BEGIN
    WHILE i < 1000 LOOP
        INSERT INTO gemini.script_records (
            timestamp,
            script_name,
            script_data,
            record_info
        ) VALUES (
            NOW() + (i || ' seconds')::INTERVAL,
            'Default',
            json_build_object('value', random()),
            '{"experiment": "Default", "site": "Default", "season": "Default"}'
        );
        i := i + 1;
    END LOOP;
END $$;




-- ------------------------------------------------------------
-- -- Insert the initial data for the database
-- ------------------------------------------------------------

-- -- Insert GEMINI Experiment
-- INSERT INTO gemini.experiments (experiment_name, experiment_info, experiment_start_date, experiment_end_date)
-- VALUES
--     ('GEMINI', '{"description": "GEMINI Experiment"}', '2020-01-01', '2025-12-31');


-- -- Insert Seasons for each year of the GEMINI Experiment
-- INSERT INTO gemini.seasons (season_name, season_start_date, season_end_date, experiment_id)
-- VALUES
--     ('2020', '2020-01-01', '2020-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
--     ('2021', '2021-01-01', '2021-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
--     ('2022', '2022-01-01', '2022-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
--     ('2023', '2023-01-01', '2023-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
--     ('2024', '2024-01-01', '2024-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
--     ('2025', '2025-01-01', '2025-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'));

-- -- Insert GEMINI Sites
-- INSERT INTO gemini.sites (site_name, site_city, site_state, site_country, site_info)
-- VALUES
--     ('Davis', 'Davis', 'CA', 'USA', '{"description": "Davis Site"}'),
--     ('Kearney', 'Kearney', 'CA', 'USA', '{"description": "Kearney Site"}');

-- INSERT INTO gemini.experiment_sites (experiment_id, site_id)
-- VALUES
--     ((SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'), (SELECT id FROM gemini.sites WHERE site_name = 'Davis')),
--     ((SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'), (SELECT id FROM gemini.sites WHERE site_name = 'Kearney'));

</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/8_init_gemini.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
------------------------------------------------------------------------------
-- GEMINI Specific Data
------------------------------------------------------------------------------

-- Insert GEMINI Experiment
INSERT INTO gemini.experiments (
    experiment_name,
    experiment_info,
    experiment_start_date,
    experiment_end_date
)
VALUES (
    'GEMINI',
    '{"description": "GEMINI Experiment"}',
    '2020-01-01',
    '2025-12-31'
);

--- Insert 5 Seasons for GEMINI
INSERT INTO gemini.seasons (
    season_name,
    season_info,
    season_start_date,
    season_end_date,
    experiment_id
)
VALUES
    ('2020', '{"description": "Season 1"}', '2020-01-01', '2020-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
    ('2021', '{"description": "Season 2"}', '2021-01-01', '2021-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
    ('2022', '{"description": "Season 3"}', '2022-01-01', '2022-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
    ('2023', '{"description": "Season 4"}', '2023-01-01', '2023-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI')),
    ('2024', '{"description": "Season 5"}', '2024-01-01', '2024-12-31', (SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'));

INSERT INTO gemini.sites (
    site_name,
    site_city,
    site_state,
    site_country,
    site_info
)
VALUES
    ('Davis', 'Davis', 'CA', 'USA', '{"description": "Davis Site for the GEMINI Project"}'),
    ('Kearney', 'Kearney', 'CA', 'USA', '{"description": "Kearney Site for the GEMINI Project"}');

--- Add the GEMINI Sites to the experiment
INSERT INTO gemini.experiment_sites (
    experiment_id,
    site_id
)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'), (SELECT id FROM gemini.sites WHERE site_name = 'Davis')),
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'), (SELECT id FROM gemini.sites WHERE site_name = 'Kearney'));


--- Insert Sensor PLatforms
INSERT INTO gemini.sensor_platforms (
    sensor_platform_name,
    sensor_platform_info
)
VALUES
    ('Mineral T4 Rover', '{"manufacturer": "Mineral", "description": "Mineral T4 Rover"}'),
    ('Drone', '{"manufacturer": "Internal", "description": "Internal Drone"}'),
    ('AMIGA', '{"manufacturer": "farm-ng", "description": "Amiga is an all-electric micro-tractor designed to automate tasks in farms"}');

--- Add the Sensor Platforms to the experiment
INSERT INTO gemini.experiment_sensor_platforms (
    experiment_id,
    sensor_platform_id
)
VALUES
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'), (SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover')),
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'), (SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Drone')),
    ((SELECT id FROM gemini.experiments WHERE experiment_name = 'GEMINI'), (SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'));

--- Create Sensors for T4 Rover
INSERT INTO gemini.sensors (
    sensor_name,
    sensor_type_id,
    sensor_data_type_id,
    sensor_data_format_id,
    sensor_info
)
VALUES 
    ('T4 Camera A', 1, 4, 9, '{"description": "camA"}'),
    ('T4 Camera B', 1, 4, 9, '{"description": "camB"}'),
    ('T4 Camera C', 1, 4, 9, '{"description": "camC"}'),
    ('T4 Camera D', 1, 4, 9, '{"description": "camD"}'),
    ('T4 Camera E', 1, 4, 9, '{"description": "camE"}'),
    ('T4 Camera F', 1, 4, 9, '{"description": "camF"}'),
    ('T4 Camera G', 1, 4, 9, '{"description": "camG"}'),
    ('T4 Camera H', 1, 4, 9, '{"description": "camH"}'),
    ('T4 Camera T', 1, 4, 9, '{"description": "camT"}');

INSERT INTO gemini.sensors (
    sensor_name,
    sensor_type_id,
    sensor_data_type_id,
    sensor_data_format_id,
    sensor_info
)
VALUES
    ('T4 IMU', 9, 1, 2, '{"description": "IMU Sensor on the T4 Rover"}'),
    ('T4 GPS', 6, 1, 2, '{"description": "GPS Sensor on the T4 Rover"}');

--- Add the Sensors to the T4 Rover
INSERT INTO gemini.sensor_platform_sensors (
    sensor_platform_id,
    sensor_id
)
VALUES
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera A')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera B')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera C')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera D')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera E')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera F')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera G')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera H')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 Camera T')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 IMU')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Mineral T4 Rover'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'T4 GPS'));

--- Create Sensors for Drone
INSERT INTO gemini.sensors (
    sensor_name,
    sensor_type_id,
    sensor_data_type_id,
    sensor_data_format_id,
    sensor_info
)
VALUES
    ('Drone iPhone RGB Camera', 1, 4, 8, '{"description": "iPhone RGB Camera on the Drone"}'),
    ('Drone iPhone Thermal Camera', 3, 4, 8, '{"description": "iPhone Thermal Camera on the Drone"}'),
    ('Drone iPhone Depth Sensor', 8, 4, 8, '{"description": "iPhone Depth Sensor on the Drone"}'),
    ('Drone iPhone Confidence', 0, 0, 0, '{"description": "iPhone Depth Confidence on the Drone"}');
    

--- Add the Sensors to the Drone
INSERT INTO gemini.sensor_platform_sensors (
    sensor_platform_id,
    sensor_id
)
VALUES
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Drone'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Drone iPhone RGB Camera')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Drone'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Drone iPhone Thermal Camera')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Drone'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Drone iPhone Depth Sensor')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'Drone'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Drone iPhone Confidence'));


--- Create Sensors for AMIGA
INSERT INTO  gemini.sensors (
    sensor_name,
    sensor_type_id,
    sensor_data_type_id,
    sensor_data_format_id,
    sensor_info
)
VALUES
    ('Oak0 Calibration', 7, 1, 2, '{"description": "Calibration for Oak-D Camera on the AMIGA"}'),
    ('Oak1 Calibration', 7, 1, 2, '{"description": "Calibration for Oak-D Camera on the AMIGA"}'),
    ('Oak2 Calibration', 7, 1, 2, '{"description": "Calibration for Oak-D Camera on the AMIGA"}'),
    ('Oak0 RGB', 1, 4, 8, '{"description": "RGB source of Oak-D Camera on the AMIGA"}'),
    ('Oak1 RGB', 1, 4, 8, '{"description": "RGB source of Oak-D Camera on the AMIGA"}'),
    ('Oak2 RGB', 1, 4, 8, '{"description": "RGB source of Oak-D Camera on the AMIGA"}'),
    ('Oak0 Disparity', 10, 0, 0, '{"description": "Disparity Map source for the Oak-D Camera"}'),
    ('Oak1 Disparity', 10, 0, 0, '{"description": "Disparity Map source for the Oak-D Camera"}'),
    ('Oak2 Disparity', 10, 0, 0, '{"description": "Disparity Map source for the Oak-D Camera"}'),
    ('GPS Relative', 6, 1, 1, '{"description": "GPS Relative to the AMIGA"}'),
    ('GPS PVT', 6, 1, 1, '{"description": "Absolute GPS for the AMIGA"}');

--- Add the Sensors to the AMIGA
INSERT INTO gemini.sensor_platform_sensors (
    sensor_platform_id,
    sensor_id
)
VALUES
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak0 Calibration')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak1 Calibration')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak2 Calibration')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak0 RGB')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak1 RGB')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak2 RGB')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak0 Disparity')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak1 Disparity')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'Oak2 Disparity')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'GPS Relative')),
    ((SELECT id FROM gemini.sensor_platforms WHERE sensor_platform_name = 'AMIGA'), (SELECT id FROM gemini.sensors WHERE sensor_name = 'GPS PVT'));

</document_content>
</document>

<document>
<source>gemini/db/init_sql/scripts/9_post_init.sql</source>
<mime_type>text/plain</mime_type>
<document_content>
REFRESH MATERIALIZED VIEW gemini.plot_view;
REFRESH MATERIALIZED VIEW gemini.plot_cultivar_view;

REFRESH MATERIALIZED VIEW gemini.experiment_sites_view;
REFRESH MATERIALIZED VIEW gemini.experiment_traits_view;
REFRESH MATERIALIZED VIEW gemini.experiment_sensors_view;
REFRESH MATERIALIZED VIEW gemini.experiment_models_view;
REFRESH MATERIALIZED VIEW gemini.experiment_procedures_view;
REFRESH MATERIALIZED VIEW gemini.experiment_cultivars_view;

REFRESH MATERIALIZED VIEW gemini.script_datasets_view;
REFRESH MATERIALIZED VIEW gemini.procedure_datasets_view;
REFRESH MATERIALIZED VIEW gemini.trait_datasets_view;
REFRESH MATERIALIZED VIEW gemini.sensor_datasets_view;
REFRESH MATERIALIZED VIEW gemini.model_datasets_view;</document_content>
</document>

<document>
<source>gemini/db/setup.sh</source>
<mime_type>text/plain</mime_type>
<document_content>
echo "Cloning Hydra repository"
git clone https://github.com/hydradatabase/hydra.git 

echo "Installing columnar extension"
cd ./hydra/columnar && ./configure && make install

echo "Installing pg_ivm extension"
git clone https://github.com/sraoss/pg_ivm.git

echo "Installing pg_ivm extension"
cd ./pg_ivm && make install


</document_content>
</document>

<document>
<source>gemini/logger/redis.conf</source>
<mime_type>text/plain</mime_type>
<document_content>
# Redis configuration file for logging use case
# Bind to all network interfaces
bind 0.0.0.0
# Explanation: Binding to all network interfaces allows Redis to accept connections from any IP address.
# In a production environment, you might want to restrict this to specific IP addresses for security reasons.

# Enable protected mode
protected-mode yes
# Explanation: Protected mode is a security feature that prevents Redis from accepting connections from untrusted sources.

# Policy for key eviction when maxmemory is reached
maxmemory-policy volatile-ttl
# Explanation: For logging, we prefer volatile-ttl which removes expired keys first, then oldest entries.

# Disable RDB persistence for logging use case
save ""
# Explanation: For a logging system, we disable RDB persistence to improve write performance
# and prevent issues with RDB format compatibility

# Disable AOF for better write performance
appendonly no
# Explanation: For logging purposes, we prioritize write performance over persistence

# Set the number of databases
databases 2
# Explanation: For logging, we typically need fewer databases, reducing memory overhead

# Set the timeout for client connections
timeout 300
# Explanation: Setting a timeout for client connections helps free up resources by closing idle connections

# Set the maximum number of connected clients
maxclients 1000
# Explanation: For logging, we typically need fewer concurrent connections

# Enable TCP keepalive
tcp-keepalive 60
# Explanation: More aggressive TCP keepalive for logging to detect dead connections faster

# Set the database directory
dir /data
# Explanation: The directory where Redis will store its data files if persistence is enabled later

# Performance optimizations for logging
# Disable slow log as it's less relevant for logging
slowlog-log-slower-than -1
# Explanation: Disabling slow log reduces overhead for logging operations

# Disable latency monitoring for better performance
latency-monitor-threshold 0
# Explanation: Latency monitoring is less crucial for logging use case

# Client output buffer limits adjusted for logging
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60
# Explanation: Adjusted buffer limits to handle logging traffic patterns

# Security: Disable potentially dangerous commands
rename-command FLUSHALL ""
rename-command FLUSHDB ""
rename-command CONFIG ""
# Explanation: Disable commands that could accidentally clear log data</document_content>
</document>

<document>
<source>gemini/storage/Dockerfile</source>
<mime_type>text/plain</mime_type>
<document_content>
FROM bitnami/minio:2024.10.29</document_content>
</document>

<document>
<source>gemini/storage/scripts/healthcheck.sh</source>
<mime_type>text/x-shellscript</mime_type>
<document_content>
#!/bin/bash

# Healthcheck script for MinIO
curl -f "http://localhost:9000/minio/health/live" || exit 1</document_content>
</document>

<document>
<source>gemini/storage/scripts/init_minio.sh</source>
<mime_type>text/plain</mime_type>
<document_content>

# !/bin/bash
set -e

# Get environment variables
echo "Connect to MinIO server..."
mc alias set local http://${MINIO_SERVER_HOST}:9000 "${MINIO_ACCESS_KEY}" "${MINIO_SECRET_KEY}"

# Create a service account
echo "Creating service account..."
mc admin user add local "${GEMINI_STORAGE_ACCESS_KEY}" "${GEMINI_STORAGE_SECRET_KEY}"

# Create a policy file
echo "Creating policy file..."
POLICY_FILE="/tmp/policy.json"
cat << EOF > "${POLICY_FILE}"
{
    "Version": "2012-10-17",
    "Statement": [{
        "Effect": "Allow",
        "Action": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetObject",
            "s3:DeleteObject",
            "s3:PutObject"
        ],
        "Resource": [
            "arn:aws:s3:::${GEMINI_STORAGE_BUCKET_NAME}",
            "arn:aws:s3:::${GEMINI_STORAGE_BUCKET_NAME}/*"
        ]
    }]
}
EOF

# Add policy with verbose output
echo "Adding policy..."
mc admin policy create local gemini-service-policy "${POLICY_FILE}" --debug

# Show policy
echo "Showing policy info..."
mc admin policy info local gemini-service-policy

# Clean up temporary policy file
rm -f "${POLICY_FILE}"

# Assign policy to service account
echo "Assigning policy to service account..."
mc admin policy attach local gemini-service-policy --user "${GEMINI_STORAGE_ACCESS_KEY}"

# Create bucket if it doesn't exist
echo "Creating bucket..."
mc mb local/"${GEMINI_STORAGE_BUCKET_NAME}"

# Set bucket to private
echo "Setting bucket to private..."
mc policy set download local/"${GEMINI_STORAGE_BUCKET_NAME}"

echo "MinIO initialization completed successfully"







# Verify credentials
# echo "Verifying credentials..."
# mc admin info local

# GEMINI_STORAGE_HOSTNAME=gemini-storage
# GEMINI_STORAGE_PORT=9000
# GEMINI_STORAGE_API_PORT=9001
# GEMINI_STORAGE_ROOT_USER=gemini_root
# GEMINI_STORAGE_ROOT_PASSWORD=gemini_root
# GEMINI_STORAGE_ACCESS_KEY=gemini_storage_user
# GEMINI_STORAGE_SECRET_KEY=gemini_secret
# GEMINI_STORAGE_BUCKET_NAME=gemini

# Print environment variables
# echo "Environment Variables:"
# echo "GEMINI_STORAGE_BUCKET_NAME: ${GEMINI_STORAGE_BUCKET_NAME}"
# echo "GEMINI_STORAGE_ACCESS_KEY: ${GEMINI_STORAGE_ACCESS_KEY}"
# echo "GEMINI_STORAGE_SECRET_KEY: ${GEMINI_STORAGE_SECRET_KEY}"
# echo "MINIO_ROOT_USER: ${MINIO_ROOT_USER}"
# echo "MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}"
# echo "MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}"
# echo "MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}"



# # Start MinIO server
# echo "Starting MinIO server..."
# minio server /bitnami/minio/data --address :9000 --console-address ":9001" &

# until mc admin info local >/dev/null 2>&1; do
#     echo "Waiting for MinIO to be ready..."
#     sleep 1
# done

# echo "MinIO server is ready!"

# # Check required environment variables
# if [ -z "${GEMINI_STORAGE_BUCKET_NAME}" ] || [ -z "${GEMINI_STORAGE_ACCESS_KEY}" ] || [ -z "${GEMINI_STORAGE_SECRET_KEY}" ]; then
#     echo "Error: Required environment variables are not set"
#     exit 1
# fi



# # Verify credentials
# echo "Verifying credentials..."
# mc admin info local

# # Create service account user
# echo "Creating service account user..."
# mc admin user add local "${GEMINI_STORAGE_ACCESS_KEY}" "${GEMINI_STORAGE_SECRET_KEY}"


# # Create service account policy
# echo "Creating service account policy..."

# # Create temporary policy file
# POLICY_FILE="/tmp/policy.json"
# cat << EOF > "${POLICY_FILE}"
# {
#     "Version": "2012-10-17",
#     "Statement": [{
#         "Effect": "Allow",
#         "Action": [
#             "s3:CreateBucket",
#             "s3:DeleteBucket",
#             "s3:GetObject",
#             "s3:DeleteObject",
#             "s3:PutObject"
#         ],
#         "Resource": [
#             "arn:aws:s3:::${GEMINI_STORAGE_BUCKET_NAME}",
#             "arn:aws:s3:::${GEMINI_STORAGE_BUCKET_NAME}/*"
#         ]
#     }]
# }
# EOF

# if [ ! -f "${POLICY_FILE}" ]; then
#     echo "Error: Policy file not found: ${POLICY_FILE}"
#     exit 1
# fi

# # Add policy with verbose output
# echo "Adding policy..."
# mc admin policy create local gemini-service-policy "${POLICY_FILE}" --debug

# # Show policy
# echo "Showing policy info..."
# mc admin policy info local gemini-service-policy

# # Clean up temporary policy file
# rm -f "${POLICY_FILE}"


# # Assign policy to service account
# echo "Assigning policy to service account..."
# mc admin policy set local gemini-service-policy user="${GEMINI_STORAGE_ACCESS_KEY}"

# # Create bucket if it doesn't exist
# echo "Creating bucket..."
# mc mb local/"${GEMINI_STORAGE_BUCKET_NAME}"

# # Set bucket to private
# echo "Setting bucket to private..."
# mc policy set download local/"${GEMINI_STORAGE_BUCKET_NAME}"

# echo "MinIO initialization completed successfully"

</document_content>
</document>

<document>
<source>.env.example</source>
<mime_type>text/plain</mime_type>
<document_content>
# GEMINI Database Configuration
GEMINI_DB_USER=gemini
GEMINI_DB_PASSWORD=gemini
GEMINI_DB_HOSTNAME=gemini-db
GEMINI_DB_NAME=gemini
GEMINI_DB_PORT=5432

# GEMINI Logger Configuration
GEMINI_LOGGER_HOSTNAME=gemini-logger
GEMINI_LOGGER_PORT=6379
GEMINI_LOGGER_PASSWORD=gemini

# GEMINI File Store
GEMINI_STORAGE_HOSTNAME=gemini-storage
GEMINI_STORAGE_PORT=9000
GEMINI_STORAGE_API_PORT=9001
GEMINI_STORAGE_ROOT_USER=gemini_root
GEMINI_STORAGE_ROOT_PASSWORD=gemini_root
GEMINI_STORAGE_ACCESS_KEY=gemini_storage_user
GEMINI_STORAGE_SECRET_KEY=gemini_secret
GEMINI_STORAGE_BUCKET_NAME=gemini

</document_content>
</document>

<document>
<source>.gitignore</source>
<mime_type>text/plain</mime_type>
<document_content>

# Basic 
.env
.vscode
.conda
/sample_data
/gemini_data
/gemini-data
/uploads
/downloads
/data
cprofile.out
/api_old
/rest_old

# Farm NG specific
/farm-ng-core
/farm-ng-amiga
/deps

# AMIGA Test Data
/gemini/api/examples/amiga_data/

.DS_Store
log*.txt

 Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
temp/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

</document_content>
</document>

<document>
<source>LICENSE</source>
<mime_type>text/plain</mime_type>
<document_content>
                    GNU GENERAL PUBLIC LICENSE
                       Version 3, 29 June 2007

 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

                            Preamble

  The GNU General Public License is a free, copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

  To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

  For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

  Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying, distribution and
modification follow.

                       TERMS AND CONDITIONS

  0. Definitions.

  "This License" refers to version 3 of the GNU General Public License.

  "Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.

  "The Program" refers to any copyrightable work licensed under this
License.  Each licensee is addressed as "you".  "Licensees" and
"recipients" may be individuals or organizations.

  To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy.  The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.

  A "covered work" means either the unmodified Program or a work based
on the Program.

  To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy.  Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.

  To "convey" a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.

  An interactive user interface displays "Appropriate Legal Notices"
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice, and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided), that licensees may convey the
work under this License, and how to view a copy of this License.  If
the interface presents a list of user commands or options, such as a
menu, a prominent item in the list meets this criterion.

  1. Source Code.

  The "source code" for a work means the preferred form of the work
for making modifications to it.  "Object code" means any non-source
form of a work.

  A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that
is widely used among developers working in that language.

  The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that
Major Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
"Major Component", in this context, means a major essential component
(kernel, window system, and so on) of the specific operating system
(if any) on which the executable work runs, or a compiler used to
produce the work, or an object code interpreter used to run it.

  The "Corresponding Source" for a work in object code form means all
the source code needed to generate, install, and (for an executable
work) run the object code and to modify the work, including scripts to
control those activities.  However, it does not include the work's
System Libraries, or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example, Corresponding Source
includes interface definition files associated with source files for
the work, and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require,
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

  2. Basic Permissions.

  All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.

  You may make, run and propagate covered works that you do not
convey, without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you, or provide you
with facilities for running those works, provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf, under your direction
and control, on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996, or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work's
users, your or third parties' legal rights to forbid circumvention of
technological measures.

  4. Conveying Verbatim Copies.

  You may convey verbatim copies of the Program's source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey,
and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

  You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the
terms of section 4, provided that you also meet all of these conditions:

    a) The work must carry prominent notices stating that you modified
    it, and giving a relevant date.

    b) The work must carry prominent notices stating that it is
    released under this License and any conditions added under section
    7.  This requirement modifies the requirement in section 4 to
    "keep intact all notices".

    c) You must license the entire work, as a whole, under this
    License to anyone who comes into possession of a copy.  This
    License will therefore apply, along with any applicable section 7
    additional terms, to the whole of the work, and all its parts,
    regardless of how they are packaged.  This License gives no
    permission to license the work in any other way, but it does not
    invalidate such permission if you have separately received it.

    d) If the work has interactive user interfaces, each must display
    Appropriate Legal Notices; however, if the Program has interactive
    interfaces that do not display Appropriate Legal Notices, your
    work need not make them do so.

  A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work,
and which are not combined with it such as to form a larger program,
in or on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

  6. Conveying Non-Source Forms.

  You may convey a covered work in object code form under the terms
of sections 4 and 5, provided that you also convey the
machine-readable Corresponding Source under the terms of this License,
in one of these ways:

    a) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by the
    Corresponding Source fixed on a durable physical medium
    customarily used for software interchange.

    b) Convey the object code in, or embodied in, a physical product
    (including a physical distribution medium), accompanied by a
    written offer, valid for at least three years and valid for as
    long as you offer spare parts or customer support for that product
    model, to give anyone who possesses the object code either (1) a
    copy of the Corresponding Source for all the software in the
    product that is covered by this License, on a durable physical
    medium customarily used for software interchange, for a price no
    more than your reasonable cost of physically performing this
    conveying of source, or (2) access to copy the
    Corresponding Source from a network server at no charge.

    c) Convey individual copies of the object code with a copy of the
    written offer to provide the Corresponding Source.  This
    alternative is allowed only occasionally and noncommercially, and
    only if you received the object code with such an offer, in accord
    with subsection 6b.

    d) Convey the object code by offering access from a designated
    place (gratis or for a charge), and offer equivalent access to the
    Corresponding Source in the same way through the same place at no
    further charge.  You need not require recipients to copy the
    Corresponding Source along with the object code.  If the place to
    copy the object code is a network server, the Corresponding Source
    may be on a different server (operated by you or a third party)
    that supports equivalent copying facilities, provided you maintain
    clear directions next to the object code saying where to find the
    Corresponding Source.  Regardless of what server hosts the
    Corresponding Source, you remain obligated to ensure that it is
    available for as long as needed to satisfy these requirements.

    e) Convey the object code using peer-to-peer transmission, provided
    you inform other peers where the object code and Corresponding
    Source of the work are being offered to the general public at no
    charge under subsection 6d.

  A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be
included in conveying the object code work.

  A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product,
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user, "normally used" refers to a
typical or common use of that class of product, regardless of the status
of the particular user or of the way in which the particular user
actually uses, or expects or is expected to use, the product.  A product
is a consumer product regardless of whether the product has substantial
commercial, industrial or non-consumer uses, unless such uses represent
the only significant mode of use of the product.

  "Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example, the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed, and Installation Information provided,
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form), and must require no special password or key for
unpacking, reading or copying.

  7. Additional Terms.

  "Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work, you may at your option
remove any additional permissions from that copy, or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material, added by you to a covered work,
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

    a) Disclaiming warranty or limiting liability differently from the
    terms of sections 15 and 16 of this License; or

    b) Requiring preservation of specified reasonable legal notices or
    author attributions in that material or in the Appropriate Legal
    Notices displayed by works containing it; or

    c) Prohibiting misrepresentation of the origin of that material, or
    requiring that modified versions of such material be marked in
    reasonable ways as different from the original version; or

    d) Limiting the use for publicity purposes of names of licensors or
    authors of the material; or

    e) Declining to grant rights under trademark law for use of some
    trade names, trademarks, or service marks; or

    f) Requiring indemnification of licensors and authors of that
    material by anyone who conveys the material (or modified versions of
    it) with contractual assumptions of liability to the recipient, for
    any liability that these contractual assumptions directly impose on
    those licensors and authors.

  All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10.  If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms
of that license document, provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section, you
must place, in the relevant source files, a statement of the
additional terms that apply to those files, or a notice indicating
where to find the applicable terms.

  Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions;
the above requirements apply either way.

  8. Termination.

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However, if you cease all violation of this License, then your
license from a particular copyright holder is reinstated (a)
provisionally, unless and until the copyright holder explicitly and
finally terminates your license, and (b) permanently, if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.

  9. Acceptance Not Required for Having Copies.

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However,
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore, by modifying or propagating a
covered work, you indicate your acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

  Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations.  If propagation of a covered
work results from an entity transaction, each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph, plus a right to possession of the
Corresponding Source of the work from the predecessor in interest, if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example, you may
not impose a license fee, royalty, or other charge for exercise of
rights granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making, using, selling, offering for
sale, or importing the Program or any portion of it.

  11. Patents.

  A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's "contributor version".

  A contributor's "essential patent claims" are all patent claims
owned or controlled by the contributor, whether already acquired or
hereafter acquired, that would be infringed by some manner, permitted
by this License, of making, using, or selling its contributor version,
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition, "control" includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor's essential patent claims, to
make, use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.

  In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work, knowingly relying on a patent license,
and the Corresponding Source of the work is not available for anyone
to copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients.  "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient's use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify
or convey a specific copy of the covered work, then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is "discriminatory" if it does not include within
the scope of its coverage, prohibits the exercise of, or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software, under which you make payment
to the third party based on the extent of your activity of conveying
the work, and under which the third party grants, to any of the
parties who would receive the covered work from you, a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies), or (b) primarily
for and in connection with specific products or compilations that
contain the covered work, unless you entered into that arrangement,
or that patent license was granted, prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

  If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you may
not convey it at all.  For example, if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program, the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

  Notwithstanding any other provision of this License, you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work, and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work,
but the special requirements of the GNU Affero General Public License,
section 13, concerning interaction through a network will apply to the
combination as such.

  14. Revised Versions of this License.

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License "or any later version" applies to it, you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License, you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used, that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However, no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

  15. Disclaimer of Warranty.

  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
ALL NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms,
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program, unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

                     END OF TERMS AND CONDITIONS

            How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <one line to give the program's name and a brief idea of what it does.>
    Copyright (C) <year>  <name of author>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

    <program>  Copyright (C) <year>  <name of author>
    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
    This is free software, and you are welcome to redistribute it
    under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course, your program's commands
might be different; for a GUI interface, you would use an "about box".

  You should also get your employer (if you work as a programmer) or school,
if any, to sign a "copyright disclaimer" for the program, if necessary.
For more information on this, and how to apply and follow the GNU GPL, see
<https://www.gnu.org/licenses/>.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library, you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do, use the GNU Lesser General
Public License instead of this License.  But first, please read
<https://www.gnu.org/licenses/why-not-lgpl.html>.
</document_content>
</document>

<document>
<source>README.md</source>
<mime_type>text/plain</mime_type>
<document_content>
# GEMINI Framework

This is the repository for GEMINI Framework back-end.

Many staple crops that are important for food, nutritional, and economic security in low- and middle-income countries have not experienced the same large gains in yield and quality over last decades as crops such as maize and soybean. Further, these crops are faced with increasing risk and uncertain growing conditions due to climate change. This project aims to develop a state-of-the-art breeding toolkit, building on the latest techniques in AI-enabled sensing, 3-D crop modeling, and molecular breeding, to create an inflection point in the productivity and quality curves of crops that are central in LMICs.

[More details about GEMINI Here](https://projectgemini.ucdavis.edu/)

## Requirements

- Windows, Unix and MacOS (x86 and Apple Silicon)
- Local Installation of [PostgreSQL Database](https://www.postgresql.org/download/)
- [Docker Engine](https://docs.docker.com/engine/install/)
- Minimum 16GB RAM
- Minimum 256GB storage
- Python >=3.8
- [Task](https://taskfile.dev/installation/)

## Installation Steps

Install all the prerequisites above before continuing

#### Step 1

Clone the repository and enter the root foler

```
$ git clone https://github.com/GEMINI-Breeding/gemini-framework.git
$ cd gemini-framework
```

#### Step 2

Add a .env file in the root folder

Check ```.env.example``` in the root folder for all environment variables

**NOTE**: You can also rename ```.env.example``` to ```.env```

#### Step 3

If `task` is installed then just run task

```
$ task 
```

### Step 4

Install the package for use locally

```
$ pip install -e .
```

**WARNING**: Make sure you are installing the package while the environment you are working with is activated.







</document_content>
</document>

<document>
<source>Taskfile.yml</source>
<mime_type>text/plain</mime_type>
<document_content>
version: "3"

vars:
  ENV_FILE: .env

tasks:



  # Docker tasks
  start-containers:
    cmds:
      - docker compose --env-file {{.ENV_FILE}} up -d --build

  stop-containers:
    cmds:
      - docker compose --env-file {{.ENV_FILE}} down

  clean-containers:
    cmds:
      - docker compose --env-file {{.ENV_FILE}} down --volumes --remove-orphans

  reset-containers:
    cmds:
      - task clean-containers
      - task start-containers

  prune-containers:
    cmds:
      - docker system prune -f

  purge-containers:
    cmds:
      - task clean-containers
      - docker system prune -fa

  # Main tasks
  start:
    cmds:
      - task start-containers
   
  stop:
    cmds:
      - task stop-containers

  reset:
    cmds:
      - task reset-containers

  clean:
    cmds:
      - task clean-containers
    
 </document_content>
</document>

<document>
<source>gemini/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/db/Dockerfile</source>
<mime_type>text/plain</mime_type>
<document_content>
# Get Bitnami PostgreSQL image
FROM bitnami/postgresql:16.0.0

USER root

# Install Dependencies
RUN apt-get update && apt-get install -y \
    lsb-release \
    gcc \
    make \
    libssl-dev \
    autoconf \
    pkg-config \
    libcurl4-gnutls-dev \
    liblz4-dev \
    libzstd-dev \
    git

# Copy setup script to PostgreSQL's pre-initialization directory
COPY ./setup.sh /scripts/setup.sh
RUN chmod +x /scripts/setup.sh && chown 1001:1001 /scripts/setup.sh

# Run the setup script
RUN /scripts/setup.sh

# Copy SQL scripts to initialize the database
COPY ./init_sql /docker-entrypoint-initdb.d/
RUN chown -R 1001:1001 /docker-entrypoint-initdb.d/

# Switch back to PostgreSQL user
USER 1001
</document_content>
</document>

<document>
<source>gemini/db/__init__.py</source>
<mime_type>application/octet-stream</mime_type>
<document_content>
<base64>Cg==</base64>
</document_content>
</document>

<document>
<source>gemini/db/config.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# FILE: gemini/server/database/config.py

import os
from pydantic import BaseModel, field_validator
from sqlalchemy.pool import QueuePool

class DatabaseConfig(BaseModel):
    """
    Database configuration settings.
    
    Features:
    - Environment variable-based configuration
    - Validation and parsing of database URLs
    - Support for both sync and async database URLs
    - Configurable connection pool settings
    """

    database_url: str
    pool_size: int = 10
    max_overflow: int = 20
    pool_timeout: int = 30
    pool_recycle: int = 1800
    echo_sql: bool = False
    echo_pool: bool = False
    pool_class: type = QueuePool
    isolation_level: str = "READ COMMITTED"
    async_pool_class: type = QueuePool

    @field_validator("database_url", mode="before")
    def validate_database_url(cls, v: str) -> str:
        if not v:
            raise ValueError("Database URL must be provided")
        return v

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"

</document_content>
</document>

<document>
<source>gemini/db/core/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/db/core/base.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import select, insert, delete, update
from sqlalchemy import TIMESTAMP, JSON, DATE, String
from sqlalchemy import MetaData
from sqlalchemy.schema import UniqueConstraint
from sqlalchemy.orm import DeclarativeBase
from sqlalchemy_mixins.serialize import SerializeMixin
from sqlalchemy.dialects.postgresql import insert as pg_insert
from gemini.db import DatabaseEngine

db_engine = DatabaseEngine()
metadata_obj = MetaData(schema="gemini")

class BaseModel(DeclarativeBase, SerializeMixin):
    __abstract__ = True
    metadata = metadata_obj

    def __repr__(self) -> str:
        return str(self.to_dict())

    @classmethod
    def set_engine(cls, engine: DatabaseEngine):
        global db_engine
        db_engine = engine

    @classmethod
    def unique_fields(cls):
        """
        Get the unique fields of the class.
        """
        unique_fields = []
        for constraint in cls.__table__.constraints:
            if isinstance(constraint, UniqueConstraint):
                for column in constraint.columns:
                    unique_fields.append(column.name)
        return unique_fields
    
    @classmethod
    def validate_fields(cls, **kwargs):
        """
        Validate the fields of the class.
        """
        # Remove None values from the kwargs
        kwargs = {k: v for k, v in kwargs.items() if v is not None}
        # Remove empty dicts from the kwargs
        kwargs = {k: v for k, v in kwargs.items() if v != {}}
        # Remove Items that are not columns in the table
        columns = cls.__table__.columns.keys()
        kwargs = {k: v for k, v in kwargs.items() if k in columns}
        return kwargs
    
    @classmethod
    def create(cls, **kwargs):
        """
        Create a new instance of the class.
        """
        kwargs = cls.validate_fields(**kwargs)
        instance = cls(**kwargs)
        with db_engine.get_session() as session:
            session.add(instance)
        return instance
    
    @classmethod
    def all(cls):
        """
        Get all instances of the class.
        """
        query = select(cls)
        with db_engine.get_session() as session:
            result = session.execute(query).scalars().all()
        return result
    
    @classmethod
    def get(cls, id):
        """
        Get an instance of the class by ID.
        """
        query = select(cls).where(cls.id == id)
        with db_engine.get_session() as session:
            result = session.execute(query).scalar_one_or_none()
        return result
    
    @classmethod
    def get_by_parameters(cls, **kwargs):
        """
        Get instances of the class by multiple
        parameters.
        """
        query = select(cls)
        kwargs = cls.validate_fields(**kwargs)
        if kwargs == {}:
            return None
        for key, value in kwargs.items():
            attribute = getattr(cls, key)
            if isinstance(attribute.type, JSON):
                query = query.where(attribute.contains(value))
            elif isinstance(attribute.type, TIMESTAMP):
                query = query.where(attribute >= value)
            else:
                query = query.where(attribute == value)
        with db_engine.get_session() as session:
            result = session.execute(query).scalars().first()
        return result
    
    @classmethod
    def update(cls, instance, **kwargs):
        """
        Update an instance of the class.
        """
        with db_engine.get_session():
            kwargs = cls.validate_fields(**kwargs)
            for key, value in kwargs.items():
                setattr(instance, key, value)
        return instance

    @classmethod
    def update_or_get(cls, instance, **kwargs):
        """
        Update an existing instance or create a new one.
        """
        try:
            unique_fields = cls.unique_fields()
            kwargs = cls.validate_fields(**kwargs)
            unique_kwargs = {key: value for key, value in kwargs.items() if key in unique_fields}
            if unique_kwargs == {}:
                return None
            instance = cls.update(instance, **kwargs)
            return instance
        except Exception as e:
            return None


    @classmethod
    def get_or_create(cls, **kwargs):
        """
        Get an existing instance or create a new one.
        """
        unique_fields = cls.unique_fields()
        kwargs = cls.validate_fields(**kwargs)
        unique_kwargs = {key: value for key, value in kwargs.items() if key in unique_fields}
        if unique_kwargs == {}:
            return None
        instance = cls.get_by_parameters(**unique_kwargs)
        if instance:
            return instance
        else:
            instance = cls.create(**kwargs)
            return instance
        
    @classmethod
    def delete(cls, instance):
        """
        Delete an instance of the class.
        """
        with db_engine.get_session() as session:
            session.delete(instance)
        return True
    

    @classmethod
    def get_model_from_table_name(cls, table_name):
        """
        Get the model by table name
        """
        return cls.metadata.tables[f"{cls.metadata.schema}.{table_name}"]
        
    @classmethod
    def insert_bulk(cls, data):
        with db_engine.get_session() as session:
            table = cls.__table__
            stmt = pg_insert(table).returning(table.c.id)
            inserted_records = session.execute(stmt, data, execution_options={"populate_existing": True})
            inserted_ids = [record.id for record in inserted_records]
            return inserted_ids
        
    @classmethod
    def update_bulk(cls, data):
        with db_engine.get_session() as session:
            table = cls.__table__
            stmt = pg_insert(table).returning(table.c.id)
            inserted_records = session.execute(stmt, data, execution_options={"populate_existing": True})
            inserted_ids = [record.id for record in inserted_records]
            return inserted_ids
        

    @classmethod
    def delete_bulk(cls, data):
        with db_engine.get_session() as session:
            table = cls.__table__
            stmt = delete(table).where(table.c.id.in_(data))
            session.execute(stmt)
            return True
        
        
    @classmethod
    def update_or_create(cls, constraint, **kwargs):
        unique_fields = cls.unique_fields()
        kwargs = cls.validate_fields(**kwargs)
        unique_kwargs = {key: value for key, value in kwargs.items() if key in unique_fields}
        if unique_kwargs == {}:
            return None
        instance = cls.get_by_parameters(**unique_kwargs)
        if instance:
            instance = cls.update(instance, **kwargs)
            return instance
        else:
            instance = cls.create(**kwargs)
            return instance
        
        
        
    @classmethod
    def search(cls, **kwargs):
        with db_engine.get_session() as session:
            query = select(cls)
            kwargs = cls.validate_fields(**kwargs)
            for key, value in kwargs.items():
                attribute = getattr(cls, key)
                if isinstance(attribute.type, JSON):
                    query = query.where(attribute.contains(value))
                elif isinstance(attribute.type, TIMESTAMP):
                    query = query.where(attribute >= value)
                else:
                    query = query.where(attribute == value)
            result = session.execute(query).scalars().all()
        return result
        
    @classmethod
    def paginate(cls, order_by, page_number, page_limit, **kwargs):
        with db_engine.get_session() as session:
            query = session.query(cls)
            kwargs = cls.validate_fields(**kwargs)
            for key, value in kwargs.items():
                attribute = getattr(cls, key)
                if isinstance(attribute.type, JSON):
                    query = query.filter(attribute.contains(value))
                elif isinstance(attribute.type, TIMESTAMP):
                    query = query.filter(attribute >= value)
                else:
                    query = query.filter(attribute == value)
            number_of_records = query.count()
            number_of_pages = number_of_records // page_limit
            if page_number > 0:
                query = query.offset((page_number - 1) * page_limit)
            query = query.limit(page_limit)
            query_result = query.all()
        return number_of_records, number_of_pages, query_result
    
    @classmethod
    def stream(cls, **kwargs):
        query = select(cls)
        kwargs = cls.validate_fields(**kwargs)
        for key, value in kwargs.items():
            attribute = getattr(cls, key)
            if isinstance(attribute.type, JSON):
                query = query.where(attribute.contains(value))
            elif isinstance(attribute.type, TIMESTAMP):
                query = query.where(attribute >= value)
            else:
                query = query.where(attribute == value)
        query = query.execution_options(yield_per=1000)
        with db_engine.get_session() as session:
            for partition in session.execute(query).scalars().partitions():
                for instance in partition:
                    yield instance


class ViewBaseModel(BaseModel):

    __abstract__ = True

    @classmethod
    def refresh(cls):
        with db_engine.get_session() as session:
            session.execute(f"REFRESH MATERIALIZED VIEW {cls.__table__.name}")
        
    @classmethod
    def get(cls):
        cls.refresh()
        return super().get()
    
    @classmethod
    def all(cls):
        cls.refresh()
        return super().all()
    
    @classmethod
    def get_by_parameters(cls, **kwargs):
        cls.refresh()
        return super().get_by_parameters(**kwargs)
    
    @classmethod
    def search(cls, **kwargs):
        cls.refresh()
        return super().search(**kwargs)
    
    @classmethod
    def paginate(cls, order_by, page_number, page_limit, **kwargs):
        cls.refresh()
        return super().paginate(order_by, page_number, page_limit, **kwargs)
    
    @classmethod
    def stream(cls, **kwargs):
        cls.refresh()
        return super().stream(**kwargs)
    
class ColumnarBaseModel(BaseModel):

    __abstract__ = True

</document_content>
</document>

<document>
<source>gemini/db/core/engine.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/server/database/core/engine.py
import asyncio
from datetime import datetime
from typing import Generator, Optional, Any
from contextlib import contextmanager, asynccontextmanager
import logging
from sqlalchemy import create_engine, event, exc
from sqlalchemy.sql import text
from sqlalchemy.engine import Engine, Connection
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.ext.asyncio import (
    create_async_engine,
    AsyncSession,
    async_sessionmaker
)
from gemini.db.config import DatabaseConfig

logger = logging.getLogger(__name__)

class DatabaseEngine:
    """
    Database engine manager with connection pooling, health checks, and monitoring.
    
    Features:
    - Connection pooling with configurable settings
    - Health checks and connection verification
    - Query execution monitoring and logging
    - Support for both sync and async operations
    - Automatic retry on connection failures
    - Connection pool monitoring
    """

    def __init__(self, config: Optional[DatabaseConfig] = None, engine: Optional[Engine] = None, async_engine: Optional[Engine] = None):
        """Initialize database engine with configuration."""
        
        if not config:
            raise ValueError("Database configuration is required")
        
        self.config = config 
        self._engine: Optional[Engine] = engine
        self._async_engine = async_engine
        self._session_factory = None
        self._async_session_factory = None
        
        


        # Initialize engines if not provided
        if not self._engine:
            self.setup_engine()
        if not self._async_engine:
            self.setup_async_engine()
        
        # Set up event listeners
        self._setup_engine_events()

    def setup_engine(self) -> None:
        """Set up the SQLAlchemy engine with optimal settings."""
        if self._engine is not None:
            return

        self._engine = create_engine(
            self.config.database_url,
            poolclass=self.config.pool_class,
            pool_size=self.config.pool_size,
            max_overflow=self.config.max_overflow,
            pool_timeout=self.config.pool_timeout,
            pool_recycle=self.config.pool_recycle,
            pool_pre_ping=True,  # Enable connection health checks
            echo=self.config.echo_sql,
            echo_pool=self.config.echo_pool,
            execution_options={
                "isolation_level": self.config.isolation_level
            }
        )

        # Create session factory
        self._session_factory = sessionmaker(
            bind=self._engine,
            autocommit=False,
            autoflush=False,
            expire_on_commit=False
        )

    def setup_async_engine(self) -> None:
        """Set up the async SQLAlchemy engine."""
        if self._async_engine is not None:
            return
        
        # Add asyncpg dialect to the database URL
        self.config.database_url = self.config.database_url.replace("postgresql", "postgresql+asyncpg")

        self._async_engine = create_async_engine(
            self.config.database_url,
            poolclass=self.config.async_pool_class,
            pool_size=self.config.pool_size,
            max_overflow=self.config.max_overflow,
            pool_timeout=self.config.pool_timeout,
            pool_recycle=self.config.pool_recycle,
            pool_pre_ping=True,
            echo=self.config.echo_sql,
            echo_pool=self.config.echo_pool
        )

        # Create async session factory
        self._async_session_factory = async_sessionmaker(
            bind=self._async_engine,
            autocommit=False,
            autoflush=False,
            expire_on_commit=False
        )

    def _setup_engine_events(self) -> None:
        """Set up SQLAlchemy event listeners for monitoring."""
        
        @event.listens_for(self._engine, 'before_cursor_execute')
        def before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
            conn.info.setdefault('query_start_time', []).append(datetime.now())
            logger.debug("Executing query: %s", statement)

        @event.listens_for(self._engine, 'after_cursor_execute')
        def after_cursor_execute(conn, cursor, statement, parameters, context, executemany):
            total = datetime.now() - conn.info['query_start_time'].pop()
            logger.debug("Query execution time: %s", total)

        @event.listens_for(self._engine, 'engine_connect')
        def engine_connect(conn, branch):
            logger.debug("New database connection established")

        @event.listens_for(self._engine.pool, 'close')
        def connection_close(dbapi_connection, connection_record):
            logger.debug("Database connection closed")

    @contextmanager
    def get_session(self) -> Generator[Session, None, None]:
        """Get a database session with automatic cleanup.
        
        Yields:
            Session: Database session
            
        Example:
            with engine.get_session() as session:
                result = session.query(Model).all()
        """
        session = self._session_factory()
        try:
            yield session
            session.commit()
        except Exception as e:
            session.rollback()
            logger.exception("Database session error: %s", str(e))
            raise
        finally:
            session.refresh()
            session.close()

    @asynccontextmanager
    async def get_async_session(self) -> Any:
        """Get an async database session with automatic cleanup.
        
        Yields:
            AsyncSession: Async database session
            
        Example:
            async with engine.get_async_session() as session:
                result = await session.execute(select(Model))
        """
        session = self._async_session_factory()
        try:
            yield session
            await session.commit()
        except Exception as e:
            await session.rollback()
            logger.exception("Database session error: %s", str(e))
            raise
        finally:
            await session.close()

    def check_health(self) -> bool:
        """Check database connection health.
        
        Returns:
            bool: True if database is healthy
            
        Raises:
            DatabaseConnectionError: If connection check fails
        """
        try:
            with self._engine.connect() as conn:
                conn.execute(text("SELECT 1"))
            return True
        except exc.DBAPIError as e:
            logger.error("Database health check failed: %s", str(e))
            return False

    async def check_health_async(self) -> bool:
        """Check async database connection health.
        
        Returns:
            bool: True if database is healthy
        """
        try:
            async with self._async_engine.connect() as conn:
                await conn.execute(text("SELECT 1"))
            return True
        except exc.DBAPIError as e:
            logger.error("Async database health check failed: %s", str(e))
            return False

    def get_pool_status(self) -> dict:
        """Get current connection pool status.
        
        Returns:
            dict: Pool statistics
        """
        return {
            "size": self._engine.pool.size(),
            "checkedin": self._engine.pool.checkedin(),
            "checkedout": self._engine.pool.checkedout(),
            "overflow": self._engine.pool.overflow(),
            "checkedout_overflow": self._engine.pool.overflow()
        }

    def dispose(self) -> None:
        """Dispose of the engine and connection pool."""
        if self._engine:
            self._engine.dispose()
        if self._async_engine:
            asyncio.run(self._async_engine.dispose())</document_content>
</document>

<document>
<source>gemini/db/init_sql/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/db/models/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/db/models/associations.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import Integer, JSON, TIMESTAMP
from sqlalchemy import ForeignKey, PrimaryKeyConstraint
from sqlalchemy.orm import Mapped, mapped_column
from sqlalchemy.dialects.postgresql import UUID
from datetime import datetime
import uuid
from gemini.db.core.base import BaseModel


class DataTypeFormatModel(BaseModel):
    __tablename__ = "data_type_formats"

    data_type_id: Mapped[int] = mapped_column(Integer, ForeignKey("gemini.data_types.id", ondelete="CASCADE"))
    data_format_id: Mapped[int] = mapped_column(Integer, ForeignKey("gemini.data_formats.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("data_type_id", "data_format_id"),)


class ExperimentSiteModel(BaseModel):
    __tablename__ = "experiment_sites"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    site_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.sites.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "site_id"),)


class ExperimentSensorModel(BaseModel):
    __tablename__ = "experiment_sensors"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    sensor_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.sensors.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "sensor_id"),)


class ExperimentSensorPlatformModel(BaseModel):
    __tablename__ = "experiment_sensor_platforms"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    sensor_platform_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.sensor_platforms.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "sensor_platform_id"),)


class ExperimentTraitModel(BaseModel):
    __tablename__ = "experiment_traits"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    trait_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.traits.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "trait_id"),)


class ExperimentCultivarModel(BaseModel):
    __tablename__ = "experiment_cultivars"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    cultivar_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.cultivars.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "cultivar_id"),)


class ExperimentModelModel(BaseModel):
    __tablename__ = "experiment_models"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    model_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.models.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "model_id"),)


class ExperimentProcedureModel(BaseModel):
    __tablename__ = "experiment_procedures"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    procedure_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.procedures.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "procedure_id"),)


class ExperimentScriptModel(BaseModel):
    __tablename__ = "experiment_scripts"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    script_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.scripts.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "script_id"),)


class ExperimentDatasetModel(BaseModel):
    __tablename__ = "experiment_datasets"

    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.experiments.id", ondelete="CASCADE"))
    dataset_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.datasets.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("experiment_id", "dataset_id"),)


class PlotCultivarModel(BaseModel):
    __tablename__ = "plot_cultivars"

    plot_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.plots.id", ondelete="CASCADE"))
    cultivar_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.cultivars.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("plot_id", "cultivar_id"),)


class TraitSensorModel(BaseModel):
    __tablename__ = "trait_sensors"

    trait_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.traits.id", ondelete="CASCADE"))
    sensor_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.sensors.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("trait_id", "sensor_id"),)


class SensorPlatformSensorModel(BaseModel):
    __tablename__ = "sensor_platform_sensors"

    sensor_platform_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.sensor_platforms.id", ondelete="CASCADE"))
    sensor_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.sensors.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("sensor_platform_id", "sensor_id"),)


class SensorDatasetModel(BaseModel):
    __tablename__ = "sensor_datasets"

    sensor_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.sensors.id", ondelete="CASCADE"))
    dataset_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.datasets.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("sensor_id", "dataset_id"),)


class TraitDatasetModel(BaseModel):
    __tablename__ = "trait_datasets"

    trait_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.traits.id", ondelete="CASCADE"))
    dataset_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.datasets.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("trait_id", "dataset_id"),)


class ModelDatasetModel(BaseModel):
    __tablename__ = "model_datasets"

    model_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.models.id", ondelete="CASCADE"))
    dataset_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.datasets.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("model_id", "dataset_id"),)


class ScriptDatasetModel(BaseModel):
    __tablename__ = "script_datasets"

    script_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.scripts.id", ondelete="CASCADE"))
    dataset_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.datasets.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("script_id", "dataset_id"),)


class ProcedureDatasetModel(BaseModel):
    __tablename__ = "procedure_datasets"

    procedure_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.procedures.id", ondelete="CASCADE"))
    dataset_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), ForeignKey("gemini.datasets.id", ondelete="CASCADE"))
    info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.utcnow, onupdate=datetime.utcnow)

    __table_args__ = (PrimaryKeyConstraint("procedure_id", "dataset_id"),)

</document_content>
</document>

<document>
<source>gemini/db/models/columnar/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/db/models/columnar/dataset_records.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped, Relationship
from sqlalchemy import UUID, JSON, String, Integer, UniqueConstraint, Index, ForeignKey
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ColumnarBaseModel
import uuid


class DatasetRecordModel(ColumnarBaseModel):
    __tablename__ = "dataset_records"

    dataset_id: Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name: Mapped[str] = mapped_column(String(255))
    dataset_data : Mapped[dict] = mapped_column(JSONB)

    __table_args__ = (
        UniqueConstraint(
            'timestamp',
            'collection_date', 
            'dataset_id', 
            'dataset_name', 
            'record_info',
            name='dataset_records_unique'
        ),
    )

</document_content>
</document>

<document>
<source>gemini/db/models/columnar/model_records.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped, Relationship
from sqlalchemy import UUID, JSON, String, Integer, UniqueConstraint, Index, ForeignKey
from sqlalchemy.dialects.postgresql import JSONB

from gemini.db.core.base import ColumnarBaseModel
import uuid


class ModelRecordModel(ColumnarBaseModel):

    __tablename__ = "model_records"

    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name: Mapped[str] = mapped_column(String(255))
    model_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    model_name: Mapped[str] = mapped_column(String(255))
    model_data : Mapped[dict] = mapped_column(JSONB)

    __table_args__ = (
        UniqueConstraint(
            'timestamp',
            'collection_date', 
            'dataset_id', 
            'dataset_name', 
            'model_id', 
            'model_name', 
            'record_info',
            name='model_records_unique'
        ),
    )
</document_content>
</document>

<document>
<source>gemini/db/models/columnar/procedure_records.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped, Relationship
from sqlalchemy import UUID, JSON, String, Integer, UniqueConstraint, Index, ForeignKey
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ColumnarBaseModel
import uuid


class ProcedureRecordModel(ColumnarBaseModel):

    __tablename__ = "procedure_records"

    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name: Mapped[str] = mapped_column(String(255))
    procedure_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    procedure_name: Mapped[str] = mapped_column(String(255))
    procedure_data : Mapped[dict] = mapped_column(JSON)

    __table_args__ = (
        UniqueConstraint(
            'timestamp',
            'collection_date', 
            'dataset_id', 
            'dataset_name', 
            'procedure_id', 
            'procedure_name', 
            'record_info',
            name='procedure_records_unique'
        ),
    )

</document_content>
</document>

<document>
<source>gemini/db/models/columnar/script_records.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped, Relationship
from sqlalchemy import UUID, JSON, String, Integer, UniqueConstraint, Index, ForeignKey
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ColumnarBaseModel
import uuid


class ScriptRecordModel(ColumnarBaseModel):

    __tablename__ = "script_records"

    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name: Mapped[str] = mapped_column(String(255))
    script_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    script_name: Mapped[str] = mapped_column(String(255))
    script_data : Mapped[dict] = mapped_column(JSONB)

    __table_args__ = (
        UniqueConstraint(
            'timestamp',
            'collection_date', 
            'dataset_id', 
            'dataset_name', 
            'script_id', 
            'script_name', 
            'record_info',
            name='script_records_unique'
        ),
    )

    
</document_content>
</document>

<document>
<source>gemini/db/models/columnar/sensor_records.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped, Relationship
from sqlalchemy import UUID, JSON, String, Integer, UniqueConstraint, Index, ForeignKey
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ColumnarBaseModel
import uuid


class SensorRecordModel(ColumnarBaseModel):

    __tablename__ = "sensor_records"

    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name: Mapped[str] = mapped_column(String(255))
    sensor_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    sensor_name: Mapped[str] = mapped_column(String(255))
    sensor_data : Mapped[dict] = mapped_column(JSONB)

    __table_args__ = (
        UniqueConstraint(
            'timestamp',
            'collection_date', 
            'dataset_id', 
            'dataset_name', 
            'sensor_id', 
            'sensor_name', 
            'record_info',
            name='sensor_records_unique'
        ),
    )

</document_content>
</document>

<document>
<source>gemini/db/models/columnar/trait_records.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped, Relationship
from sqlalchemy import (
    UUID,
    REAL,
    JSON,
    String,
    Integer,
    UniqueConstraint,
    Index,
    ForeignKey,
)
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ColumnarBaseModel
import uuid


class TraitRecordModel(ColumnarBaseModel):

    __tablename__ = "trait_records"

    dataset_id: Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name: Mapped[str] = mapped_column(String(255))
    trait_id: Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    trait_name: Mapped[str] = mapped_column(String(255))
    trait_value: Mapped[float] = mapped_column(REAL)

    __table_args__ = (
        UniqueConstraint(
            "timestamp",
            "collection_date",
            "dataset_id",
            "dataset_name",
            "trait_id",
            "trait_name",
            "record_info",
            name="trait_records_unique"
        ),
    )</document_content>
</document>

<document>
<source>gemini/db/models/cultivars.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import JSON, String, TIMESTAMP, UniqueConstraint, Index
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class CultivarModel(BaseModel):
    __tablename__ = "cultivars"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    cultivar_accession: Mapped[str] = mapped_column(String(255), nullable=False)
    cultivar_population: Mapped[str] = mapped_column(String(255), nullable=False)
    cultivar_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint('cultivar_accession', 'cultivar_population'),
        Index('idx_cultivars_info', 'cultivar_info', postgresql_using='GIN')
    )

</document_content>
</document>

<document>
<source>gemini/db/models/data_formats.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import JSON, String, TIMESTAMP, UniqueConstraint, Index, Integer
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class DataFormatModel(BaseModel):
    __tablename__ = "data_formats"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    data_format_name: Mapped[str] = mapped_column(String(255), nullable=False)
    data_format_mime_type: Mapped[str] = mapped_column(String(255), default='application/octet-stream')
    data_format_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint('data_format_name', name='data_format_unique'),
        Index('idx_data_formats_info', 'data_format_info', postgresql_using='GIN')
    )

</document_content>
</document>

<document>
<source>gemini/db/models/data_types.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID
from gemini.db.core.base import BaseModel
from datetime import datetime

class DataTypeModel(BaseModel):
    __tablename__ = 'data_types'

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    data_type_name: Mapped[str] = mapped_column(String(255), nullable=False)
    data_type_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint('data_type_name', name='data_type_unique'),
        Index('idx_data_types_info', 'data_type_info', postgresql_using='GIN')
    )

    formats = relationship('DataFormatModel', secondary='gemini.data_type_formats')</document_content>
</document>

<document>
<source>gemini/db/models/dataset_types.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID
from gemini.db.core.base import BaseModel
from datetime import datetime

class DatasetTypeModel(BaseModel):
    __tablename__ = "dataset_types"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    dataset_type_name: Mapped[str] = mapped_column(String(255), nullable=False)
    dataset_type_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("dataset_type_name"),
        Index("idx_dataset_types_info", "dataset_type_info", postgresql_using="GIN"),
    )</document_content>
</document>

<document>
<source>gemini/db/models/datasets.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
    TIMESTAMP,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime, date
import uuid


class DatasetModel(BaseModel):

    __tablename__ = "datasets"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    collection_date: Mapped[date] = mapped_column(TIMESTAMP, default=datetime.now)
    dataset_name: Mapped[str] = mapped_column(String(255))
    dataset_info: Mapped[dict] = mapped_column(JSON, default={})
    dataset_type_id: Mapped[int] = mapped_column(Integer, ForeignKey("gemini.dataset_types.id"), default=0)
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("dataset_name"),
        Index("idx_datasets_info", "dataset_info", postgresql_using="GIN"),
    )

    dataset_type = relationship("DatasetTypeModel")

</document_content>
</document>

<document>
<source>gemini/db/models/experiments.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    CheckConstraint,
    Index,
    DATE,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID, JSONB

from gemini.db.core.base import BaseModel

from datetime import datetime, date
import uuid


class ExperimentModel(BaseModel):
    __tablename__ = "experiments"

    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=False), primary_key=True, default=uuid.uuid4
    )
    experiment_name: Mapped[str] = mapped_column(String(255), nullable=False)
    experiment_info: Mapped[dict] = mapped_column(JSONB, nullable=True)
    experiment_start_date: Mapped[date] = mapped_column(
        DATE, nullable=False, default=datetime.now
    )
    experiment_end_date: Mapped[date] = mapped_column(
        DATE, nullable=False, default=datetime.now
    )
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("experiment_name"),
        CheckConstraint("experiment_start_date <= experiment_end_date"),
        CheckConstraint("experiment_end_date >= experiment_start_date"),
        Index("idx_experiments_info", "experiment_info", postgresql_using="GIN"),
    )

    seasons = relationship("SeasonModel")
    resources = relationship("ResourceModel")
    sites = relationship("SiteModel", secondary="gemini.experiment_sites")
    sensors = relationship("SensorModel", secondary="gemini.experiment_sensors")
    cultivars = relationship("CultivarModel", secondary="gemini.experiment_cultivars")
    datasets = relationship("DatasetModel", secondary="gemini.experiment_datasets")
    traits = relationship("TraitModel", secondary="gemini.experiment_traits")
    models = relationship("ModelModel", secondary="gemini.experiment_models")
    scripts = relationship("ScriptModel", secondary="gemini.experiment_scripts")
    procedures = relationship(
        "ProcedureModel", secondary="gemini.experiment_procedures"
    )
    platforms = relationship(
        "SensorPlatformModel", secondary="gemini.experiment_sensor_platforms"
    )
</document_content>
</document>

<document>
<source>gemini/db/models/model_runs.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    UniqueConstraint,
    Index,
    Integer,
    Boolean,
    ForeignKey,
    TIMESTAMP,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID, JSONB
from gemini.db.core.base import BaseModel

import uuid
from datetime import datetime

class ModelRunModel(BaseModel):

    __tablename__ = "model_runs"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    model_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey("gemini.models.id", ondelete="CASCADE"))
    model_run_info: Mapped[dict] = mapped_column(JSONB, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("model_id", "model_run_info"),
        Index("idx_model_runs_info", "model_run_info", postgresql_using="GIN"),
    )

</document_content>
</document>

<document>
<source>gemini/db/models/models.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid

class ModelModel(BaseModel):
    __tablename__ = "models"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    model_name: Mapped[str] = mapped_column(String(255))
    model_url: Mapped[str] = mapped_column(String(255))
    model_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("model_name", "model_url"),
        Index("idx_models_info", "model_info", postgresql_using="GIN"),
    )

    model_runs = relationship("ModelRunModel")
    datasets = relationship("DatasetModel", secondary="gemini.model_datasets")

</document_content>
</document>

<document>
<source>gemini/db/models/plants.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID, JSONB

from gemini.db.core.base import BaseModel
from datetime import datetime
import uuid


class PlantModel(BaseModel):
    __tablename__ = "plants"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    plot_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey("gemini.plots.id"))
    plant_number: Mapped[int] = mapped_column(Integer)
    plant_info: Mapped[dict] = mapped_column(JSONB, default={})
    cultivar_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey("gemini.cultivars.id"))
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("plot_id", "plant_number"),
        Index("idx_plants_info", "plant_info", postgresql_using="GIN"),
    )

    cultivar = relationship("CultivarModel")

</document_content>
</document>

<document>
<source>gemini/db/models/plots.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
    TIMESTAMP,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID, JSONB

from gemini.db.core.base import BaseModel

import uuid
from datetime import datetime

class PlotModel(BaseModel):
  __tablename__ = 'plots'

  id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
  experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey('gemini.experiments.id'))
  season_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey('gemini.seasons.id'))
  site_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey('gemini.sites.id'))
  plot_number: Mapped[int] = mapped_column(Integer)
  plot_row_number: Mapped[int] = mapped_column(Integer)
  plot_column_number: Mapped[int] = mapped_column(Integer)
  plot_geometry_info: Mapped[dict] = mapped_column(JSONB, default={})
  plot_info: Mapped[dict] = mapped_column(JSONB, default={})
  created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
  updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

  __table_args__ = (
    UniqueConstraint('experiment_id', 'season_id', 'site_id', 'plot_number', 'plot_row_number', 'plot_column_number'),
    Index('idx_plots_info', 'plot_info', postgresql_using='GIN')
  )

  experiment = relationship('ExperimentModel', uselist=False)
  season = relationship('SeasonModel', uselist=False)
  site = relationship('SiteModel', uselist=False)
  cultivars = relationship('CultivarModel', secondary='gemini.plot_cultivars')
  plants = relationship('PlantModel')

</document_content>
</document>

<document>
<source>gemini/db/models/procedure_runs.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    UniqueConstraint,
    Index,
    Integer,
    Boolean,
    ForeignKey,
    TIMESTAMP,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID
from gemini.db.core.base import BaseModel

import uuid
from datetime import datetime

class ProcedureRunModel(BaseModel):

    __tablename__ = "procedure_runs"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    procedure_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey("gemini.procedures.id", ondelete="CASCADE"))
    procedure_run_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("procedure_id", "procedure_run_info"),
        Index("idx_procedure_runs_info", "procedure_run_info", postgresql_using="GIN"),
    )

</document_content>
</document>

<document>
<source>gemini/db/models/procedures.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class ProcedureModel(BaseModel):
    __tablename__ = "procedures"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    procedure_name: Mapped[str] = mapped_column(String(255))
    procedure_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    
    __table_args__ = (
        UniqueConstraint("procedure_name"),
        Index("idx_procedures_info", "procedure_info", postgresql_using="GIN"),
    )

    procedure_runs = relationship("ProcedureRunModel")
    datasets = relationship("DatasetModel", secondary="gemini.procedure_datasets")

</document_content>
</document>

<document>
<source>gemini/db/models/resources.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
    Boolean,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class ResourceModel(BaseModel):
    __tablename__ = "resources"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    resource_uri: Mapped[str] = mapped_column(String(255), nullable=False)
    resource_file_name: Mapped[str] = mapped_column(String(255), nullable=False)
    is_external: Mapped[bool] = mapped_column(Boolean, default=False)
    resource_experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey("gemini.experiments.id"), default=None)
    resource_data_format_id: Mapped[int] = mapped_column(Integer, ForeignKey("gemini.data_formats.id"), default=0)
    resource_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint('resource_uri', 'resource_file_name'),
        Index('idx_resources_info', 'resource_info', postgresql_using='GIN')
    )

</document_content>
</document>

<document>
<source>gemini/db/models/script_runs.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    UniqueConstraint,
    Index,
    Integer,
    Boolean,
    ForeignKey,
    TIMESTAMP,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID
from gemini.db.core.base import BaseModel

import uuid
from datetime import datetime


class ScriptRunModel(BaseModel):
    __tablename__ = "script_runs"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    script_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey("gemini.scripts.id", ondelete="CASCADE"))
    script_run_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("script_id", "script_run_info"),
        Index("idx_script_runs_info", "script_run_info", postgresql_using="GIN"),
    )

</document_content>
</document>

<document>
<source>gemini/db/models/scripts.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid

class ScriptModel(BaseModel):
    __tablename__ = "scripts"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    script_name: Mapped[str] = mapped_column(String(255))
    script_url: Mapped[str] = mapped_column(String(255))
    script_extension: Mapped[str] = mapped_column(String(255))
    script_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint('script_name', 'script_url'),
        Index('idx_scripts_info', 'script_info', postgresql_using='GIN')
    )

    script_runs = relationship("ScriptRunModel")
    datasets = relationship("DatasetModel", secondary="gemini.script_datasets")

</document_content>
</document>

<document>
<source>gemini/db/models/seasons.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import JSON, String, TIMESTAMP, UniqueConstraint, Index, ForeignKey, CheckConstraint, DATE
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID, JSONB

from gemini.db.core.base import BaseModel

from datetime import datetime, date
import uuid


class SeasonModel(BaseModel):
    __tablename__ = "seasons"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    experiment_id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=True), ForeignKey('gemini.experiments.id'))
    season_name: Mapped[str] = mapped_column(String(255), nullable=False)
    season_info: Mapped[dict] = mapped_column(JSONB, default={})
    season_start_date: Mapped[date] = mapped_column(DATE, nullable=False, default=datetime.now)
    season_end_date: Mapped[date] = mapped_column(DATE)
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint('experiment_id', 'season_name'),
        CheckConstraint('season_start_date <= season_end_date'),
        CheckConstraint('season_end_date >= season_start_date'),
        Index('idx_seasons_info', 'season_info', postgresql_using='GIN')
    )

</document_content>
</document>

<document>
<source>gemini/db/models/sensor_platforms.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class SensorPlatformModel(BaseModel):
    __tablename__ = "sensor_platforms"

    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=False), primary_key=True, default=uuid.uuid4
    )
    sensor_platform_name: Mapped[str] = mapped_column(String(255), nullable=False)
    sensor_platform_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    sensors = relationship("SensorModel", secondary="gemini.sensor_platform_sensors")

    __table_args__ = (
        UniqueConstraint("sensor_platform_name"),
        Index(
            "idx_sensor_platforms_info", "sensor_platform_info", postgresql_using="GIN"
        ),
    )
</document_content>
</document>

<document>
<source>gemini/db/models/sensor_types.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class SensorTypeModel(BaseModel):
  __tablename__ = 'sensor_types'

  id: Mapped[int] = mapped_column(Integer, primary_key=True)
  sensor_type_name: Mapped[str] = mapped_column(String(255), nullable=False)
  sensor_type_info: Mapped[dict] = mapped_column(JSON, default={})
  created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
  updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

  __table_args__ = (
    UniqueConstraint('sensor_type_name'),
    Index('idx_sensor_types_info', 'sensor_type_info', postgresql_using='GIN')
  )

</document_content>
</document>

<document>
<source>gemini/db/models/sensors.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class SensorModel(BaseModel):
    __tablename__ = "sensors"

    id: Mapped[uuid.UUID] = mapped_column(
        UUID(as_uuid=False), primary_key=True, default=uuid.uuid4
    )
    sensor_name: Mapped[str] = mapped_column(String(255), nullable=False)
    sensor_type_id: Mapped[int] = mapped_column(
        Integer, ForeignKey("gemini.sensor_types.id"), default=0
    )
    sensor_data_type_id: Mapped[int] = mapped_column(
        Integer, ForeignKey("gemini.data_types.id"), default=0
    )
    sensor_data_format_id: Mapped[int] = mapped_column(
        Integer, ForeignKey("gemini.data_formats.id"), default=0
    )
    sensor_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("sensor_name"),
        Index("idx_sensors_info", "sensor_info", postgresql_using="GIN"),
    )

    sensor_type = relationship("SensorTypeModel", uselist=False)
    data_type = relationship("DataTypeModel", uselist=False)
    data_format = relationship("DataFormatModel", uselist=False)
    datasets = relationship("DatasetModel", secondary="gemini.sensor_datasets")
</document_content>
</document>

<document>
<source>gemini/db/models/sites.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid



class SiteModel(BaseModel):
  __tablename__ = 'sites'

  id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
  site_name: Mapped[str] = mapped_column(String(255), nullable=False)
  site_city: Mapped[str] = mapped_column(String(255), default='')
  site_state: Mapped[str] = mapped_column(String(255), default='')
  site_country: Mapped[str] = mapped_column(String(255), default='')
  site_info: Mapped[dict] = mapped_column(JSON, default={})
  created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
  updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

  __table_args__ = (
    UniqueConstraint('site_name', 'site_city', 'site_state', 'site_country'),
    Index('idx_sites_info', 'site_info', postgresql_using='GIN')
  )
</document_content>
</document>

<document>
<source>gemini/db/models/trait_levels.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import JSON, String, TIMESTAMP, UniqueConstraint, Index, Integer
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid


class TraitLevelModel(BaseModel):
    __tablename__ = "trait_levels"

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    trait_level_name: Mapped[str] = mapped_column(String(255), nullable=False)
    trait_level_info: Mapped[dict] = mapped_column(JSON, default={})
    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint("trait_level_name", name="trait_level_unique"),
        Index("idx_trait_levels_info", "trait_level_info", postgresql_using="GIN"),
    )

</document_content>
</document>

<document>
<source>gemini/db/models/traits.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy import (
    JSON,
    String,
    TIMESTAMP,
    UniqueConstraint,
    Index,
    Integer,
    ForeignKey,
)
from sqlalchemy.orm import relationship
from sqlalchemy.orm import Mapped
from sqlalchemy.orm import mapped_column
from sqlalchemy.dialects.postgresql import UUID

from gemini.db.core.base import BaseModel

from datetime import datetime
import uuid



class TraitModel(BaseModel):
    __tablename__ = "traits"

    id: Mapped[uuid.UUID] = mapped_column(UUID(as_uuid=False), primary_key=True, default=uuid.uuid4)
    trait_name: Mapped[str] = mapped_column(String(255), nullable=False)
    trait_units: Mapped[str] = mapped_column(String(255), default='units')
    trait_level_id: Mapped[int] = mapped_column(Integer, ForeignKey("gemini.trait_levels.id"), default=0)
    trait_metrics: Mapped[dict] = mapped_column(JSON, default={})
    trait_info: Mapped[dict] = mapped_column(JSON, default={})

    created_at: Mapped[datetime] = mapped_column(TIMESTAMP)
    updated_at: Mapped[datetime] = mapped_column(TIMESTAMP)

    __table_args__ = (
        UniqueConstraint('trait_name'),
        Index('idx_traits_info', 'trait_info', postgresql_using='GIN')
    )

    trait_level = relationship("TraitLevelModel", uselist=False)
    datasets = relationship("DatasetModel", secondary="gemini.trait_datasets")
</document_content>
</document>

<document>
<source>gemini/db/models/views/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/db/models/views/dataset_views.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped
from sqlalchemy import UUID, JSON, String, Integer
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ViewBaseModel

class SensorDatasetsViewModel(ViewBaseModel):

    __tablename__ = 'sensor_datasets_view'

    sensor_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    sensor_name : Mapped[str] = mapped_column(String)
    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    dataset_name : Mapped[str] = mapped_column(String)
    sensor_dataset_info : Mapped[JSON] = mapped_column(JSON)

class TraitDatasetsViewModel(ViewBaseModel):

    __tablename__ = 'trait_datasets_view'

    trait_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    trait_name : Mapped[str] = mapped_column(String)
    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    dataset_name : Mapped[str] = mapped_column(String)
    trait_dataset_info : Mapped[JSON] = mapped_column(JSON)


class ProcedureDatasetsViewModel(ViewBaseModel):
    
    __tablename__ = 'procedure_datasets_view'

    procedure_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    procedure_name : Mapped[str] = mapped_column(String)
    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    dataset_name : Mapped[str] = mapped_column(String)
    procedure_dataset_info : Mapped[JSON] = mapped_column(JSON)


class ScriptDatasetsViewModel(ViewBaseModel):
     
    __tablename__ = 'script_datasets_view'

    script_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    script_name : Mapped[str] = mapped_column(String)
    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    dataset_name : Mapped[str] = mapped_column(String)
    script_dataset_info : Mapped[JSON] = mapped_column(JSON)



class ModelDatasetsViewModel(ViewBaseModel):
      
    __tablename__ = 'model_datasets_view'

    model_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    model_name : Mapped[str] = mapped_column(String)
    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    dataset_name : Mapped[str] = mapped_column(String)
    model_dataset_info : Mapped[JSON] = mapped_column(JSON)

    </document_content>
</document>

<document>
<source>gemini/db/models/views/experiment_views.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped
from sqlalchemy import UUID, JSON, String, Integer
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ViewBaseModel



class ExperimentSitesViewModel(ViewBaseModel):

    __tablename__ = 'experiment_sites_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    site_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    site_name : Mapped[str] = mapped_column(String)
    site_city : Mapped[str] = mapped_column(String)
    site_state : Mapped[str] = mapped_column(String)
    site_country : Mapped[str] = mapped_column(String)
    site_info : Mapped[JSON] = mapped_column(JSONB)


class ExperimentTraitsViewModel(ViewBaseModel):

    __tablename__ = 'experiment_traits_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    trait_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    trait_name : Mapped[str] = mapped_column(String)
    trait_units : Mapped[str] = mapped_column(String)
    trait_metrics : Mapped[str] = mapped_column(String)
    trait_info : Mapped[JSON] = mapped_column(JSONB)



class ExperimentSensorsViewModel(ViewBaseModel):

    __tablename__ = 'experiment_sensors_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    sensor_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    sensor_name : Mapped[str] = mapped_column(String)
    sensor_type_id : Mapped[int] = mapped_column(Integer)
    sensor_platform_id : Mapped[int] = mapped_column(Integer)
    sensor_data_type_id : Mapped[int] = mapped_column(Integer)
    sensor_data_format_id : Mapped[int] = mapped_column(Integer)
    sensor_info : Mapped[JSON] = mapped_column(JSONB)


class ExperimentCultivarsViewModel(ViewBaseModel):

    __tablename__ = 'experiment_cultivars_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    cultivar_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    cultivar_accession : Mapped[str] = mapped_column(String)
    cultivar_population : Mapped[str] = mapped_column(String)
    cultivar_info : Mapped[JSON] = mapped_column(JSONB)




class ExperimentProceduresViewModel(ViewBaseModel):

    __tablename__ = 'experiment_procedures_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    procedure_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    procedure_name : Mapped[str] = mapped_column(String)
    procedure_info : Mapped[JSON] = mapped_column(JSONB)


class ExperimentScriptsViewModel(ViewBaseModel):

    __tablename__ = 'experiment_scripts_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    script_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    script_name : Mapped[str] = mapped_column(String)
    script_url : Mapped[str] = mapped_column(String)
    script_extension : Mapped[str] = mapped_column(String)
    script_info : Mapped[JSON] = mapped_column(JSONB)


class ExperimentModelsViewModel(ViewBaseModel):

    __tablename__ = 'experiment_models_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    model_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    model_name : Mapped[str] = mapped_column(String)
    model_url : Mapped[str] = mapped_column(String)
    model_info : Mapped[JSON] = mapped_column(JSONB)



class ExperimentDatasetsViewModel(ViewBaseModel):

    __tablename__ = 'experiment_datasets_view'

    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_name : Mapped[str] = mapped_column(String)
    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    collection_date : Mapped[str] = mapped_column(String)
    dataset_name : Mapped[str] = mapped_column(String)
    dataset_type_id : Mapped[int] = mapped_column(Integer)
    dataset_info : Mapped[JSON] = mapped_column(JSONB)
</document_content>
</document>

<document>
<source>gemini/db/models/views/plot_cultivar_view.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped
from sqlalchemy import UUID, JSON, String, Integer
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ViewBaseModel


class PlotCultivarViewModel(ViewBaseModel):

    __tablename__ = 'plot_cultivar_view'

    plot_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    plot_number : Mapped[int] = mapped_column(Integer)
    plot_row_number : Mapped[int] = mapped_column(Integer)
    plot_column_number : Mapped[int] = mapped_column(Integer)
    plot_info : Mapped[dict] = mapped_column(JSONB)
    cultivar_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    cultivar_accession : Mapped[str] = mapped_column(String)
    cultivar_population : Mapped[str] = mapped_column(String)
</document_content>
</document>

<document>
<source>gemini/db/models/views/plot_view.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import relationship, mapped_column, Mapped
from sqlalchemy import UUID, JSON, String, Integer
from sqlalchemy.dialects.postgresql import JSONB
from gemini.db.core.base import ViewBaseModel



class PlotViewModel(ViewBaseModel):

    __tablename__ = 'plot_view'

    plot_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    experiment_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    experiment_name : Mapped[str] = mapped_column(String)
    season_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    season_name : Mapped[str] = mapped_column(String)
    site_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    site_name : Mapped[str] = mapped_column(String)
    plot_number : Mapped[int] = mapped_column(Integer)
    plot_row_number : Mapped[int] = mapped_column(Integer)
    plot_column_number : Mapped[int] = mapped_column(Integer)
    plot_geometry_info : Mapped[JSON] = mapped_column(JSON)
    plot_info : Mapped[JSON] = mapped_column(JSON)


    

</document_content>
</document>

<document>
<source>gemini/db/models/views/sensor_records_immv.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import mapped_column, Mapped
from sqlalchemy import UUID, JSON, String, Integer
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy import TIMESTAMP, DATE
from gemini.db.core.base import BaseModel
from datetime import datetime, date


class SensorRecordsIMMVModel(BaseModel):
    
    __tablename__ = 'sensor_records_immv'
    
    id : Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    timestamp : Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.now)
    collection_date : Mapped[date] = mapped_column(DATE, default=datetime.now)
    record_info : Mapped[dict] = mapped_column(JSONB)
    dataset_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name : Mapped[str] = mapped_column(String)
    sensor_id : Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    sensor_name : Mapped[str] = mapped_column(String)
    sensor_data : Mapped[dict] = mapped_column(JSONB)
    
    
    </document_content>
</document>

<document>
<source>gemini/db/models/views/trait_records_immv.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from sqlalchemy.orm import mapped_column, Mapped
from sqlalchemy import UUID, JSON, String, Integer, REAL
from sqlalchemy.dialects.postgresql import JSONB
from sqlalchemy import TIMESTAMP, DATE
from gemini.db.core.base import BaseModel

from datetime import datetime, date

class TraitRecordsIMMVModel(BaseModel):
    
    __tablename__ = 'trait_records_immv'
    
    id: Mapped[UUID] = mapped_column(UUID(as_uuid=True), primary_key=True)
    timestamp: Mapped[datetime] = mapped_column(TIMESTAMP, default=datetime.now)
    collection_date: Mapped[date] = mapped_column(DATE, default=datetime.now)
    record_info: Mapped[dict] = mapped_column(JSONB)
    dataset_id: Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    dataset_name: Mapped[str] = mapped_column(String)
    trait_id: Mapped[UUID] = mapped_column(UUID(as_uuid=True))
    trait_name: Mapped[str] = mapped_column(String)
    trait_value: Mapped[float] = mapped_column(REAL)
    
    </document_content>
</document>

<document>
<source>gemini/logger/Dockerfile</source>
<mime_type>text/plain</mime_type>
<document_content>
# Use Redis Alpine as base image for smaller size
FROM redis:7.2-alpine

# Add Labels
# LABEL maintainer="Pranav Ghate"
# LABEL description="Gemini Logger based on Redis"

# # Create directory for Redis data
# RUN mkdir -p /data && chown redis:redis /data


# # Copy custom Redis configuration
# COPY redis.conf /usr/local/etc/redis/redis.conf
# RUN chown redis:redis /usr/local/etc/redis/redis.conf \
#     && chmod 644 /usr/local/etc/redis/redis.conf \
#     && sed -i \
#        -e "s/\${REDIS_PORT}/6379/g" \
#        -e "s/\${REDIS_MAX_MEMORY}/256mb/g" \
#        -e "s/\${REDIS_PASSWORD}/defaultpassword/g" \
#        /usr/local/etc/redis/redis.conf


# # Replace variables in Redis configuration
# RUN sed -i "s|{{REDIS_PORT}}|${REDIS_PORT}|g" /usr/local/etc/redis/redis.conf \
#     && sed -i "s|{{REDIS_MAX_MEMORY}}|${REDIS_MAX_MEMORY}|g" /usr/local/etc/redis/redis.conf \
#     && sed -i "s|{{REDIS_PASSWORD}}|${REDIS_PASSWORD}|g" /usr/local/etc/redis/redis.conf

# # Switch to non-root user
# USER redis

# # Define volume for data persistence
# VOLUME /data

# # Expose Redis port
# EXPOSE ${REDIS_PORT}

# # Healthcheck
# HEALTHCHECK --interval=10s --timeout=5s --retries=3 \
#     CMD redis-cli --raw ping || exit 1

# # Set the command to run Redis server with explicit config path
# CMD redis-server /usr/local/etc/redis/redis.conf \
#     --requirepass "${REDIS_PASSWORD}" \
#     --port ${REDIS_PORT} \
#     --maxmemory ${REDIS_MAX_MEMORY}</document_content>
</document>

<document>
<source>gemini/logger/__init__.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
from gemini.logger.config.logger_config import RedisLoggerConfig
from gemini.logger.factory.logger_factory import LoggerFactory

config = RedisLoggerConfig(
    host='localhost',
    port=6379,
    db=0,
    password='gemini',
    key_prefix='gemini',
)

logger = LoggerFactory.create_provider(config)

print(f"Logger provider: {logger}")</document_content>
</document>

<document>
<source>gemini/logger/config/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/logger/config/logger_config.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/logger/config/logger_config.py

from pydantic import BaseModel, Field, model_validator, field_validator
from typing import Optional, Dict, Any, List
from pathlib import Path
from datetime import datetime
from gemini.logger.exceptions import LoggerConfigurationError

class LoggerConfig(BaseModel):
    """Base configuration for logger providers."""
    
    provider: str = Field(
        ...,  # Required field
        description="Name of the logger provider (local, redis)"
    )
    level: str = Field(
        "INFO",
        description="Default log level"
    )
    format: str = Field(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        description="Log format string"
    )
    buffer_size: Optional[int] = Field(
        None,
        description="Size of the log buffer (if buffering is used)"
    )
    extra_fields: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional fields to include in all log entries"
    )

    model_config = {
        "extra": "forbid"  # Prevent additional attributes
    }

class LocalLoggerConfig(LoggerConfig):
    """Configuration for local file logger."""
    
    provider: str = Field(
        "local",
        frozen=True,
        description="Provider name, must be 'local'"
    )
    log_dir: Path = Field(
        ...,
        description="Directory for log files"
    )
    filename_template: str = Field(
        "{name}_{date}.log",
        description="Template for log filenames"
    )
    max_size_mb: Optional[int] = Field(
        None,
        ge=1,
        description="Maximum size of each log file in MB"
    )
    backup_count: int = Field(
        5,
        ge=0,
        description="Number of backup files to keep"
    )
    rotation_time: Optional[str] = Field(
        None,
        description="Time-based rotation (midnight, h1, h12)"
    )
    encoding: str = Field(
        "utf-8",
        description="File encoding"
    )
    
    @field_validator('log_dir')
    @classmethod
    def validate_log_dir(cls, v: Path) -> Path:
        """Validate log directory path."""
        try:
            path = Path(v)
            return path.resolve()
        except Exception as e:
            raise LoggerConfigurationError(f"Invalid log directory path: {e}")
            
    @model_validator(mode='after')
    def validate_rotation_settings(self) -> 'LocalLoggerConfig':
        """Validate that rotation settings are consistent."""
        if self.rotation_time and self.max_size_mb:
            raise LoggerConfigurationError(
                "Cannot specify both size-based and time-based rotation"
            )
        return self

class RedisLoggerConfig(LoggerConfig):
    """Configuration for Redis logger."""
    
    provider: str = Field(
        "redis",
        frozen=True,
        description="Provider name, must be 'redis'"
    )
    host: str = Field(
        ...,
        description="Redis server hostname"
    )
    port: int = Field(
        6379,
        description="Redis server port"
    )
    db: int = Field(
        0,
        ge=0,
        description="Redis database number"
    )
    password: Optional[str] = Field(
        None,
        description="Redis password"
    )
    key_prefix: str = Field(
        "logs:",
        description="Prefix for Redis keys"
    )
    max_entries: Optional[int] = Field(
        None,
        gt=0,
        description="Maximum number of log entries to keep"
    )
    ttl_days: Optional[int] = Field(
        None,
        gt=0,
        description="Time to live for log entries in days"
    )
    use_ssl: bool = Field(
        False,
        description="Use SSL for Redis connection"
    )
    
    @field_validator('host')
    @classmethod
    def validate_host(cls, v: str) -> str:
        """Validate Redis host."""
        if not v:
            raise LoggerConfigurationError("Redis host cannot be empty")
        return v
    
    @model_validator(mode='after')
    def validate_retention_settings(self) -> 'RedisLoggerConfig':
        """Validate retention settings."""
        if self.max_entries and self.ttl_days:
            raise LoggerConfigurationError(
                "Cannot specify both max_entries and ttl_days for retention"
            )
        return self
</document_content>
</document>

<document>
<source>gemini/logger/exceptions.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/logger/exceptions.py

class LoggerError(Exception):
    """Base exception for logger-related errors."""
    pass

class LoggerConnectionError(LoggerError):
    """Raised when connection to logging service fails."""
    pass

class LoggerAuthError(LoggerError):
    """Raised when authentication with logging service fails."""
    pass

class LoggerInitializationError(LoggerError):
    """Raised when logger initialization fails."""
    pass

class LoggerConfigurationError(LoggerError):
    """Raised when logger configuration is invalid."""
    pass

class LoggerWriteError(LoggerError):
    """Raised when writing to log fails."""
    pass

class LoggerReadError(LoggerError):
    """Raised when reading from log fails."""
    pass

class LoggerFlushError(LoggerError):
    """Raised when flushing logs fails."""
    pass

class LoggerRotationError(LoggerError):
    """Raised when log rotation fails."""
    pass</document_content>
</document>

<document>
<source>gemini/logger/factory/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/logger/factory/logger_factory.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>

from typing import Dict, Type, Optional
from gemini.logger.interfaces.logger_provider import LoggerProvider
from gemini.logger.providers.local_logger import LocalLogger
from gemini.logger.providers.redis_logger import RedisLogger
from gemini.logger.config.logger_config import (
    LoggerConfig,
    LocalLoggerConfig,
    RedisLoggerConfig
)
from gemini.logger.exceptions import LoggerError, LoggerInitializationError

class LoggerFactory:
    """Factory for creating logger provider instances.
    
    This class maintains a registry of available logger providers and creates
    instances based on configuration. It ensures providers are properly initialized
    and configured before use.

    Key Features:
    - Provider registry with automatic initialization
    - Environment-based configuration
    - Singleton pattern for consistent logging
    - Support for multiple logger types
    - Thread-safe implementation
    """

    # Registry of available logger providers
    _providers: Dict[str, Type[LoggerProvider]] = {
        'local': LocalLogger,
        'redis': RedisLogger,
        # Add more providers here as they're implemented
        # 'cloudwatch': CloudWatchLogger,
        # 'elasticsearch': ElasticsearchLogger,
    }

    # Singleton instance
    _instance: Optional[LoggerProvider] = None

    # Thread lock for thread safety
    _lock = None

    @classmethod
    def register_provider(cls, provider_name: str, provider_class: Type[LoggerProvider]) -> None:
        """Register a new logger provider.
        
        Args:
            provider_name: Name to register the provider under
            provider_class: The provider class to register
            
        Raises:
            ValueError: If provider_name is already registered
        """
        if provider_name in cls._providers:
            raise ValueError(f"Provider {provider_name} is already registered")
        cls._providers[provider_name] = provider_class

    @classmethod
    def create_provider(cls, config: LoggerConfig) -> LoggerProvider:
        """Create a new logger provider instance based on configuration.
        
        Args:
            config: Logger configuration
            
        Returns:
            LoggerProvider: Configured logger provider instance
            
        Raises:
            LoggerError: If provider creation fails
            ValueError: If provider type is not supported
        """
        provider_class = cls._providers.get(config.provider.lower())
        if not provider_class:
            raise ValueError(f"Unsupported logger provider: {config.provider}")
        
        try:
            provider = provider_class(config)
            provider.initialize()  # Ensure provider is properly initialized
            return provider
        except Exception as e:
            raise LoggerInitializationError(f"Failed to create logger provider: {e}")

    @classmethod
    def get_provider(cls, config: Optional[LoggerConfig] = None) -> LoggerProvider:
        """Get or create a logger provider instance (singleton pattern).
        
        This method is thread-safe and ensures only one logger instance exists.
        
        Args:
            config: Optional logger configuration. If not provided, will use
                   environment variables via create_logger_config_from_env()
            
        Returns:
            LoggerProvider: Configured logger provider instance
            
        Raises:
            LoggerError: If provider creation fails
        """
        if config is None:
            raise NotImplementedError("Environment-based configuration not implemented yet")

        if cls._instance is None:
            # Import threading here to avoid circular imports
            import threading
            if cls._lock is None:
                cls._lock = threading.Lock()
            
            with cls._lock:
                # Double-check pattern for thread safety
                if cls._instance is None:
                    cls._instance = cls.create_provider(config)
    
        return cls._instance

    @classmethod
    def reset_provider(cls) -> None:
        """Reset the singleton provider instance.
        
        This is useful for testing or when you need to reinitialize the provider.
        Thread-safe implementation.
        """
        if cls._lock is None:
            import threading
            cls._lock = threading.Lock()
            
        with cls._lock:
            if cls._instance:
                try:
                    cls._instance.flush()  # Ensure any buffered logs are written
                except Exception:
                    pass  # Ignore flush errors during reset
            cls._instance = None</document_content>
</document>

<document>
<source>gemini/logger/interfaces/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/logger/interfaces/logger_provider.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/logger/interfaces/logger_provider.py

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Any, Dict, Generator, List, Optional, Union
from enum import Enum

class LogLevel(Enum):
    """Standard log levels."""
    DEBUG = 10
    INFO = 20
    WARNING = 30
    ERROR = 40
    CRITICAL = 50

class LoggerProvider(ABC):
    """Base interface for all logger providers.
    
    This interface defines the contract that all logger providers must implement.
    It provides a standard set of operations for logging, regardless of the 
    underlying system (local files, Redis, etc.).
    """
    
    @abstractmethod
    def initialize(self) -> bool:
        """Initialize the logger provider and create necessary resources.
        
        Returns:
            bool: True if initialization was successful
            
        Raises:
            LoggerInitializationError: If initialization fails
        """
        pass

    @abstractmethod
    def log(
        self,
        level: Union[LogLevel, str],
        message: str,
        extra: Optional[Dict[str, Any]] = None,
        timestamp: Optional[datetime] = None,
        **kwargs
    ) -> bool:
        """Log a message with the specified level.
        
        Args:
            level: Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
            message: The message to log
            extra: Additional fields to include in the log entry
            timestamp: Optional timestamp (defaults to current time)
            **kwargs: Additional keyword arguments for flexibility
            
        Returns:
            bool: True if logging was successful
            
        Raises:
            LoggerWriteError: If writing the log fails
            LoggerConnectionError: If connection fails
        """
        pass

    @abstractmethod
    def debug(self, message: str, **kwargs) -> bool:
        """Log a debug message.
        
        Args:
            message: The message to log
            **kwargs: Additional arguments passed to log()
            
        Returns:
            bool: True if logging was successful
        """
        pass

    @abstractmethod
    def info(self, message: str, **kwargs) -> bool:
        """Log an info message.
        
        Args:
            message: The message to log
            **kwargs: Additional arguments passed to log()
            
        Returns:
            bool: True if logging was successful
        """
        pass

    @abstractmethod
    def warning(self, message: str, **kwargs) -> bool:
        """Log a warning message.
        
        Args:
            message: The message to log
            **kwargs: Additional arguments passed to log()
            
        Returns:
            bool: True if logging was successful
        """
        pass

    @abstractmethod
    def error(self, message: str, **kwargs) -> bool:
        """Log an error message.
        
        Args:
            message: The message to log
            **kwargs: Additional arguments passed to log()
            
        Returns:
            bool: True if logging was successful
        """
        pass

    @abstractmethod
    def critical(self, message: str, **kwargs) -> bool:
        """Log a critical message.
        
        Args:
            message: The message to log
            **kwargs: Additional arguments passed to log()
            
        Returns:
            bool: True if logging was successful
        """
        pass

    @abstractmethod
    def flush(self) -> bool:
        """Flush any buffered log entries.
        
        Returns:
            bool: True if flush was successful
            
        Raises:
            LoggerFlushError: If flush fails
        """
        pass

    @abstractmethod
    def rotate(self) -> bool:
        """Rotate logs if the provider supports it.
        
        Returns:
            bool: True if rotation was successful
            
        Raises:
            LoggerRotationError: If rotation fails
        """
        pass

    @abstractmethod
    def get_logs(
        self,
        level: Optional[Union[LogLevel, str]] = None,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
        limit: Optional[int] = None,
        **filters
    ) -> Generator[Dict[str, Any], None, None]:
        """Retrieve logs matching the specified criteria.
        
        Args:
            level: Filter by log level
            start_time: Filter logs after this time
            end_time: Filter logs before this time
            limit: Maximum number of logs to return
            **filters: Additional filters to apply
            
        Yields:
            Dict[str, Any]: Log entries matching criteria
            
        Raises:
            LoggerReadError: If reading logs fails
            LoggerConnectionError: If connection fails
        """
        pass

    @abstractmethod
    def clear_logs(
        self,
        older_than: Optional[datetime] = None,
        level: Optional[Union[LogLevel, str]] = None
    ) -> bool:
        """Clear logs matching the specified criteria.
        
        Args:
            older_than: Clear logs older than this time
            level: Clear logs of this level only
            
        Returns:
            bool: True if clearing was successful
            
        Raises:
            LoggerWriteError: If clearing logs fails
        """
        pass</document_content>
</document>

<document>
<source>gemini/logger/providers/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/logger/providers/local_logger.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/logger/providers/local_logger.py

import os
import json
import logging
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, Generator, Optional, Union
from gemini.logger.interfaces.logger_provider import LoggerProvider, LogLevel
from gemini.logger.config.logger_config import LocalLoggerConfig
from gemini.logger.exceptions import (
    LoggerError,
    LoggerInitializationError,
    LoggerWriteError,
    LoggerReadError,
    LoggerRotationError
)

class LocalLogger(LoggerProvider):
    """Local file-based logger implementation."""

    def __init__(self, config: LocalLoggerConfig):
        """Initialize the local logger with configuration.
        
        Args:
            config: Configuration for local logging
            
        Raises:
            LoggerInitializationError: If initialization fails
        """
        self.config = config
        self.logger = None
        self._buffer = []
        
    def initialize(self) -> bool:
        """Initialize the logger and create necessary directories.
        
        Returns:
            bool: True if initialization successful
            
        Raises:
            LoggerInitializationError: If initialization fails
        """
        try:
            # Create log directory if it doesn't exist
            os.makedirs(self.config.log_dir, exist_ok=True)

            # Create the logger
            self.logger = logging.getLogger('gemini')
            self.logger.setLevel(getattr(logging, self.config.level.upper()))

            # Determine the log file path
            log_file = self.config.log_dir / self.config.filename_template.format(
                name='gemini',
                date=datetime.now().strftime('%Y%m%d')
            )

            # Configure the appropriate handler based on rotation settings
            if self.config.rotation_time:
                handler = TimedRotatingFileHandler(
                    filename=str(log_file),
                    when=self.config.rotation_time,
                    backupCount=self.config.backup_count,
                    encoding=self.config.encoding
                )
            elif self.config.max_size_mb:
                handler = RotatingFileHandler(
                    filename=str(log_file),
                    maxBytes=self.config.max_size_mb * 1024 * 1024,
                    backupCount=self.config.backup_count,
                    encoding=self.config.encoding
                )
            else:
                handler = logging.FileHandler(
                    filename=str(log_file),
                    encoding=self.config.encoding
                )

            # Create formatter and add it to the handler
            formatter = logging.Formatter(self.config.format)
            handler.setFormatter(formatter)
            
            # Add the handler to the logger
            self.logger.addHandler(handler)
            
            return True
            
        except Exception as e:
            raise LoggerInitializationError(f"Failed to initialize local logger: {e}")

    def _format_extra(self, extra: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """Format extra fields including configured extra fields.
        
        Args:
            extra: Additional fields to include
            
        Returns:
            Dict[str, Any]: Combined extra fields
        """
        formatted = self.config.extra_fields or {}
        if extra:
            formatted.update(extra)
        return formatted

    def log(
        self,
        level: Union[LogLevel, str],
        message: str,
        extra: Optional[Dict[str, Any]] = None,
        timestamp: Optional[datetime] = None,
        **kwargs
    ) -> bool:
        """Log a message with the specified level.
        
        Args:
            level: Log level
            message: Message to log
            extra: Additional fields
            timestamp: Optional timestamp
            **kwargs: Additional arguments
            
        Returns:
            bool: True if successful
            
        Raises:
            LoggerWriteError: If writing fails
        """
        try:
            # Convert LogLevel enum to string if needed
            if isinstance(level, LogLevel):
                level = level.name

            # Format the log entry
            entry = {
                'message': message,
                'timestamp': timestamp or datetime.now().isoformat(),
                'level': level,
                **self._format_extra(extra),
                **kwargs
            }

            # Buffer if configured
            if self.config.buffer_size:
                self._buffer.append(entry)
                if len(self._buffer) >= self.config.buffer_size:
                    self.flush()
                return True

            # Write directly if no buffering
            log_func = getattr(self.logger, level.lower())
            log_func(message, extra=self._format_extra(extra))
            return True
            
        except Exception as e:
            raise LoggerWriteError(f"Failed to write log: {e}")

    def debug(self, message: str, **kwargs) -> bool:
        """Log a debug message."""
        return self.log(LogLevel.DEBUG, message, **kwargs)

    def info(self, message: str, **kwargs) -> bool:
        """Log an info message."""
        return self.log(LogLevel.INFO, message, **kwargs)

    def warning(self, message: str, **kwargs) -> bool:
        """Log a warning message."""
        return self.log(LogLevel.WARNING, message, **kwargs)

    def error(self, message: str, **kwargs) -> bool:
        """Log an error message."""
        return self.log(LogLevel.ERROR, message, **kwargs)

    def critical(self, message: str, **kwargs) -> bool:
        """Log a critical message."""
        return self.log(LogLevel.CRITICAL, message, **kwargs)

    def flush(self) -> bool:
        """Flush buffered log entries.
        
        Returns:
            bool: True if successful
        """
        if not self._buffer:
            return True

        try:
            for entry in self._buffer:
                level = entry.pop('level')
                message = entry.pop('message')
                log_func = getattr(self.logger, level.lower())
                log_func(message, extra=entry)
            
            self._buffer.clear()
            return True
            
        except Exception as e:
            raise LoggerWriteError(f"Failed to flush logs: {e}")

    def rotate(self) -> bool:
        """Force log rotation if supported.
        
        Returns:
            bool: True if successful
            
        Raises:
            LoggerRotationError: If rotation fails
        """
        try:
            for handler in self.logger.handlers:
                if isinstance(handler, (RotatingFileHandler, TimedRotatingFileHandler)):
                    handler.doRollover()
            return True
        except Exception as e:
            raise LoggerRotationError(f"Failed to rotate logs: {e}")

    def get_logs(
        self,
        level: Optional[Union[LogLevel, str]] = None,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
        limit: Optional[int] = None,
        **filters
    ) -> Generator[Dict[str, Any], None, None]:
        """Retrieve logs matching criteria.
        
        Args:
            level: Filter by log level
            start_time: Filter logs after this time
            end_time: Filter logs before this time
            limit: Maximum number of logs to return
            **filters: Additional filters
            
        Yields:
            Dict[str, Any]: Matching log entries
            
        Raises:
            LoggerReadError: If reading fails
        """
        try:
            # Convert level to string if it's an enum
            if isinstance(level, LogLevel):
                level = level.name

            count = 0
            log_files = sorted(Path(self.config.log_dir).glob('*.log'))
            
            for log_file in log_files:
                with open(log_file, 'r', encoding=self.config.encoding) as f:
                    for line in f:
                        try:
                            entry = json.loads(line)
                            
                            # Apply filters
                            if level and entry.get('level') != level:
                                continue
                                
                            if start_time:
                                log_time = datetime.fromisoformat(entry['timestamp'])
                                if log_time < start_time:
                                    continue
                                    
                            if end_time:
                                log_time = datetime.fromisoformat(entry['timestamp'])
                                if log_time > end_time:
                                    continue
                                    
                            # Apply additional filters
                            skip = False
                            for key, value in filters.items():
                                if entry.get(key) != value:
                                    skip = True
                                    break
                            if skip:
                                continue
                                
                            yield entry
                            
                            count += 1
                            if limit and count >= limit:
                                return
                                
                        except json.JSONDecodeError:
                            continue  # Skip malformed lines
                            
        except Exception as e:
            raise LoggerReadError(f"Failed to read logs: {e}")

    def clear_logs(
        self,
        older_than: Optional[datetime] = None,
        level: Optional[Union[LogLevel, str]] = None
    ) -> bool:
        """Clear logs matching criteria.
        
        Args:
            older_than: Clear logs older than this time
            level: Clear logs of this level only
            
        Returns:
            bool: True if successful
        """
        try:
            if older_than:
                cutoff = older_than.strftime('%Y%m%d')
                for log_file in Path(self.config.log_dir).glob('*.log'):
                    if log_file.stem[-8:] < cutoff:
                        log_file.unlink()
            return True
        except Exception as e:
            raise LoggerWriteError(f"Failed to clear logs: {e}")</document_content>
</document>

<document>
<source>gemini/logger/providers/redis_logger.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/logger/providers/redis_logger.py

import json
import redis
from datetime import datetime, timedelta
from typing import Any, Dict, Generator, Optional, Union
from gemini.logger.interfaces.logger_provider import LoggerProvider, LogLevel
from gemini.logger.config.logger_config import RedisLoggerConfig
from gemini.logger.exceptions import (
    LoggerError,
    LoggerInitializationError,
    LoggerWriteError,
    LoggerReadError,
    LoggerConnectionError,
    LoggerAuthError
)

class RedisLogger(LoggerProvider):
    """Redis-based logger implementation."""

    def __init__(self, config: RedisLoggerConfig):
        """Initialize Redis logger with configuration.
        
        Args:
            config: Configuration for Redis logging
            
        Raises:
            LoggerInitializationError: If initialization fails
        """
        self.config = config
        self.redis_client = None
        self._buffer = []

    def initialize(self) -> bool:
        """Initialize Redis connection and verify configuration.
        
        Returns:
            bool: True if initialization successful
            
        Raises:
            LoggerInitializationError: If initialization fails
            LoggerConnectionError: If Redis connection fails
            LoggerAuthError: If Redis authentication fails
        """
        try:
            # Initialize Redis connection
            self.redis_client = redis.Redis(
                host=self.config.host,
                port=self.config.port,
                db=self.config.db,
                password=self.config.password,
                ssl=self.config.use_ssl,
                decode_responses=True  # Always decode responses to str
            )
            
            # Test connection
            self.redis_client.ping()
            
            # Create a sorted set for log indexing if it doesn't exist
            self._ensure_index_exists()
            
            return True
            
        except redis.AuthenticationError as e:
            raise LoggerAuthError(f"Redis authentication failed: {e}")
        except redis.ConnectionError as e:
            raise LoggerConnectionError(f"Failed to connect to Redis: {e}")
        except Exception as e:
            raise LoggerInitializationError(f"Failed to initialize Redis logger: {e}")

    def _ensure_index_exists(self):
        """Ensure the log index exists in Redis."""
        index_key = f"{self.config.key_prefix}index"
        if not self.redis_client.exists(index_key):
            self.redis_client.zadd(index_key, {'init': 0})

    def _generate_log_key(self, timestamp: datetime) -> str:
        """Generate a Redis key for a log entry.
        
        Args:
            timestamp: Timestamp for the log entry
            
        Returns:
            str: Redis key for the log entry
        """
        return f"{self.config.key_prefix}{timestamp.isoformat()}"

    def _format_extra(self, extra: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """Format extra fields including configured extra fields.
        
        Args:
            extra: Additional fields to include
            
        Returns:
            Dict[str, Any]: Combined extra fields
        """
        formatted = self.config.extra_fields or {}
        if extra:
            formatted.update(extra)
        return formatted

    def log(
        self,
        level: Union[LogLevel, str],
        message: str,
        extra: Optional[Dict[str, Any]] = None,
        timestamp: Optional[datetime] = None,
        **kwargs
    ) -> bool:
        """Log a message with the specified level.
        
        Args:
            level: Log level
            message: Message to log
            extra: Additional fields
            timestamp: Optional timestamp
            **kwargs: Additional arguments
            
        Returns:
            bool: True if successful
            
        Raises:
            LoggerWriteError: If writing fails
            LoggerConnectionError: If connection fails
        """
        try:
            # Convert LogLevel enum to string if needed
            if isinstance(level, LogLevel):
                level = level.name

            # Create timestamp if not provided
            timestamp = timestamp or datetime.now()

            # Format the log entry
            entry = {
                'message': message,
                'timestamp': timestamp.isoformat(),
                'level': level,
                **self._format_extra(extra),
                **kwargs
            }

            # Buffer if configured
            if self.config.buffer_size:
                self._buffer.append(entry)
                if len(self._buffer) >= self.config.buffer_size:
                    self.flush()
                return True

            # Write directly if no buffering
            return self._write_log_entry(entry)
            
        except redis.ConnectionError as e:
            raise LoggerConnectionError(f"Redis connection failed while writing log: {e}")
        except Exception as e:
            raise LoggerWriteError(f"Failed to write log: {e}")

    def _write_log_entry(self, entry: Dict[str, Any]) -> bool:
        """Write a single log entry to Redis.
        
        Args:
            entry: The log entry to write
            
        Returns:
            bool: True if successful
        """
        # Start a Redis pipeline for atomic operations
        pipe = self.redis_client.pipeline()

        try:
            # Generate key and serialize entry
            entry_key = self._generate_log_key(datetime.fromisoformat(entry['timestamp']))
            entry_data = json.dumps(entry)

            # Add to log store
            pipe.set(entry_key, entry_data)

            # Add to index
            pipe.zadd(
                f"{self.config.key_prefix}index",
                {entry_key: datetime.fromisoformat(entry['timestamp']).timestamp()}
            )

            # Set TTL if configured
            if self.config.ttl_days:
                pipe.expire(entry_key, timedelta(days=self.config.ttl_days))

            # Enforce max entries if configured
            if self.config.max_entries:
                index_key = f"{self.config.key_prefix}index"
                count = self.redis_client.zcard(index_key)
                if count > self.config.max_entries:
                    # Remove oldest entries
                    to_remove = count - self.config.max_entries
                    oldest_keys = self.redis_client.zrange(index_key, 0, to_remove - 1)
                    if oldest_keys:
                        pipe.delete(*oldest_keys)
                        pipe.zremrangebyrank(index_key, 0, to_remove - 1)

            # Execute all commands
            pipe.execute()
            return True

        except Exception:
            pipe.reset()
            raise

    def debug(self, message: str, **kwargs) -> bool:
        """Log a debug message."""
        return self.log(LogLevel.DEBUG, message, **kwargs)

    def info(self, message: str, **kwargs) -> bool:
        """Log an info message."""
        return self.log(LogLevel.INFO, message, **kwargs)

    def warning(self, message: str, **kwargs) -> bool:
        """Log a warning message."""
        return self.log(LogLevel.WARNING, message, **kwargs)

    def error(self, message: str, **kwargs) -> bool:
        """Log an error message."""
        return self.log(LogLevel.ERROR, message, **kwargs)

    def critical(self, message: str, **kwargs) -> bool:
        """Log a critical message."""
        return self.log(LogLevel.CRITICAL, message, **kwargs)

    def flush(self) -> bool:
        """Flush buffered log entries.
        
        Returns:
            bool: True if successful
            
        Raises:
            LoggerWriteError: If flush fails
        """
        if not self._buffer:
            return True

        try:
            pipe = self.redis_client.pipeline()
            
            for entry in self._buffer:
                entry_key = self._generate_log_key(datetime.fromisoformat(entry['timestamp']))
                entry_data = json.dumps(entry)
                
                pipe.set(entry_key, entry_data)
                pipe.zadd(
                    f"{self.config.key_prefix}index",
                    {entry_key: datetime.fromisoformat(entry['timestamp']).timestamp()}
                )
                
                if self.config.ttl_days:
                    pipe.expire(entry_key, timedelta(days=self.config.ttl_days))
            
            pipe.execute()
            self._buffer.clear()
            return True
            
        except redis.ConnectionError as e:
            raise LoggerConnectionError(f"Redis connection failed while flushing: {e}")
        except Exception as e:
            raise LoggerWriteError(f"Failed to flush logs: {e}")

    def rotate(self) -> bool:
        """Rotation is handled automatically by Redis TTL.
        
        Returns:
            bool: Always True as Redis handles rotation
        """
        return True

    def get_logs(
        self,
        level: Optional[Union[LogLevel, str]] = None,
        start_time: Optional[datetime] = None,
        end_time: Optional[datetime] = None,
        limit: Optional[int] = None,
        **filters
    ) -> Generator[Dict[str, Any], None, None]:
        """Retrieve logs matching criteria.
        
        Args:
            level: Filter by log level
            start_time: Filter logs after this time
            end_time: Filter logs before this time
            limit: Maximum number of logs to return
            **filters: Additional filters
            
        Yields:
            Dict[str, Any]: Matching log entries
            
        Raises:
            LoggerReadError: If reading fails
            LoggerConnectionError: If connection fails
        """
        try:
            # Convert level to string if it's an enum
            if isinstance(level, LogLevel):
                level = level.name

            # Convert times to timestamps for Redis
            min_score = start_time.timestamp() if start_time else '-inf'
            max_score = end_time.timestamp() if end_time else '+inf'

            # Get keys in time range
            index_key = f"{self.config.key_prefix}index"
            log_keys = self.redis_client.zrangebyscore(
                index_key,
                min_score,
                max_score,
                start=0,
                num=limit
            )

            if not log_keys:
                return

            # Get log entries
            pipe = self.redis_client.pipeline()
            for key in log_keys:
                pipe.get(key)
            entries = pipe.execute()

            # Filter and yield entries
            count = 0
            for entry_data in entries:
                if not entry_data:
                    continue
                    
                try:
                    entry = json.loads(entry_data)
                    
                    # Apply filters
                    if level and entry.get('level') != level:
                        continue
                        
                    # Apply additional filters
                    skip = False
                    for key, value in filters.items():
                        if entry.get(key) != value:
                            skip = True
                            break
                    if skip:
                        continue
                        
                    yield entry
                    
                    count += 1
                    if limit and count >= limit:
                        return
                        
                except json.JSONDecodeError:
                    continue  # Skip malformed entries
                    
        except redis.ConnectionError as e:
            raise LoggerConnectionError(f"Redis connection failed while reading logs: {e}")
        except Exception as e:
            raise LoggerReadError(f"Failed to read logs: {e}")

    def clear_logs(
        self,
        older_than: Optional[datetime] = None,
        level: Optional[Union[LogLevel, str]] = None
    ) -> bool:
        """Clear logs matching criteria.
        
        Args:
            older_than: Clear logs older than this time
            level: Clear logs of this level only
            
        Returns:
            bool: True if successful
        """
        try:
            pipe = self.redis_client.pipeline()
            index_key = f"{self.config.key_prefix}index"

            if older_than:
                # Get keys older than specified time
                max_score = older_than.timestamp()
                old_keys = self.redis_client.zrangebyscore(index_key, '-inf', max_score)
                
                if old_keys:
                    # Delete log entries and index entries
                    pipe.delete(*old_keys)
                    pipe.zremrangebyscore(index_key, '-inf', max_score)

            elif level:
                # Get all keys and filter by level
                all_keys = self.redis_client.zrange(index_key, 0, -1)
                keys_to_delete = []
                
                for key in all_keys:
                    entry_data = self.redis_client.get(key)
                    if entry_data:
                        try:
                            entry = json.loads(entry_data)
                            if entry.get('level') == level:
                                keys_to_delete.append(key)
                        except json.JSONDecodeError:
                            continue
                
                if keys_to_delete:
                    pipe.delete(*keys_to_delete)
                    pipe.zrem(index_key, *keys_to_delete)

            pipe.execute()
            return True
            
        except redis.ConnectionError as e:
            raise LoggerConnectionError(f"Redis connection failed while clearing logs: {e}")
        except Exception as e:
            raise LoggerWriteError(f"Failed to clear logs: {e}")</document_content>
</document>

<document>
<source>gemini/scheduler/Dockerfile</source>
<mime_type>text/plain</mime_type>
<document_content>
# Base Prefect image
FROM prefecthq/prefect:3.0.11-python3.11

# Custom ENV Variables
ARG GEMINI_SCHEDULER_SERVER_HOST="0.0.0.0"
ARG GEMINI_SCHEDULER_SERVER_HOSTNAME="scheduler"
ARG GEMINI_SCHEDULER_SERVER_PORT="4200"
ARG GEMINI_SCHEDULER_DB_CONNECTION_STRING="postgresql://gemini:gemini@db:6432/gemini"

# Add environment variables
ENV PREFECT_API_URL="http://${GEMINI_SCHEDULER_SERVER_HOST}:${GEMINI_SCHEDULER_SERVER_PORT}/api"
ENV PREFECT_API_DATABASE_CONNECTION_URL=${GEMINI_SCHEDULER_DB_CONNECTION_STRING}
ENV IS_REMOTE="True"

# Set the working directory
WORKDIR /gemini-framework

# Copy only requirements.txt first to leverage Docker cache
COPY ./requirements.txt ./requirements.txt

# Non-GPU Pytorch installation
RUN pip install --no-cache-dir torch torchvision torchaudio \
    --index-url https://download.pytorch.org/whl/cpu

# Install the requirements for the GEMINI Scheduler
RUN pip install --no-cache-dir -r requirements.txt

# Copy the complete GEMINI source code into the container
COPY . .

# Add GEMINI Framework to the PYTHONPATH
ENV PYTHONPATH "${PYTHONPATH}:/gemini-framework"

# Expose the Scheduler API port
EXPOSE ${GEMINI_SCHEDULER_SERVER_PORT}

# Keep the container running
CMD ["tail", "-f", "/dev/null"]

# Start the GEMINI Scheduler
# CMD ["prefect", "server", "start", "--host", "${SCHEDULER_SERVER_HOST}, "--port", "${SCHEDULER_SERVER_PORT}"]


# FROM prefecthq/prefect:3.0.11-python3.11

# # Set the working directory
# WORKDIR /gemini-framework

# # Copy only requirements.txt first to leverage Docker cache
# COPY ./requirements.txt ./requirements.txt

# # Install the requirements for the GEMINI Scheduler
# RUN pip install --no-cache-dir -r requirements.txt

# # Copy the complete GEMINI source code into the container
# COPY . .

# # Add GEMINI Framework to the PYTHONPATH
# ENV PYTHONPATH "${PYTHONPATH}:/gemini-framework"

# CMD ["prefect", "server", "start", "--host", "0.0.0.0"]
</document_content>
</document>

<document>
<source>gemini/scheduler/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/scheduler/db.Dockerfile</source>
<mime_type>text/plain</mime_type>
<document_content>
FROM postgres:14

# Custom ENV Variables
ARG GEMINI_SCHEDULER_DB_USER="gemini"
ARG GEMINI_SCHEDULER_DB_PASSWORD="gemini"
ARG GEMINI_SCHEDULER_DB_NAME="gemini"
ARG GEMINI_SCHEDULER_DB_HOSTNAME="scheduler-db"
ARG GEMINI_SCHEDULER_DB_PORT="6432"

# Copy the environment variables for PostgreSQL
ENV POSTGRES_USER=${GEMINI_SCHEDULER_DB_USER}
ENV POSTGRES_PASSWORD=${GEMINI_SCHEDULER_DB_PASSWORD}
ENV POSTGRES_DB=${GEMINI_SCHEDULER_DB_NAME}
ENV POSTGRES_PORT=${GEMINI_SCHEDULER_DB_PORT}

# Expose the PostgreSQL port
EXPOSE 6432

# Start PostgreSQL
CMD ["postgres", "-c", "max_connections=200", "-c", "shared_buffers=128MB", "-c", "effective_cache_size=384MB", "-c", "wal_level=logical", "-p", "6432"] 
</document_content>
</document>

<document>
<source>gemini/storage/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/storage/config/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/storage/config/storage_config.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/storage/config/storage_config.py

from pydantic import BaseModel, Field, model_validator, field_validator
from typing import Optional, Dict, Any
from pathlib import Path
from gemini.storage.exceptions import StorageConfigurationError

class StorageConfig(BaseModel):
    """Base configuration for storage providers."""
    
    provider: str = Field(
        ...,  # Required field
        description="Name of the storage provider (local, minio, s3, azure)"
    )
    base_path: Optional[str] = Field(
        None,
        description="Base path prefix for all storage operations"
    )

    model_config = {
        "extra": "forbid"  # Prevent additional attributes
    }

class LocalStorageConfig(StorageConfig):
    """Configuration for local filesystem storage."""
    
    provider: str = Field(
        "local",
        frozen=True,
        description="Provider name, must be 'local'"
    )
    root_directory: Path = Field(
        ...,
        description="Root directory for file storage"
    )
    create_directory: bool = Field(
        True,
        description="Create root directory if it doesn't exist"
    )

    @field_validator('root_directory')
    @classmethod
    def validate_root_directory(cls, v: Path) -> Path:
        """Validate root directory path."""
        try:
            path = Path(v)
            return path.resolve()
        except Exception as e:
            raise StorageConfigurationError(f"Invalid root directory path: {e}")

class MinioStorageConfig(StorageConfig):
    """Configuration for MinIO object storage."""
    
    provider: str = Field(
        "minio",
        frozen=True,
        description="Provider name, must be 'minio'"
    )
    endpoint: str = Field(
        ...,
        description="MinIO server endpoint (e.g., 'localhost:9000')"
    )
    access_key: str = Field(
        ...,
        description="MinIO access key"
    )
    secret_key: str = Field(
        ...,
        description="MinIO secret key"
    )
    bucket_name: str = Field(
        ...,
        description="Name of the bucket to use"
    )
    secure: bool = Field(
        True,
        description="Use HTTPS for connection"
    )
    region: Optional[str] = Field(
        None,
        description="MinIO region name"
    )
    http_client: Optional[Dict[str, Any]] = Field(
        None,
        description="Custom HTTP client configuration"
    )

    @field_validator('endpoint')
    @classmethod
    def validate_endpoint(cls, v: str) -> str:
        """Validate MinIO endpoint."""
        if not v:
            raise StorageConfigurationError("MinIO endpoint cannot be empty")
        if '://' in v:
            raise StorageConfigurationError("Endpoint should not include protocol (http/https)")
        return v

    @model_validator(mode='after')
    def validate_credentials(self) -> 'MinioStorageConfig':
        """Validate that credentials are provided."""
        if not self.access_key or not self.secret_key:
            raise StorageConfigurationError("Both access_key and secret_key must be provided")
        return self

class S3StorageConfig(StorageConfig):
    """Configuration for AWS S3 storage."""
    
    provider: str = Field(
        "s3",
        frozen=True,
        description="Provider name, must be 's3'"
    )
    region: str = Field(
        ...,
        description="AWS region (e.g., 'us-east-1')"
    )
    access_key: str = Field(
        ...,
        description="AWS access key ID"
    )
    secret_key: str = Field(
        ...,
        description="AWS secret access key"
    )
    bucket_name: str = Field(
        ...,
        description="Name of the S3 bucket"
    )
    endpoint_url: Optional[str] = Field(
        None,
        description="Custom endpoint URL for S3-compatible storage"
    )

    @model_validator(mode='after')
    def validate_credentials(self) -> 'S3StorageConfig':
        """Validate that credentials are provided."""
        if not self.access_key or not self.secret_key:
            raise StorageConfigurationError("Both access_key and secret_key must be provided")
        return self
</document_content>
</document>

<document>
<source>gemini/storage/exceptions.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/storage/exceptions.py

class StorageError(Exception):
    """Base exception for storage-related errors."""
    pass

class StorageConnectionError(StorageError):
    """Raised when connection to storage service fails."""
    pass

class StorageAuthError(StorageError):
    """Raised when authentication with storage service fails."""
    pass

class StorageFileNotFoundError(StorageError):
    """Raised when a file is not found in storage."""
    pass

class StorageUploadError(StorageError):
    """Raised when file upload fails."""
    pass

class StorageDownloadError(StorageError):
    """Raised when file download fails."""
    pass

class StorageDeleteError(StorageError):
    """Raised when file deletion fails."""
    pass

class StorageInitializationError(StorageError):
    """Raised when storage provider initialization fails."""
    pass

class StorageConfigurationError(StorageError):
    """Raised when storage configuration is invalid."""
    pass</document_content>
</document>

<document>
<source>gemini/storage/factory/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/storage/factory/storage_factory.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/storage/factory/storage_factory.py

from typing import Dict, Type, Optional
from gemini.storage.interfaces.storage_provider import StorageProvider
from gemini.storage.providers.local_storage import LocalStorageProvider
from gemini.storage.providers.minio_storage import MinioStorageProvider
from gemini.storage.config.storage_config import (
    StorageConfig,
    LocalStorageConfig,
    MinioStorageConfig,
    S3StorageConfig
)
from gemini.storage.exceptions import StorageError, StorageInitializationError

class StorageFactory:
    """Factory for creating storage provider instances.
    
    This class maintains a registry of available storage providers and creates
    instances based on configuration. It ensures providers are properly initialized
    and configured before use.
    """

    # Registry of available storage providers
    _providers: Dict[str, Type[StorageProvider]] = {
        'local': LocalStorageProvider,
        'minio': MinioStorageProvider,
        # Add more providers here as they're implemented
        # 's3': S3StorageProvider,
        # 'azure': AzureStorageProvider,
    }

    # Singleton instance
    _instance: Optional[StorageProvider] = None

    @classmethod
    def register_provider(cls, provider_name: str, provider_class: Type[StorageProvider]) -> None:
        """Register a new storage provider.
        
        Args:
            provider_name: Name to register the provider under
            provider_class: The provider class to register
            
        Raises:
            ValueError: If provider_name is already registered
        """
        if provider_name in cls._providers:
            raise ValueError(f"Provider {provider_name} is already registered")
        cls._providers[provider_name] = provider_class

    @classmethod
    def create_provider(cls, config: StorageConfig) -> StorageProvider:
        """Create a new storage provider instance based on configuration.
        
        Args:
            config: Storage configuration
            
        Returns:
            StorageProvider: Configured storage provider instance
            
        Raises:
            StorageError: If provider creation fails
            ValueError: If provider type is not supported
        """
        provider_class = cls._providers.get(config.provider.lower())
        if not provider_class:
            raise ValueError(f"Unsupported storage provider: {config.provider}")
        
        try:
            provider = provider_class(config)
            provider.initialize()  # Ensure provider is properly initialized
            return provider
        except Exception as e:
            raise StorageInitializationError(f"Failed to create storage provider: {e}")

    @classmethod
    def get_provider(cls, config: Optional[StorageConfig] = None) -> StorageProvider:
        """Get or create a storage provider instance (singleton pattern).
        
        Args:
            config: Optional storage configuration. If not provided, will use
                   environment variables via create_storage_config_from_env()
            
        Returns:
            StorageProvider: Configured storage provider instance
            
        Raises:
            StorageError: If provider creation fails
        """
        if config is None:
            raise NotImplementedError("Environment-based configuration not implemented yet")

        if cls._instance is None:
            if config is None:
                config = create_storage_config_from_env()
            cls._instance = cls.create_provider(config)
        return cls._instance

    @classmethod
    def reset_provider(cls) -> None:
        """Reset the singleton provider instance.
        
        This is useful for testing or when you need to reinitialize the provider.
        """
        cls._instance = None

# Example usage in your FileHandlerMixin:
class FileHandlerMixin:
    """Mixin class for file handling operations."""

    _storage_provider: Optional[StorageProvider] = None

    @classmethod
    def get_storage_provider(cls) -> StorageProvider:
        """Get the storage provider instance."""
        if cls._storage_provider is None:
            cls._storage_provider = StorageFactory.get_provider()
        return cls._storage_provider

    @classmethod
    def _upload_file(cls, object_name: str, data_stream: str) -> str:
        """Upload a file using the configured storage provider.
        
        Args:
            object_name: Destination path/name for the file
            data_stream: Source file or data stream
            
        Returns:
            str: URL of the uploaded file
        """
        provider = cls.get_storage_provider()
        return provider.upload_file(object_name, data_stream)

    @classmethod
    def _download_file(cls, object_name: str, destination_path: str) -> str:
        """Download a file using the configured storage provider.
        
        Args:
            object_name: Source path/name of the file
            destination_path: Where to save the file
            
        Returns:
            str: Path where the file was saved
        """
        provider = cls.get_storage_provider()
        return provider.download_file(object_name, destination_path)

    @classmethod
    def _get_download_url(cls, object_name: str) -> str:
        """Get a download URL for a file.
        
        Args:
            object_name: Path/name of the file
            
        Returns:
            str: Download URL for the file
        """
        provider = cls.get_storage_provider()
        return provider.get_download_url(object_name)</document_content>
</document>

<document>
<source>gemini/storage/interfaces/__init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/storage/interfaces/storage_provider.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/storage/interfaces/storage_provider.py

from abc import ABC, abstractmethod
from typing import BinaryIO, Optional, Union, Dict, Any
from pathlib import Path
from datetime import datetime
from gemini.storage.exceptions import StorageError

class StorageProvider(ABC):
    """Base interface for all storage providers.
    
    This interface defines the contract that all storage providers must implement.
    It provides a standard set of operations for file storage and retrieval,
    regardless of the underlying storage system (local, MinIO, S3, etc.).
    """
    
    @abstractmethod
    def initialize(self) -> bool:
        """Initialize storage provider and create necessary resources.
        
        Returns:
            bool: True if initialization was successful
            
        Raises:
            StorageInitializationError: If initialization fails
        """
        pass

    @abstractmethod
    def upload_file(
        self, 
        object_name: str,
        data_stream: BinaryIO,
        content_type: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None
    ) -> str:
        """Upload a file to storage.
        
        Args:
            object_name: Name/path of the object in storage
            data_stream: File-like object containing the data
            content_type: MIME type of the file
            metadata: Additional metadata
            
        Returns:
            str: URL or identifier for the uploaded file
            
        Raises:
            StorageUploadError: If upload fails
            StorageConnectionError: If connection fails
        """
        pass

    @abstractmethod
    def download_file(
        self, 
        object_name: str,
        file_path: Union[str, Path]
    ) -> Path:
        """Download a file from storage.
        
        Args:
            object_name: Name/path of the object in storage
            file_path: Local path to save the file
            
        Returns:
            Path: Path where the file was saved
            
        Raises:
            StorageDownloadError: If download fails
            StorageFileNotFoundError: If file doesn't exist
            StorageConnectionError: If connection fails
        """
        pass

    @abstractmethod
    def delete_file(self, object_name: str) -> bool:
        """Delete a file from storage.
        
        Args:
            object_name: Name/path of the object to delete
            
        Returns:
            bool: True if deletion was successful
            
        Raises:
            StorageDeleteError: If deletion fails
            StorageConnectionError: If connection fails
        """
        pass

    @abstractmethod
    def get_download_url(
        self, 
        object_name: str,
        expires: Optional[datetime] = None,
        response_headers: Optional[Dict[str, str]] = None
    ) -> str:
        """Get a pre-signed URL for downloading the file.
        
        Args:
            object_name: Name/path of the object
            expires: URL expiration time
            response_headers: Headers for the response
            
        Returns:
            str: Pre-signed URL
            
        Raises:
            StorageError: If URL generation fails
            StorageFileNotFoundError: If file doesn't exist
        """
        pass
    
    @abstractmethod
    def list_files(
        self,
        prefix: Optional[str] = None,
        recursive: bool = True
    ) -> list[str]:
        """List all files in storage with given prefix.
        
        Args:
            prefix: Filter files by prefix
            recursive: Search recursively in directories
            
        Returns:
            list[str]: List of file paths
            
        Raises:
            StorageError: If listing fails
            StorageConnectionError: If connection fails
        """
        pass

    @abstractmethod
    def file_exists(self, object_name: str) -> bool:
        """Check if a file exists in storage.
        
        Args:
            object_name: Name/path of the object
            
        Returns:
            bool: True if file exists
            
        Raises:
            StorageConnectionError: If connection check fails
        """
        pass

    @abstractmethod
    def get_file_metadata(self, object_name: str) -> Dict[str, Any]:
        """Get metadata for a file.
        
        Args:
            object_name: Name/path of the object
            
        Returns:
            Dict[str, Any]: File metadata including:
                - size: File size in bytes
                - created: Creation timestamp
                - modified: Last modification timestamp
                - content_type: MIME type if available
                - metadata: Additional metadata dictionary
                
        Raises:
            StorageError: If metadata retrieval fails
            StorageFileNotFoundError: If file doesn't exist
            StorageConnectionError: If connection fails
        """
        pass</document_content>
</document>

<document>
<source>gemini/storage/providers/_init__.py</source>
<mime_type>inode/x-empty</mime_type>
<document_content>
<base64></base64>
</document_content>
</document>

<document>
<source>gemini/storage/providers/local_storage.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/storage/providers/local_storage.py

import os
import shutil
import mimetypes
import json
from datetime import datetime
from pathlib import Path
from typing import BinaryIO, Optional, Union, Dict, Any
from gemini.storage.interfaces.storage_provider import StorageProvider
from gemini.storage.config.storage_config import LocalStorageConfig
from gemini.storage.exceptions import (
    StorageError,
    StorageFileNotFoundError,
    StorageUploadError,
    StorageDownloadError,
    StorageDeleteError,
    StorageInitializationError
)

class LocalStorageProvider(StorageProvider):
    """Provider for local filesystem storage."""

    def __init__(self, config: LocalStorageConfig):
        """Initialize local storage provider.
        
        Args:
            config: Configuration for local storage
            
        Raises:
            StorageInitializationError: If initialization fails
        """
        self.config = config
        self.root_directory = Path(config.root_directory).resolve()
        
        if config.create_directory:
            try:
                self.root_directory.mkdir(parents=True, exist_ok=True)
            except Exception as e:
                raise StorageInitializationError(f"Failed to create root directory: {e}")
        elif not self.root_directory.exists():
            raise StorageInitializationError(
                f"Storage directory {config.root_directory} does not exist"
            )
        
    def initialize(self) -> bool:
        """Initialize local storage.
        
        Returns:
            bool: True if initialization successful
            
        Raises:
            StorageInitializationError: If initialization fails
        """
        try:
            self.root_directory.mkdir(parents=True, exist_ok=True)
            return True
        except Exception as e:
            raise StorageInitializationError(f"Failed to initialize local storage: {e}")

    def _get_full_path(self, object_name: str) -> Path:
        """Get full filesystem path for an object.
        
        Args:
            object_name: Relative path of the object
            
        Returns:
            Path: Full filesystem path
            
        Raises:
            StorageError: If path would escape root directory
        """
        # Clean the object name to prevent directory traversal
        clean_name = Path(object_name).parts
        full_path = (self.root_directory.joinpath(*clean_name)).resolve()
        
        if not str(full_path).startswith(str(self.root_directory)):
            raise StorageError(f"Access denied: {object_name} is outside root directory")
        return full_path

    def _save_metadata(self, file_path: Path, metadata: Dict[str, Any]) -> None:
        """Save metadata to a companion file.
        
        Args:
            file_path: Path of the main file
            metadata: Metadata to save
        """
        meta_path = file_path.with_suffix(file_path.suffix + '.meta')
        with open(meta_path, 'w') as f:
            json.dump(metadata, f, default=str)

    def _load_metadata(self, file_path: Path) -> Dict[str, Any]:
        """Load metadata from companion file.
        
        Args:
            file_path: Path of the main file
            
        Returns:
            dict: Loaded metadata or empty dict if no metadata exists
        """
        meta_path = file_path.with_suffix(file_path.suffix + '.meta')
        if meta_path.exists():
            with open(meta_path, 'r') as f:
                return json.load(f)
        return {}

    def upload_file(
        self,
        object_name: str,
        data_stream: BinaryIO,
        content_type: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None
    ) -> str:
        """Upload a file to local storage.
        
        Args:
            object_name: Destination path for the file
            data_stream: File-like object containing the data
            content_type: MIME type (stored in metadata file)
            metadata: Additional metadata to store
            
        Returns:
            str: Local file URL
            
        Raises:
            StorageUploadError: If upload fails
        """
        try:
            file_path = self._get_full_path(object_name)
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Write file data
            with open(file_path, 'wb') as f:
                shutil.copyfileobj(data_stream, f)
            
            # Store metadata if provided
            if metadata or content_type:
                meta_data = metadata or {}
                if content_type:
                    meta_data['content_type'] = content_type
                self._save_metadata(file_path, meta_data)
            
            return self.get_download_url(object_name)
            
        except Exception as e:
            raise StorageUploadError(f"Failed to upload file: {e}")

    def download_file(
        self,
        object_name: str,
        file_path: Union[str, Path]
    ) -> Path:
        """Download a file from local storage.
        
        Args:
            object_name: Path of the file in storage
            file_path: Destination path
            
        Returns:
            Path: Path where file was saved
            
        Raises:
            StorageDownloadError: If download fails
            StorageFileNotFoundError: If file doesn't exist
        """
        try:
            source_path = self._get_full_path(object_name)
            if not source_path.exists():
                raise StorageFileNotFoundError(f"File not found: {object_name}")
            
            dest_path = Path(file_path)
            dest_path.parent.mkdir(parents=True, exist_ok=True)
            
            shutil.copy2(source_path, dest_path)
            return dest_path
            
        except StorageFileNotFoundError:
            raise
        except Exception as e:
            raise StorageDownloadError(f"Failed to download file: {e}")

    def delete_file(self, object_name: str) -> bool:
        """Delete a file from local storage.
        
        Args:
            object_name: Path of the file to delete
            
        Returns:
            bool: True if deletion was successful
            
        Raises:
            StorageDeleteError: If deletion fails
        """
        try:
            file_path = self._get_full_path(object_name)
            if not file_path.exists():
                return False
                
            file_path.unlink()
            
            # Remove metadata file if it exists
            meta_path = file_path.with_suffix(file_path.suffix + '.meta')
            if meta_path.exists():
                meta_path.unlink()
                
            return True
            
        except Exception as e:
            raise StorageDeleteError(f"Failed to delete file: {e}")

    def get_download_url(
        self,
        object_name: str,
        expires: Optional[datetime] = None,
        response_headers: Optional[Dict[str, str]] = None
    ) -> str:
        """Get a local filesystem URL for the file.
        
        Args:
            object_name: Path of the file
            expires: Ignored for local storage
            response_headers: Ignored for local storage
            
        Returns:
            str: Local file URL
            
        Raises:
            StorageFileNotFoundError: If file doesn't exist
        """
        file_path = self._get_full_path(object_name)
        if not file_path.exists():
            raise StorageFileNotFoundError(f"File not found: {object_name}")
        return f"file://{file_path.absolute()}"

    def list_files(
        self,
        prefix: Optional[str] = None,
        recursive: bool = True
    ) -> list[str]:
        """List files in local storage.
        
        Args:
            prefix: Optional path prefix to filter by
            recursive: If True, list files in subdirectories
            
        Returns:
            list[str]: List of relative file paths
            
        Raises:
            StorageError: If listing fails
        """
        try:
            if prefix:
                base_path = self._get_full_path(prefix)
            else:
                base_path = self.root_directory
                
            files = []
            pattern = '**/*' if recursive else '*'
            
            for path in base_path.glob(pattern):
                if path.is_file() and not path.name.endswith('.meta'):
                    rel_path = path.relative_to(self.root_directory)
                    files.append(str(rel_path))
                    
            return sorted(files)
            
        except Exception as e:
            raise StorageError(f"Failed to list files: {e}")

    def file_exists(self, object_name: str) -> bool:
        """Check if a file exists in local storage.
        
        Args:
            object_name: Path of the file to check
            
        Returns:
            bool: True if file exists
        """
        try:
            path = self._get_full_path(object_name)
            return path.is_file()
        except Exception:
            return False

    def get_file_metadata(self, object_name: str) -> Dict[str, Any]:
        """Get metadata for a file.
        
        Args:
            object_name: Path of the file
            
        Returns:
            dict: File metadata including size, dates, and custom metadata
            
        Raises:
            StorageFileNotFoundError: If file doesn't exist
            StorageError: If metadata retrieval fails
        """
        try:
            file_path = self._get_full_path(object_name)
            if not file_path.exists():
                raise StorageFileNotFoundError(f"File not found: {object_name}")
                
            stat = file_path.stat()
            metadata = {
                'size': stat.st_size,
                'created': datetime.fromtimestamp(stat.st_ctime),
                'modified': datetime.fromtimestamp(stat.st_mtime),
                'content_type': mimetypes.guess_type(file_path)[0],
                'metadata': self._load_metadata(file_path)
            }
                    
            return metadata
            
        except StorageFileNotFoundError:
            raise
        except Exception as e:
            raise StorageError(f"Failed to get file metadata: {e}")</document_content>
</document>

<document>
<source>gemini/storage/providers/minio_storage.py</source>
<mime_type>text/x-script.python</mime_type>
<document_content>
# gemini/storage/providers/minio_storage.py

import os
from datetime import datetime, timedelta
from typing import BinaryIO, Optional, Union, Dict, Any
from pathlib import Path
from minio import Minio
from minio.error import S3Error
from urllib.parse import urlparse

from gemini.storage.interfaces.storage_provider import StorageProvider
from gemini.storage.config.storage_config import MinioStorageConfig
from gemini.storage.exceptions import (
    StorageError,
    StorageFileNotFoundError,
    StorageUploadError,
    StorageDownloadError,
    StorageDeleteError,
    StorageInitializationError,
    StorageConnectionError,
    StorageAuthError
)

class MinioStorageProvider(StorageProvider):
    """Provider for MinIO object storage."""

    def __init__(self, config: MinioStorageConfig):
        """Initialize MinIO client with configuration.
        
        Args:
            config: MinIO configuration
            
        Raises:
            StorageInitializationError: If client initialization fails
        """
        self.config = config
        try:
            self.client = Minio(
                endpoint=config.endpoint,
                access_key=config.access_key,
                secret_key=config.secret_key,
                secure=config.secure,
                region=config.region,
                http_client=config.http_client
            )
            self.bucket_name = config.bucket_name
        except Exception as e:
            raise StorageInitializationError(f"Failed to initialize MinIO client: {e}")

    def initialize(self) -> bool:
        """Initialize MinIO storage and create bucket if needed.
        
        Returns:
            bool: True if initialization successful
            
        Raises:
            StorageInitializationError: If initialization fails
        """
        try:
            if not self.client.bucket_exists(self.bucket_name):
                self.client.make_bucket(self.bucket_name, self.config.region)
            return True
        except S3Error as e:
            raise StorageInitializationError(f"Failed to initialize MinIO storage: {e}")
        except Exception as e:
            raise StorageInitializationError(f"Unexpected error during initialization: {e}")

    def upload_file(
        self,
        object_name: str,
        data_stream: BinaryIO,
        content_type: Optional[str] = None,
        metadata: Optional[Dict[str, str]] = None
    ) -> str:
        """Upload a file to MinIO storage.
        
        Args:
            object_name: Name/path of the object in storage
            data_stream: File-like object containing the data
            content_type: MIME type of the file
            metadata: Additional metadata to store
            
        Returns:
            str: URL for the uploaded file
            
        Raises:
            StorageUploadError: If upload fails
            StorageConnectionError: If connection fails
        """
        try:
            # Get file size
            data_stream.seek(0, os.SEEK_END)
            file_size = data_stream.tell()
            data_stream.seek(0)
            
            # Prepare metadata
            tags = metadata.copy() if metadata else {}
            if content_type:
                tags['Content-Type'] = content_type
            
            # Upload file
            self.client.put_object(
                bucket_name=self.bucket_name,
                object_name=object_name,
                data=data_stream,
                length=file_size,
                content_type=content_type,
                metadata=tags
            )
            
            return self.get_download_url(object_name)
            
        except S3Error as e:
            if 'AccessDenied' in str(e):
                raise StorageAuthError(f"Access denied while uploading file: {e}")
            raise StorageUploadError(f"Failed to upload file: {e}")
        except ConnectionError as e:
            raise StorageConnectionError(f"Connection failed during upload: {e}")
        except Exception as e:
            raise StorageUploadError(f"Unexpected error during upload: {e}")

    def download_file(
        self,
        object_name: str,
        file_path: Union[str, Path]
    ) -> Path:
        """Download a file from MinIO storage.
        
        Args:
            object_name: Name/path of the object in storage
            file_path: Local path to save the file
            
        Returns:
            Path: Path where file was saved
            
        Raises:
            StorageDownloadError: If download fails
            StorageFileNotFoundError: If file doesn't exist
            StorageConnectionError: If connection fails
        """
        try:
            file_path = Path(file_path)
            file_path.parent.mkdir(parents=True, exist_ok=True)
            
            self.client.fget_object(
                bucket_name=self.bucket_name,
                object_name=object_name,
                file_path=str(file_path)
            )
            
            return file_path
            
        except S3Error as e:
            if 'NoSuchKey' in str(e):
                raise StorageFileNotFoundError(f"File not found: {object_name}")
            elif 'AccessDenied' in str(e):
                raise StorageAuthError(f"Access denied while downloading file: {e}")
            raise StorageDownloadError(f"Failed to download file: {e}")
        except ConnectionError as e:
            raise StorageConnectionError(f"Connection failed during download: {e}")
        except Exception as e:
            raise StorageDownloadError(f"Unexpected error during download: {e}")

    def delete_file(self, object_name: str) -> bool:
        """Delete a file from MinIO storage.
        
        Args:
            object_name: Name/path of the object to delete
            
        Returns:
            bool: True if deletion was successful
            
        Raises:
            StorageDeleteError: If deletion fails
            StorageConnectionError: If connection fails
        """
        try:
            self.client.remove_object(
                bucket_name=self.bucket_name,
                object_name=object_name
            )
            return True
        except S3Error as e:
            if 'AccessDenied' in str(e):
                raise StorageAuthError(f"Access denied while deleting file: {e}")
            raise StorageDeleteError(f"Failed to delete file: {e}")
        except ConnectionError as e:
            raise StorageConnectionError(f"Connection failed during deletion: {e}")
        except Exception as e:
            raise StorageDeleteError(f"Unexpected error during deletion: {e}")

    def get_download_url(
        self,
        object_name: str,
        expires: Optional[datetime] = None,
        response_headers: Optional[Dict[str, str]] = None
    ) -> str:
        """Get a pre-signed URL for downloading the file.
        
        Args:
            object_name: Name/path of the object
            expires: URL expiration time
            response_headers: Headers for the response
            
        Returns:
            str: Pre-signed URL
            
        Raises:
            StorageError: If URL generation fails
            StorageFileNotFoundError: If file doesn't exist
        """
        try:
            # Ensure file exists
            if not self.file_exists(object_name):
                raise StorageFileNotFoundError(f"File not found: {object_name}")
            
            # Default expiration of 7 days if not specified
            if expires is None:
                expires = datetime.now() + timedelta(days=7)
                
            # Calculate expiration in seconds
            expiry = int((expires - datetime.now()).total_seconds())
            
            url = self.client.presigned_get_object(
                bucket_name=self.bucket_name,
                object_name=object_name,
                expires=expiry,
                response_headers=response_headers
            )
            
            return url
            
        except S3Error as e:
            if 'AccessDenied' in str(e):
                raise StorageAuthError(f"Access denied while generating URL: {e}")
            raise StorageError(f"Failed to generate pre-signed URL: {e}")
        except ConnectionError as e:
            raise StorageConnectionError(f"Connection failed while generating URL: {e}")
        except Exception as e:
            raise StorageError(f"Unexpected error while generating URL: {e}")

    def list_files(
        self,
        prefix: Optional[str] = None,
        recursive: bool = True
    ) -> list[str]:
        """List all files in MinIO storage with given prefix.
        
        Args:
            prefix: Filter files by prefix
            recursive: Search recursively in directories
            
        Returns:
            list[str]: List of file paths
            
        Raises:
            StorageError: If listing fails
            StorageConnectionError: If connection fails
        """
        try:
            objects = self.client.list_objects(
                bucket_name=self.bucket_name,
                prefix=prefix,
                recursive=recursive
            )
            return [obj.object_name for obj in objects]
            
        except S3Error as e:
            if 'AccessDenied' in str(e):
                raise StorageAuthError(f"Access denied while listing files: {e}")
            raise StorageError(f"Failed to list files: {e}")
        except ConnectionError as e:
            raise StorageConnectionError(f"Connection failed while listing files: {e}")
        except Exception as e:
            raise StorageError(f"Unexpected error while listing files: {e}")

    def file_exists(self, object_name: str) -> bool:
        """Check if a file exists in MinIO storage.
        
        Args:
            object_name: Name/path of the object
            
        Returns:
            bool: True if file exists
            
        Raises:
            StorageConnectionError: If connection check fails
        """
        try:
            self.client.stat_object(
                bucket_name=self.bucket_name,
                object_name=object_name
            )
            return True
        except S3Error:
            return False
        except ConnectionError as e:
            raise StorageConnectionError(f"Connection failed while checking file: {e}")

    def get_file_metadata(self, object_name: str) -> Dict[str, Any]:
        """Get metadata for a file in MinIO storage.
        
        Args:
            object_name: Name/path of the object
            
        Returns:
            dict: File metadata including size, dates, content type and custom metadata
            
        Raises:
            StorageError: If metadata retrieval fails
            StorageFileNotFoundError: If file doesn't exist
            StorageConnectionError: If connection fails
        """
        try:
            stat = self.client.stat_object(
                bucket_name=self.bucket_name,
                object_name=object_name
            )
            
            return {
                'size': stat.size,
                'etag': stat.etag,
                'last_modified': stat.last_modified,
                'content_type': stat.content_type,
                'metadata': stat.metadata
            }
            
        except S3Error as e:
            if 'NoSuchKey' in str(e):
                raise StorageFileNotFoundError(f"File not found: {object_name}")
            elif 'AccessDenied' in str(e):
                raise StorageAuthError(f"Access denied while getting metadata: {e}")
            raise StorageError(f"Failed to get file metadata: {e}")
        except ConnectionError as e:
            raise StorageConnectionError(f"Connection failed while getting metadata: {e}")
        except Exception as e:
            raise StorageError(f"Unexpected error while getting metadata: {e}")
        </document_content>
</document>

