version: "3"

vars:
  ENV: ./gemini/pipeline/.env.example
  ENV_TARGET: ./gemini/pipeline/.env
  COMPOSE_FILE: ./gemini/pipeline/compose.yaml

tasks:

  # Utility tasks
  generate-requirements:
    cmds:
      - pip freeze > requirements.txt

  load-env:
    cmds:
      - cp {{.ENV}} {{.ENV_TARGET}}

  # Docker tasks

  build-containers:
    deps: [load-env]
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} build

  clean-containers:
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} down --rmi all 

  start-containers:
    deps: [load-env]
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} up -d --build

  stop-containers:
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} down

  reset-containers:
    cmds:
      - task clean-containers
      - task start-containers

  prune-containers:
    cmds:
      - docker system prune -f

  purge-containers:
    cmds:
      - docker compose -f {{.COMPOSE_FILE}} down --volumes --remove-orphans
      - docker system prune -fa

  # Main tasks
  start:
    cmds:
      - task start-containers
   
  stop:
    cmds:
      - task stop-containers

  reset:
    cmds:
      - task reset-containers

  clean:
    cmds:
      - task clean-containers
    
 